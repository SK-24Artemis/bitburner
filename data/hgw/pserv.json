{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":20,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":442.1999999999999,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1,\"hacking_speed\":1,\"hacking_money\":1,\"hacking_grow\":1,\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"hacking_exp\":1,\"strength_exp\":1,\"defense_exp\":1,\"dexterity_exp\":1,\"agility_exp\":1,\"charisma_exp\":1,\"company_rep\":1,\"faction_rep\":1,\"crime_money\":1,\"crime_success\":1,\"hacknet_node_money\":1,\"hacknet_node_purchase_cost\":1,\"hacknet_node_ram_cost\":1,\"hacknet_node_core_cost\":1,\"hacknet_node_level_cost\":1,\"work_money\":1,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[],\"factionInvitations\":[\"Sector-12\"],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-8825.124999999989,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":29812159007.4399,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":29812500000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":359007.4399041073,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":29811159007.4399,\"work\":0,\"servers\":0,\"other\":-1700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":30337500000,\"corporation\":0,\"crime\":88245000,\"gang\":0,\"hacking\":359007.4399041073,\"hacknet\":546158.1000005662,\"hacknet_expenses\":-91975.23562500002,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":30285574757.388454,\"work\":0,\"servers\":-14283432.915763203,\"other\":-1700000,\"augmentations\":-125000000}},\"playtimeSinceLastAug\":5686877400,\"playtimeSinceLastBitnode\":5921044000,\"purchasedServers\":[],\"scriptProdSinceLastAug\":284614,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[],\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1671260374539},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1671260472630},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1671260472636},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1671261411123},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1671500781532},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1671500781575},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1675390309448},{\"ID\":\"TOR\",\"unlockedOn\":1675390309491}],\"terminalCommandHistory\":[\"run demo.js\",\"clear\",\"run demo.js\",\"nano nuke.js\",\"killall\",\"clear\",\"run demo.js\",\"clear\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"nano test/hgw/pserv.js\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"clear\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/clean.js\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/clean.js clean.js\",\"run clean.js\",\"clear\",\"ls\",\"rm clean.js\",\"clear\",\"ls\",\"clear\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"ls\",\"clear\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"ls\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/clean.js clean.js\",\"run clean.js\",\"ls\",\"rm clean.js\",\"clear\",\"ls\",\"clear\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/clean.js clean.js\",\"run clean.js\",\"rm clean.js\",\"ls\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\",\"clear\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js\"],\"lastUpdate\":1677094297573,\"lastSave\":1677094240860,\"totalPlaytime\":5921044000,\"currentWork\":null,\"focus\":false,\"entropy\":0,\"identifier\":\"ce9c74a3fd283\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"52.2.5.3\",\"isConnectedTo\":true,\"maxRam\":64,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: This script is auto-generated by pull.sh.\\n// Do not import anything into this script.  The script should be self-contained\\n// and independent.\\n\\n/**\\n * A function for assertion.\\n *\\n * @param cond Assert that this condition is true.\\n * @return Throw an assertion error if the given condition is false.\\n */\\nfunction assert(cond) {\\n    if (!cond) {\\n        throw new Error(\\\"Assertion failed.\\\");\\n    }\\n}\\n\\n/**\\n * The directory structure under \\\"src/\\\" on github.com.\\n *\\n * @return All files under \\\"src/\\\" on github.com.\\n */\\nfunction dir_structure() {\\n    const filesystem = [\\n        // Insert directory tree here.  Should contain all scripts for playing\\n        // Bitburner.\\n        \\\"cct/bipartite.js\\\",\\n        \\\"cct/caesar.js\\\",\\n        \\\"cct/grid.js\\\",\\n        \\\"cct/grid2.js\\\",\\n        \\\"cct/grid3.js\\\",\\n        \\\"cct/hamming.js\\\",\\n        \\\"cct/hamming2.js\\\",\\n        \\\"cct/interval.js\\\",\\n        \\\"cct/ip.js\\\",\\n        \\\"cct/jump.js\\\",\\n        \\\"cct/jump2.js\\\",\\n        \\\"cct/lzc.js\\\",\\n        \\\"cct/lzd.js\\\",\\n        \\\"cct/maths.js\\\",\\n        \\\"cct/parenthesis.js\\\",\\n        \\\"cct/prime.js\\\",\\n        \\\"cct/rle.js\\\",\\n        \\\"cct/solver.js\\\",\\n        \\\"cct/spiral.js\\\",\\n        \\\"cct/subarray.js\\\",\\n        \\\"cct/sum.js\\\",\\n        \\\"cct/sum2.js\\\",\\n        \\\"cct/trader.js\\\",\\n        \\\"cct/trader2.js\\\",\\n        \\\"cct/trader3.js\\\",\\n        \\\"cct/trader4.js\\\",\\n        \\\"cct/triangle.js\\\",\\n        \\\"cct/vigenere.js\\\",\\n        \\\"chain/faction.js\\\",\\n        \\\"chain/home.js\\\",\\n        \\\"chain/install.js\\\",\\n        \\\"chain/misc.js\\\",\\n        \\\"chain/money.js\\\",\\n        \\\"chain/study.js\\\",\\n        \\\"connect.js\\\",\\n        \\\"corporation/agriculture.js\\\",\\n        \\\"corporation/go.js\\\",\\n        \\\"corporation/janitor.js\\\",\\n        \\\"corporation/prep.js\\\",\\n        \\\"corporation/tobacco.js\\\",\\n        \\\"find-cct.js\\\",\\n        \\\"gang/augment.js\\\",\\n        \\\"gang/crime.js\\\",\\n        \\\"gang/dead-speakers.js\\\",\\n        \\\"gang/go.js\\\",\\n        \\\"gang/program.js\\\",\\n        \\\"gang/slum-snakes.js\\\",\\n        \\\"go-high.js\\\",\\n        \\\"go-low.js\\\",\\n        \\\"go-mid.js\\\",\\n        \\\"go.js\\\",\\n        \\\"hack.js\\\",\\n        \\\"hgw/grow.js\\\",\\n        \\\"hgw/hack.js\\\",\\n        \\\"hgw/pbatch.js\\\",\\n        \\\"hgw/pserv.js\\\",\\n        \\\"hgw/weaken.js\\\",\\n        \\\"hgw/world.js\\\",\\n        \\\"hnet-farm.js\\\",\\n        \\\"hram.js\\\",\\n        \\\"karma.js\\\",\\n        \\\"kill-script.js\\\",\\n        \\\"kill-server.js\\\",\\n        \\\"lib/array.js\\\",\\n        \\\"lib/cct.js\\\",\\n        \\\"lib/constant/bn.js\\\",\\n        \\\"lib/constant/bool.js\\\",\\n        \\\"lib/constant/cct.js\\\",\\n        \\\"lib/constant/corp.js\\\",\\n        \\\"lib/constant/crime.js\\\",\\n        \\\"lib/constant/exe.js\\\",\\n        \\\"lib/constant/faction.js\\\",\\n        \\\"lib/constant/gang.js\\\",\\n        \\\"lib/constant/hacknet.js\\\",\\n        \\\"lib/constant/io.js\\\",\\n        \\\"lib/constant/location.js\\\",\\n        \\\"lib/constant/misc.js\\\",\\n        \\\"lib/constant/pserv.js\\\",\\n        \\\"lib/constant/server.js\\\",\\n        \\\"lib/constant/sleeve.js\\\",\\n        \\\"lib/constant/study.js\\\",\\n        \\\"lib/constant/time.js\\\",\\n        \\\"lib/constant/work.js\\\",\\n        \\\"lib/constant/wse.js\\\",\\n        \\\"lib/corporation/corp.js\\\",\\n        \\\"lib/corporation/util.js\\\",\\n        \\\"lib/gang/gangster.js\\\",\\n        \\\"lib/gang/util.js\\\",\\n        \\\"lib/hgw.js\\\",\\n        \\\"lib/io.js\\\",\\n        \\\"lib/money.js\\\",\\n        \\\"lib/network.js\\\",\\n        \\\"lib/pbatch.js\\\",\\n        \\\"lib/player.js\\\",\\n        \\\"lib/pserv.js\\\",\\n        \\\"lib/random.js\\\",\\n        \\\"lib/server.js\\\",\\n        \\\"lib/singularity/augment.js\\\",\\n        \\\"lib/singularity/crime.js\\\",\\n        \\\"lib/singularity/faction.js\\\",\\n        \\\"lib/singularity/network.js\\\",\\n        \\\"lib/singularity/program.js\\\",\\n        \\\"lib/singularity/study.js\\\",\\n        \\\"lib/singularity/util.js\\\",\\n        \\\"lib/singularity/work.js\\\",\\n        \\\"lib/sleeve/cc.js\\\",\\n        \\\"lib/sleeve/util.js\\\",\\n        \\\"lib/source.js\\\",\\n        \\\"lib/util.js\\\",\\n        \\\"low-end.js\\\",\\n        \\\"nmap.js\\\",\\n        \\\"restart-server.js\\\",\\n        \\\"share.js\\\",\\n        \\\"singularity/crime.js\\\",\\n        \\\"singularity/daemon.js\\\",\\n        \\\"singularity/faction-city.js\\\",\\n        \\\"singularity/faction-crime.js\\\",\\n        \\\"singularity/faction-early.js\\\",\\n        \\\"singularity/faction-end.js\\\",\\n        \\\"singularity/faction-hack.js\\\",\\n        \\\"singularity/faction-megacorp.js\\\",\\n        \\\"singularity/faction.js\\\",\\n        \\\"singularity/home.js\\\",\\n        \\\"singularity/install.js\\\",\\n        \\\"singularity/int-farm.js\\\",\\n        \\\"singularity/money.js\\\",\\n        \\\"singularity/program.js\\\",\\n        \\\"singularity/study.js\\\",\\n        \\\"sleeve/cc.js\\\",\\n        \\\"sleeve/money.js\\\",\\n        \\\"sleeve/study.js\\\",\\n        \\\"test/crime/crime-int.js\\\",\\n        \\\"test/crime/crime.js\\\",\\n        \\\"test/hgw/100million.js\\\",\\n        \\\"test/hgw/billion.js\\\",\\n        \\\"test/hgw/brutessh.js\\\",\\n        \\\"test/hgw/ftpcrack.js\\\",\\n        \\\"test/hgw/joesguns.js\\\",\\n        \\\"test/hgw/naive.js\\\",\\n        \\\"test/hgw/nuke.js\\\",\\n        \\\"test/hgw/pbatch.js\\\",\\n        \\\"test/hgw/prep.js\\\",\\n        \\\"test/hgw/proto.js\\\",\\n        \\\"test/hgw/pserv.js\\\",\\n        \\\"test/hgw/smart.js\\\",\\n        \\\"test/hgw/smtp.js\\\",\\n        \\\"test/hgw/sshftp.js\\\",\\n        \\\"test/hgw/world.js\\\",\\n        \\\"test/intelligence/augment-buy.js\\\",\\n        \\\"test/intelligence/augment-install.js\\\",\\n        \\\"test/intelligence/augment-post-install.js\\\",\\n        \\\"test/intelligence/crime.js\\\",\\n        \\\"test/intelligence/daemon.js\\\",\\n        \\\"test/intelligence/faction-join-all.js\\\",\\n        \\\"test/intelligence/faction-join.js\\\",\\n        \\\"test/intelligence/home.js\\\",\\n        \\\"test/intelligence/int.js\\\",\\n        \\\"test/intelligence/program.js\\\",\\n        \\\"test/intelligence/relocate.js\\\",\\n        \\\"test/intelligence/study.js\\\",\\n        \\\"test/intelligence/tor-program.js\\\",\\n        \\\"test/intelligence/tor.js\\\",\\n        \\\"test/intelligence/travel.js\\\",\\n        \\\"test/intelligence/util.js\\\",\\n        \\\"test/karma/go.js\\\",\\n        \\\"trade-bot.js\\\",\\n        \\\"world.js\\\",\\n    ];\\n    assert(filesystem.length > 0);\\n    return filesystem;\\n}\\n\\n/**\\n * A formatted name of the file where we want to save the downloaded file.  The\\n * terminal command \\\"wget\\\" behaves differently from the API function\\n * \\\"ns.wget()\\\".  The command \\\"wget\\\" is happy to create the required directory\\n * if we do any of the following:\\n *\\n * wget /URL/to/src/file.js src/file.js\\n * wget /URL/to/src/file.js /src/file.js\\n *\\n * The API function \\\"ns.wget()\\\" is happy with this\\n *\\n * await ns.wget(\\\"/URL/to/src/file.js\\\", \\\"/src/file.js\\\", \\\"home\\\");\\n *\\n * but cannot handle this\\n *\\n * await ns.wget(\\\"/URL/to/src/file.js\\\", \\\"src/file.js\\\", \\\"home\\\");\\n *\\n * That is, we must have the leading forward slash \\\"/\\\" character for the\\n * function to work properly.  Here are the relevant issues on github.com:\\n *\\n * https://github.com/danielyxie/bitburner/issues/1935\\n * https://github.com/danielyxie/bitburner/issues/2115\\n *\\n * @param f A file name.  Cannot be empty string.\\n * @return A possibly new file name with the leading forward slash \\\"/\\\"\\n *     character added.\\n */\\nfunction target_name(f) {\\n    assert(f !== \\\"\\\");\\n    const fname = f.toString();\\n    const prefix = \\\"/quack\\\";\\n    const slash = \\\"/\\\";\\n    return [prefix, slash, fname].join(\\\"\\\");\\n}\\n\\n/**\\n * Print the usage information.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction usage(ns) {\\n    const msg = \\\"Usage: run pull.js\\\";\\n    ns.tprint(msg);\\n}\\n\\n/**\\n * Pull all files (on github.com) under the directory quacksouls/bitburner/src\\n * into the game.\\n *\\n * Usage: run pull.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Sanity check.\\n    // The script does not accept any command line arguments.\\n    if (ns.args.length > 0) {\\n        usage(ns);\\n        return;\\n    }\\n    // Pull files into our home server.\\n    const home = \\\"home\\\";\\n    // The base URL where files are found.\\n    const github = \\\"https://raw.githubusercontent.com/\\\";\\n    const quack = \\\"quacksouls/bitburner/main/src/\\\";\\n    const prefix = github + quack;\\n    // Pull files into home server.\\n    for (const f of dir_structure()) {\\n        const file = prefix + f;\\n        const target = target_name(f);\\n        const success = await ns.wget(file, target, home);\\n        if (success) {\\n            ns.tprint(file);\\n        }\\n    }\\n    ns.tprint(\\\"Download complete.\\\");\\n}\\n\",\"filename\":\"pull.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"pull.js\",\"url\":\"blob:file:///6a8e6cdd-5606-408d-a553-044f8683a36c\",\"moduleSequenceNumber\":363}],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport {\\n    log_cct_failure,\\n    matrix_to_string,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/cct.js\\\";\\nimport { Graph } from \\\"/quack/lib/network.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether an undirected graph is bipartite.  Do not assume the graph is\\n * connected, i.e. each node is reachable from any other node.\\n *\\n * @param n The number of nodes in the graph.  Must be positive.\\n * @param edge An array of edges of the graph.  Each array element is an\\n *     edge of the form [u, v], where u and v are nodes of the graph.\\n * @return An array having n elements.  If i is an index of the array a,\\n *     then a[i] represents the colour of node i in the graph, assuming\\n *     the graph to have a 2-colouring.  In case the graph is not\\n *     bipartite, then return an empty array.\\n */\\nfunction bipartite(n, edge) {\\n    assert(n > 0);\\n    // In Bitburner v1.7.0, the game does not accept an empty array as [].\\n    // The empty array must be formatted as a string representation.\\n    const empty_array = \\\"[]\\\";\\n    // The graph must have at least one edge.  A graph with nodes only and\\n    // no edges is not bipartite.\\n    if (edge.length === 0) {\\n        return empty_array;\\n    }\\n    // Use breath-first search to colour each node of the graph.\\n    const graph = to_graph(n, edge);\\n    let colr = new Array(n).fill(colour.WHITE);\\n    let v = choose_white_node(colr);\\n    // All root nodes of trees.  If the graph is disconnected, then it has\\n    // a number of subgraphs each of which can be considered a tree by\\n    // means of breath-first search.\\n    const root = [];\\n    // Colour all nodes of the graph.\\n    while (v >= 0) {\\n        root.push(v);\\n        const col = colouring(graph, v);\\n        if (col.length === 0) {\\n            return empty_array;\\n        }\\n        colr = update_colouring(colr, col);\\n        v = choose_white_node(colr);\\n    }\\n    // Determine whether the graph has a 2-colouring.\\n    for (const r of root) {\\n        if (!is_bipartite(graph, r, colr)) {\\n            return empty_array;\\n        }\\n    }\\n    return colr;\\n}\\n\\n/**\\n * Choose a white node from a graph.\\n *\\n * @param colr A colouring of the nodes of a graph, where colour[i]\\n *     represents the colour of node i.\\n * @return A node that is white.  Return -1 if each node has been coloured.\\n */\\nfunction choose_white_node(colr) {\\n    assert(colr.length > 0);\\n    for (let i = 0; i < colr.length; i++) {\\n        if (colour.WHITE === colr[i]) {\\n            return i;\\n        }\\n    }\\n    return -1;\\n}\\n\\n/**\\n * Attempt to colour a graph by using 2 colours.  Each node is coloured such\\n * that the endpoints of an edge have different colours.\\n *\\n * @param graph We want to colour this graph.\\n * @param root Start the colouring from this node.\\n * @return An array a where the element a[i] represents the colour of node i\\n *     in the graph.  An empty array if the graph cannot be coloured with the\\n *     given colours such that the endpoints of each edge have different\\n *     colours.  Even if the returned array is not empty, we must still test\\n *     to see whether the graph has a 2-colouring.\\n */\\nfunction colouring(graph, root) {\\n    // colour[i] := the colour of node i in the graph.\\n    const n = graph.nodes().length;\\n    const colr = new Array(n).fill(colour.WHITE);\\n    // Colour the root node.\\n    assert(graph.has_node(root));\\n    const stack = [];\\n    stack.push(root);\\n    const visit = new Set();\\n    visit.add(root);\\n    colr[root] = colour.BLUE;\\n    // Use breath-first search to colour each node.  We do not assume the graph\\n    // to be connected.\\n    while (stack.length > 0) {\\n        const u = stack.pop();\\n        for (const v of graph.neighbour(u)) {\\n            if (visit.has(v)) {\\n                continue;\\n            }\\n            // Colour the neighbours of u.\\n            visit.add(v);\\n            stack.push(v);\\n            if (colour.BLUE === colr[u]) {\\n                colr[v] = colour.RED;\\n                continue;\\n            }\\n            assert(colour.RED === colr[u]);\\n            colr[v] = colour.BLUE;\\n            // Determine whether v is connected to any node of the same colour.\\n            for (const w of graph.neighbour(v)) {\\n                // The graph is not bipartite because v is neighbour with a\\n                // node that has the same colour.\\n                if (colr[v] === colr[w]) {\\n                    return [];\\n                }\\n            }\\n        }\\n    }\\n    return colr;\\n}\\n\\n/**\\n * Whether a graph is bipartite.\\n *\\n * @param graph Check this graph to see whether it is bipartite.\\n * @param root Start our breath-first search from this node.\\n * @param colr A colouring of the nodes of the graph.\\n * @return true if the graph is bipartite; false otherwise.\\n */\\nfunction is_bipartite(graph, root, colr) {\\n    // Mark the root node as visited.\\n    const stack = [];\\n    const visit = new Set();\\n    stack.push(root);\\n    visit.add(root);\\n    // Use breath-first search to help us determine whether the\\n    // graph has a 2-colouring.\\n    while (stack.length > 0) {\\n        const u = stack.pop();\\n        assert(colr[u] === colour.BLUE || colr[u] === colour.RED);\\n        for (const v of graph.neighbour(u)) {\\n            if (colr[u] === colr[v]) {\\n                return bool.NOT_BIPARTITE;\\n            }\\n            if (visit.has(v)) {\\n                continue;\\n            }\\n            stack.push(v);\\n            visit.add(v);\\n        }\\n    }\\n    return bool.BIPARTITE;\\n}\\n\\n/**\\n * Construct an undirected graph given the number of nodes and an edge set.\\n *\\n * @param n The number of nodes in the graph.\\n * @param edge An array of edges of the graph.  Each array element is an\\n *     edge of the form [u, v], where u and v are nodes of the graph.\\n * @return An undirected graph having n nodes and the given edge set.\\n */\\nfunction to_graph(n, edge) {\\n    assert(n > 0);\\n    assert(edge.length > 0);\\n    const node = new Set(MyArray.sequence(n));\\n    const graph = new Graph(bool.UNDIRECTED);\\n    // First, add the edges.\\n    for (let i = 0; i < edge.length; i++) {\\n        const [u, v] = edge[i];\\n        graph.add_edge(u, v);\\n        node.delete(u);\\n        node.delete(v);\\n    }\\n    // Add any nodes not listed in the edge set.\\n    node.forEach((v) => assert(graph.add_node(v)));\\n    assert(n === graph.nodes().length);\\n    return graph;\\n}\\n\\n/**\\n * Update the colouring array.\\n *\\n * @param prev_colour The current colouring of the nodes of a graph.\\n * @param new_colour The new colouring of the nodes.\\n * @return An array representing the updated colouring.\\n */\\nfunction update_colouring(prev_colour, new_colour) {\\n    assert(prev_colour.length > 0);\\n    assert(prev_colour.length === new_colour.length);\\n    const colr = Array.from(prev_colour);\\n    for (let i = 0; i < prev_colour.length; i++) {\\n        // Find a white node.\\n        if (colour.WHITE !== prev_colour[i]) {\\n            continue;\\n        }\\n        if (colour.WHITE === new_colour[i]) {\\n            continue;\\n        }\\n        // Previously node i was white, but now has been coloured.\\n        assert(colour.WHITE === prev_colour[i]);\\n        assert(colour.WHITE !== new_colour[i]);\\n        colr[i] = new_colour[i];\\n    }\\n    return colr;\\n}\\n\\n/**\\n * Proper 2-Coloring of a Graph: You are given data, representing a graph.\\n * Note that \\\"graph\\\", as used here, refers to the field of graph theory and\\n * has no relation to statistics or plotting.  The first element of the data\\n * represents the number of vertices in the graph.  Each vertex is a unique\\n * number between 0 and data[0] - 1.  The next element of the data represents\\n * the edges of the graph.  Two vertices u, v in a graph are said to be\\n * adjacent if there exists an edge [u, v].  Note that an edge [u, v] is the\\n * same as an edge [v, u], as order does not matter.  You must construct a\\n * 2-coloring of the graph, meaning that you have to assign each vertex in the\\n * graph a \\\"color\\\", either 0 or 1, such that no two adjacent vertices have the\\n * same color.  Submit your answer in the form of an array, where element i\\n * represents the color of vertex i.  If it is impossible to construct a\\n * 2-coloring of the given graph, submit an empty array.\\n *\\n * This problem is equivalent to determining whether a graph is bipartite.\\n * From the problem description, we only need to deal with undirected graphs.\\n *\\n * Usage: run quack/cct/bipartite.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [n, edge] = ns.codingcontract.getData(cct, host);\\n    const colr = bipartite(n, edge);\\n    const result = ns.codingcontract.attempt(colr, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/bipartite.txt\\\";\\n        const data = `[${n}, ${matrix_to_string(edge)}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/bipartite.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    english_alphabet,\\n    char_index,\\n    is_alphabetic,\\n    log_cct_failure,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The Caesar cipher on the given plaintext and left shift length k.  Suppose\\n * letters of the plaintext are uppercase characters in the English alphabet.\\n * Given a left shift of k, each alphabetic character in the plaintext is\\n * substituted with an alphabetic character found by left shifting by k\\n * positions along the alphabet.  For example, using k := 3 we have the\\n * encryption:\\n *\\n * DEF -> ABC\\n * ABC -> XYZ\\n * CAT DOG. -> ZXQ ALD.\\n *\\n * As shown in the above examples, we wrap around the alphabet whenever\\n * necessary.  Furthermore, the substitution only applies to characters of the\\n * plaintext alphabet.  Punctuation, whitespace, and special characters are\\n * ignored.\\n *\\n * @param plaintext Encrypt this string using the Caesar cipher.  Cannot be\\n *     empty string.\\n * @param k The left shift length.  We shift to the left by this many\\n *     characters, taking into account rotation (wrap around).  Must be a\\n *     non-negative integer.\\n * @return The ciphertext corresponding to the plaintext, encrypted using the\\n *     Caesar cipher having a left shift of k positions.\\n */\\nfunction caesar(plaintext, k) {\\n    // Sanity checks.\\n    const ell = Math.floor(k);\\n    assert(plaintext.length > 0);\\n    assert(ell >= 0);\\n    // Encryption.\\n    const alphabet = english_alphabet();\\n    const n = alphabet.length;\\n    const ptxt = plaintext.toUpperCase();\\n    let ciphertext = \\\"\\\";\\n    for (let i = 0; i < ptxt.length; i++) {\\n        if (!is_alphabetic(ptxt[i])) {\\n            ciphertext += ptxt[i];\\n            continue;\\n        }\\n        // Index of the ciphertext character.\\n        let j = char_index(ptxt[i]) - ell;\\n        if (j < 0) {\\n            j += n;\\n        }\\n        ciphertext += alphabet[j];\\n    }\\n    return ciphertext;\\n}\\n\\n/**\\n * Encryption I: Caesar Cipher: Caesar cipher is one of the simplest encryption\\n * techniques.  It is a type of substitution cipher in which each letter in the\\n * plaintext is replaced by a letter some fixed number of positions down the\\n * alphabet.  For example, with a left shift of 3, D would be replaced by A, E\\n * would become B, and A would become X (because of rotation).  You are given\\n * an array with two elements.  The first element is the plaintext, the second\\n * element is the left shift value.  Return the ciphertext as uppercase string.\\n * Spaces remain the same.\\n *\\n * This is Caesar cipher encryption, where the plaintext alphabet is the\\n * uppercase characters of the English alphabet.\\n *\\n * Usage: run quack/cct/caesar.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [plaintext, k] = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(caesar(plaintext, k), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/caesar.txt\\\";\\n        const data = `[${plaintext}, ${k}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/caesar.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The number of unique paths from top-left to bottom-right in an m x n\\n * grid.  Consider the grid below.  The problem statement is ambiguous\\n * regarding what is considered the top-left corner and the bottom-right\\n * corner.  If we are moving from vertex to vertex, then position A in the\\n * grid is the top-left corner, B in the grid is the bottom-right corner,\\n * and our grid is 5 x 7.  This is a vertex-based grid.  If we are moving\\n * from square to square, then X in the grid is the top-left corner, Y is\\n * the bottom-right corner, and our grid is 4 x 6.  This square-based grid\\n * can be transformed into a vertex-based grid by treating each square as\\n * a vertex and the connection between two adjacent squares as an edge.\\n *\\n * A-o-o-o-o-o-o\\n * |X| | | | | |\\n * o-o-o-o-o-o-o\\n * | | | | | | |\\n * o-o-o-o-o-o-o\\n * | | | | | | |\\n * o-o-o-o-o-o-o\\n * | | | | | |Y|\\n * o-o-o-o-o-o-B\\n *\\n * Consider an r x c vertex-based grid, where r is the number of rows and\\n * c is the number of columns.  We want to calculate the number of unique\\n * paths from the top-left corner to the bottom-right corner.  At each\\n * vertex we are allowed to move either down or right.  Each path must have\\n * n = (r - 1) + (c - 1) = r + c - 2 segments, i.e. r - 1 downward segments\\n * and c - 1 rightward segments.  Choose k := r - 1 of the n segments to be\\n * downward segments.  The remaining n - k = c - 1 segments must be\\n * rightward segments.  The total number of unique paths is the combination\\n * number C(n, k), which is read as \\\"n choose k\\\" or as a k-combination of a\\n * set of n segments.  The combination number is also known as the\\n * binomial coefficient.\\n *\\n * @param n The total number of segments.\\n * @param k How many segments are downward segments.\\n * @return The combination number C(n, k).\\n */\\nfunction unique_paths(n, k) {\\n    // Sanity checks.\\n    assert(n >= 0);\\n    assert(k >= 0);\\n    // Edge cases.\\n    if (k === 0 || n === k) {\\n        return 1;\\n    }\\n    if (k > n) {\\n        return 0;\\n    }\\n    // Use the recurrence relation\\n    //\\n    // C(n, k) := C(n - 1, k - 1) + C(n - 1, k)\\n    //\\n    // which can be read off Pascal's triangle.  Or use the more\\n    // efficient multiplicative rule\\n    //\\n    // C(n, k) := (n / k) * C(n - 1, k - 1)\\n    //\\n    // which can be directly translated to an iterative program.\\n    assert(k > 0);\\n    assert(k < n);\\n    // By symmetry, we have C(n, k) = C(n, n - k).\\n    const mink = Math.min(k, n - k);\\n    let result = 1;\\n    for (let i = 0; i < mink; i++) {\\n        // This line of code can result in a floating point number:\\n        //\\n        // result *= (n - 1) / (i + 1);\\n        //\\n        // because (n - 1) / (i + 1) is not necessarily an integer.\\n        // Safer to first calculate the product\\n        //\\n        // result * (n - i)\\n        result = (result * (n - i)) / (i + 1);\\n    }\\n    return result;\\n}\\n\\n/**\\n * Unique Paths in a Grid I: You are given an array with two numbers: [m, n].\\n * These numbers represent an m x n grid.  Assume you are initially positioned\\n * in the top-left corner of that grid and that you are trying to reach the\\n * bottom-right corner.  On each step, you may only move down or to the right.\\n * Determine how many unique paths there are from start to finish.\\n *\\n * See the function unique_paths() for more details.\\n *\\n * Usage: run quack/cct/grid.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [row, column] = ns.codingcontract.getData(cct, host);\\n    const k = column - 1;\\n    const n = row - 1 + k;\\n    const result = ns.codingcontract.attempt(unique_paths(n, k), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/grid.txt\\\";\\n        const data = `[${row}, ${column}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/grid.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    matrix_to_string,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether an obstacle is found at the coordinates (r, c).\\n *\\n * @param grid A grid of m x n squares.\\n * @param r, c A pair of coordinates in the grid.\\n * @return true if an obstacle is located at (r, c); false otherwise.\\n */\\nfunction is_obstacle(grid, r, c) {\\n    return grid[r][c] === 1;\\n}\\n\\n/**\\n * The number of unique paths from the top-left square to the bottom-right\\n * square in an m x n grid, while avoiding obstacles.  Consider the grid below.\\n *\\n * 00000\\n * 01000\\n * 00010\\n * 10000\\n *\\n * Interpret each number as a square.  The entire grid is made up of m x n\\n * squares.  We can occupy a square that has the symbol '0', whereas a square\\n * having the symbol '1' is interpreted as an obstacle that cannot be occupied.\\n * Starting from the top-left square, we can move either to the square\\n * immediately to the right or the square immediately below, but never to a\\n * square that has an obstacle.\\n *\\n * Use the following row-column coordinate system for the above grid.\\n *\\n *   0 1 2 3 4\\n * 0 0-0-0-0-0\\n *   | | | | |\\n * 1 0-1-0-0-0\\n *   | | | | |\\n * 2 0-0-0-1-0\\n *   | | | | |\\n * 3 1-0-0-0-0\\n *\\n * The obstacles are located at the coordinates a := (1, 1), b := (2, 3), and\\n * c := (3, 0).  Let A be the set of paths passing through obstacle a, let B be\\n * the set of paths passing through obstacle b, and let C be the set of paths\\n * passing through obstacle c.  Let P be the set of paths from (0, 0) to\\n * (3, 4).  The number of paths that avoid the obstacles is written as\\n *\\n * |P| = |X| - |A union B union C|\\n *\\n * where \\\"union\\\" refers to set union.  The number |A union B union C| can\\n * be calculated by using the principle of inclusion-exclusion.\\n *\\n * The problem can also be solved in a recursive manner.  Define p[i][j] as the\\n * number of paths starting from (0, 0), end at (i, j), and do not include any\\n * obstacles.  Since our movement is restricted to only right or down, we can\\n * reach (i, j) in either of two ways:\\n *\\n * (1) From (i-1, j) to (i, j).\\n * (2) From (i, j-1) to (i, j).\\n *\\n * Thus we have the recurrence relation\\n *\\n * p[i][j] := p[i-1][j] + p[i][j-1]\\n *\\n * where i >= 1 and j >= 1.  There are 3 other possibilities for the values of\\n * i and j.\\n *\\n * (1) If i = 0 and j >=1, then (0, j) can be reached from (0, j-1) so we have\\n *     p[0][j] = p[0][j-1].  There is only 1 path along the top-most row, but\\n *     this does not necessarily mean that p[0][j] = 1.  The reason is that any\\n *     square with coordinates (0, j) can be an obstacle.\\n * (2) If i >= 1 and j = 0, then (i, 0) is reached from (i-1, 0), hence\\n *     p[i][0] = p[i-1][0].  There is only 1 path along the left-most column,\\n *     but this does not mean we must have p[i][0] = 1.  The reason is that one\\n *     of the coordinates (i, 0) might be an obstacle.\\n * (3) If i = 0 and j = 0, then p[0][0] = 1 because the number of paths from\\n *     (0, 0) to itself is 1.\\n *\\n * The edge case is when (i, j) is an obstacle so we set p[i][j] = 0.\\n *\\n * @param grid A grid of m x n squares.\\n * @return The number of different paths from (0, 0) to (m-1, n-1) without\\n *     passing through any obstacles.\\n */\\nfunction unique_paths(grid) {\\n    // Sanity checks.\\n    const nrow = grid.length;\\n    const ncol = grid[0].length;\\n    assert(nrow > 0);\\n    assert(ncol > 0);\\n    // The table of path counts.\\n    const path = [];\\n    for (let i = 0; i < nrow; i++) {\\n        assert(ncol === grid[i].length);\\n        path.push(new Array(ncol));\\n    }\\n    // Start from (0, 0) and work our way to (m-1, n-1).\\n    for (let r = 0; r < nrow; r++) {\\n        for (let c = 0; c < ncol; c++) {\\n            // Is (r, c) an obstacle?\\n            if (is_obstacle(grid, r, c)) {\\n                path[r][c] = 0;\\n                continue;\\n            }\\n            // r = 0, c = 0\\n            if (r === 0 && c === 0) {\\n                path[r][c] = 1;\\n                continue;\\n            }\\n            // r = 0, c >= 1\\n            if (r === 0 && c >= 1) {\\n                path[r][c] = path[r][c - 1];\\n                continue;\\n            }\\n            // r >= 1, c = 0\\n            if (r >= 1 && c === 0) {\\n                path[r][c] = path[r - 1][c];\\n                continue;\\n            }\\n            // A pair of coordinates not located along the top-most row or the\\n            // left-most column.\\n            // r >= 1, c >= 1\\n            assert(r > 0);\\n            assert(c > 0);\\n            path[r][c] = path[r - 1][c] + path[r][c - 1];\\n        }\\n    }\\n    return path[nrow - 1][ncol - 1];\\n}\\n\\n/**\\n * Unique Paths in a Grid II: You are given a 2-D array of numbers (array of\\n * arrays of numbers) representing a grid, i.e. a 2-D matrix.  The 2-D array\\n * contains 1s and 0s, where 1 represents an obstacle and 0 represents a free\\n * space.  Assume you are initially positioned in the top-left square of that\\n * grid and that you are trying to reach the bottom-right square.  In each step,\\n * you may only move down or to the right.  Furthermore, you cannot move onto a\\n * square that has an obstacle.  Determine how many unique paths there are from\\n * start to finish.\\n *\\n * See the function unique_paths() for more details.\\n *\\n * Usage: run quack/cct/grid2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const grid = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(unique_paths(grid), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/grid2.txt\\\";\\n        const data = matrix_to_string(grid);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/grid2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    matrix_to_string,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { Graph } from \\\"/quack/lib/network.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether we can move one step down from our current position on a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step down; false otherwise.\\n */\\nfunction can_move_down(grid, r, c) {\\n    // Are we at the bottom-most edge of the grid?\\n    const lastidx = grid.length - 1;\\n    if (lastidx === r) {\\n        return bool.NOT_MOVE;\\n    }\\n    // Below us is an obstacle.\\n    assert(r >= 0);\\n    assert(r < lastidx);\\n    if (is_obstacle(grid, r + 1, c)) {\\n        return bool.NOT_MOVE;\\n    }\\n    // We can move one step down.\\n    return bool.MOVE;\\n}\\n\\n/**\\n * Whether we can move one step to the left from our current position on\\n * a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step to the left;\\n *     false otherwise.\\n */\\nfunction can_move_left(grid, r, c) {\\n    // Are we at the left-most edge of the grid?\\n    if (c === 0) {\\n        return bool.NOT_MOVE;\\n    }\\n    // To our left is an obstacle.\\n    assert(c > 0);\\n    assert(c < grid[r].length);\\n    if (is_obstacle(grid, r, c - 1)) {\\n        return bool.NOT_MOVE;\\n    }\\n    // We can move to the left.\\n    return bool.MOVE;\\n}\\n\\n/**\\n * Whether we can move one step to the right from our current position on\\n * a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step to the right;\\n *     false otherwise.\\n */\\nfunction can_move_right(grid, r, c) {\\n    const lastidx = grid[r].length - 1;\\n    // Are we at the right-most edge of the grid?\\n    if (lastidx === c) {\\n        return bool.NOT_MOVE;\\n    }\\n    // To our right is an obstacle.\\n    assert(c >= 0);\\n    assert(c < lastidx);\\n    if (is_obstacle(grid, r, c + 1)) {\\n        return bool.NOT_MOVE;\\n    }\\n    // We can move to the right.\\n    return bool.MOVE;\\n}\\n\\n/**\\n * Whether we can move one step up from our current position on a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step up; false otherwise.\\n */\\nfunction can_move_up(grid, r, c) {\\n    // Are we at the top-most edge of the grid?\\n    if (r === 0) {\\n        return bool.NOT_MOVE;\\n    }\\n    // Above us is an obstacle.\\n    assert(r > 0);\\n    assert(r < grid.length);\\n    if (is_obstacle(grid, r - 1, c)) {\\n        return bool.NOT_MOVE;\\n    }\\n    // We can move one step up.\\n    return bool.MOVE;\\n}\\n\\n/**\\n * Is the given location an obstacle?\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c A location on the grid.\\n * @return true if the given location is an obstacle on the grid;\\n *     false otherwise.\\n */\\nfunction is_obstacle(grid, r, c) {\\n    return grid[r][c] === 1;\\n}\\n\\n/**\\n * Use the Cantor pairing function to assign a unique non-negative integer\\n * to a pair of coordinates.\\n *\\n * @param x, y A pair of coordinates (x, y), each number being a\\n *     non-negative integer.\\n * @return A unique non-negative integer associated with the coordinates\\n *     (x, y).\\n */\\nfunction pairing(x, y) {\\n    assert(x >= 0);\\n    assert(y >= 0);\\n    // One of a and b is even, while the other is odd.  The product ab is even,\\n    // therefore (1/2) * ab is an integer.\\n    const a = x + y;\\n    const b = a + 1;\\n    return (1 / 2) * (a * b) + y;\\n}\\n\\n/**\\n * A shortest path in a 2-D grid.  Consider the following grid\\n *\\n * 0010\\n * 0100\\n * 0000\\n *\\n * which can be represented as the following map.\\n *\\n *   0 1 2 3\\n * 0 0-0-1-0\\n *   | | | |\\n * 1 0-1-0-0\\n *   | | | |\\n * 2 0-0-0-0\\n *\\n * The top-left corner has the coordinates (0, 0) and the bottom-right\\n * corner has the coordinates (2, 3).  We have 2 obstacles at the\\n * coordinates (0, 2) and (1, 1).  Our task is to determine a shortest\\n * path from the top-left corner to the bottom-right corner, using as\\n * few moves as possible.  At any point on the map, we can move one step\\n * either up, down, left, or right but only to a pair of coordinates that\\n * represents 0.  We cannot move to a pair of coordinates that represents\\n * an obstacle.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @return A string representing a shortest path in the grid, from the\\n *     top-left corner to the bottom-right corner.  Each character of the\\n *     string is either U, D, L, R.  An empty string if there are no paths\\n *     from the top-left to the bottom-right.\\n */\\nfunction shortest_path(grid) {\\n    // Represent the grid as an undirected graph.  Find a shortest path from\\n    // the top-left corner to the bottom-right corner.\\n    const graph = to_graph(grid);\\n    const a = pairing(0, 0);\\n    const b = pairing(grid.length - 1, grid[0].length - 1);\\n    if (!graph.has_node(a) || !graph.has_node(b)) {\\n        return \\\"\\\";\\n    }\\n    const path = graph.shortest_path(a, b);\\n    return path_to_string(path);\\n}\\n\\n/**\\n * A representation of a grid as an unweighted, undirected graph.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @return An undirected graph representation of the grid.  Each vertex is\\n *     a non-negative integer n that is uniquely associated with a location\\n *     (r, c) on the grid.  We use the Cantor pairing function (and its\\n *     inverse) to map between n and (r, c).\\n */\\nfunction to_graph(grid) {\\n    assert(grid.length > 0);\\n    const ncol = grid[0].length;\\n    const graph = new Graph(bool.UNDIRECTED);\\n    for (let r = 0; r < grid.length; r++) {\\n        assert(ncol === grid[r].length);\\n        for (let c = 0; c < ncol; c++) {\\n            // Our current location is u := (r, c).\\n            const u = pairing(r, c);\\n            // Is this an obstacle?\\n            if (is_obstacle(grid, r, c)) {\\n                continue;\\n            }\\n            // Can we move one step left?\\n            assert(grid[r][c] === 0);\\n            if (can_move_left(grid, r, c)) {\\n                const v = pairing(r, c - 1);\\n                graph.add_edge(u, v);\\n            }\\n            // Can we move one step right?\\n            if (can_move_right(grid, r, c)) {\\n                const v = pairing(r, c + 1);\\n                graph.add_edge(u, v);\\n            }\\n            // Can we move one step up?\\n            if (can_move_up(grid, r, c)) {\\n                const v = pairing(r - 1, c);\\n                graph.add_edge(u, v);\\n            }\\n            // Can we move one step down?\\n            if (can_move_down(grid, r, c)) {\\n                const v = pairing(r + 1, c);\\n                graph.add_edge(u, v);\\n            }\\n        }\\n    }\\n    return graph;\\n}\\n\\n/**\\n * Convert from a graph-theoretic path to a path given in terms of the\\n * following directions.\\n *\\n * * U := move up by one step.\\n * * D := move down by one step.\\n * * L := move left by one step.\\n * * R := move right by one step.\\n *\\n * @param gpath An array of nodes representing a path in a graph.\\n * @return A string comprised of the characters U, D, L, R to indicate\\n *     a path.  An empty string if gpath is an empty array.\\n */\\nfunction path_to_string(gpath) {\\n    // No shortest paths in the grid.\\n    if (gpath.length === 0) {\\n        return \\\"\\\";\\n    }\\n    // We have a shortest path in the grid.\\n    const path = [];\\n    let [rold, cold] = unpairing(gpath[0]);\\n    for (const v of gpath.slice(1, gpath.length)) {\\n        const [r, c] = unpairing(v);\\n        // Are we moving up?\\n        if (rold - 1 === r) {\\n            path.push(\\\"U\\\");\\n        }\\n        // Are we moving down?\\n        if (rold + 1 === r) {\\n            path.push(\\\"D\\\");\\n        }\\n        // Are we moving left?\\n        if (cold - 1 === c) {\\n            path.push(\\\"L\\\");\\n        }\\n        // Are we moving right?\\n        if (cold + 1 === c) {\\n            path.push(\\\"R\\\");\\n        }\\n        [rold, cold] = [r, c];\\n    }\\n    return path.join(\\\"\\\");\\n}\\n\\n/**\\n * Use the inverse of the Cantor pairing function to break a non-negative\\n * integer into a pair of coordinates (x, y).\\n *\\n * @param z A non-negative integer.\\n * @return A pair of coordinates (x, y) that is uniquely associated with z.\\n */\\nfunction unpairing(z) {\\n    assert(z >= 0);\\n    const numer = Math.sqrt(8 * z + 1) - 1;\\n    const w = Math.floor(numer / 2);\\n    const t = (w ** 2 + w) / 2;\\n    const y = z - t;\\n    const x = w - y;\\n    return [x, y];\\n}\\n\\n/**\\n * Shortest Path in a Grid: You are given a 2-D array of numbers (array of\\n * arrays) representing a grid, i.e. a 2-D matrix.  The 2-D array contains 1s\\n * and 0s, where 1 represents an obstacle and 0 represents a free space.\\n * Assume you are initially positioned at the top-left square of the grid and\\n * you are trying to reach the bottom-right square.  In each step, you may move\\n * up, down, left, or right.  Furthermore, you cannot move onto spaces that\\n * have obstacles.  Determine a shortest path from start to finish, if one\\n * exists.  The answer should be given as a string of UDLR characters,\\n * indicating the moves along the path.\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer.  If there are no paths, the answer should be an empty string.\\n *\\n * Usage: run quack/cct/grid3.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const grid = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(shortest_path(grid), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/grid3.txt\\\";\\n        const data = matrix_to_string(grid);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/grid3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport {\\n    count_one,\\n    log_cct_failure,\\n    parity_position,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Use Hamming code to encode a string of bits.\\n *\\n * @param n A positive integer.  This is our data.\\n * @return A bit string representing the Hamming encoding of the given data.\\n */\\nfunction encode(n) {\\n    assert(n > 0);\\n    // Convert from decimal to binary.  A decimal number is expressed in\\n    // base 10, whereas a binary number is expressed in base 2.\\n    const data = n\\n        .toString(base.BINARY)\\n        .split(\\\"\\\")\\n        .map((s) => parseInt(s, base.DECIMAL));\\n    // Determine the number of parity bits.\\n    const nparity = num_parity(data);\\n    assert(nparity > 0);\\n    // Lay out the data bits in the incomplete encoded message.  Set each\\n    // redundant bit as well as the overall parity bit.\\n    const TRASH = -1;\\n    let msg = lay_data_bits(data, nparity, TRASH);\\n    msg = set_parity(msg, nparity);\\n    return msg.join(\\\"\\\");\\n}\\n\\n/**\\n * Lay out the data bits in the encoded message.  Position 0 in the message\\n * is reserved for the overall parity bit.  Position 2^i in the message is\\n * reserved for a parity (or redundant) bit, where i = 0, 1, 2, ...\\n *\\n * @param data An array of bits, representing the bit string of the data.\\n * @param p The number of parity bits in the encoded message.  This number\\n *     does not include the overall parity bit.\\n * @param trash Rubbish placed at positions not occupied by a data bit.\\n * @return An incomplete bit string, where only the data bits are placed.\\n *     A position not occupied by a data bit is filled with rubbish whose\\n *     value is determined by trash.\\n */\\nfunction lay_data_bits(data, p, trash) {\\n    // The number of bits in our encoded message.  The extra one bit\\n    // is the overall parity bit, which is used to check the parity\\n    // of the whole message.\\n    const m = data.length + p + 1;\\n    // Determine the positions where the parity (i.e. redundant) bits are\\n    // to be placed.\\n    const pos = new Set(parity_position(p));\\n    // Lay out the data bits.\\n    const msg = Array(m).fill(trash);\\n    const _data = Array.from(data);\\n    // Index 0 is reserved for the overall parity bit.  Indices 1 and 2 are\\n    // for parity (i.e. redundant) bits.  So we start at index 3.\\n    for (let k = 3; k < m; k++) {\\n        if (pos.has(k)) {\\n            continue;\\n        }\\n        msg[k] = _data.shift();\\n    }\\n    return msg;\\n}\\n\\n/**\\n * Determine the number of parity bits.  Let p be the number of parity bits\\n * and k the number of bits in the data.  The number of parity bits must\\n * satisfy the inequality\\n *\\n * 2^p >= k + p + 1\\n *\\n * @param data The bit string to be encoded using Hamming code.\\n * @return The number of parity bits.  This number does not include the overall\\n *     parity bit.\\n */\\nfunction num_parity(data) {\\n    assert(data.length > 0);\\n    let p = 0;\\n    let max;\\n    const k = data.length;\\n    do {\\n        p++;\\n        max = 2 ** p;\\n    } while (max < k + p + 1);\\n    // The encoded message has m := k + p + 1 bits, as explained below.\\n    //\\n    // k := The number of bits in the data, represented as a bit string.\\n    // p := The number of parity (i.e. redundant) bits.\\n    // 1 := The extra bit reserved for the overall parity bit.\\n    //\\n    // The number p of parity (i.e. redundant) bits is\\n    //\\n    // p = [log(m)]\\n    //\\n    // where the operator [] means the ceiling function and log() is the\\n    // logarithm using base 2.\\n    const m = k + p + 1;\\n    assert(p === Math.ceil(Math.log2(m)));\\n    return p;\\n}\\n\\n/**\\n * Set each parity bit.  The encoded message has a number of locations\\n * that are reserved for parity bits.  We set each of these locations to\\n * 1 or 0.\\n *\\n * @param msg An incomplete encoded message.  Assume only the data bits\\n *     to have been laid out.\\n * @param nparity The number of parity bits in the encoded message.  This\\n *     number does not include the overall parity bit.\\n * @return The same as the input msg array, but the location of parity\\n *     bits have been set.  We do not modify msg.  We also set the\\n *     overall parity bit.\\n */\\nfunction set_parity(msg, nparity) {\\n    assert(msg.length > 0);\\n    assert(nparity > 0);\\n    // The positions where the parity bits are placed.  Do not include the\\n    // position of the overall parity bit.\\n    const pos = parity_position(nparity);\\n    // Set each parity bit.\\n    const _msg = Array.from(msg);\\n    for (const p of pos) {\\n        assert(p > 0);\\n        const n1 = count_one(_msg, p);\\n        // Is the number of 1s even or odd?  If the total number of 1s is\\n        // even, then the parity is 0.  Otherwise the parity is 1.\\n        _msg[p] = n1 % 2;\\n    }\\n    // Count the number of 1s in the encoded message, excluding the\\n    // very first position.\\n    const _msga = _msg.slice(1, _msg.length);\\n    const n1 = MyArray.sum(_msga);\\n    // Set the overall parity bit.\\n    _msg[0] = n1 % 2;\\n    return _msg;\\n}\\n\\n/**\\n * HammingCodes: Integer to Encoded Binary: You are given a decimal value.\\n * Convert it into a binary string and encode it as a Hamming code.  For\\n * example, the decimal value 8 will result in the binary string 1000, which\\n * will be encoded with the pattern 'pppdpddd', where p is a parity bit and d\\n * a data bit.  As another example, the binary representation of the decimal\\n * value 21 is '10101'.  The binary string is encoded as the pattern\\n * 'pppdpdddpd' to result in '1001101011'.\\n * NOTE: You need a parity bit at index 0 as an overall parity bit.  Important\\n * rule for encoding: Not allowed to add additional leading 0s to the binary\\n * value, i.e. the binary value has to be encoded as is.\\n *\\n * This is the problem of using Hamming code to encode a binary string, i.e.\\n * a string of bits.  The Hamming code is extended with an additional overall\\n * parity bit, which is located at index 0 in the encoded bit string.  The\\n * original paper where Hamming code is described:\\n *\\n * R. W. Hamming.  Error detecting and error correcting codes.  The Bell System\\n * Technical Journal, volume 29, issue 2, 1950, pp.147--160.\\n * DOI: 10.1002/j.1538-7305.1950.tb00463.x\\n *\\n * Expository notes here:\\n *\\n * https://en.wikipedia.org/wiki/Hamming_code\\n * https://medium.com/swlh/hamming-code-generation-correction-with-explanations-using-c-codes-38e700493280\\n * https://users.cs.fiu.edu/~downeyt/cop3402/hamming.html\\n * https://www.youtube.com/watch?v=X8jsijhllIA\\n * https://harryli0088.github.io/hamming-code/\\n *\\n * Usage: run quack/cct/hamming.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const n = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(encode(n), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/hamming.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, n);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/hamming.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport {\\n    count_one,\\n    log_cct_failure,\\n    parity_position,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Check the parity bits.\\n *\\n * @param msg An encoded message as a bit string.\\n * @param nparity The number of parity bits in the encoded message.\\n * @return An array of indices where the parity bit has detected an error.\\n *     Each index is the location of a parity (i.e. redundant) bit.  The\\n *     value of this parity bit is different from the parity of the\\n *     positions that the bit is meant to check.  An empty array if there\\n *     are no errors in the parity check.\\n */\\nfunction check_parity(msg, nparity) {\\n    // The positions where the parity bits are placed.\\n    const pos = parity_position(nparity);\\n    // Locations of error.  Each location is an index of the bit string.\\n    // Each index is the position of a parity (i.e. redundant) bit.\\n    const error = [];\\n    // Check each parity (i.e. redundant) bit.\\n    for (const p of pos) {\\n        assert(p > 0);\\n        // The function count_one() also counts the value of the parity\\n        // bit located at index p in the bit string.  If the value of\\n        // msg[p] is 1, we must subtract 1 from the result of the\\n        // count_one() function.\\n        let n1 = count_one(msg, p);\\n        if (msg[p] === 1) {\\n            n1--;\\n        }\\n        // Is there an error?\\n        const parity = n1 % 2;\\n        if (parity !== msg[p]) {\\n            error.push(p);\\n        }\\n    }\\n    return error;\\n}\\n\\n/**\\n * Decode a binary string to an integer.\\n *\\n * @param msg A bit string that has been encoded using Hamming code.\\n *     Going from left to right, the very first bit is the overall\\n *     parity bit.  This is the extended Hamming code with an additional\\n *     parity bit, also known as \\\"single error correction, double error\\n *     detection\\\" (SECDED).\\n * @return The integer corresponding to the encoded bit string.\\n */\\nfunction decode(msg) {\\n    assert(msg.length > 0);\\n    const _msg = Array.from(msg).map((s) => parseInt(s, base.DECIMAL));\\n    const nparity = num_parity(_msg);\\n    const _msgc = secded(_msg, nparity);\\n    return to_integer(_msgc, nparity);\\n}\\n\\n/**\\n * The number of parity (or redundant) bits.  Let p be the number of parity\\n * bits, excluding the overall parity bit.  Let m be the number of message\\n * bits.  These numbers satisfy the inequality\\n *\\n * 2^p >= m + p + 1\\n *\\n * @param msg A bit string that has been encoded using Hamming code.\\n *     The 0-th position is reserved for the overall parity bit.  The first\\n *     parity (or redundant) bit is at index 1.  The second parity bit is at\\n *     index 2.  Index 3 is the first index where a data bit is located.\\n *     Assuming the message string has at least 1 bit, the encoded bit string\\n *     has at least 4 bits.\\n * @return The number of redundant bits, excluding the overall parity bit.\\n */\\nfunction num_parity(msg) {\\n    const lower_bound = 4;\\n    assert(msg.length >= lower_bound);\\n    let i = 0; // How many parity bits.\\n    let pos = 2 ** i; // Position of a parity bit.\\n    while (pos < msg.length) {\\n        i++;\\n        pos = 2 ** i;\\n    }\\n    assert(i === Math.ceil(Math.log2(msg.length)));\\n    return i;\\n}\\n\\n/**\\n * Correct a single error and detect two errors.  Also known as \\\"single error\\n * correction, double error detection\\\" (SECDED).\\n *\\n * @param msg A bit string that has been encoded using the extended Hamming\\n *     code.\\n * @param nparity The number of parity (i.e. redundant) bits in the bit string.\\n * @return The same bit string as msg, but with a single error corrected if\\n *     there is an error in the bit string.\\n */\\nfunction secded(msg, nparity) {\\n    // Check for errors in the parity (i.e. redundant) bits.\\n    const error = check_parity(msg, nparity);\\n    // No errors in the bit string.\\n    if (error.length === 0) {\\n        return msg;\\n    }\\n    // We have an error in the bit string.  Calculate the sum of the indices of\\n    // the erroneous parity bits.  This sum gives the index of where an error\\n    // occurs.  Correct one error.\\n    const i = MyArray.sum(error);\\n    const _msg = Array.from(msg);\\n    _msg[i] = (_msg[i] + 1) % 2;\\n    // Check the overall parity bit.  This allows us to check for the presence\\n    // of a second error, but we would not be able to correct the second error.\\n    const n1 = MyArray.sum(_msg.slice(1, _msg.length));\\n    assert(_msg[0] === n1 % 2);\\n    return _msg;\\n}\\n\\n/**\\n * Convert a Hamming code to an integer.\\n *\\n * @param msg A bit string encoded using Hamming code.\\n * @param nparity The number of parity (i.e. redundant) bits in the\\n *     bit string.  This does not include the overall parity bit, which is\\n *     assumed to be at index 0 of msg.\\n * @return An integer representation of the Hamming encoded bit string.\\n */\\nfunction to_integer(msg, nparity) {\\n    assert(msg.length > 3);\\n    assert(nparity > 0);\\n    // Extract data bits, i.e. those bits that are not redundant bits and not\\n    // the overall parity bit.  Index 0 is reserved for the overall parity bit.\\n    // Index 1 is reserved for a redundant bit, so is index 2.  Therefore, we\\n    // start at index 3.\\n    const pos = new Set(parity_position(nparity));\\n    const data = [];\\n    for (let i = 3; i < msg.length; i++) {\\n        if (pos.has(i)) {\\n            continue;\\n        }\\n        data.push(msg[i]);\\n    }\\n    // The number is a binary representation of an integer.  Convert the binary\\n    // representation to a decimal representation.\\n    return parseInt(data.join(\\\"\\\"), base.BINARY);\\n}\\n\\n/**\\n * HammingCodes: Encoded Binary to Integer: You are given an encoded binary\\n * string.  Treat it as a Hamming code with 1 possible error at a random index.\\n * Find the possible wrong bit, fix it, and extract the decimal value from\\n * the string.  Return the decimal value as a string.\\n *\\n * Note 1: The length of the binary string is dynamic, but its encoding/decoding\\n *     follows Hamming's rule.\\n * Note 2: Index 0 has an overall parity bit.\\n * Note 3: There's a ~55% chance of having an altered bit.\\n *\\n * Usage: run quack/cct/hamming2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const msg = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(decode(msg), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/hamming2.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, msg);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/hamming2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Merge overlapping intervals.\\n *\\n * @param interval An array of intervals.  Each interval is represented as an\\n *     array [a, b] of two elements, where a < b.  So this is an array of\\n *     arrays.\\n * @return An array of intervals, where all overlapping intervals have\\n *     been merged.  Intervals in the array are sorted in ascending order.\\n */\\nfunction merge(interval) {\\n    // Sanity checks.\\n    assert(interval.length > 0);\\n    assert(valid_interval(interval));\\n    // Sort the array in ascending order using the first element of\\n    // each subarray.\\n    const array = MyArray.sort_ascending_tuple(interval);\\n    // Compare two intervals and merge them as necessary.\\n    let i = 0;\\n    let j = i + 1;\\n    const start = 0;\\n    const end = 1;\\n    const howmany = 1; // How many elements to delete.\\n    while (j < array.length) {\\n        if (merge_interval(array[i], array[j])) {\\n            // Merge intervals i and j.\\n            const a = array[i][start];\\n            const b = Math.max(array[i][end], array[j][end]);\\n            array[i] = [a, b];\\n            // Delete interval j.\\n            array.splice(j, howmany);\\n            continue;\\n        }\\n        i++;\\n        j = i + 1;\\n    }\\n    return array;\\n}\\n\\n/**\\n * Whether to merge two intervals.\\n *\\n * @param intA An interval, represented as an array [x, y] of two elements.\\n * @param intB Another interval.\\n * @return True if the given intervals should be merged; false otherwise.\\n */\\nfunction merge_interval(intA, intB) {\\n    const start = 0;\\n    const end = 1;\\n    const a = intA[end];\\n    const b = intB[start];\\n    // The end of the previous interval is smaller than the start\\n    // of the current interval.\\n    if (a < b) {\\n        return bool.NO_MERGE;\\n    }\\n    // The end of the previous interval is greater than or equal\\n    // to the start of the current interval.\\n    assert(a >= b);\\n    return bool.MERGE;\\n}\\n\\n/**\\n * Whether each interval is valid.\\n *\\n * @param array An array of intervals.  Cannot be an empty array.\\n * @return True if each interval is valid; false otherwise.\\n */\\nfunction valid_interval(array) {\\n    assert(array.length > 0);\\n    for (let i = 0; i < array.length; i++) {\\n        const arr = array[i];\\n        if (arr.length !== 2) {\\n            return bool.INVALID;\\n        }\\n        const [a, b] = arr;\\n        if (a >= b) {\\n            return bool.INVALID;\\n        }\\n    }\\n    return bool.VALID;\\n}\\n\\n/**\\n * Merge Overlapping Intervals: Given an array of intervals, merge all\\n * overlapping intervals.  An interval is an array with two numbers, where\\n * the first number is always less than the second (e.g. [1, 5]).  The\\n * intervals must be returned in ASCENDING order.\\n *\\n * Usage: run quack/cct/interval.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(merge(array), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/interval.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/interval.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * All valid IPv4 addresses from a string of digits.\\n *\\n * @param string A string of decimal digits.  Cannot be an empty string.\\n * @return An array where each element is a string representing a valid\\n *     IPv4 address.  An empty array if no valid IPv4 addresses can be\\n *     generated from the given string.\\n */\\nfunction all_ip(string) {\\n    assert(string.length > 0);\\n    // An IPv4 address has 4 octets, each of which is a segment of the digit\\n    // string.  No two segments overlap.  Each segment contains at most 3\\n    // digits.  The total length of all segments must be the same as the number\\n    // of digits in the digit string.\\n    const max_octet_length = 3;\\n    const ip_length = string.length;\\n    const ip = [];\\n    for (let i = 1; i <= max_octet_length; i++) {\\n        for (let j = 1; j <= max_octet_length; j++) {\\n            for (let k = 1; k <= max_octet_length; k++) {\\n                for (let ell = 1; ell <= max_octet_length; ell++) {\\n                    // Ensure the length of each octet sums to the length of a\\n                    // valid IPv4 address.\\n                    if (ip_length !== i + j + k + ell) {\\n                        continue;\\n                    }\\n                    // Extract each segment.\\n                    const octet = extract_octets(string, i, j, k);\\n                    // Is each segment a valid octet in an IPv4 address?\\n                    if (!is_valid_ip(octet)) {\\n                        continue;\\n                    }\\n                    // We have found a valid IPv4 address.  Octets in an IPv4\\n                    // address are delimited by a period.\\n                    ip.push(octet.join(\\\".\\\"));\\n                }\\n            }\\n        }\\n    }\\n    // Since v2.1.0, the game wants the array as a string.\\n    return ip.toString();\\n}\\n\\n/**\\n * Extract 4 octets from a digit string.\\n *\\n * @param string A string of decimal digits.\\n * @param i, j, k The boundary of each octet, where the boundary is with\\n *     respect to the digit string.  Going from left to right in the digit\\n *     string, the first octet starts from index 0 and ends at index i - 1,\\n *     inclusive.  The range of indices of the first octet can be written as\\n *     the closed interval [0, i - 1], meaning that digits in the first octet\\n *     are digits found at the given range of indices in the digit string.\\n *     The second octet has the range of indices [i, i + j - 1].  The third\\n *     octet has the range of indices [i + j, i + j + k - 1].  Finally, the\\n *     fourth octet has the range of indices [i + j + k, n - 1], where n is\\n *     the length of the digit string.\\n * @return An array where each element is a string of digits representing an\\n *     octet of the digit string.\\n */\\nfunction extract_octets(string, i, j, k) {\\n    assert(string.length > 0);\\n    assert(i > 0);\\n    assert(j > 0);\\n    assert(k > 0);\\n    const a = string.substring(0, i);\\n    const b = string.substring(i, i + j);\\n    const c = string.substring(i + j, i + j + k);\\n    const d = string.substring(i + j + k, string.length);\\n    return [a, b, c, d];\\n}\\n\\n/**\\n * Whether a given sequence of octets forms a valid IPv4 address.\\n * A valid IPv4 address has 4 valid octets.\\n *\\n * @param octet An array of candidate octets to test.\\n * @return true if each octet is valid; false otherwise.\\n */\\nfunction is_valid_ip(octet) {\\n    assert(octet.length === 4);\\n    for (const seg of octet) {\\n        if (!is_valid_octet(seg)) {\\n            return bool.INVALID;\\n        }\\n    }\\n    return bool.VALID;\\n}\\n\\n/**\\n * Whether a given segment is a valid octet in an IPv4 address.\\n *\\n * @param octet A digit string.  Cannot be an empty string.\\n * @return true if the given segment is a valid IPv4 octet; false otherwise.\\n */\\nfunction is_valid_octet(octet) {\\n    assert(octet.length > 0);\\n    // An octet cannot begin with '0'.  The exception to this rule\\n    // is when the octet itself represents the number 0.\\n    if (octet[0] === \\\"0\\\") {\\n        if (octet !== \\\"0\\\") {\\n            return bool.INVALID;\\n        }\\n    }\\n    // An octet represents an integer between 0 and 255, inclusive.\\n    const n = parseInt(octet, base.DECIMAL);\\n    const min = 0;\\n    const max = 255;\\n    if (min <= n && n <= max) {\\n        return bool.VALID;\\n    }\\n    return bool.INVALID;\\n}\\n\\n/**\\n * Generate IP Addresses: Given a string containing only digits, return an\\n * array with all possible valid IP address combinations that can be created\\n * from the string.  An octet in the IP address cannot begin with '0' unless\\n * the number itself is actually 0.  For example, '192.168.010.1' is NOT\\n * a valid IP.\\n *\\n * From the problem description, we only need to consider IPv4 addresses.\\n * Don't need to handle IPv6 addresses.\\n *\\n * Usage: run quack/cct/ip.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const string = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(all_ip(string), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/ip.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, string);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/ip.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether we can reach the last cell of an array.  We use a greedy approach.\\n * Try to jump the maximum distance, otherwise backtrack and/or reduce the\\n * jump distance.\\n *\\n * @param array An array of integers.  Cannot be an empty array.\\n * @return 1 if starting from the first array cell we can reach the last array\\n *     cell; 0 otherwise.\\n */\\nfunction end_reachable(array) {\\n    assert(MyArray.all_nonnegative(array));\\n    const can_jump = (i, d) => i + d < array.length;\\n    let d = -1; // The jump distance.\\n    let i = 0; // Current index in array.\\n    const d_idx = 0; // Index of d in array [d, i].\\n    const jump = []; // Each element is an array [d, i].\\n    let reduce_distance = false;\\n    while (i < array.length) {\\n        // Do we need to reduce the jump distance?\\n        if (reduce_distance) {\\n            // Decrease by 1 the jump distance.\\n            const k = last_index(jump);\\n            jump[k][d_idx]--;\\n            reduce_distance = false;\\n        } else {\\n            // Current maximum jump distance.\\n            d = array[i];\\n            jump.push([d, i]);\\n        }\\n        // Are we at the last array cell?\\n        if (is_last_cell(i, array)) {\\n            return bool.REACHABLE;\\n        }\\n        // Zero jump distance.\\n        [d, i] = jump[last_index(jump)];\\n        if (d === 0) {\\n            // Does the first array cell have zero as the jump distance?\\n            if (i === 0) {\\n                return bool.NOT_REACHABLE;\\n            }\\n            // Backtrack and reduce jump distance.\\n            jump.pop();\\n            reduce_distance = true;\\n            continue;\\n        }\\n        // Can we jump the given distance?\\n        if (can_jump(i, d)) {\\n            i += d;\\n        } else {\\n            reduce_distance = true;\\n        }\\n    }\\n}\\n\\n/**\\n * Whether we are at the last array cell.\\n *\\n * @param i Index of the current array cell.\\n * @param array An array of integers.  Cannot be an empty array.\\n * @return True if i is the last index of the array;\\n *     false otherwise.\\n */\\nfunction is_last_cell(i, array) {\\n    assert(i >= 0);\\n    assert(i < array.length);\\n    return i === last_index(array);\\n}\\n\\n/**\\n * The last index of an array.\\n *\\n * @param array A nonempty array.\\n * @return The last index of the given array.\\n */\\nfunction last_index(array) {\\n    assert(array.length > 0);\\n    return array.length - 1;\\n}\\n\\n/**\\n * Array Jumping Game: You are given an array of integers where each element\\n * represents the maximum possible jump distance from that position.  For\\n * example, if you are at position i and your maximum jump length is n, then\\n * you can jump to any position from i to i+n.  Assuming you are initially\\n * positioned at the start of the array, determine whether you are able to\\n * reach the last index of the array.\\n *\\n * The problem statement doesn't say anything about whether the integers are\\n * negative, positive, or zero.  If an array element is a negative integer,\\n * does that mean we jump backward?  Let's make various assumptions to\\n * simplify the problem:\\n *\\n * (1) Each integer in the array is non-negative.\\n * (2) We start from the zeroth index of the array.\\n * (3) Each jump must be to the right, increasing the array index.\\n * (4) If the array element is zero, we cannot jump.\\n *\\n * Submit your answer as 1 (meaning true) or 0 (meaning false).\\n *\\n * Usage: run quack/cct/jump.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(end_reachable(array), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/jump.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/jump.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { Graph } from \\\"/quack/lib/network.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether we can jump from the current array cell.\\n *\\n * @param i Index of current array cell.\\n * @param array The array.\\n * @return true if we can jump from the current cell;\\n *     false otherwise;\\n */\\nfunction can_jump(i, array) {\\n    // Sanity checks.\\n    assert(i >= 0);\\n    assert(i < array.length);\\n    // Cannot jump if the maximum number of jumps is zero.\\n    if (array[i] === 0) {\\n        return bool.NO_JUMP;\\n    }\\n    // Cannot jump if we are at the last array cell.\\n    const last_index = array.length - 1;\\n    if (last_index === i) {\\n        return bool.NO_JUMP;\\n    }\\n    return bool.JUMP;\\n}\\n\\n/**\\n * The minimum number of jumps to reach the end of an array.\\n *\\n * @param array An array of non-negative integers.  Cannot be an empty array.\\n * @return The minimum number of jumps from the first to the last cell.  If we\\n *     cannot reach the last cell, then the minimum number is 0.\\n */\\nfunction minimum_jump(array) {\\n    assert(MyArray.all_nonnegative(array));\\n    // We interpret the array and its elements as a directed graph.  The\\n    // minimum jump length is found by computing the shortest path from the\\n    // first cell to the last cell.\\n    const start = 0;\\n    const end = array.length - 1;\\n    const graph = to_graph(array);\\n    const path = graph.shortest_path(start, end);\\n    // Cannot reach the last cell of the given array.\\n    if (path.length === 0) {\\n        return 0;\\n    }\\n    // We can reach the last cell of the array.\\n    assert(path.length > 0);\\n    const min_jump = path.length - 1;\\n    assert(min_jump > 0);\\n    return min_jump;\\n}\\n\\n/**\\n * Construct a directed, unweighted graph from the given array.\\n *\\n * @param array An array of non-negative integers.  Cannot be an empty array.\\n * @return A directed, unweighted graph representation of the given array.\\n */\\nfunction to_graph(array) {\\n    assert(array.length > 0);\\n    // First, add the nodes of the directed graph because the graph might be\\n    // disconnected.  Each node ID is an index of the given array.\\n    const node = MyArray.sequence(array.length);\\n    const graph = new Graph(bool.DIRECTED);\\n    node.forEach((v) => graph.add_node(v));\\n    // Add the directed edges of the graph.\\n    const last_index = array.length - 1;\\n    for (const u of node) {\\n        // Cannot jump from current array cell.\\n        if (!can_jump(u, array)) {\\n            continue;\\n        }\\n        // All possible jumps, where each jump distance is between 1 and\\n        // array[u], inclusive.\\n        const max_distance = array[u];\\n        assert(u < last_index);\\n        assert(max_distance > 0);\\n        for (let i = 1; i <= max_distance; i++) {\\n            const v = u + i;\\n            // Is v a valid index in array?\\n            if (v > last_index) {\\n                continue;\\n            }\\n            graph.add_edge(u, v);\\n        }\\n    }\\n    return graph;\\n}\\n\\n/**\\n * Array Jumping Game II: You are given an array of integers where each\\n * element represents the maximum possible jump distance from that position.\\n * For example, if you are at position i and your maximum jump length is n,\\n * then you can jump to any position from i to i+n.  Assuming you are\\n * initially positioned at the start of the array, determine the minimum\\n * number of jumps to reach the end of the array.  If it's impossible to\\n * reach the end, then the answer should be 0.\\n *\\n * This is similar to Array Jumping Game.  The only difference is that you\\n * must determine the smallest number of jumps to reach the end of the array.\\n * As with Array Jumping Game, we make various assumptions to simplify the\\n * problem:\\n *\\n * (1) Each integer in the array is non-negative.\\n * (2) We start from the zeroth index of the array, i.e. the first element.\\n * (3) Each jump must be to the right, increasing the array index.\\n * (4) If the array element is zero, we cannot jump.\\n *\\n * Usage: run quack/cct/jump2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const min_jump = minimum_jump(array);\\n    const result = ns.codingcontract.attempt(min_jump, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/jump2.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/jump2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\n\\n/**\\n * Compress a string using LZ encoding.  This function is due to\\n *\\n * stalefishies\\n * https://github.com/stalefishies\\n * https://github.com/danielyxie/bitburner/commit/174d17a5e20926745993969ede7ad1db9308036c\\n *\\n * Explanation by stalefish#8304 on Discord server of Bitburner:\\n *\\n * The basic idea is to add one character at a time, keeping all possible\\n * routes to optimal compression open. If we have N characters currently\\n * compressed, we can split that into two parts: all the chunks except the\\n * last, and then that last chunk. To add an (N+1)th character to the\\n * compressed string, we are going to either modify that last chunk to include\\n * the new character, or start a new chunk with the new character - we never\\n * modify any chunk except the last. Thus, to keep all possible routes open, we\\n * need to consider every possible final chunk, keeping track of the shortest\\n * 'all chunks except the last' string for each possible final chunk. That's\\n * what the state table keeps track of: the string stored in the table is the\\n * shortest 'all chunks except the last', and each table location corresponds\\n * to each possible last chunk.\\n *\\n * The code of this function is covered by this license:\\n * Apache 2.0 with Commons Clause\\n * https://github.com/danielyxie/bitburner/blob/dev/license.txt\\n *\\n * @param plain We want to compress this string.\\n * @return A compressed version of the input string.\\n */\\nfunction compress(plain) {\\n    // for state[i][j]:\\n    //      if i is 0, we're adding a literal of length j\\n    //      else, we're adding a backreference of offset i and length j\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\n    let new_state = Array.from(Array(10), () => Array(10));\\n\\n    function set(state, i, j, str) {\\n        const current = state[i][j];\\n        if (current === null || str.length < current.length) {\\n            // eslint-disable-next-line no-param-reassign\\n            state[i][j] = str;\\n        } else if (str.length === current.length && Math.random() < 0.5) {\\n            // if two strings are the same length, pick randomly so that\\n            // we generate more possible inputs to Compression II\\n            // eslint-disable-next-line no-param-reassign\\n            state[i][j] = str;\\n        }\\n    }\\n\\n    // initial state is a literal of length 1\\n    cur_state[0][1] = \\\"\\\";\\n\\n    for (let i = 1; i < plain.length; ++i) {\\n        for (const row of new_state) {\\n            row.fill(null);\\n        }\\n        const c = plain[i];\\n        // handle literals\\n        for (let length = 1; length <= 9; ++length) {\\n            const string = cur_state[0][length];\\n            if (string === null) {\\n                continue;\\n            }\\n            if (length < 9) {\\n                // extend current literal\\n                set(new_state, 0, length + 1, string);\\n            } else {\\n                // start new literal\\n                // prettier-ignore\\n                set(\\n                    new_state,\\n                    0,\\n                    1,\\n                    `${string}9${plain.substring(i - 9, i)}0`\\n                );\\n            }\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\n                if (plain[i - offset] === c) {\\n                    // start new backreference\\n                    // prettier-ignore\\n                    set(\\n                        new_state,\\n                        offset,\\n                        1,\\n                        string\\n                            + String(length)\\n                            + plain.substring(i - length, i)\\n                    );\\n                }\\n            }\\n        }\\n\\n        // handle backreferences\\n        for (let offset = 1; offset <= 9; ++offset) {\\n            for (let length = 1; length <= 9; ++length) {\\n                const string = cur_state[offset][length];\\n                if (string === null) {\\n                    continue;\\n                }\\n                if (plain[i - offset] === c) {\\n                    if (length < 9) {\\n                        // extend current backreference\\n                        set(new_state, offset, length + 1, string);\\n                    } else {\\n                        // start new backreference\\n                        set(\\n                            new_state,\\n                            offset,\\n                            1,\\n                            `${string}9${String(offset)}0`\\n                        );\\n                    }\\n                }\\n                // start new literal\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\n                // end current backreference and start new backreference\\n                for (\\n                    let new_offset = 1;\\n                    new_offset <= Math.min(9, i);\\n                    ++new_offset\\n                ) {\\n                    if (plain[i - new_offset] === c) {\\n                        set(\\n                            new_state,\\n                            new_offset,\\n                            1,\\n                            `${string + String(length) + String(offset)}0`\\n                        );\\n                    }\\n                }\\n            }\\n        }\\n\\n        const tmp_state = new_state;\\n        new_state = cur_state;\\n        cur_state = tmp_state;\\n    }\\n\\n    let result = null;\\n\\n    for (let len = 1; len <= 9; ++len) {\\n        let string = cur_state[0][len];\\n        if (string === null) {\\n            continue;\\n        }\\n        string\\n            += String(len) + plain.substring(plain.length - len, plain.length);\\n        if (result === null || string.length < result.length) {\\n            result = string;\\n        } else if (string.length === result.length && Math.random() < 0.5) {\\n            result = string;\\n        }\\n    }\\n\\n    for (let offset = 1; offset <= 9; ++offset) {\\n        for (let len = 1; len <= 9; ++len) {\\n            let string = cur_state[offset][len];\\n            if (string === null) {\\n                continue;\\n            }\\n            string += `${String(len)}${String(offset)}`;\\n            if (result === null || string.length < result.length) {\\n                result = string;\\n            } else if (string.length === result.length && Math.random() < 0.5) {\\n                result = string;\\n            }\\n        }\\n    }\\n\\n    return result ?? \\\"\\\";\\n}\\n\\n/**\\n * Compression III: LZ Decompression: Lempel-Ziv (LZ) compression is a data\\n * compression technique that encodes data using references to earlier parts of\\n * the data.  In this variant of LZ, data is encoded as two types of chunk.\\n * Each chunk begins with a length L, encoded as a single ASCII digit from 1 to\\n * 9, followed by the chunk data, which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data.  To do this, the\\n *    length is followed by a second ASCII digit X.  Each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends\\n * immediately, and the next character is the start of a new chunk.  The two\\n * chunk types alternate, starting with type 1, and the final chunk may be of\\n * either type.  You are given a string as input.  Encode it using Lempel-Ziv\\n * encoding with the minimum possible output length.\\n *\\n * Usage: run quack/cct/lzc.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const data = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(compress(data), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/lzc.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/lzc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { lzchunk } from \\\"/quack/lib/constant/cct.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Use a variant of the Lempel-Ziv (LZ) algorithm to decompress a string.  The\\n * string is assumed to follow the format\\n *\\n * C_1 C_2 C_3 ... C_n\\n *\\n * where C_i is the i-th chunk of the string.  Each chunk has two parts:\\n *\\n * (1) L := The length of an uncompressed portion of data.  The length L is an\\n *     integer between 1 and 9, inclusive.  The length number is the first part\\n *     of any chunk.\\n * (2) data := The chunk data, which is the second part of any chunk.  The\\n *     chunk data can be further decomposed into two types:\\n *     (a) Literal characters.  A chunk with this second part is denoted as\\n *         \\\"L<string>\\\", where <string> is a string of L characters.  We append\\n *         these L characters directly into the uncompressed string.  For\\n *         example, given the chunk \\\"3abc\\\", the digit \\\"3\\\" is the first part of\\n *         the chunk and the string \\\"abc\\\" is the second part.  The length 3,\\n *         together with the string, tells us to copy the first 3 characters of\\n *         the string and append the characters to the uncompressed data.  That\\n *         is, we append the string \\\"abc\\\" to our uncompressed data.\\n *     (b) An ASCII digit X.  A chunk having this second part is denoted as\\n *         \\\"LX\\\", where X is a decimal digit between 1 and 9, inclusive.  The\\n *         value of X tells us how many characters in the uncompressed string\\n *         to backtrack.  Going from right to left in the uncompressed string,\\n *         we traverse X locations, copy the character at the X-th location,\\n *         and append the character to our uncompressed string.  Repeat the\\n *         process as many times as necessary until we have appended L\\n *         characters.  For example, suppose we have the chunk \\\"53\\\" and our\\n *         (still incomplete) uncompressed string is \\\"abcd\\\".  The first part\\n *         \\\"5\\\" tells us how many characters to append to the uncompressed\\n *         string.  The second part \\\"3\\\" tells us to backtrack 3 positions in\\n *         the uncompressed string to locate the character to copy and append.\\n *         Here's how to obtain the first character to append.  Going from\\n *         right to left in the uncompressed string \\\"abcd\\\", we backtrack to the\\n *         3rd character, namely \\\"b\\\".  We copy this character and append it to\\n *         our uncompressed string, resulting in the new uncompressed string\\n *         \\\"abcdb\\\".  One down, four to go.  For our second character, we\\n *         backtrack 3 locations in the uncompressed string \\\"abcdb\\\" to arrive\\n *         at \\\"c\\\".  Copy and append this character to produce the new\\n *         uncompressed string \\\"abcdbc\\\".  Two down, three to go.  The third\\n *         character to copy and append is \\\"d\\\", resulting in the uncompressed\\n *         string \\\"abcdbcd\\\".  The fourth character we want is \\\"b\\\" and we now\\n *         have the uncompressed string \\\"abcdbcdb\\\".  Our fifth character is\\n *         \\\"c\\\" and our uncompressed string is \\\"abcdbcdbc\\\".\\n *\\n * The chunk type alternates and we always start with a chunk of the type\\n * L<string>.  The compressed data follows the format\\n *\\n * L<string> LX L<string> LX ...\\n *\\n * If L := 0, the chunk ends immediately and we start a new chunk of the type\\n * different from the previous type.  A portion of the compressed data might be\\n *\\n * ... L<string> 0 L<string> ...\\n *\\n * or, as another example,\\n *\\n * ... LX 0 LX ...\\n *\\n * The above rules help us to make sense of the compressed data \\\"312312021\\\".\\n * We have these chunks: \\\"3123\\\", \\\"12\\\", \\\"0\\\", \\\"21\\\".  The uncompressed string is\\n * \\\"123222\\\".  Refer to the following for more details on the LZ algorithm.\\n *\\n * [1] J. Ziv and A. Lempel.  A universal algorithm for sequential data\\n *     compression.  IEEE Transactions on Information Theory, volume 23,\\n *     issue 3, pp.337--343, 1977.\\n *     DOI: 10.1109/TIT.1977.1055714\\n * [2] Colt McAnlis and Aleks Haecky.  Understanding Compression: Data\\n *     Compression for Modern Developers.  O'Reilly, 2016.\\n * [3] The Hitchhiker's Guide to Compression\\n *     https://go-compression.github.io/\\n *\\n * @param data We want to decompress this string.  The string is assumed to be\\n *     the output of a variant of the LZ compression algorithm.  Cannot be an\\n *     empty string.\\n * @return The decompressed string corresponding to the input data.\\n */\\nfunction decompress(data) {\\n    assert(data.length > 0);\\n    // Always start with the chunk format L<string>.\\n    let chunk_type = lzchunk.LS;\\n    // Where are we in the compressed string?\\n    let i = 0;\\n    // The uncompressed string.\\n    let result = \\\"\\\";\\n    while (i < data.length) {\\n        const ell = parseInt(data[i], base.DECIMAL);\\n        // Is this chunk of type L<string>?\\n        if (lzchunk.LS === chunk_type) {\\n            // Do we end the chunk now?\\n            if (end_now(ell)) {\\n                i++;\\n                chunk_type = lzchunk.LX;\\n                continue;\\n            }\\n            // Copy the following L characters and append them to the\\n            // uncompressed string.\\n            const start = i + 1;\\n            const end = start + ell;\\n            result = result.concat(data.slice(start, end));\\n            chunk_type = lzchunk.LX;\\n            i = end;\\n            continue;\\n        }\\n        // This chunk is of type LX, which has 2 characters.\\n        assert(lzchunk.LX === chunk_type);\\n        // Do we end the chunk now?\\n        if (end_now(ell)) {\\n            i++;\\n            chunk_type = lzchunk.LS;\\n            continue;\\n        }\\n        // Backtrack X characters in the uncompressed string.  Copy and append\\n        // the X-th character to the uncompressed string.  Repeat L times.\\n        const x = parseInt(data[i + 1], base.DECIMAL);\\n        for (let j = 0; j < ell; j++) {\\n            const k = result.length - x;\\n            result = result.concat(result[k]);\\n        }\\n        chunk_type = lzchunk.LS;\\n        i += 2;\\n    }\\n    return result;\\n}\\n\\n/**\\n * Whether to end a chunk now.  Each chunk is either of the formats L<string>\\n * or LX.  Here, L is a decimal digit between 0 and 9, inclusive.\\n *\\n * @param ell The first part of any chunk, denoted as L.  Assumed to be a\\n *     decimal digit between 0 and 9, inclusive.\\n * @return true if a chunk ends now; false otherwise.\\n */\\nfunction end_now(ell) {\\n    return ell === 0;\\n}\\n\\n/**\\n * Compression II: LZ Decompression: Lempel-Ziv (LZ) compression is a data\\n * compression technique that encodes data using references to earlier parts of\\n * the data.  In this variant of LZ, data is encoded as two types of chunk.\\n * Each chunk begins with a length L, encoded as a single ASCII digit from 1 to\\n * 9, followed by the chunk data, which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data.  To do this, the\\n *    length is followed by a second ASCII digit X.  Each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends\\n * immediately, and the next character is the start of a new chunk.  The two\\n * chunk types alternate, starting with type 1, and the final chunk may be of\\n * either type.  You are given an LZ-encoded string.  Decode it and output the\\n * original string.\\n *\\n * Usage: run quack/cct/lzd.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const data = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(decompress(data), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/lzd.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/lzd.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * All valid mathematical expressions, each of which evaluates to a target\\n * number.  Each expression results from inserting zero, one, or more of the\\n * following operators between decimal digits: addition (+), subtraction (-),\\n * multiplication (*).\\n *\\n * @param digit A string of decimal digits.  Cannot be empty.\\n * @param target An expression must evaluate to this number.\\n * @returns An array of strings, each of which is an expression that evaluates\\n *     to the target number.\\n */\\nfunction all_expressions(digit, target) {\\n    assert(digit.length > 0);\\n    return Array.from(expressions(digit, target));\\n}\\n\\n/**\\n * Generate all mathematical expressions that evaluate to a target value.  An\\n * expression can use each of these symbols zero, one, or more times:\\n *\\n * (1) addition (+)\\n * (2) subtraction (-)\\n * (3) multiplication (*)\\n *\\n * The algorithm is due to Janne Karila, who provided a Python implementation at\\n *\\n * https://codereview.stackexchange.com/a/163303\\n *\\n * This generator function is a JavaScript translation of Karila's Python code.\\n *\\n * @param digit A string containing a bunch of decimal digits.\\n * @param target Any mathematical expression created from the given digits must\\n *     evaluate to this number.\\n * @param k The multiplication factor.\\n */\\nfunction* expressions(digit, target, k = 1) {\\n    for (let i = 1; i < digit.length; i++) {\\n        // For any given index i in the digit string, we split the string into\\n        // 2 parts:\\n        //\\n        // (1) left := The left part of the digit string consists of all digits\\n        //     from index 0 up to and including index i - 1.  We can think of\\n        //     the left part as already been evaluated, searched, or\\n        //     considered.  The left part is therefore the prefix upon which\\n        //     new expressions can be built.\\n        // (2) right := The right part of the digit string consists of all\\n        //     digits from index i onward.  Think of the right part as digits\\n        //     we have yet to consider.  We use digits in the right part to\\n        //     construct longer expressions based upon the left part.\\n        const left = digit.slice(0, i);\\n        const right = digit.slice(i);\\n        const n = k * parseInt(left, base.DECIMAL);\\n        for (const e of expressions(right, target, n)) {\\n            yield `${left}*${e}`;\\n        }\\n        for (const e of expressions(right, target - n)) {\\n            yield `${left}+${e}`;\\n        }\\n        for (const e of expressions(right, target - n, -1)) {\\n            yield `${left}-${e}`;\\n        }\\n        // Do we have a leading zero?\\n        if (left === \\\"0\\\") {\\n            return;\\n        }\\n    }\\n    if (k * parseInt(digit, base.DECIMAL) === target) {\\n        yield digit;\\n    }\\n}\\n\\n/**\\n * Find All Valid Math Expressions: You are given an array containing two\\n * elements.  The first element is a string that contains only digits between\\n * 0 and 9.  The second element is a target number.  Return all possible ways\\n * you can add the +, -, and * operators to the string of digits such that it\\n * evaluates to the target number.  The answer should be provided as an array\\n * of strings containing the valid expressions.\\n * NOTE: Numbers in an expression cannot have leading 0s.\\n * NOTE: The order of evaluation expects script operator precedence.\\n *\\n * Example 1:\\n * Input: digits = \\\"123\\\", target = 6\\n * Output: [1+2+3, 1*2*3]\\n *\\n * Example 2:\\n * Input: digits = \\\"105\\\", target = 5\\n * Output: [1*0+5, 10-5]\\n *\\n * In Example 1, we have two possible valid solutions.  Note that the\\n * expression \\\"1*-2*-3\\\" also evaluates to 6.  From the problem description, we\\n * infer the following restrictions on any solution we output.\\n *\\n * (1) Each decimal digit is non-negative.\\n * (2) We are not allowed to flip the sign of a digit.  For example, in the\\n *     expression \\\"1*-2*-3\\\" we flipped the sign of the digit \\\"2\\\" from positive\\n *     to negative.  Thus the expression \\\"1*-2*-3\\\" is an invalid solution,\\n *     although it evaluates to the target number.\\n * (3) We are not allowed to insert the operator \\\"-\\\" at index 0 of the digit\\n *     string.\\n * (4) The digit string does not have \\\"0\\\" at index 0.\\n * (5) An operand can be zero, but it cannot have a leading zero.  For example,\\n *     an expression such as \\\"1+0+3\\\" is accepted, but the expression \\\"1+03\\\" is\\n *     invalid because the operand \\\"03\\\" has a leading zero.\\n *\\n * Usage: run quack/cct/maths.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [string, target] = ns.codingcontract.getData(cct, host);\\n    const solution = all_expressions(string, target);\\n    const result = ns.codingcontract.attempt(solution, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/maths.txt\\\";\\n        const data = `${string}, ${target}`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/maths.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { parenthesis } from \\\"/quack/lib/constant/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether the parentheses in the given expression are balanced.  An empty\\n * string does not have parentheses, hence its parentheses are unbalanced.\\n *\\n * @param expression A string consisting of parentheses and other characters.\\n *     The parentheses in this string are possibly unbalanced.  Cannot be an\\n *     empty string.\\n * @return true if the parentheses in the given expression are balanced;\\n *     false otherwise.\\n */\\nfunction is_balanced(expression) {\\n    if (expression.length === 0) {\\n        return bool.INVALID;\\n    }\\n    // The stack data structure is perfect for this problem.\\n    const stack = [];\\n    for (const c of expression) {\\n        // Is this character the starting parenthesis?\\n        if (parenthesis.OPEN === c) {\\n            stack.push(c);\\n            continue;\\n        }\\n        // Is this character the ending parenthesis?\\n        if (parenthesis.CLOSE === c) {\\n            // We have an ending parenthesis, but the stack is empty.\\n            if (stack.length === 0) {\\n                return bool.INVALID;\\n            }\\n            // This ending parenthesis must be matched with an opening\\n            // parenthesis at the top of the stack.\\n            if (parenthesis.OPEN === stack[stack.length - 1]) {\\n                stack.pop();\\n                continue;\\n            }\\n            // We encounter a closing parenthesis, but the top of the stack\\n            // does not contain an opening parenthesis.\\n            return bool.INVALID;\\n        }\\n    }\\n    // Every opening parenthesis should be matched with a closing parenthesis.\\n    // If the stack has zero elements, then the expression is balanced.\\n    return stack.length === 0;\\n}\\n\\n/**\\n * Whether a character represents an opening or closing parenthesis.\\n *\\n * @param c A character.\\n * @return true if the given character is a parenthesis; false otherwise.\\n */\\nfunction is_parenthesis(c) {\\n    assert(c.length === 1);\\n    if (parenthesis.OPEN === c || parenthesis.CLOSE === c) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Slice an expression by removing a character at the given index.\\n *\\n * @param expr We want to prune one character from this expression.  The\\n *     expression is represented as a string.\\n * @param i Remove the character expr[i] at index i.\\n * @return A sub-expression obtained by removing from expr the character\\n *     at index i.  We do not modify the given expression.\\n */\\nfunction slice(expr, i) {\\n    // Sanity checks.\\n    assert(expr.length > 0);\\n    assert(i >= 0);\\n    assert(i < expr.length);\\n    // Remove the character at index i.\\n    return expr.slice(0, i) + expr.slice(i + 1, expr.length);\\n}\\n\\n/**\\n * Sanitize parentheses in an expression by removing the minimum number of\\n * parentheses such that the resulting expression has balanced parentheses.\\n * The problem can be considered from a combinatorial perspective.  We\\n * determine the minimum number k of parentheses to remove.  Let n be the\\n * number of parentheses in the expression, including both opening and closing\\n * parentheses.  We find all possible k-combinations of the n parentheses.  For\\n * each k-combination, we remove the corresponding parentheses from the\\n * expression and let the resulting expression be expr.  If expr has balanced\\n * parentheses, then add expr to our set of solutions.  The difficult part of\\n * this method is choosing an algorithm for generating all k-combinations from\\n * a set of n objects.  Some algorithms run in exponential time while others\\n * run in factorial time, which is worse than exponential time.  Refer to these\\n * pages for more details:\\n *\\n * https://medium.com/enjoy-algorithm/find-all-possible-combinations-of-k-numbers-from-1-to-n-88f8e3fad33c\\n * https://stackoverflow.com/questions/127704/algorithm-to-return-all-combinations-of-k-elements-from-n\\n *\\n * A simpler method consists of scanning the expression one character at a\\n * time.  For each index i, if the character at index i is a parenthesis, we\\n * form a new expression by removing the character at index i in the current\\n * expression.  Thus we have an array of new expressions, each constructed by\\n * removing one parenthesis from the current expression.  Test each of these\\n * new expressions to see whether any of them have balanced parentheses.  We\\n * have two cases:\\n *\\n * (1) At least one of the new expressions has balanced parentheses.  Our\\n *     solution set consists of all new expressions that have balanced\\n *     parentheses.\\n * (2) None of the new expressions have balanced parentheses.  Apply the above\\n *     scanning algorithm to these new expressions and repeat the above\\n *     process.\\n *\\n * The above method follows a pattern similar to breath-first search.  As soon\\n * as we encounter a sub-expression that has balanced parentheses, we no longer\\n * need to remove one character to form new sub-expressions.\\n *\\n * @param string An expression containing parentheses and other characters.\\n *     The parentheses in the expression are possibly unbalanced.\\n * @return An array of strings.  Each string has balanced parentheses.  We\\n *     removed the same number of parentheses to result in each balanced\\n *     expression.\\n */\\nfunction sanitize(string) {\\n    assert(string.length > 0);\\n    // Test the expression at the start of this array.\\n    const queue = [];\\n    queue.push(string);\\n    // All expressions and sub-expressions we have considered.\\n    const seen = new Set();\\n    seen.add(string);\\n    // All expressions that have balanced parentheses.\\n    const result = [];\\n    // Whether we need to prune one parenthesis from an expression to\\n    // create a new sub-expression.\\n    let prune = true;\\n    // Use a pattern similar to breath-first search to test expressions and\\n    // their sub-expressions.  Let exprA and exprB be expressions.  We consider\\n    // them as nodes in a directed graph.  If exprB can be obtained by removing\\n    // one parenthesis from exprA, then there is a directed edge from exprA\\n    // to exprB.\\n    while (queue.length > 0) {\\n        // Get the first element of the queue.\\n        const expr = queue.shift();\\n        // Does this expression have balanced parentheses?\\n        if (is_balanced(expr)) {\\n            result.push(expr);\\n            // We have removed enough number of parentheses to result in at\\n            // least one sub-expression having balanced parentheses.  No more\\n            // pruning needed.\\n            prune = false;\\n        }\\n        // Do we need to prune a parenthesis from the current sub-expression?\\n        if (!prune) {\\n            continue;\\n        }\\n        // Prune a parenthesis from the current expression.  Each sub-expression\\n        // is obtained by removing a character at index i, provided that the\\n        // character is a parenthesis.\\n        for (let i = 0; i < expr.length; i++) {\\n            if (!is_parenthesis(expr[i])) {\\n                continue;\\n            }\\n            const sub_expr = slice(expr, i);\\n            if (seen.has(sub_expr)) {\\n                continue;\\n            }\\n            queue.push(sub_expr);\\n            seen.add(sub_expr);\\n        }\\n    }\\n    return result;\\n}\\n\\n/**\\n * Sanitize Parentheses in Expression: Given a string with parentheses and\\n * letters, remove the minimum number of invalid parentheses in order to\\n * validate the string.  If there are multiple minimal ways to validate the\\n * string, provide all of the possible results.  The answer should be provided\\n * as an array of strings.  If it is impossible to validate the string, the\\n * result should be an array with only an empty string.\\n *\\n * This is essentially the balanced brackets problem.  The twist is that we\\n * must remove the minimum number of parentheses to balance the parentheses.\\n *\\n * Usage: run quack/cct/parenthesis.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const expression = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(sanitize(expression), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/parenthesis.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, expression);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/parenthesis.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":393,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The largest prime factor of a positive integer.\\n *\\n * @param n A positive integer greater than 1.\\n * @return The largest prime factor of the given integer.\\n */\\nfunction max_prime_factor(n) {\\n    // Sanity checks.\\n    assert(n > 1);\\n    assert(Number.isSafeInteger(n));\\n    // Determine the largest prime factor.\\n    let k = Number(n);\\n    let p = k;\\n    // Divide n by the prime 2.\\n    while (k % 2 === 0) {\\n        k /= 2;\\n        p = 2;\\n    }\\n    // Use trial division to divide n by increasingly larger primes.  Start with\\n    // the next higher prime, i.e. 3.\\n    let i = 3;\\n    const max = Math.ceil(Math.sqrt(n));\\n    while (i <= max) {\\n        // The number i is an odd integer.  If i is a factor of k, then i is the\\n        // highest prime factor of n so far.\\n        while (k % i === 0 && k > 1) {\\n            k /= i;\\n            p = i;\\n        }\\n        i += 2;\\n    }\\n    p = k > 1 ? k : p;\\n    return p;\\n}\\n\\n/**\\n * Find Largest Prime Factor: Given a number, find its largest prime\\n * factor.  A prime factor is a factor that is a prime number.\\n *\\n * Determine the largest prime factor of an integer.  See Wikipedia for\\n * more details:\\n *\\n * https://en.wikipedia.org/wiki/Integer_factorization\\n *\\n * Usage: run quack/cct/prime.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const n = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(max_prime_factor(n), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/prime.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, n);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/prime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Encode a string that consists of the same character.\\n *\\n * @param c A character.\\n * @param n The run-length of the given character.\\n * @return A run-length encoding of the given character.\\n */\\nfunction encode(c, n) {\\n    assert(c.length === 1);\\n    assert(n > 0);\\n    let k = n;\\n    const max = 9;\\n    if (k <= max) {\\n        return `${k}${c}`;\\n    }\\n    // A run-length of more than 9 is split into multiple runs.\\n    const s = [];\\n    do {\\n        s.push(`${max}${c}`);\\n        k -= max;\\n    } while (k > max);\\n    s.push(`${k}${c}`);\\n    return s.join(\\\"\\\");\\n}\\n\\n/**\\n * The run-length encoding (RLE) of a string.\\n *\\n * @param string We want to compress this string by means of run-length\\n *     encoding.\\n * @return The RLE of the given string.\\n */\\nfunction rle(string) {\\n    const str = string;\\n    let n = 1;\\n    let c = str[0];\\n    const e = [];\\n    const lastidx = string.length - 1;\\n    for (let i = 1; i < str.length; i++) {\\n        // Is this character the same as the previous character?\\n        if (c === str[i]) {\\n            n++;\\n            // Are we at the end of the string?\\n            if (i === lastidx) {\\n                e.push(encode(c, n));\\n                break;\\n            }\\n            continue;\\n        }\\n        // The current character is different from the previous character.\\n        e.push(encode(c, n));\\n        n = 1;\\n        c = str[i];\\n        // Are we at the end of the string?\\n        if (i === lastidx) {\\n            e.push(encode(c, n));\\n        }\\n    }\\n    return e.join(\\\"\\\");\\n}\\n\\n/**\\n * Compression I: RLE Compression: Run-length encoding (RLE) is a data\\n * compression technique which encodes data as a series of runs of a repeated\\n * single character.  Runs are encoded as a length, followed by the character\\n * itself.  Lengths are encoded as a single ASCII digit.  Runs of 10 characters\\n * or more are encoded by splitting them into multiple runs.  You are given a\\n * string as input.  Encode it using run-length encoding with the minimum\\n * possible output length.\\n *\\n * Usage: run quack/cct/rle.js [cct] [hostname]\\n *\\n * @param ns\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const string = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(rle(string), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/rle.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, string);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/rle.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":397,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { cct } from \\\"/quack/lib/constant/cct.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Do we have enough free RAM on the home server to run the given script?\\n *\\n * @param ns The Netscript API.\\n * @param script We want to run this script on our home server.\\n * @return True if enough free RAM is available to execute the script;\\n *     false otherwise.\\n */\\nfunction can_run_script(ns, script) {\\n    const server = new Server(ns, home);\\n    return server.can_run_script(script);\\n}\\n\\n/**\\n * Whether a server has Coding Contracts (CCTs).\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a server.\\n * @return True if the given server has CCTs; false otherwise.\\n */\\nfunction has_cct(ns, host) {\\n    return ns.ls(host, cct.SUFFIX).length > 0;\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Solve a Coding Contract (CCT).\\n *\\n * @param ns The Netscript API.\\n * @param fname The file name of the CCT.\\n * @param host The hostname of the server on which the CCT is located.\\n * @return True if we successfully launched a script to solve the given CCT;\\n *     false otherwise.\\n */\\nfunction solve(ns, fname, host) {\\n    const nthread = 1;\\n    const type = ns.codingcontract.getContractType(fname, host);\\n    // Determine the type of the CCT and set the appropriate solution script.\\n    let script = \\\"\\\";\\n    const prefix = \\\"/quack/cct/\\\";\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            script = `${prefix}trader.js`;\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            script = `${prefix}trader2.js`;\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            script = `${prefix}trader3.js`;\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            script = `${prefix}trader4.js`;\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            script = `${prefix}jump.js`;\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            script = `${prefix}jump2.js`;\\n            break;\\n        case \\\"Compression I: RLE Compression\\\":\\n            script = `${prefix}rle.js`;\\n            break;\\n        case \\\"Compression II: LZ Decompression\\\":\\n            script = `${prefix}lzd.js`;\\n            break;\\n        case \\\"Compression III: LZ Compression\\\":\\n            script = `${prefix}lzc.js`;\\n            break;\\n        case \\\"Encryption I: Caesar Cipher\\\":\\n            script = `${prefix}caesar.js`;\\n            break;\\n        case \\\"Encryption II: Vigenère Cipher\\\":\\n            script = `${prefix}vigenere.js`;\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            script = `${prefix}maths.js`;\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            script = `${prefix}prime.js`;\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            script = `${prefix}ip.js`;\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            script = `${prefix}hamming2.js`;\\n            break;\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\n            script = `${prefix}hamming.js`;\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            script = `${prefix}interval.js`;\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            script = `${prefix}triangle.js`;\\n            break;\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\n            script = `${prefix}bipartite.js`;\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            script = `${prefix}parenthesis.js`;\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            script = `${prefix}grid3.js`;\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            script = `${prefix}spiral.js`;\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            script = `${prefix}subarray.js`;\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            script = `${prefix}sum.js`;\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            script = `${prefix}sum2.js`;\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            script = `${prefix}grid.js`;\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            script = `${prefix}grid2.js`;\\n            break;\\n        default:\\n            script = \\\"\\\";\\n            break;\\n    }\\n    // No script to run, possibly because there are no CCTs on any of the world\\n    // servers.\\n    if (script.length < 1) {\\n        return true;\\n    }\\n    // Run the appropriate script to solve the CCT.\\n    if (can_run_script(ns, script)) {\\n        ns.exec(script, home, nthread, fname, host);\\n        return true;\\n    }\\n    // const pre = `${host}: ${fname}`;\\n    // const msg = `No free RAM to run ${script} on ${home}`;\\n    // log(ns, `${pre}: ${msg}`, colour.RED);\\n    return false;\\n}\\n\\n/**\\n * Solve all Coding Contracts (CCTs) found on a world server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a server where CCTs are found.\\n * @return True if we successfully launched scripts to solve all CCTs on the\\n *     given server; false otherwise.\\n */\\nfunction solve_all(ns, host) {\\n    assert(host !== \\\"\\\");\\n    const file = ns.ls(host, cct.SUFFIX);\\n    const is_solved = (f) => solve(ns, f, host);\\n    return file.every(is_solved);\\n}\\n\\n/**\\n * Find Coding Contracts (CCTs) on world servers.  This script essentially\\n * searches the network of world servers to find CCTs.\\n *\\n * Usage: run quack/cct/solver.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    const server = network(ns);\\n    server.push(home);\\n    // Continuously search for CCTs.  Solve a CCT, provided we have a solution\\n    // script.\\n    const unsolved = (serv) => !solve_all(ns, serv);\\n    for (;;) {\\n        let host = server.filter((s) => has_cct(ns, s));\\n        while (host.length > 0) {\\n            host = host.filter(unsolved);\\n            await ns.sleep(wait_t.DEFAULT);\\n        }\\n        await ns.sleep(cct.UPDATE_TIME);\\n    }\\n}\\n\",\"filename\":\"/quack/cct/solver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":13.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    matrix_to_string,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Trace out a ring inside a 2-D matrix.\\n *\\n * @param m A 2-D matrix, represented as an array of arrays.\\n * @param [tlr, tlc] The coordinates of the top-left element of the ring.\\n *     \\\"r\\\" and \\\"c\\\" mean row and column, respectively.\\n * @param [brr, brc] The coordinates of the bottom-right element of the ring.\\n *     \\\"r\\\" and \\\"c\\\" mean row and column, respectively.\\n */\\nfunction ring(m, tlr, tlc, brr, brc) {\\n    // Top-left to top-right.\\n    let array = [];\\n    let elem = [];\\n    assert(tlc <= brc);\\n    array = m[tlr];\\n    elem = Array.from(array.slice(tlc, brc + 1));\\n    // Is this a matrix of one row?\\n    if (tlr === brr) {\\n        return elem;\\n    }\\n    // Top-right to bottom-right.\\n    assert(tlr < brr);\\n    for (let r = tlr + 1; r <= brr; r++) {\\n        elem.push(m[r][brc]);\\n    }\\n    // Do we have a matrix of one column?\\n    if (tlc === brc) {\\n        return elem;\\n    }\\n    // Bottom-right to bottom-left.\\n    assert(tlc < brc);\\n    array = m[brr];\\n    array = Array.from(array.slice(tlc, brc));\\n    elem = elem.concat(array.reverse());\\n    // Bottom-left to top-left.\\n    array = [];\\n    for (let r = tlr + 1; r < brr; r++) {\\n        array.push(m[r][tlc]);\\n    }\\n    elem = elem.concat(array.reverse());\\n    return elem;\\n}\\n\\n/**\\n * The elements of a 2-D matrix in spiral order, going in clockwise direction.\\n *\\n * @param m A 2-D matrix, represented as an array of arrays.\\n * @return An array representing the elements of the matrix in spiral order.\\n */\\nfunction spiral(m) {\\n    // Sanity checks.\\n    assert(m.length > 0);\\n    const array = m[0];\\n    const nrow = m.length;\\n    const ncol = array.length;\\n    for (const a of m) {\\n        // Ensure each row has the same number of elements.\\n        assert(a.length > 0);\\n        assert(ncol === a.length);\\n    }\\n    // The spiral order of a matrix.\\n    let tlr = 0; // top-left row\\n    let tlc = tlr; // top-left column\\n    let brr = nrow - 1; // bottom-right row\\n    let brc = ncol - 1; // bottom-right column\\n    let elem = [];\\n    while (tlr <= brr && tlc <= brc) {\\n        elem = elem.concat(ring(m, tlr, tlc, brr, brc));\\n        tlr++;\\n        tlc++;\\n        brr--;\\n        brc--;\\n    }\\n    return elem;\\n}\\n\\n/**\\n * Spiralize Matrix: Given an array of array of numbers representing a 2-D\\n * matrix, return the elements of that matrix in clockwise spiral order.\\n *\\n * Output the elements of a 2-D matrix in spiral order, going in clockwise\\n * direction.\\n *\\n * Usage: run quack/cct/spiral.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const matrix = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(spiral(matrix), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/spiral.txt\\\";\\n        const data = matrix_to_string(matrix);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/spiral.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The largest sum of a non-empty, contiguous subarray.\\n *\\n * @param array An array of integers.\\n * @return The largest sum of any non-empty, contiguous subarray of the given\\n *     array.\\n */\\nfunction subarray_sum(array) {\\n    // Use Kadane's algorithm.\\n    assert(array.length > 0);\\n    let best = Number.NEGATIVE_INFINITY;\\n    let current = 0;\\n    for (const n of array) {\\n        current = Math.max(n, current + n);\\n        best = Math.max(best, current);\\n    }\\n    return best;\\n}\\n\\n/**\\n * Subarray with Maximum Sum: Given an array of integers, find the\\n * contiguous subarray (containing at least one number) which has the\\n * largest sum and return that sum.\\n *\\n * Determine a non-empty, contiguous subarray that has the largest sum\\n * possible.  See Wikipedia for more details:\\n *\\n * https://en.wikipedia.org/wiki/Maximum_subarray_problem\\n *\\n * Usage: run quack/cct/subarray.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(subarray_sum(array), cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/subarray.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/subarray.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The number of possible partitions of a non-negative integer n.  That is,\\n * the number of ways to write n as a sum of positive integers.  In number\\n * theory, the partition function p(n) solves the problem.  One solution is to\\n * use a recurrence relation due to Euler, derived from using Euler's pentagonal\\n * number theorem.  The recurrence relation is\\n *\\n * p(n) := \\\\sum_{k \\\\in PP} (-1)^{k-1} \\\\{ A + B \\\\}\\n *\\n * where\\n *\\n * A := p(n - k(3k - 1) / 2)\\n * B := p(n - k(3k + 1) / 2)\\n * PP := The set of all positive integers.\\n *\\n * In practice, we only sum up to and including k := n.  Another way to\\n * calculate p(n) is to note that p(n) is the coefficient of z^n in the\\n * generating function\\n *\\n * P(z) = \\\\prod_{i=1}^n \\\\frac{1}{1 - z^i}\\n *\\n * Calculating the coefficient of z^n is straightforward.  Refer to the\\n * following for more details:\\n *\\n * [1] https://en.wikipedia.org/wiki/Pentagonal_number_theorem\\n * [2] On Euler's Pentagonal Theorem\\n *     https://www.mathpages.com/home/kmath623/kmath623.htm\\n * [3] John A. Ewell.  Recurrences for the Partition Function and Its Relatives.\\n *     Rocky Mountain Journal of Mathematics, volume 34, issue 2, pp.619--627,\\n *     2004.\\n *     DOI: 10.1216/rmjm/1181069871\\n *\\n * @param n We want to determine the number of partitions of this number.\\n *     Must be a non-negative integer.\\n * @return Possible values:\\n *     (1) 1 if n = 0.\\n *     (2) 0 if n < 0.\\n *     (3) p(n)\\n */\\nfunction partition(n) {\\n    assert(n >= 0);\\n    if (n === 0) {\\n        return 1;\\n    }\\n    // Use an array of n + 1 elements because we also need to take care of the\\n    // base case.\\n    const cache = Array(n + 1).fill(0);\\n    cache[0] = 1;\\n    for (let i = 1; i <= n; i++) {\\n        for (let j = i; j <= n; j++) {\\n            cache[j] += cache[j - i];\\n        }\\n    }\\n    return cache[n];\\n}\\n\\n/**\\n * Total Ways to Sum: Given a number, how many different distinct ways can\\n * that number be written as a sum of at least two positive integers?\\n *\\n * This is the problem of integer partition, in particular calculating\\n * the partition number of a positive integer.  The problem asks for a\\n * partition that has at least two parts, so we must subtract 1 from\\n * the partition number.  See Wikipedia for more details:\\n *\\n * https://en.wikipedia.org/wiki/Partition_(number_theory)\\n * https://en.wikipedia.org/wiki/Partition_function_(number_theory)\\n *\\n * Use the method of generating function.\\n *\\n * Usage: run quack/cct/sum.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const n = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(partition(n) - 1, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/sum.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, n);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/sum.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":405,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The number of ways to change n using coins in the given set of denominations.\\n *\\n * @param n We want to partition this number.  Must be a positive integer.\\n * @param denom The array of denominations.  An array of positive integers to\\n *     use to partition n.  Elements of the array are unique.\\n * @return The number of ways to change n using the given denominations.\\n */\\nfunction coin_change(n, denom) {\\n    assert(n > 0);\\n    assert(denom.length > 0);\\n    // Sort the array of denominations in ascending order.\\n    let denomination = Array.from(new Set(denom));\\n    denomination = MyArray.sort_ascending(denomination);\\n    // Remove any coin value higher than n.\\n    let i = denomination.length - 1;\\n    while (n < denomination[i]) {\\n        denomination.pop();\\n        i = denomination.length - 1;\\n    }\\n    return partition(n, denomination);\\n}\\n\\n/**\\n * The number of ways to partition an integer using only integers from a given\\n * set.  Let n be our target sum and let our m denominations be\\n * D := [d_0, d_1, ..., d_{m-1}], where d_i < d_j whenever i < j.  We make the\\n * following assumptions:\\n *\\n * (1) n >= 0.\\n * (2) Each d_i > 0.\\n * (3) Each d_i <= n.\\n *\\n * The problem has the following recursive interpretation.  Let C(n) be the\\n * number of ways to partition n using a denomination d.  Then we have the\\n * recurrence relation\\n *\\n * C(n) := C(n) + C(n - d)\\n *\\n * We have the base case C(0) := 1 because there is only one way to make a\\n * change for zero, namely choose no coins at all.  Refer to the following page\\n * for more details:\\n *\\n * https://www.educative.io/m/coin-changing-problem\\n *\\n * @param n We want to partition this integer.\\n * @param denom The array of denominations.  An array of positive integers to\\n *     use to partition n.  Elements of the array are unique and the array is\\n *     assumed to be sorted in ascending order.\\n * @return The number of ways to partition n using only integers from\\n *     the denomination array.\\n */\\nfunction partition(n, denom) {\\n    // Use an array of n + 1 elements because we also need to take care of the\\n    // base case.\\n    const cache = Array(n + 1).fill(0);\\n    cache[0] = 1;\\n    for (const d of denom) {\\n        for (let i = d; i < cache.length; i++) {\\n            cache[i] += cache[i - d];\\n        }\\n    }\\n    return cache[n];\\n}\\n\\n/**\\n * Total Ways to Sum II: You are given an array with two elements.  The first\\n * element is an integer n.  The second element is an array of numbers\\n * representing the set of available integers.  How many different ways can\\n * that number n be written as a sum of integers contained in the given set?\\n * You may use each integer in the set zero or more times.\\n *\\n * This is also known as the money changing problem.  Suppose we have a target\\n * amount of money n.  We have m distinct dollar notes a_0, a_1, ..., a_{m-1}.\\n * How many ways are there to combine one or more notes such that the total\\n * amount is n?  We can use a note zero, one, or more times.  More details here:\\n *\\n * https://algorithmist.com/wiki/Coin_change\\n *\\n * Usage: run quack/cct/sum2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [n, denomination] = ns.codingcontract.getData(cct, host);\\n    const npart = coin_change(n, denomination);\\n    const result = ns.codingcontract.attempt(npart, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/sum2.txt\\\";\\n        const data = `[${n}, [${denomination.join(\\\",\\\")}]]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/sum2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    max_profit_kadane,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\n\\n/**\\n * Algorithmic Stock Trader I: You are given an array of numbers representing\\n * stock prices, where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can buy and sell the stock once).  If no profit can\\n * be made, then the answer should be 0.  Note that you must buy the stock\\n * before you can sell it.\\n *\\n * This is similar, but not identical, to the problem\\n * \\\"Subarray with Maximum Sum\\\".\\n *\\n * Usage: run quack/cct/trader.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        max_profit_kadane(array),\\n        cct,\\n        host,\\n        {\\n            returnReward: true,\\n        }\\n    );\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/trader.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/trader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":409,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/quack/lib/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The maximum profit that can be obtained if we are allowed to make an\\n * unlimited number of transactions.  Each transaction is a pair of buy/sell.\\n * A stock must first be bought before it can be sold.\\n *\\n * We have already solved the case where we are allowed to make at most one\\n * transaction.  The basic idea boils down to finding two days i and j, where\\n * i < j and price[i] < price[j], such that the difference price[j] - price[i]\\n * is as large as possible.\\n *\\n * Let's reuse the above idea.  Let mp be the running maximum profit.  Given\\n * two consecutive days i and i + 1, we have three cases:\\n *\\n * (1) price[i] < price[i+1].  We can make a profit if we buy on day i and\\n *     sell the next day.  Add that profit to our running profit mp.\\n * (2) price[i] = price[i+1].  We break even.  No need to add the difference\\n *     price[i+1] - price[i] to our running profit mp because the difference\\n *     is zero.\\n * (3) price[i] > price[i+1].  We make a loss.  Do not buy on day i and sell\\n *     the next day.\\n *\\n * The edge case is when i is the last day.  We should not buy the stock on\\n * the last day because we won't be able to sell it the next day.\\n *\\n * @param price An array where price[i] is the price of a stock on day i.\\n * @return The maximum profit to be made, provided we are allowed to make\\n *     as many transactions as we want.  Return 0 if no profits can be made.\\n */\\nfunction maximize_profit(price) {\\n    // Sanity checks.\\n    assert(price.length > 0);\\n    // If the price array has only one value, we can buy on the first day.\\n    // However, we won't be able to sell at all.  Therefore the maximum profit\\n    // should be zero.\\n    if (price.length === 1) {\\n        return 0;\\n    }\\n    // Keep track of the running maximum profit by considering the price\\n    // difference between consecutive days.\\n    assert(price.length >= 2);\\n    const lastidx = price.length - 1;\\n    let max_profit = 0;\\n    for (let i = 0; i < lastidx; i++) {\\n        if (price[i] < price[i + 1]) {\\n            max_profit += price[i + 1] - price[i];\\n        }\\n    }\\n    return max_profit;\\n}\\n\\n/**\\n * Algorithmic Stock Trader II: You are given an array of numbers representing\\n * stock prices, where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using as many\\n * transactions as you like.  A transaction is defined as buying and then\\n * selling one share of the stock.  Note that you cannot engage in multiple\\n * transactions at once.  In other words, you must sell the stock before you\\n * buy it again.  If no profit can be made, then the answer should be 0.\\n *\\n * Each price in the array relates to the same stock.\\n *\\n * Usage: run quack/cct/trader2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        maximize_profit(array),\\n        cct,\\n        host,\\n        {\\n            returnReward: true,\\n        }\\n    );\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/trader2.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/trader2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    print_error,\\n    print_success,\\n    stock_traderIII,\\n} from \\\"/quack/lib/cct.js\\\";\\n\\n/**\\n * Algorithmic Stock Trader III: You are given an array of numbers representing\\n * stock prices, where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions.  A transaction is defined as buying and then selling one share\\n * of the stock.  Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.  If no\\n * profit can be made, then the answer should be 0.\\n *\\n * This is similar to Algorithmic Stock Trader I.  The twist is that we can now\\n * make at most two transactions, where previously we were restricted to at\\n * most one transaction.\\n *\\n * Usage: run quack/cct/trader3.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        stock_traderIII(array),\\n        cct,\\n        host,\\n        {\\n            returnReward: true,\\n        }\\n    );\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/trader3.txt\\\";\\n        const data = `[${array.join(\\\",\\\")}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/trader3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":413,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    max_profit_kadane,\\n    print_error,\\n    print_success,\\n    stock_traderIII,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The maximum profit that can be made when we are restricted to at most t\\n * transactions.  When we are restricted to at most 2 transactions, we find\\n * all possible partitions of the price array into 2 non-overlapping subarrays.\\n * For each such partition we have 2 subarrays.  We run Kadane's algorithm on\\n * each subarray, sum the results of both subarrays, and return the sum as the\\n * maximum profit possible.  The true maximum profit is the maximum of the\\n * results of all partitions.\\n *\\n * Now consider t > 2.  We use the same idea as per the case when we are\\n * restricted to at most 2 transactions.  The minor difference now is that we\\n * must partition the price array into t non-overlapping subarrays.  We run\\n * Kadane's algorithm on each subarray, add together the result of each run of\\n * the algorithm, and return the sum as the maximum possible profit.  The only\\n * tricky part is generating all possible partitions of the price array, where\\n * each partition consists of t non-overlapping subarrays.  The above method is\\n * conceptually simple to understand as it builds on the intuition for the case\\n * where t = 2.  However, the method can be slow.  Let k := t - 1.  Given a set\\n * of n elements, we have C(n, k) ways to choose k numbers that partition the\\n * price array into t non-overlapping subarrays.  Here, the number C(n, k) is\\n * the binomial coefficient.  Thus there are C(n, k) possible partitions of the\\n * price array into t non-overlapping subarrays.  Notice that when t = 2, we\\n * need only to choose k = t - 1 = 1 number to act as a barrier for dividing\\n * the price array into 2 non-overlapping subarrays.  Therefore in the worst\\n * case the above method has factorial running time, which is worse than\\n * exponential running time.\\n *\\n * Let's see whether we can use recursion to calculate the solution for day i\\n * based on our solution for day i-1.  Suppose price[i] is the value of the\\n * stock on day i.  Define p[t][i] as the maximum profit obtained by using at\\n * most t transactions up to and including day i.  We have two cases for day i.\\n *\\n * (1) If no transactions are made on day i, then the value of p[t][i] is\\n *     equivalent to p[t][i-1], i.e. p[t][i] = p[t][i-1].\\n * (2) Suppose we sell on the i-th day.  Then we must have bought one share of\\n *     the stock on a day j, where 0 <= j <= i-1.  Purchasing a share on day j\\n *     and selling it at a later day i would net us a profit of\\n *\\n *     price[i] - price[j]\\n *\\n *     for one transaction.  What about the profits from the remaining t-1\\n *     transactions?  Those profits are collectively represented as p[t-1][j].\\n *     If we sell on the i-th day and this is our t-th transaction, then the\\n *     profit from all t transactions can be written as\\n *\\n *     (*) price[i] - price[j] + p[t-1][j]\\n *\\n *     To maximize our profit from all t transactions, we need to maximize the\\n *     value of expression (*).  We calculate the value of (*) for each value\\n *     of j between 0 and i-1, inclusive.  That is, we have the expression\\n *\\n *     (**) max{price[i] - price[j] + p[t-1][j]}\\n *\\n *     where 0 <= j <= i-1.  Therefore p[t][i] is defined as the maximum of\\n *     p[t][i-1] and expression (**).\\n *\\n * The base cases are:\\n *\\n * (i) p[0][i] := 0 for all i.\\n * (ii) p[t][0] := 0 for all t.\\n *\\n * If n is the number of elements in the price array, the maximum profit we can\\n * obtain is p[t][n-1] provided we are restricted to at most t transactions.\\n * Refer to the following page for more details:\\n *\\n * https://www.techiedelight.com/find-maximum-profit-earned-at-most-k-stock-transactions/\\n *\\n * @param ns The Netscript API.\\n * @param t The maximum number of transactions.\\n * @param price An array of prices, where price[i] is the price of one share of\\n *     a stock on day i.  All prices relate to the same stock.\\n * @return The maximum profit to be made, assuming we can perform at most t\\n *     transactions.  Return 0 if no profit can be made.\\n */\\nasync function maximize_profit(ns, t, price) {\\n    assert(t >= 0);\\n    assert(price.length > 0);\\n    // No transactions means no profit.  We don't buy and sell, therefore\\n    // no profit at all.\\n    if (t === 0) {\\n        return 0;\\n    }\\n    // If t = 1, we are restricted to at most 1 transaction.  Simply use\\n    // Kadane's algorithm on the price array.\\n    if (t === 1) {\\n        return max_profit_kadane(price);\\n    }\\n    // If t = 2, we are restricted to at most 2 transactions.  This is the case\\n    // of Algorithmic Stock Trader III.\\n    if (t === 2) {\\n        return stock_traderIII(price);\\n    }\\n    // Perform at most t >= 3 transactions.  Let p[t][i] be the maximum profit\\n    // obtained by using at most t transactions up to and including day i.  The\\n    // value of p[t][i] is the maximum of these two expressions:\\n    //\\n    // (1) p[t][i-1]\\n    // (2) max{price[i] - price[j] + p[t-1][j]} for all 0 <= j <= i-1.\\n    //\\n    // Using the recursive structure of p[t][i], we create a 2-D matrix to hold\\n    // the previous values p[r][c].  The row number r represents the current\\n    // maximum number of transactions.  The column number c represents the\\n    // current day.\\n    assert(t >= 3);\\n    // The base case p[0][i] := 0 for all i.\\n    const p = [];\\n    p.push(new Array(price.length).fill(0));\\n    for (let i = 1; i <= t; i++) {\\n        // The base case p[t][0] := 0 for all t.\\n        const array = new Array(price.length);\\n        array[0] = 0;\\n        p.push(array);\\n    }\\n    // The case of at least t >= 3 transactions.  Here, 1 <= tau <= t.  Build\\n    // up our table from tau = 1 up to and including tau = t.\\n    for (let tau = 1; tau <= t; tau++) {\\n        // Let the number of transactions be at most tau.  Consider each\\n        // day > 0 in the price array.  As we move to the next day, we do not\\n        // have to recalculate the maximization expression\\n        //\\n        // max{price[i] - price[j] + p[t-1][j]}\\n        //\\n        // for all 0 <= j <= i-1.  Define the number\\n        //\\n        // mp := max{p[t-1][k] - price[k]}\\n        //\\n        // where 0 <= k <= i-2.  Then we have the expression\\n        //\\n        // max{price[i] - price[j] + p[t-1][j]}\\n        // = price[i] + max(mp, p[t-1][i-1] - price[i-1])\\n        //\\n        // Thus p[t][i] is the maximum of p[t][i-1] and the expression\\n        //\\n        // price[i] + max(mp, p[t-1][i-1] - price[i-1])\\n        let mp = p[tau - 1][0] - price[0];\\n        for (let day = 1; day < price.length; day++) {\\n            // The maximum profit if we do not make a transaction on this day.\\n            const a = p[tau][day - 1];\\n            // The maximum profit if we make a transaction on this day.\\n            mp = Math.max(mp, p[tau - 1][day - 1] - price[day - 1]);\\n            // The maximum profit using at most t transactions up to and\\n            // including this day.\\n            p[tau][day] = Math.max(a, price[day] + mp);\\n            await ns.sleep(wait_t.MILLISECOND);\\n        }\\n    }\\n    return p[t][price.length - 1];\\n}\\n\\n/**\\n * Algorithmic Stock Trader IV: You are given an array with two elements.  The\\n * first element is an integer k.  The second element is an array of numbers\\n * representing stock prices, where the i-th element represents the stock price\\n * on day i.  Determine the maximum possible profit you can earn using at most\\n * k transactions.  A transaction is defined as buying and then selling one\\n * share of the stock.  Note that you cannot engage in multiple transactions at\\n * once.  In other words, you must sell the stock before you can buy it.  If no\\n * profit can be made, then the answer should be 0.\\n *\\n * This is similar to Algorithmic Stock Trader III.  The twist is that we can\\n * now make at most k transactions, where previously we were restricted to at\\n * most two transactions.  Of course, k can be 0, 1, 2, or a higher integer.\\n *\\n * Usage: run quack/cct/trader4.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [t, price] = ns.codingcontract.getData(cct, host);\\n    const mp = await maximize_profit(ns, t, price);\\n    const result = ns.codingcontract.attempt(mp, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/trader4.txt\\\";\\n        const data = `[${t}, [${price.join(\\\",\\\")}]]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/trader4.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure,\\n    matrix_to_string,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A deep copy of a triangle.\\n *\\n * @param triangle A triangle represented as an array of arrays.\\n * @return The same triangle, but as a deep copy.\\n */\\nfunction clone(triangle) {\\n    const new_triangle = [];\\n    for (let i = 0; i < triangle.length; i++) {\\n        const level = [...triangle[i]];\\n        new_triangle.push(level);\\n    }\\n    return new_triangle;\\n}\\n\\n/**\\n * Descend from the top to the bottom of a triangle, finding a path of minimum\\n * sum as we go.\\n *\\n * @param triangle A triangle represented as an array of arrays.\\n * @return An array [path, min_sum] as follows:\\n *     (1) path := A path of minimum sum from the top of the triangle to the\\n *         bottom.\\n *     (2) min_sum := The minimum path sum.\\n */\\nfunction descend(triangle) {\\n    // Sanity checks.\\n    assert(is_triangle(triangle));\\n    if (triangle.length === 1) {\\n        return [triangle[0], triangle[0][0]];\\n    }\\n    // A triangle having at least 2 levels.  Consider the following triangle:\\n    //\\n    // (0)       2\\n    // (1)     3   4\\n    // (2)   6   5   7\\n    // (3) 4   1   8   3\\n    //\\n    // Think of the problem in a top-down manner.  To obtain a path of minimum\\n    // sum from level (0) to level (3), we must obtain a path of minimum sum\\n    // from level (0) to level (2), which in turn requires that we obtain a path\\n    // of minimum sum from level (0) to level (1).  Let min_sum be the minimum\\n    // sum of a path from level (0) to level (i) and suppose this path ends at\\n    // a[j], the j-th number at level (i).  Let b be an array of numbers at\\n    // level (i + 1).  The minimum sum of a path from level (0) to level\\n    // (i + 1) is given by\\n    //\\n    // min_sum + minimum(b[j], b[j + 1])\\n    //\\n    // Alternatively, consider the problem in a bottom-up manner.  Any minimum\\n    // path must end at the bottom level of the triangle.  Let i be any level\\n    // in the triangle, except for the last level.  Let mtriangle[i][j] be the\\n    // j-th number at level (i) and update this number to\\n    //\\n    // mtriangle[i][j] := mtriangle[i][j] + minimum(b[j], b[j + 1])\\n    //\\n    // where b is an array of numbers at level (i + 1).  Move up one level and\\n    // repeat the above calculation, propagating the minimum sum up the\\n    // triangle so that mtriangle[0][0] is the minimum sum of any path.\\n\\n    // Get a deep copy of the triangle.  We don't want to modify the input\\n    // triangle.\\n    const mtriangle = clone(triangle);\\n    const path = [];\\n    // Start from the penultimate level and work upward to the top level.\\n    // Keep track of a minimum path as we move along.\\n    for (let i = triangle.length - 2; i >= 0; i--) {\\n        // The minimum sum at level i.\\n        let minsum = Infinity;\\n        // A node at level i + 1.  This is a node of a path of minimum sum.\\n        let mink = Infinity;\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            // Consider nodes at level i + 1.\\n            const a = mtriangle[i + 1][j];\\n            const b = mtriangle[i + 1][j + 1];\\n            mtriangle[i][j] += Math.min(a, b);\\n            // Update the path of minimum sum.  We keep track of the column\\n            // index at level i + 1.\\n            if (minsum > mtriangle[i][j]) {\\n                minsum = mtriangle[i][j];\\n                mink = a < b ? j : j + 1;\\n            }\\n        }\\n        path.push(mink);\\n    }\\n    path.push(0);\\n    path.reverse();\\n    // Reconstruct a path of minimum sum.  This path contains the intermediate\\n    // nodes from the top of the triangle to the bottom level.\\n    for (let i = 0; i < triangle.length; i++) {\\n        path[i] = triangle[i][path[i]];\\n    }\\n    return [path, mtriangle[0][0]];\\n}\\n\\n/**\\n * Whether the given array represents a valid triangle.\\n *\\n * @param triangle A triangle represented as an array of arrays.\\n * @return true if the array represents a triangle; false otherwise.\\n */\\nfunction is_triangle(triangle) {\\n    assert(triangle.length > 0);\\n    for (let i = 0; i < triangle.length - 1; i++) {\\n        const top = triangle[i];\\n        const bottom = triangle[i + 1];\\n        if (top.length < 1) {\\n            return bool.INVALID;\\n        }\\n        if (bottom.length < 1) {\\n            return bool.INVALID;\\n        }\\n        if (top.length !== bottom.length - 1) {\\n            return bool.INVALID;\\n        }\\n    }\\n    return bool.VALID;\\n}\\n\\n/**\\n * Minimum Path Sum in a Triangle: You are given a 2-D array of numbers\\n * (array of arrays of numbers) that represents a triangle (the first array\\n * has one element, each subsequent array has one more element than the one\\n * before it, forming a triangle).  Find the minimum path sum from the top to\\n * the bottom of the triangle.  In each step of the path, you may only move to\\n * adjacent numbers in the row below.\\n *\\n * For example, given this array\\n *\\n * [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]\\n *\\n * we can represent it as this triangle\\n *\\n *       2\\n *     3   4\\n *   6   5   7\\n * 4   1   8   3\\n *\\n * From one level of the triangle, we move to a level below but only to a\\n * number directly below a given number.  At level 0, we have [2].  At level\\n * 1, we have [3, 4].  From 3, we can move down to either 6 or 5, but we\\n * cannot move from 3 to 7 because 7 is not directly below 3.\\n *\\n * Usage: run quack/cct/triangle.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const triangle = ns.codingcontract.getData(cct, host);\\n    const [, sum] = descend(triangle);\\n    const result = ns.codingcontract.attempt(sum, cct, host, {\\n        returnReward: true,\\n    });\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/triangle.txt\\\";\\n        const data = matrix_to_string(triangle);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/triangle.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    char_index,\\n    is_alphabetic,\\n    log_cct_failure,\\n    print_error,\\n    print_success,\\n} from \\\"/quack/lib/cct.js\\\";\\nimport { vigenere_square } from \\\"/quack/lib/constant/cct.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Pad the key so that it is the same length as the plaintext.\\n *\\n * @param plaintext We want to encrypt this string.  Cannot be empty string.\\n * @param key Encryption is done using this key.  Cannot be empty string.\\n * @return A string representing the key, possibly padded.  If the plaintext\\n *     and key are of the same length, then return the original key.\\n */\\nfunction pad_key(plaintext, key) {\\n    assert(plaintext.length > 0);\\n    assert(key.length > 0);\\n    if (plaintext.length === key.length) {\\n        return key;\\n    }\\n    let new_key = String(key);\\n    let i = 0;\\n    let n = 0;\\n    while (new_key.length < plaintext.length) {\\n        new_key += key[i];\\n        n++;\\n        i = n % key.length;\\n    }\\n    assert(new_key.length === plaintext.length);\\n    assert(new_key.length > key.length);\\n    return new_key;\\n}\\n\\n/**\\n * Vigenère encryption.  We encrypt only uppercase letters of the English\\n * alphabet.  All other characters are ignored.\\n *\\n * @param plaintext We want to encrypt this string.  Cannot be empty string.\\n * @param key Encryption is done using this key.  Cannot be empty string.\\n * @return A ciphertext encrypted using the Vigenère cipher.\\n */\\nfunction vigenere(plaintext, key) {\\n    // Sanity checks.\\n    assert(plaintext.length > 0);\\n    assert(key.length > 0);\\n    // Encryption.\\n    const ptxt = plaintext.toUpperCase();\\n    const pk = pad_key(plaintext, key);\\n    let ciphertext = \\\"\\\";\\n    const matrix = Array.from(vigenere_square);\\n    for (let i = 0; i < ptxt.length; i++) {\\n        if (!is_alphabetic(ptxt[i])) {\\n            ciphertext += ptxt[i];\\n            continue;\\n        }\\n        const row = char_index(ptxt[i]);\\n        const col = char_index(pk[i]);\\n        ciphertext += matrix[row][col];\\n    }\\n    assert(ciphertext.length === plaintext.length);\\n    return ciphertext;\\n}\\n\\n/**\\n * Encryption II: Vigenère Cipher: Vigenère cipher is a type of polyalphabetic\\n * substitution.  It uses the Vigenère square to encrypt and decrypt plaintext\\n * with a keyword.  Vigenère square:\\n *\\n *     A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *   +====================================================\\n * A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n * B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\\n * C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\n * D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\n * E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\n * .......................................................\\n * Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\n * Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\n *\\n * For encryption each letter of the plaintext is paired with the corresponding\\n * letter of a repeating keyword. For example, the plaintext DASHBOARD is\\n * encrypted with the keyword LINUX:\\n *\\n * Plaintext: DASHBOARD\\n *   Keyword: LINUXLINU\\n *\\n * So, the first letter D is paired with the first letter of the key L.\\n * Therefore, row D and column L of the Vigenère square are used to get the\\n * first cipher letter O.  This must be repeated for the whole ciphertext.  You\\n * are given an array with two elements.  The first element is the plaintext,\\n * the second element is the keyword.  Return the ciphertext as uppercase\\n * string.\\n *\\n * This is Vigenère encryption, where the plaintext alphabet is the uppercase\\n * characters of the English alphabet.\\n *\\n * Usage: run quack/cct/vigenere.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [plaintext, key] = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        vigenere(plaintext, key),\\n        cct,\\n        host,\\n        {\\n            returnReward: true,\\n        }\\n    );\\n    // Log the result in case of failure.\\n    if (result.length === 0) {\\n        const log = \\\"/quack/cct/vigenere.txt\\\";\\n        const data = `[${plaintext}, ${key}]`;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/quack/cct/vigenere.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Start a load chain to run scripts related to factions.\\n *\\n * Usage: run quack/chain/faction.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Suppress some log messages.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Try to free up some RAM on home server so we can run the script below.\\n    // await hram_suspend(ns);\\n    while (ns.isRunning(\\\"/quack/singularity/program.js\\\", home)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    exec(ns, \\\"/quack/singularity/faction.js\\\");\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/chain/faction.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Start a load chain to run scripts to upgrade our home server.\\n *\\n * Usage: run quack/chain/home.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Suppress some log messages.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Try to free up some RAM on home server so we can run the script below.\\n    // await hram_suspend(ns);\\n    exec(ns, \\\"/quack/singularity/home.js\\\");\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/chain/home.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Start a load chain to run scripts to install Augmentations and soft reset.\\n *\\n * Usage: run quack/chain/install.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Suppress some log messages.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Try to free up some RAM on home server so we can run the script below.\\n    // await hram_suspend(ns);\\n    exec(ns, \\\"/quack/singularity/install.js\\\");\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/chain/install.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Start a load chain to run various scripts.\\n *\\n * Usage: run chain/misc.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Suppress some log messages.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Try to free up some RAM on home server so we can run the scripts below.\\n    // await hram_suspend(ns);\\n    while (ns.isRunning(\\\"/quack/singularity/money.js\\\", home)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    // Assume our home server is high-end and has enough RAM to run multiple\\n    // scripts at the same time.  Here is a brief description of the purpose of\\n    // each script.\\n    //\\n    // (1) /corporation/corp.js := This script creates and manage our\\n    //     corporation.  Along with our gang, a corporation can be a source of\\n    //     significant income.\\n    // (2) /gang/go.js := This utility script helps us to decide which faction\\n    //     to join so we can create a gang within that faction.\\n    // (3) /singularity/daemon.js := This script determines whether we should be\\n    //     hacking the w0r1d_d43m0n server.  It terminates if the conditions are\\n    //     not met for the server to appear in the game world.\\n    // (4) /singularity/int-farm.js := This script passively farms Intelligence\\n    //     XP.\\n    // (5) /singularity/program.js := This script attempts to purchase port\\n    //     opener programs.  We need all five port opener programs so we can\\n    //     open all ports of each server.\\n    // (6) /sleeve/cc.js := Our sleeve manager.\\n    const gang_script = [\\n        \\\"/quack/gang/go.js\\\",\\n        \\\"/quack/gang/slum-snakes.js\\\",\\n        \\\"/quack/gang/dead-speakers.js\\\",\\n    ];\\n    const script = [\\n        // \\\"/corporation/go.js\\\", // FIXME: update to use v2.2 API\\n        \\\"/quack/singularity/daemon.js\\\",\\n        \\\"/quack/singularity/int-farm.js\\\",\\n        \\\"/quack/sleeve/cc.js\\\",\\n        gang_script[0],\\n    ];\\n    script.forEach((s) => exec(ns, s));\\n    // Wait until we have joined a criminal faction.  Then launch another\\n    // script.  We must wait because the script launched by \\\"/gang/go.sh\\\" needs\\n    // to perform tasks that require focus.  The script\\n    // \\\"/singularity/program.js\\\" also requires focus.  We can only focus on one\\n    // task at a time.\\n    const script_running = (s) => ns.scriptRunning(s, home);\\n    while (gang_script.some(script_running)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    exec(ns, \\\"/quack/singularity/program.js\\\");\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/chain/misc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Start a load chain for raising money.\\n *\\n * Usage: run quack/chain/money.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Try to free up some RAM on home server so we can run the scripts below.\\n    // await hram_suspend(ns);\\n    while (\\n        ns.isRunning(\\\"/quack/go-low.js\\\", home)\\n        || ns.isRunning(\\\"/quack/go-mid.js\\\", home)\\n        || ns.isRunning(\\\"/quack/go-high.js\\\", home)\\n    ) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    // Assume our home server has limited RAM.  The server cannot run multiple\\n    // scripts at the same time.  Load a sleeve script and let it run until\\n    // completion.  Then start another script.\\n    let pid = exec(ns, \\\"/quack/sleeve/money.js\\\");\\n    while (ns.isRunning(pid)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    // See whether any Coding Contracts have appeared and solve them.\\n    const script = \\\"/quack/cct/solver.js\\\";\\n    if (!ns.isRunning(script, home)) {\\n        log(ns, \\\"Solve Coding Contracts to raise some money\\\");\\n        pid = exec(ns, script);\\n        await ns.sleep(10 * wait_t.SECOND);\\n        ns.kill(pid);\\n    }\\n    // Now launch the main script for raising money.\\n    exec(ns, \\\"/quack/singularity/money.js\\\");\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/chain/money.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":429,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, home_t } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Start a load chain for studying at a university.  A script in the chain would\\n * likely use functions from the Singularity API.  Each function from this API\\n * tends to use a huge amount of RAM.\\n *\\n * Usage: run quack/chain/study.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Try to free up some RAM on home server so we can run the scripts below.\\n    // await hram_suspend(ns);\\n    // Assume our home server has limited RAM.  The server cannot run multiple\\n    // scripts at the same time.  Load a sleeve script and let it run until\\n    // completion.  Then start another script.\\n    const pid = exec(ns, \\\"/quack/sleeve/study.js\\\");\\n    while (ns.isRunning(pid)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    exec(ns, \\\"/quack/singularity/study.js\\\");\\n    if (ns.getServer(home).maxRam >= home_t.RAM_HIGH) {\\n        exec(ns, \\\"/quack/gang/program.js\\\");\\n    }\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/chain/study.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { network, shortest_path } from \\\"/quack/lib/network.js\\\";\\nimport { assert, shell } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Connect to a given target server.\\n *\\n * @param path An array of hostnames along the path that connects to a target\\n *     server.  The target server is the last element of this array.\\n */\\nfunction connect(path) {\\n    // A chain of Terminal commands that connect to the target server.\\n    assert(path.length > 0);\\n    const cmd = `connect ${path.filter((s) => s !== home).join(\\\"; connect \\\")}`;\\n    shell(cmd);\\n}\\n\\n/**\\n * Connect to a target server.  This script accepts a command line argument,\\n * i.e. the hostname of the server to which we want to connect.\\n *\\n * Usage: run quack/connect.js [targetServer]\\n * Example: run quack/connect.js run4theh111z\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Must provide a command line argument.\\n    const error_msg = \\\"Must provide the name of the target server.\\\";\\n    if (ns.args.length < 1) {\\n        ns.tprint(error_msg);\\n        return;\\n    }\\n    // Not a server in the game world.  Exclude purchased servers.\\n    const target = ns.args[0];\\n    const server = new Set(network(ns));\\n    if (!server.has(target)) {\\n        ns.tprint(`Server not found: ${target}`);\\n        return;\\n    }\\n    // Find shortest path.\\n    const path = shortest_path(ns, home, target);\\n    if (path.length < 1) {\\n        ns.tprint(`Target server must be reachable from ${home}.`);\\n        return;\\n    }\\n    connect(path);\\n}\\n\",\"filename\":\"/quack/connect.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":35.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { agriculture, corp } from \\\"/quack/lib/constant/corp.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Corporation } from \\\"/quack/lib/corporation/corp.js\\\";\\nimport {\\n    hire,\\n    buy_market_ta,\\n    buy_research,\\n    has_all_research,\\n    setup_research_lab,\\n} from \\\"/quack/lib/corporation/util.js\\\";\\nimport { create_file, log } from \\\"/quack/lib/io.js\\\";\\nimport { has_corporation_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Develop the research unit in each office.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param res An array of names of research we care about.\\n */\\nasync function research(ns, div, res) {\\n    log(ns, `${div}: expand the research unit of each office`);\\n    await hire(ns, div, bool.NO_WAIT);\\n    // We must setup a research lab for the division before we are able to buy\\n    // other useful research.\\n    if (!setup_research_lab(ns, div)) {\\n        log(ns, `${div}: unable to setup research lab`);\\n        return;\\n    }\\n    setup_market_ta(ns, div);\\n    if (!buy_market_ta(ns, div)) {\\n        log(ns, `${div}: cannot buy research: Market-TA.I, Market-TA.II`);\\n        return;\\n    }\\n    // Purchase other research we care about.\\n    const org = new Corporation(ns);\\n    for (const r of res) {\\n        if (!org.has_research(div, r) && org.is_research_available(div, r)) {\\n            if (org.has_enough_research_points(div, r)) {\\n                log(ns, `${div}: buying research: ${r}`);\\n                await buy_research(ns, div, r);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * Enable both versions of Market TA for all materials sold by the given\\n * division.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n */\\nfunction setup_market_ta(ns, div) {\\n    const org = new Corporation(ns);\\n    const res = [corp.research.TA_I, corp.research.TA_II];\\n    const has_research = (r) => org.has_research(div, r);\\n    if (res.some(has_research)) {\\n        cities.all.forEach((ct) => {\\n            agriculture.material.sold.forEach((mat) => {\\n                org.enable_market_ta(div, bool.NOT_PRODUCT, mat, ct);\\n            });\\n        });\\n    }\\n}\\n\\n/**\\n * Develop our Agriculture division.\\n *\\n * Usage: run quack/corporation/agriculture.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Sanity checks.\\n    const org = new Corporation(ns);\\n    assert(has_corporation_api(ns));\\n    assert(org.has_corp());\\n    assert(org.has_office_warehouse_api());\\n    // The research we care about.\\n    create_file(ns, corp.AGRI, ns.getScriptName());\\n    const res = [\\n        // Top priority.\\n        // The research corp.research.RND_LAB should be handled by the function\\n        // setup_research_lab().\\n        corp.research.RND_LAB,\\n        // The next 2 research should be handled by the function\\n        // buy_market_ta().\\n        corp.research.TA_I,\\n        corp.research.TA_II,\\n        // Employee research.\\n        corp.research.BREW,\\n        corp.research.PARTY,\\n        corp.research.DRUG,\\n        corp.research.INJECT,\\n        corp.research.JUICE,\\n        corp.research.JOY,\\n        corp.research.OVERCLOCK,\\n        corp.research.STIMULATE,\\n        // Division research.\\n        corp.research.DRONE,\\n        corp.research.DRONE_ASSEMBLY,\\n        corp.research.DRONE_TRANSPORT,\\n        corp.research.ASSEMBLER,\\n        corp.research.CAPACITY_I,\\n        corp.research.CAPACITY_II,\\n        corp.research.FULCRUM,\\n    ];\\n    // Develop our research unit so we can buy all research we care about.\\n    const div = corp.industry.AGRI;\\n    for (;;) {\\n        if (has_all_research(ns, div, res)) {\\n            break;\\n        }\\n        await research(ns, div, res);\\n        await ns.sleep(10 * wait_t.MINUTE);\\n    }\\n    log(ns, `${div}: all research units fully developed`);\\n    ns.rm(corp.AGRI, home);\\n}\\n\",\"filename\":\"/quack/corporation/agriculture.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { agriculture, corp, corp_t } from \\\"/quack/lib/constant/corp.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Corporation } from \\\"/quack/lib/corporation/corp.js\\\";\\nimport {\\n    expand_city,\\n    hire_advert,\\n    smart_supply,\\n} from \\\"/quack/lib/corporation/util.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_corporation_api } from \\\"/quack/lib/source.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Create a corporation.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function create_corp(ns) {\\n    const org = new Corporation(ns);\\n    if (org.has_corp()) {\\n        log(ns, \\\"Manage a corporation\\\");\\n        return;\\n    }\\n    while (!org.create()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    log(ns, \\\"Create and manage a corporation\\\");\\n}\\n\\n/**\\n * Hire 3 employees for each new office in each city.  For each office, assign\\n * an employee to each of the following positions: Business, Engineer, and\\n * Operations.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction initial_hire(ns) {\\n    const org = new Corporation(ns);\\n    const div = corp.industry.AGRI;\\n    cities.all.forEach((ct) => {\\n        org.initial_hire(div, ct);\\n        log(ns, `${div}: ${ct}: hired ${corp_t.office.INIT_HIRE} employees`);\\n    });\\n}\\n\\n/**\\n * Add some levels to various upgrades.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function initial_level_upgrade(ns) {\\n    const org = new Corporation(ns);\\n    const upgrade = [\\n        corp.upgrade.FOCUS,\\n        corp.upgrade.NEURAL,\\n        corp.upgrade.SPEECH,\\n        corp.upgrade.INJECTOR,\\n        corp.upgrade.FACTORY,\\n    ];\\n    for (let i = 0; i < corp_t.upgrade.INIT_LEVEL; i++) {\\n        for (const upg of upgrade) {\\n            while (!org.level_upgrade(upg)) {\\n                await ns.sleep(wait_t.SECOND);\\n            }\\n        }\\n    }\\n    log(ns, `Level up these upgrades: ${upgrade.join(\\\", \\\")}`);\\n}\\n\\n/**\\n * The initial purchase of these materials:\\n *\\n * (1) Hardware.  We want a total of 125.\\n * (2) AI Cores.  We want a total of 75.\\n * (3) Real Estate.  We want a total of 27k.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function initial_material_buy(ns) {\\n    const material = [\\n        corp.material.AI,\\n        corp.material.HARDWARE,\\n        corp.material.LAND,\\n    ];\\n    const amount = [\\n        agriculture.material.ai.buy.INIT,\\n        agriculture.material.hardware.buy.INIT,\\n        agriculture.material.land.buy.INIT,\\n    ];\\n    const div = corp.industry.AGRI;\\n    log(ns, `Purchasing materials: ${material.join(\\\", \\\")}`);\\n    for (let i = 0; i < material.length; i++) {\\n        const org = new Corporation(ns);\\n        for (const ct of cities.all) {\\n            if (org.material_qty(div, ct, material[i]) < amount[i]) {\\n                await org.material_buy(div, ct, material[i], amount[i]);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * The initial selling of materials.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction initial_material_sell(ns) {\\n    const org = new Corporation(ns);\\n    const div = corp.industry.AGRI;\\n    cities.all.forEach((ct) => {\\n        agriculture.material.sold.forEach((mat) => {\\n            org.material_initial_sell(div, ct, mat);\\n        });\\n    });\\n}\\n\\n/**\\n * Probably resume from where we left off before a soft reset.\\n *\\n * @param ns The Netscript API.\\n * @return True if we resume from where we left off; false otherwise.\\n */\\nfunction resume(ns) {\\n    let is_resume = false;\\n    if (ns.fileExists(corp.PREP, home)) {\\n        exec(ns, \\\"/corporation/prep.js\\\");\\n        is_resume = true;\\n    }\\n    if (ns.fileExists(corp.AGRI, home)) {\\n        exec(ns, \\\"/corporation/agriculture.js\\\");\\n        is_resume = true;\\n    }\\n    if (ns.fileExists(corp.TOBA, home)) {\\n        exec(ns, \\\"/corporation/tobacco.js\\\");\\n        is_resume = true;\\n    }\\n    if (ns.fileExists(corp.JANI, home)) {\\n        exec(ns, \\\"/corporation/janitor.js\\\");\\n        is_resume = true;\\n    }\\n    return is_resume;\\n}\\n\\n/**\\n * The initial setup of our corporation.  First, we branch into agriculture.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function stage_one(ns) {\\n    const org = new Corporation(ns);\\n    const div = corp.industry.AGRI;\\n    if (org.has_division(div)) {\\n        return;\\n    }\\n    org.expand_industry(div);\\n    log(ns, `Created new division: ${div}`);\\n    const new_office = await expand_city(ns, div);\\n    log(ns, `${div}: expanded to ${new_office.join(\\\", \\\")}`);\\n    cities.all.forEach((ct) => org.warehouse_init_upgrade(div, ct));\\n    smart_supply(ns);\\n    initial_hire(ns);\\n    await hire_advert(ns, div);\\n    initial_material_sell(ns);\\n    await initial_level_upgrade(ns);\\n    await initial_material_buy(ns);\\n}\\n\\n/**\\n * The initial creation of our corporation.  We also perform various tasks\\n * related to the early management of the corporation.\\n *\\n * Usage: run quack/corporation/go.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Sanity check.\\n    if (!has_corporation_api(ns)) {\\n        log(ns, \\\"No access to Corporation API\\\", colour.RED);\\n        return;\\n    }\\n    if (resume(ns)) {\\n        return;\\n    }\\n    // Create our corporation.  If we do not have access to the Office and\\n    // Warehouse APIs, then we cannot automate the early stages of our\\n    // corporation.  We want to automate as much of the game as possible.\\n    // Without the above APIs, quit the script as soon as possible.\\n    await create_corp(ns);\\n    const org = new Corporation(ns);\\n    if (!org.has_office_warehouse_api()) {\\n        log(ns, \\\"No access to Warehouse and/or Office APIs\\\", colour.RED);\\n        return;\\n    }\\n    // Early management of our corporation.\\n    await stage_one(ns);\\n    log(ns, \\\"Waiting for each office to be vivacious\\\");\\n    await org.vivacious_office();\\n    // Next script in the load chain.\\n    exec(ns, \\\"/quack/corporation/prep.js\\\");\\n}\\n\",\"filename\":\"/quack/corporation/go.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { corp, corp_t } from \\\"/quack/lib/constant/corp.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Corporation } from \\\"/quack/lib/corporation/corp.js\\\";\\nimport {\\n    create_product,\\n    discontinue_product,\\n    finishing_product,\\n    hire_advert_frugal,\\n    hire,\\n    level_upgrade,\\n    sell_product,\\n} from \\\"/quack/lib/corporation/util.js\\\";\\nimport { create_file, log } from \\\"/quack/lib/io.js\\\";\\nimport { has_corporation_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Take our corporation public and list it on the Stock Exchange.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function go_public(ns) {\\n    const org = new Corporation(ns);\\n    while (!org.is_public()) {\\n        log(ns, \\\"corporation is listed on Stock Exchange\\\");\\n        org.go_public();\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    org.issue_dividends();\\n}\\n\\n/**\\n * Whether we have reached the maximum number of products for a particular\\n * division.  The product capacity of the division is assumed to be at the\\n * maximum possible.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @return True if the given division has the maximum number of products;\\n *     false otherwise.\\n */\\nfunction has_max_products(ns, div) {\\n    const org = new Corporation(ns);\\n    return org.all_products(div).length === corp_t.product.MAX;\\n}\\n\\n/**\\n * The product cycle.  This includes hiring, development, and selling.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n */\\nasync function product_cycle(ns, div) {\\n    if (has_max_products(ns, div)) {\\n        return;\\n    }\\n    log(ns, `${div}: a round of product development`);\\n    log(ns, `${div}: hiring a crop of employees`);\\n    await hire(ns, div, bool.NO_WAIT);\\n    const name = create_product(ns, div);\\n    log(ns, `${div}: creating product: ${name}`);\\n    const upg = level_upgrade(ns);\\n    if (upg.length > 0) {\\n        log(ns, `${div}: levelled up upgrade(s): ${upg.join(\\\", \\\")}`);\\n    }\\n    log(ns, `${div}: waiting for product to complete: ${name}`);\\n    await finishing_product(ns, div, name);\\n    log(ns, `${div}: hire AdVert.inc to advertise`);\\n    await hire_advert_frugal(ns, div);\\n    log(ns, `${div}: selling product: ${name}`);\\n    sell_product(ns, div, name);\\n}\\n\\n/**\\n * Make the log less verbose.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction quiet_log(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Various sanity checks.  We want these conditions to hold before proceeding to\\n * maintain the corporation.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction sanity_checks(ns) {\\n    const org = new Corporation(ns);\\n    assert(has_corporation_api(ns));\\n    assert(org.has_corp());\\n    assert(org.has_office_warehouse_api());\\n    assert(org.has_research(corp.industry.TOBACCO, corp.research.CAPACITY_I));\\n    assert(org.has_research(corp.industry.TOBACCO, corp.research.CAPACITY_II));\\n}\\n\\n/**\\n * The maintenance loop.  We constantly maintain the various divisions of our\\n * corporation.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n */\\nasync function update(ns, div) {\\n    // If we have developed the maximum number of products, then we must\\n    // discontinue a product to make room for a new product (possibly of higher\\n    // rating).\\n    if (has_max_products(ns, div)) {\\n        const name = discontinue_product(ns, div);\\n        log(ns, `${div}: discontinued a product: ${name}`);\\n    }\\n    await product_cycle(ns, div);\\n    const org = new Corporation(ns);\\n    log(ns, `${div}: waiting for each office to be vivacious`);\\n    await org.vivacious_office();\\n}\\n\\n/**\\n * Our corporation is now in maintenance mode.  Continue to maintain the various\\n * divisions.\\n *\\n * Usage: run quack/corporation/janitor.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    quiet_log(ns);\\n    sanity_checks(ns);\\n    // Maintain our corporation.\\n    create_file(ns, corp.JANI, ns.getScriptName());\\n    await go_public(ns);\\n    for (;;) {\\n        await update(ns, corp.industry.TOBACCO);\\n        await ns.sleep(10 * wait_t.MINUTE);\\n    }\\n}\\n\",\"filename\":\"/quack/corporation/janitor.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { agriculture, corp, corp_t } from \\\"/quack/lib/constant/corp.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Corporation } from \\\"/quack/lib/corporation/corp.js\\\";\\nimport {\\n    investment_offer,\\n    new_hire,\\n    to_number,\\n} from \\\"/quack/lib/corporation/util.js\\\";\\nimport { create_file, log } from \\\"/quack/lib/io.js\\\";\\nimport { has_corporation_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether each warehouse has been upgraded for this round.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the investment round number.\\n * @return True if each warehouse is upgraded to a given storage capacity.\\n */\\nfunction all_warehouses_upgraded(ns, n) {\\n    const target = agriculture.warehouse.round[n].SIZE;\\n    const org = new Corporation(ns);\\n    const div = corp.industry.AGRI;\\n    const is_upgraded = (c) => org.warehouse_capacity(div, c) >= target;\\n    return cities.all.every(is_upgraded);\\n}\\n\\n/**\\n * The first round of hiring after accepting the first investment offer.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function hire_round_one(ns) {\\n    log(ns, \\\"Round 1 of hiring\\\");\\n    const stage = [\\\"one\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\", \\\"five\\\", \\\"six\\\"];\\n    for (const s of stage) {\\n        await hire_round_one_stage(ns, s);\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * A round of hiring.  We want to hire 1 employee for each office, in a\\n * particular role.  We want to fill the following positions:\\n *\\n * (1) Operations\\n * (2) Engineer\\n * (3) Business\\n * (4) Management\\n *\\n * @param ns The Netscript API.\\n * @param n Which stage of hiring is this?  This is not the same as the\\n *     investment round.  Must be a word representing the hiring round.  For\\n *     example, if this is stage 1 of hiring, then pass in \\\"one\\\".  If it is\\n *     stage 2 of hiring, then pass in \\\"two\\\", and so on.\\n */\\nasync function hire_round_one_stage(ns, n) {\\n    assert(n !== \\\"\\\");\\n    log(ns, `Stage ${to_number(n)} of hiring`);\\n    const org = new Corporation(ns);\\n    const current = agriculture.hire.stage[n].NOW;\\n    const role = agriculture.hire.stage[n].ROLE;\\n    const div = corp.industry.AGRI;\\n    for (const ct of cities.all) {\\n        // Sanity check the current number of employees in the given role.\\n        switch (role) {\\n            case \\\"Operations\\\":\\n                if (org.num_operations(div, ct) > current) {\\n                    continue;\\n                }\\n                break;\\n            case \\\"Engineer\\\":\\n                if (org.num_engineer(div, ct) > current) {\\n                    continue;\\n                }\\n                break;\\n            case \\\"Business\\\":\\n                if (org.num_business(div, ct) > current) {\\n                    continue;\\n                }\\n                break;\\n            case \\\"Management\\\":\\n                if (org.num_management(div, ct) > current) {\\n                    continue;\\n                }\\n                break;\\n            default:\\n                // Should never reach here.\\n                assert(false);\\n        }\\n        // Hire an employee for the role.\\n        await new_hire(ns, div, ct, role, bool.WAIT);\\n        const prefix = `${div}: ${ct}`;\\n        const msg = `hired 1 employee and assigned to ${role}`;\\n        log(ns, `${prefix}: ${msg}`);\\n    }\\n}\\n\\n/**\\n * Upgrade the warehouse of each division in each city.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the investment round number.\\n */\\nasync function level_up_storage(ns, n) {\\n    log(ns, `Round ${to_number(n)} of warehouse upgrade`);\\n    while (!all_warehouses_upgraded(ns, n)) {\\n        upgrade_warehouse(ns, n);\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    const size = ns.nFormat(agriculture.warehouse.round[n].SIZE, \\\"0,00.00a\\\");\\n    log(ns, `New storage capacity of each warehouse: ${size}`);\\n}\\n\\n/**\\n * Purchase some materials.  We want to buy some or all of these materials:\\n *\\n * (1) AI Cores\\n * (2) Chemicals\\n * (3) Drugs\\n * (4) Energy\\n * (5) Food\\n * (7) Hardware\\n * (8) Real Estate\\n * (9) Metal\\n * (10) Plants\\n * (11) Robots\\n * (12) Water\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the round number.  This is the same as the\\n *     investment round number.\\n */\\nasync function material_buy(ns, n) {\\n    log(ns, `Round ${to_number(n)} of material purchase`);\\n    const material = [\\n        corp.material.AI,\\n        corp.material.CHEMICAL,\\n        corp.material.DRUG,\\n        corp.material.ENERGY,\\n        corp.material.FOOD,\\n        corp.material.HARDWARE,\\n        corp.material.LAND,\\n        corp.material.METAL,\\n        corp.material.PLANT,\\n        corp.material.ROBOT,\\n        corp.material.WATER,\\n    ];\\n    const amount = [\\n        agriculture.material.ai.buy.round[n].N,\\n        agriculture.material.chemical.buy.round[n].N,\\n        agriculture.material.drug.buy.round[n].N,\\n        agriculture.material.energy.buy.round[n].N,\\n        agriculture.material.food.buy.round[n].N,\\n        agriculture.material.hardware.buy.round[n].N,\\n        agriculture.material.land.buy.round[n].N,\\n        agriculture.material.metal.buy.round[n].N,\\n        agriculture.material.plant.buy.round[n].N,\\n        agriculture.material.robot.buy.round[n].N,\\n        agriculture.material.water.buy.round[n].N,\\n    ];\\n    const target = [\\n        agriculture.material.ai.buy.round[n].TARGET,\\n        agriculture.material.chemical.buy.round[n].TARGET,\\n        agriculture.material.drug.buy.round[n].TARGET,\\n        agriculture.material.energy.buy.round[n].TARGET,\\n        agriculture.material.food.buy.round[n].TARGET,\\n        agriculture.material.hardware.buy.round[n].TARGET,\\n        agriculture.material.land.buy.round[n].TARGET,\\n        agriculture.material.metal.buy.round[n].TARGET,\\n        agriculture.material.plant.buy.round[n].TARGET,\\n        agriculture.material.robot.buy.round[n].TARGET,\\n        agriculture.material.water.buy.round[n].TARGET,\\n    ];\\n    assert(material.length === amount.length);\\n    assert(material.length === target.length);\\n    const div = corp.industry.AGRI;\\n    for (let i = 0; i < material.length; i++) {\\n        const org = new Corporation(ns);\\n        for (const ct of cities.all) {\\n            if (org.material_qty(div, ct, material[i]) >= target[i]) {\\n                continue;\\n            }\\n            const prefix = `${div}: ${ct}`;\\n            const amt = ns.nFormat(amount[i], \\\"0,00.00a\\\");\\n            log(ns, `${prefix}: Buying ${amt} units of ${material[i]}`);\\n            await org.material_buy(div, ct, material[i], amount[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * Round 1 in preparing our corporation.  Perform these tasks in order:\\n *\\n * (1) Accept investment money.\\n * (2) Hire new employees.\\n * (3) Level up various upgrades.\\n * (4) Upgrade the storage capacity of warehouses.\\n * (5) Purchase materials.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function round_one(ns) {\\n    await investment_offer(ns, \\\"one\\\");\\n    await hire_round_one(ns);\\n    await upgrade_round_one(ns);\\n    await level_up_storage(ns, \\\"one\\\");\\n    await material_buy(ns, \\\"one\\\");\\n}\\n\\n/**\\n * Round 2 in preparing our corporation.  Perform these tasks in order:\\n *\\n * (1) Accept investment money.\\n * (2) Upgrade the storage capacity of warehouses.\\n * (3) Purchase materials.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function round_two(ns) {\\n    await investment_offer(ns, \\\"two\\\");\\n    await level_up_storage(ns, \\\"two\\\");\\n    await material_buy(ns, \\\"two\\\");\\n}\\n\\n/**\\n * Round 1 of miscellaneous upgrades.  Level up various upgrades to a desired\\n * level.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function upgrade_round_one(ns) {\\n    log(ns, \\\"Round 1 of levelling upgrades\\\");\\n    const upg = [corp.upgrade.FACTORY, corp.upgrade.STORAGE];\\n    log(ns, `Level up these upgrades: ${upg.join(\\\", \\\")}`);\\n    const lvl = corp_t.upgrade.round.one.LEVEL;\\n    const org = new Corporation(ns);\\n    for (;;) {\\n        if (\\n            org.level(corp.upgrade.FACTORY) >= lvl\\n            && org.level(corp.upgrade.STORAGE) >= lvl\\n        ) {\\n            break;\\n        }\\n        upgrade_round_one_level_up(ns);\\n        await ns.sleep(corp_t.TICK);\\n    }\\n    const lvl_factory = org.level(corp.upgrade.FACTORY);\\n    const lvl_storage = org.level(corp.upgrade.STORAGE);\\n    log(ns, `Upgraded ${corp.upgrade.FACTORY} to level ${lvl_factory}`);\\n    log(ns, `Upgraded ${corp.upgrade.STORAGE} to level ${lvl_storage}`);\\n}\\n\\n/**\\n * Round 1 of miscellaneous upgrade.  Level up various upgrades by 1 level.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction upgrade_round_one_level_up(ns) {\\n    const lvl = corp_t.upgrade.round.one.LEVEL;\\n    const org = new Corporation(ns);\\n    if (org.level(corp.upgrade.FACTORY) < lvl) {\\n        org.level_upgrade(corp.upgrade.FACTORY);\\n    }\\n    if (org.level(corp.upgrade.STORAGE) < lvl) {\\n        org.level_upgrade(corp.upgrade.STORAGE);\\n    }\\n}\\n\\n/**\\n * Upgrade the storage capacity of each warehouse.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the investment round number.\\n */\\nfunction upgrade_warehouse(ns, n) {\\n    const org = new Corporation(ns);\\n    const target = agriculture.warehouse.round[n].SIZE;\\n    const howmany = 1;\\n    const div = corp.industry.AGRI;\\n    const is_under_capacity = (ct) => org.warehouse_capacity(div, ct) < target;\\n    cities.all\\n        .filter((ct) => is_under_capacity(ct))\\n        .forEach((ct) => org.upgrade_warehouse(div, ct, howmany));\\n}\\n\\n/**\\n * Prepare our corporation after the initial setup.  We iterate over the\\n * following cycle:\\n *\\n * (1) Accept investment money.\\n * (2) Hire employees.\\n * (3) Level up.\\n * (4) Upgrade storage.\\n * (5) Buy materials.\\n *\\n * Usage: run quack/corporation/prep.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Sanity checks.\\n    const org = new Corporation(ns);\\n    assert(has_corporation_api(ns));\\n    assert(org.has_corp());\\n    assert(org.has_office_warehouse_api());\\n    // Various rounds of preparation.\\n    create_file(ns, corp.PREP, ns.getScriptName());\\n    await round_one(ns);\\n    await round_two(ns);\\n    log(ns, \\\"Waiting for each office to be vivacious\\\");\\n    await org.vivacious_office();\\n    // Next scripts in the load chain.\\n    exec(ns, \\\"/quack/corporation/agriculture.js\\\");\\n    exec(ns, \\\"/quack/corporation/tobacco.js\\\");\\n    ns.rm(corp.PREP, home);\\n}\\n\",\"filename\":\"/quack/corporation/prep.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { corp, corp_t, tobacco } from \\\"/quack/lib/constant/corp.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Corporation } from \\\"/quack/lib/corporation/corp.js\\\";\\nimport {\\n    buy_research,\\n    create_product,\\n    discontinue_product,\\n    expand_city,\\n    finishing_product,\\n    has_all_research,\\n    hire,\\n    hire_advert,\\n    investment_offer,\\n    more_unlock_upgrade,\\n    new_hire,\\n    sell_product,\\n    smart_supply,\\n    to_number,\\n} from \\\"/quack/lib/corporation/util.js\\\";\\nimport { create_file, log } from \\\"/quack/lib/io.js\\\";\\nimport { has_corporation_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Everything we need to do before taking our corporation to public.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function before_going_public(ns) {\\n    await more_research(ns);\\n    const unlock_upg = await more_unlock_upgrade(ns);\\n    if (unlock_upg.length > 0) {\\n        const div = corp.industry.TOBACCO;\\n        log(ns, `${div}: bought unlock upgrade(s): ${unlock_upg.join(\\\", \\\")}`);\\n    }\\n}\\n\\n/**\\n * An enhanced product cycle.  In this cycle, we discontinue the product of\\n * lowest rating and develop a new product of higher rating.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the product round.  If it is the product in\\n *     round 1, pass in the word \\\"one\\\", and so on.\\n */\\nasync function enhanced_product_cycle(ns, n) {\\n    // If we have developed the maximum number of products, then we must\\n    // discontinue a product to make room for a new product (possibly of higher\\n    // rating).\\n    const div = corp.industry.TOBACCO;\\n    if (has_init_max_products(ns)) {\\n        const name = discontinue_product(ns, div);\\n        log(ns, `${div}: discontinued a product: ${name}`);\\n    }\\n    await product_cycle(ns, n);\\n    log(ns, `${div}: waiting for each office to be vivacious`);\\n    const org = new Corporation(ns);\\n    await org.vivacious_office();\\n}\\n\\n/**\\n * Whether we have reached the maximum number of products for our Tobacco\\n * division.  The product capacity of the division is assumed to be at the\\n * initial level.\\n *\\n * @param ns The Netscript API.\\n * @return True if our Tobacco division has the maximum number of products, at\\n *     the initial capacity; false otherwise.\\n */\\nfunction has_init_max_products(ns) {\\n    const org = new Corporation(ns);\\n    const div = corp.industry.TOBACCO;\\n    return org.all_products(div).length === corp_t.product.INIT_TAU;\\n}\\n\\n/**\\n * Hire a crop of employees for our Tobacco division.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the hiring stage.  If it is stage 1 of hiring,\\n *     pass in the word \\\"one\\\", and so on.\\n */\\nasync function hire_employees(ns, n) {\\n    log(ns, `Round ${to_number(n)} of hiring`);\\n    const div = corp.industry.TOBACCO;\\n    for (const ct of cities.all) {\\n        const org = new Corporation(ns);\\n        const nbusiness = tobacco[ct].hire.stage[n].BUSINESS;\\n        const nengineer = tobacco[ct].hire.stage[n].ENGINEER;\\n        const nmanagement = tobacco[ct].hire.stage[n].MANAGEMENT;\\n        const noperations = tobacco[ct].hire.stage[n].OPERATIONS;\\n        const nrnd = tobacco[ct].hire.stage[n].RND;\\n        const ntrain = tobacco[ct].hire.stage[n].TRAIN;\\n        const nidle = tobacco[ct].hire.stage[n].IDLE;\\n        for (let i = org.num_business(div, ct); i < nbusiness; i++) {\\n            await new_hire(ns, div, ct, corp.job.BUSINESS, bool.WAIT);\\n        }\\n        for (let i = org.num_engineer(div, ct); i < nengineer; i++) {\\n            await new_hire(ns, div, ct, corp.job.ENGINEER, bool.WAIT);\\n        }\\n        for (let i = org.num_management(div, ct); i < nmanagement; i++) {\\n            await new_hire(ns, div, ct, corp.job.MANAGEMENT, bool.WAIT);\\n        }\\n        for (let i = org.num_operations(div, ct); i < noperations; i++) {\\n            await new_hire(ns, div, ct, corp.job.OPERATIONS, bool.WAIT);\\n        }\\n        for (let i = org.num_rnd(div, ct); i < nrnd; i++) {\\n            await new_hire(ns, div, ct, corp.job.RND, bool.WAIT);\\n        }\\n        for (let i = org.num_training(div, ct); i < ntrain; i++) {\\n            await new_hire(ns, div, ct, corp.job.TRAIN, bool.WAIT);\\n        }\\n        for (let i = org.num_idle(div, ct); i < nidle; i++) {\\n            await new_hire(ns, div, ct, corp.job.IDLE, bool.WAIT);\\n        }\\n    }\\n}\\n\\n/**\\n * Purchase various other research.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function more_research(ns) {\\n    const res = [\\n        // Employee research\\n        corp.research.BREW,\\n        corp.research.PARTY,\\n        corp.research.DRUG,\\n        corp.research.INJECT,\\n        corp.research.JUICE,\\n        corp.research.JOY,\\n        corp.research.OVERCLOCK,\\n        corp.research.STIMULATE,\\n        // Division research\\n        corp.research.DRONE,\\n        corp.research.DRONE_ASSEMBLY,\\n        corp.research.DRONE_TRANSPORT,\\n        corp.research.ASSEMBLER,\\n        corp.research.CAPACITY_I,\\n        corp.research.CAPACITY_II,\\n        corp.research.FULCRUM,\\n    ];\\n    const div = corp.industry.TOBACCO;\\n    const org = new Corporation(ns);\\n    for (;;) {\\n        if (has_all_research(ns, div, res)) {\\n            return;\\n        }\\n        log(ns, `${div}: expand the research unit of each office`);\\n        await hire(ns, div, bool.NO_WAIT);\\n        for (const r of res) {\\n            if (\\n                !org.has_research(div, r)\\n                && org.is_research_available(div, r)\\n            ) {\\n                if (org.has_enough_research_points(div, r)) {\\n                    log(ns, `${div}: buying research: ${r}`);\\n                    await buy_research(ns, div, r);\\n                }\\n            }\\n        }\\n        await ns.sleep(5 * wait_t.MINUTE);\\n    }\\n}\\n\\n/**\\n * The product cycle.  This includes hiring, development, and selling.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the product round.  If it is the product in\\n *     round 1, pass in the word \\\"one\\\", and so on.\\n */\\nasync function product_cycle(ns, n) {\\n    if (has_init_max_products(ns)) {\\n        return;\\n    }\\n    log(ns, `Round ${to_number(n)} of product development`);\\n    await hire_employees(ns, n);\\n    const div = corp.industry.TOBACCO;\\n    const name = create_product(ns, div);\\n    log(ns, `${div}: creating product: ${name}`);\\n    await upgrade(ns, n);\\n    log(ns, `${div}: waiting for product to complete: ${name}`);\\n    await finishing_product(ns, div, name);\\n    await hire_advert(ns, div);\\n    log(ns, `${div}: selling product in all cities: ${name}`);\\n    sell_product(ns, div, name);\\n    await ns.sleep(corp_t.TICK);\\n}\\n\\n/**\\n * Purchase various research.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function research(ns) {\\n    const lab = corp.research.RND_LAB;\\n    const res = [lab, corp.research.TA_I, corp.research.TA_II];\\n    const div = corp.industry.TOBACCO;\\n    const org = new Corporation(ns);\\n    const has_research = (x) => org.has_research(div, x);\\n    const city = cities.all.filter((ct) => ct !== tobacco.DEVELOPER_CITY);\\n    const wait_interval = 10 * wait_t.MINUTE;\\n    for (;;) {\\n        // Do we have all the required research yet?\\n        if (res.every(has_research)) {\\n            return;\\n        }\\n        // Expand the research unit of each city other than the developer city.\\n        for (const ct of city) {\\n            await new_hire(ns, div, ct, corp.job.RND, bool.WAIT);\\n            await ns.sleep(wait_t.MINUTE);\\n        }\\n        // We must first buy/setup a research facility.\\n        if (!org.has_research(div, lab)) {\\n            if (org.has_enough_research_points(div, lab)) {\\n                log(ns, `${div}: buying research: ${lab}`);\\n                await buy_research(ns, div, lab);\\n            }\\n            await ns.sleep(wait_interval);\\n            continue;\\n        }\\n        // Next, buy the Market TA research.\\n        const candidate = res.filter((r) => !org.has_research(div, r));\\n        for (const r of candidate) {\\n            if (org.has_enough_research_points(div, r)) {\\n                log(ns, `${div}: buying research: ${r}`);\\n                await buy_research(ns, div, r);\\n            }\\n        }\\n        await ns.sleep(wait_interval);\\n    }\\n}\\n\\n/**\\n * Setup our Tobacco division.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction setup_division(ns) {\\n    const org = new Corporation(ns);\\n    const div = corp.industry.TOBACCO;\\n    if (org.has_division(div)) {\\n        return;\\n    }\\n    org.expand_industry(div);\\n    log(ns, `Created new division: ${div}`);\\n}\\n\\n/**\\n * Levelling up various upgrades.\\n *\\n * @param ns The Netscript API.\\n * @param n A string representing the upgrade round.  If it is round 1 of\\n *     upgrade, pass in the word \\\"one\\\", and so on.\\n */\\nasync function upgrade(ns, n) {\\n    const upg = [\\n        \\\"DreamSense\\\",\\n        \\\"FocusWires\\\",\\n        \\\"Neural Accelerators\\\",\\n        \\\"Speech Processor Implants\\\",\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\n        \\\"Project Insight\\\",\\n        \\\"Wilson Analytics\\\",\\n    ];\\n    log(ns, `Round ${to_number(n)} of upgrades: ${upg.join(\\\", \\\")}`);\\n    const dream_lvl = tobacco.upgrade.round[n].DreamSense;\\n    const focus_lvl = tobacco.upgrade.round[n].FocusWires;\\n    const neural_lvl = tobacco.upgrade.round[n][\\\"Neural Accelerators\\\"];\\n    const speech_lvl = tobacco.upgrade.round[n][\\\"Speech Processor Implants\\\"];\\n    // eslint-disable-next-line max-len\\n    const injector_lvl = tobacco.upgrade.round[n][\\\"Nuoptimal Nootropic Injector Implants\\\"];\\n    const insight_lvl = tobacco.upgrade.round[n][\\\"Project Insight\\\"];\\n    const analytic_lvl = tobacco.upgrade.round[n][\\\"Wilson Analytics\\\"];\\n    const org = new Corporation(ns);\\n    for (;;) {\\n        // Have we levelled up enough?\\n        if (\\n            org.level(corp.upgrade.DREAM) >= dream_lvl\\n            && org.level(corp.upgrade.FOCUS) >= focus_lvl\\n            && org.level(corp.upgrade.NEURAL) >= neural_lvl\\n            && org.level(corp.upgrade.SPEECH) >= speech_lvl\\n            && org.level(corp.upgrade.INJECTOR) >= injector_lvl\\n            && org.level(corp.upgrade.INSIGHT) >= insight_lvl\\n            && org.level(corp.upgrade.ANALYTIC) >= analytic_lvl\\n        ) {\\n            break;\\n        }\\n        // Level up various upgrades.\\n        if (org.level(corp.upgrade.DREAM) < dream_lvl) {\\n            org.level_upgrade(corp.upgrade.DREAM);\\n        }\\n        if (org.level(corp.upgrade.FOCUS) < focus_lvl) {\\n            org.level_upgrade(corp.upgrade.FOCUS);\\n        }\\n        if (org.level(corp.upgrade.NEURAL) < neural_lvl) {\\n            org.level_upgrade(corp.upgrade.NEURAL);\\n        }\\n        if (org.level(corp.upgrade.SPEECH) < speech_lvl) {\\n            org.level_upgrade(corp.upgrade.SPEECH);\\n        }\\n        if (org.level(corp.upgrade.INJECTOR) < injector_lvl) {\\n            org.level_upgrade(corp.upgrade.INJECTOR);\\n        }\\n        if (org.level(corp.upgrade.INSIGHT) < insight_lvl) {\\n            org.level_upgrade(corp.upgrade.INSIGHT);\\n        }\\n        if (org.level(corp.upgrade.ANALYTIC) < analytic_lvl) {\\n            org.level_upgrade(corp.upgrade.ANALYTIC);\\n        }\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Branch out into the Tobacco industry and develop various products.\\n *\\n * Usage: run quack/corporation/tobacco.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Sanity checks.\\n    const org = new Corporation(ns);\\n    assert(has_corporation_api(ns));\\n    assert(org.has_corp());\\n    assert(org.has_office_warehouse_api());\\n    // Create and manage our Tobacco division.\\n    create_file(ns, corp.TOBA, ns.getScriptName());\\n    setup_division(ns);\\n    const div = corp.industry.TOBACCO;\\n    const new_office = await expand_city(ns, div);\\n    smart_supply(ns);\\n    if (new_office.length > 0) {\\n        log(ns, `${div}: expanded to these cities: ${new_office.join(\\\", \\\")}`);\\n    }\\n    await investment_offer(ns, \\\"three\\\");\\n    await product_cycle(ns, \\\"one\\\");\\n    await product_cycle(ns, \\\"two\\\");\\n    await product_cycle(ns, \\\"three\\\");\\n    await investment_offer(ns, \\\"four\\\");\\n    await research(ns);\\n    const round = [\\\"four\\\", \\\"five\\\", \\\"six\\\"];\\n    for (const n of round) {\\n        await enhanced_product_cycle(ns, n);\\n    }\\n    // Some last minute house keeping.\\n    await before_going_public(ns);\\n    exec(ns, \\\"/quack/corporation/janitor.js\\\");\\n    ns.rm(corp.TOBA, home);\\n}\\n\",\"filename\":\"/quack/corporation/tobacco.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { cct } from \\\"/quack/lib/constant/cct.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\n\\n/**\\n * Find coding contracts on world servers.  This script essentially searches\\n * the network of world servers to find coding contracts.\\n *\\n * Usage: run quack/find-cct.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    network(ns)\\n        .concat([home])\\n        .filter((s) => ns.ls(s, cct.SUFFIX).length > 0)\\n        .forEach((host) => {\\n            // Print the name of the coding contract, together with its type.\\n            ns.ls(host, cct.SUFFIX).forEach((f) => {\\n                const type = ns.codingcontract.getContractType(f, host);\\n                log(ns, `${host}: ${f}, ${type}`);\\n            });\\n        });\\n}\\n\",\"filename\":\"/quack/find-cct.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport {\\n    augment_to_install,\\n    purchase_augment,\\n} from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { has_gang_api } from \\\"/quack/lib/source.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Purchase Augmentations from our gang faction.\\n *\\n * @param ns The Netscript API.\\n * @return True if we bought at least one Augmentation; false otherwise.\\n */\\nasync function buy_augment(ns) {\\n    const { faction } = ns.gang.getGangInformation();\\n    await purchase_augment(\\n        ns,\\n        faction,\\n        bool.NO_STOP_TRADE,\\n        bool.NO_BUY_NFG,\\n        bool.NO_RAISE_MONEY\\n    );\\n    const to_install = augment_to_install(ns);\\n    return to_install.length > 0;\\n}\\n\\n/**\\n * Purchase Augmentations from the faction in which we created a gang.  We use\\n * any money available to us.  This should help to speed up our run through a\\n * BitNode.\\n *\\n * Usage: run quack/gang/augment.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Less verbose log.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Sanity check.\\n    if (!has_gang_api(ns)) {\\n        log(ns, \\\"No access to Gang API\\\", colour.RED);\\n        return;\\n    }\\n    // The update loop.\\n    while (!ns.gang.inGang()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    const { faction } = ns.gang.getGangInformation();\\n    log(ns, `Purchasing Augmentations from gang faction: ${faction}`);\\n    const success = await buy_augment(ns);\\n    if (success) {\\n        log(ns, `Bought Augmentations from ${faction}`);\\n        // The next script in the load chain.\\n        exec(ns, \\\"/quack/singularity/home.js\\\");\\n        return;\\n    }\\n    log(ns, `No Augmentations bought from ${faction}`);\\n}\\n\",\"filename\":\"/quack/gang/augment.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":787.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport {\\n    armour,\\n    gang_augment,\\n    gang_t,\\n    members,\\n    penalty_t,\\n    rootkit,\\n    task_t,\\n    vehicle,\\n    weapon,\\n} from \\\"/quack/lib/constant/gang.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Gangster } from \\\"/quack/lib/gang/gangster.js\\\";\\nimport { reassign_vigilante, strongest_member } from \\\"/quack/lib/gang/util.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Ascend a gang member.  Ascension provides a permanent boost to a member's\\n * stat multipliers.  However, the costs include:\\n *\\n * (1) Reset the member's progress and stats.\\n * (2) Lose all non-Augmentation equipment.\\n * (3) Lose all respect points gained by the member.  The respect points gained\\n *     by this member will be deducted from our total respect.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction ascend(ns) {\\n    const member = ns.gang.getMemberNames();\\n    if (member.length === 0) {\\n        return;\\n    }\\n    const gangster = new Gangster(ns);\\n    member.forEach((s) => gangster.ascend(s));\\n}\\n\\n/**\\n * Marshall our forces on the border and be ready for war.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction casus_belli(ns) {\\n    assert(ns.gang.getGangInformation().territoryWarfareEngaged);\\n    assert(has_max_members(ns));\\n    const gangster = new Gangster(ns);\\n    gangster.turf_war(ns.gang.getMemberNames());\\n}\\n\\n/**\\n * Choose gang members to be assigned to territory warfare.  This is territory\\n * warfare to help increase our gang power, not a clash against a rival gang.\\n * We want the following members to engage in turf war:\\n *\\n * (1) Vanguard x 1\\n * (2) Artillery x 1\\n * (3) Pilot x 1\\n * (4) Punk x 1\\n *\\n * As we have multiple gang members who hold the role of Punk, choose the\\n * strongest of those members.\\n *\\n * @param ns The Netscript API.\\n * @return An array of member names.  This is never an empty array.\\n */\\nfunction choose_warriors(ns) {\\n    const gangster = new Gangster(ns);\\n    const combatant = ns.gang\\n        .getMemberNames()\\n        .filter(\\n            (s) => gangster.is_vanguard(s)\\n                || gangster.is_artillery(s)\\n                || gangster.is_pilot(s)\\n        );\\n    assert(combatant.length > 0);\\n    // We want at most 1 Punk assigned to territory warfare.\\n    const punk = ns.gang.getMemberNames().filter((s) => gangster.is_punk(s));\\n    const punk_warrior = punk.filter((p) => gangster.is_warrior(p));\\n    assert(punk.length > 0);\\n    let warrior = [];\\n    if (punk_warrior.length > 0) {\\n        warrior = combatant.concat([]);\\n    } else {\\n        warrior = combatant.concat([strongest_member(ns, punk)]);\\n    }\\n    assert(warrior.length > 0);\\n    assert(warrior.length <= members.WARRIOR);\\n    return warrior;\\n}\\n\\n/**\\n * Create a gang within the given criminal organization.  If we are in a\\n * BitNode other than BN2.x, we must have a certain amount of negative karma\\n * as a pre-requisite for creating a gang.\\n *\\n * @param ns The Netscript API.\\n * @param fac A string representing the name of a criminal organization.\\n */\\nasync function create_gang(ns, fac) {\\n    assert(is_valid_faction(fac));\\n    if (ns.gang.inGang()) {\\n        log(ns, `Manage a gang in ${fac}`);\\n        return;\\n    }\\n    log(ns, `Create and manage a gang in ${fac}`);\\n    while (!ns.gang.inGang()) {\\n        ns.gang.createGang(fac);\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Reassign gang members to various tasks that help to lower our penalty.  As\\n * this is a criminal gang, our members can only engage in vigilante justice\\n * and are not able to engage in ethical hacking.  Choose a number of our\\n * gangsters and set them to vigilante justice.  The remaining members are given\\n * jobs that attract less wanted levels than their current jobs.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction decrease_penalty(ns) {\\n    reassign_vigilante(ns);\\n    const combatant = [];\\n    const other = [];\\n    const trainee = [];\\n    const gangster = new Gangster(ns);\\n    const candidate = ns.gang\\n        .getMemberNames()\\n        .filter((s) => !gangster.is_vigilante(s));\\n    candidate.forEach((s) => {\\n        if (gangster.needs_training(s)) {\\n            trainee.push(s);\\n        } else if (gangster.is_combatant(s)) {\\n            combatant.push(s);\\n        } else if (gangster.is_miscellaneous(s)) {\\n            other.push(s);\\n        }\\n    });\\n    gangster.train(trainee);\\n    graduate(ns);\\n    gangster.extort(combatant);\\n    gangster.blackmail(other);\\n}\\n\\n/**\\n * All Augmentations that raise the defense of a gang member.\\n */\\nfunction defensive_equipment_augment() {\\n    return Object.values(gang_augment).filter(\\n        (a) => a !== gang_augment.ARMS\\n            && a !== gang_augment.LEGS\\n            && a !== gang_augment.HEART\\n            && a !== gang_augment.WIRE\\n            && a !== gang_augment.NEURAL\\n            && a !== gang_augment.DATA\\n    );\\n}\\n\\n/**\\n * All weapons that raise the defense of a gang member.\\n */\\nfunction defensive_equipment_weapon() {\\n    return Object.values(weapon).filter((w) => w !== weapon.AWM);\\n}\\n\\n/**\\n * Whether to engage in territory warfare against a rival gang.  By default,\\n * we do not engage in turf warfare.  However, we enable turf warfare provided\\n * that the following conditions are satisfied:\\n *\\n * (1) We have the maximum number of gang members.\\n * (2) Our chance of winning against a rival gang is at least a given\\n *     percentage.\\n *\\n * However, if our gang already has taken over 100% of the territory, then\\n * there is no need to engage in turf warfare.\\n *\\n * @param ns The Netscript API.\\n * @return True if we are to engage in territory warfare against another gang;\\n *     false otherwise.\\n */\\nfunction enable_turf_war(ns) {\\n    if (has_all_turf(ns)) {\\n        return bool.NO_WAR;\\n    }\\n    if (has_max_members(ns) && min_victory_chance(ns) >= gang_t.WIN) {\\n        return bool.WAR;\\n    }\\n    return bool.NO_WAR;\\n}\\n\\n/**\\n * Attempt to equip each gang member with each of the following:\\n *\\n * (1) Augmentation\\n * (2) weapon\\n * (3) armour\\n * (4) vehicle\\n * (5) rootkit\\n *\\n * If a member already has an Augmentation, weapon, armour, vehicle, or rootkit\\n * then we attempt to give them another piece of equipment.  Our attempt can\\n * succeed or fail, depending on whether we have sufficient funds to purchase\\n * equipment.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction equip(ns) {\\n    const gangster = new Gangster(ns);\\n    for (const s of ns.gang.getMemberNames()) {\\n        // Equip items that raise a member's defense.  Higher defense translates\\n        // to a lower probability of death during a clash against a rival gang.\\n        // Always try to first purchase an Augmentation that raises defense\\n        // because the effects of Augmentations are persistent after an\\n        // ascension.  Next, we equip weapons that raise defense.  Not all\\n        // weapons raise the defense of a gang member.  Finally, we equip armour\\n        // pieces, all of which raise defense.\\n        equip_augment_def(ns, s);\\n        equip_weapon_def(ns, s);\\n        for (const amr of Object.values(armour)) {\\n            if (gangster.has_armour(s, amr)) {\\n                continue;\\n            }\\n            if (gangster.equip_armour(s, amr)) {\\n                break;\\n            }\\n        }\\n        // Now equip items that raise other stats.  Ensure we have first\\n        // equipped all items that raise defense.\\n        if (!has_all_def_equipment(ns, s)) {\\n            continue;\\n        }\\n        // Try to equip other Augmentations.\\n        const other_augment = Object.values(gang_augment).filter(\\n            (a) => !defensive_equipment_augment().includes(a)\\n        );\\n        for (const aug of other_augment) {\\n            if (gangster.has_augment(s, aug)) {\\n                continue;\\n            }\\n            if (gangster.equip_augment(s, aug)) {\\n                break;\\n            }\\n        }\\n        // Try to equip other weapons.\\n        const other_weapon = Object.values(weapon).filter(\\n            (w) => !defensive_equipment_weapon().includes(w)\\n        );\\n        for (const wpn of other_weapon) {\\n            if (gangster.has_weapon(s, wpn)) {\\n                continue;\\n            }\\n            if (gangster.equip_weapon(s, wpn)) {\\n                break;\\n            }\\n        }\\n        // Try to equip a new vehicle.\\n        for (const vhc of Object.values(vehicle)) {\\n            if (gangster.has_vehicle(s, vhc)) {\\n                continue;\\n            }\\n            if (gangster.equip_vehicle(s, vhc)) {\\n                break;\\n            }\\n        }\\n        // Try to equip a rootkit.  This should be low on our priority list\\n        // because members of a criminal gang primarily depend on their combat\\n        // stats and Charisma.\\n        for (const kit of Object.values(rootkit)) {\\n            if (gangster.has_rootkit(s, kit)) {\\n                continue;\\n            }\\n            if (gangster.equip_rootkit(s, kit)) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * Equip a gang member with various Augmentations that raise their defense.  The\\n * effects of Augmentations are persistent and a member does not lose them after\\n * an ascension.  We want to equip a member with Augmentations that raise their\\n * defense.  The higher is the defense of a member, the lower is the probability\\n * of death during a clash against a rival gang.  The following Augmentations\\n * raise defense:\\n *\\n * (1) Bionic Spine: 1.15\\n * (2) BrachiBlades: 1.4\\n * (3) Nanofiber Weave: 1.2\\n * (4) Synfibril Muscle: 1.3\\n * (5) Graphene Bone Lacings: 1.7\\n *\\n * Unfortunately, the following Augmentations do not raise defense:\\n *\\n * (1) Bionic Arms\\n * (2) Bionic Legs\\n * (3) Synthetic Heart\\n * (4) BitWire\\n * (5) Neuralstimulator\\n * (6) DataJack\\n *\\n * Refer to these files for more detail:\\n *\\n * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Gang/Gang.ts\\n * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Gang/data/upgrades.ts\\n *\\n * @param ns The Netscript API.\\n * @param name A string representing the name of our gang member.\\n */\\nfunction equip_augment_def(ns, name) {\\n    const gangster = new Gangster(ns);\\n    for (const aug of defensive_equipment_augment()) {\\n        if (gangster.has_augment(name, aug)) {\\n            continue;\\n        }\\n        if (gangster.equip_augment(name, aug)) {\\n            return;\\n        }\\n    }\\n}\\n\\n/**\\n * Equip a gang member with various weapons that raise their defense.  Weapons\\n * are important because most of them raise a gangster's defense.  While engaged\\n * in a clash against a rival gang, the defense of our gangster helps to lower\\n * the chance of death.  The higher is our member's defense, the lower is the\\n * probability of death.  The following weapons raise defense:\\n *\\n * (1) Baseball Bat: 1.04\\n * (2) Katana: 1.08\\n * (3) Glock 18C: 1.1\\n * (4) P90C: 1.1\\n * (5) Steyr AUG: 1.15\\n * (6) AK-47: 1.2\\n * (7) M15A10 Assault Rifle: 1.25\\n *\\n * Unfortunately, the AWM Sniper Rifle does not raise our member's defense.\\n * Refer to these files for more detail:\\n *\\n * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Gang/Gang.ts\\n * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Gang/data/upgrades.ts\\n *\\n * @param ns The Netscript API.\\n * @param name A string representing the name of our gang member.\\n */\\nfunction equip_weapon_def(ns, name) {\\n    const gangster = new Gangster(ns);\\n    for (const wpn of defensive_equipment_weapon()) {\\n        if (gangster.has_weapon(name, wpn)) {\\n            continue;\\n        }\\n        if (gangster.equip_weapon(name, wpn)) {\\n            return;\\n        }\\n    }\\n}\\n\\n/**\\n * Once a new member has completed their training, graduate and assign them\\n * their first job.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction graduate(ns) {\\n    const member = ns.gang.getMemberNames();\\n    const gangster = new Gangster(ns);\\n    gangster.graduate_combatant(member, task_t.COMBAT);\\n    gangster.graduate_hacker(member, task_t.HACK);\\n    gangster.graduate_other(member, task_t.CHARISMA);\\n}\\n\\n/**\\n * Whether we have equipped all items that raise a gang member's defense.\\n * Defense is important during a clash against a rival gang.  The higher is a\\n * member's defense, the lower is the probability of death during the clash.\\n *\\n * @param ns The Netscript API.\\n * @param name A string representing the name of a gang member.\\n * @return True if a gang member has all equipment that raise their defense;\\n *     false otherwise.\\n */\\nfunction has_all_def_equipment(ns, name) {\\n    const gangster = new Gangster(ns);\\n    for (const aug of defensive_equipment_augment()) {\\n        if (!gangster.has_augment(name, aug)) {\\n            return bool.NOT;\\n        }\\n    }\\n    for (const wpn of defensive_equipment_weapon()) {\\n        if (!gangster.has_weapon(name, wpn)) {\\n            return bool.NOT;\\n        }\\n    }\\n    for (const amr of Object.values(armour)) {\\n        if (!gangster.has_armour(name, amr)) {\\n            return bool.NOT;\\n        }\\n    }\\n    return bool.HAS;\\n}\\n\\n/**\\n * Whether our gang already controls 100% of the territory.\\n *\\n * @param ns The Netscript API.\\n * @return True if we already have control over 100% of the territory;\\n *     false otherwise.\\n */\\nfunction has_all_turf(ns) {\\n    return ns.gang.getGangInformation().territory >= 1;\\n}\\n\\n/**\\n * Whether we have the maximum number of members in our gang.\\n *\\n * @param ns The Netscript API.\\n * @return True if our gang is at capacity; false otherwise.\\n */\\nfunction has_max_members(ns) {\\n    return members.MAX === ns.gang.getMemberNames().length;\\n}\\n\\n/**\\n * Whether any of our gang members are currently committing acts of terrorism.\\n *\\n * @param ns The Netscript API.\\n * @return True if at least one gang member is committing acts of terrorism;\\n *     false otherwise.\\n */\\nfunction has_terrorist(ns) {\\n    const gangster = new Gangster(ns);\\n    for (const s of ns.gang.getMemberNames()) {\\n        if (gangster.is_terrorist(s)) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\n/**\\n * Whether any of our gang members are currently on vigilante justice.\\n *\\n * @param ns The Netscript API.\\n * @return True if at least one gang member is currently assigned to vigilante\\n *     justice; false otherwise.\\n */\\nfunction has_vigilante(ns) {\\n    const gangster = new Gangster(ns);\\n    for (const s of ns.gang.getMemberNames()) {\\n        if (gangster.is_vigilante(s)) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\n/**\\n * Whether our gang is engaged in turf warfare.\\n *\\n * @param ns The Netscript API.\\n * @return True if our gang is engaged in turf warfare against a rival gang;\\n *     false otherwise.\\n */\\nfunction is_in_war(ns) {\\n    if (!ns.gang.getGangInformation().territoryWarfareEngaged) {\\n        return false;\\n    }\\n    const gangster = new Gangster(ns);\\n    const warrior = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_warrior(s));\\n    return warrior.length === members.MAX;\\n}\\n\\n/**\\n * Whether we are currently in a new tick.  Each tick lasts for approximately\\n * the time period as defined by the constant gang_t.TICK.  At the start of\\n * each tick, there is a chance for our gang to clash against a rival gang.\\n *\\n * @param ns The Netscript API.\\n * @param other An object containing information about other gangs.  The data\\n *     in the object should be from the previous tick.\\n * @return True if we are in a new tick; false otherwise.\\n */\\nfunction is_new_tick(ns, other) {\\n    const current = ns.gang.getOtherGangInformation();\\n    for (const g of Object.keys(current)) {\\n        if (\\n            current[g].power !== other[g].power\\n            || current[g].territory !== other[g].territory\\n        ) {\\n            return bool.NEW;\\n        }\\n    }\\n    return bool.NOT_NEW;\\n}\\n\\n/**\\n * Whether the given string represents the name of a criminal organization\\n * within which we can create a criminal gang.\\n *\\n * @param fac A string representing the name of a criminal organization.\\n * @return True if we can create a criminal gang within the given faction;\\n *     false otherwise.\\n */\\nfunction is_valid_faction(fac) {\\n    assert(fac.length > 0);\\n    const organization = [\\n        \\\"Slum Snakes\\\",\\n        \\\"Speakers for the Dead\\\",\\n        \\\"Tetrads\\\",\\n        \\\"The Dark Army\\\",\\n        \\\"The Syndicate\\\",\\n    ];\\n    return organization.includes(fac);\\n}\\n\\n/**\\n * The minimum chance of winning a clash against any rival gang.  The chance is\\n * reported as an integer percentage.  For example, if our chance to win a\\n * clash is 0.6879, we convert this to the percentage of 68.79 and take only\\n * the integer part, which in this case is 68%.\\n *\\n * @param ns The Netscript API.\\n * @return The minimum chance as an integer percentage of winning a clash\\n *     against any rival gang.\\n */\\nfunction min_victory_chance(ns) {\\n    let chance = Infinity;\\n    const our_gang = ns.gang.getGangInformation().faction;\\n    const other_gang = ns.gang.getOtherGangInformation();\\n    for (const g of Object.keys(other_gang)) {\\n        if (our_gang === g) {\\n            continue;\\n        }\\n        chance = Math.min(chance, ns.gang.getChanceToWinClash(g));\\n    }\\n    return Math.floor(chance * 100);\\n}\\n\\n/**\\n * Si vis pacem, para bellum.  Make preparation to increase our power.  We do\\n * not engage in turf warfare yet.  First, build our gang power.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction para_bellum(ns) {\\n    // If we already control 100% of the territory, there is no need to send\\n    // any gang member to turf warfare.\\n    if (has_all_turf(ns)) {\\n        return;\\n    }\\n    // We want at most members.WARRIOR members to be engaged in territory\\n    // warfare.  The remaining members should be in as high-paying jobs as\\n    // possible.  The 4 combatants can be assigned to arms trafficking and the\\n    // 4 miscellaneous members can be assigned to trafficking humans.  We can\\n    // have 8 members be involved in some form of trafficking.  However, we\\n    // also need 1 member to be committing acts of terrorism to help raise our\\n    // respect so we can recruit more members.  The number of members engaged\\n    // in some form of trafficking is effectively 7.  The subtraction of 1\\n    // accounts for the lone member who commits acts of terrorism.\\n    const threshold = members.MAX - members.WARRIOR - 1;\\n    // Not yet time to send gang members to turf warfare.\\n    const gangster = new Gangster(ns);\\n    const trafficker = ns.gang\\n        .getMemberNames()\\n        .filter(\\n            (s) => gangster.is_arms_trafficker(s)\\n                || gangster.is_human_trafficker(s)\\n        );\\n    if (trafficker.length < threshold) {\\n        return;\\n    }\\n    // Choose various combatants and reassign them to turf warfare.\\n    assert(trafficker.length >= threshold);\\n    gangster.turf_war(choose_warriors(ns));\\n}\\n\\n/**\\n * The penalty p is defined as the ratio of the wanted level over our respect.\\n * Multiply p by 100 and we see that the penalty expresses the wanted level as\\n * a percentage of our respect.  Tasks that our gang members engage in would\\n * take p percent longer as compared to when our wanted level is zero.  Note\\n * that the wanted level can never be lower than 1.  Aim to keep the penalty p\\n * below a certain fraction.\\n *\\n * @param ns The Netscript API.\\n * @return The penalty as a percentage.\\n */\\nfunction penalty(ns) {\\n    const wanted = ns.gang.getGangInformation().wantedLevel;\\n    const { respect } = ns.gang.getGangInformation();\\n    const p = Math.floor(100 * (wanted / respect));\\n    assert(p >= 0);\\n    return p;\\n}\\n\\n/**\\n * Reassign gang members to some other tasks.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign(ns) {\\n    reassign_combatant(ns);\\n    reassign_hacker(ns);\\n    reassign_miscellaneous(ns);\\n    reassign_from_neutral(ns);\\n}\\n\\n/**\\n * When we no longer need to lower our penalty, reassign our gang members to\\n * other jobs.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign_after_vigilante_justice(ns) {\\n    const gangster = new Gangster(ns);\\n    gangster.neutral(ns.gang.getMemberNames());\\n    update(ns);\\n}\\n\\n/**\\n * Following territory warfare against a rival gang, reassign our gang members\\n * to other jobs.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign_after_warfare(ns) {\\n    const gangster = new Gangster(ns);\\n    gangster.neutral(ns.gang.getMemberNames());\\n    update(ns);\\n}\\n\\n/**\\n * Reassign high-level gang members to trafficking illegal arms.  Reassign\\n * gang members if their Strength stat is in the half-open interval [min, max).\\n * That is, we include the minimum threshold but exclude the maximum threshold.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to traffick illegal arms.\\n * @param min The minimum value for the Strength stat.\\n * @param max The maximum value for the Strength stat.\\n */\\nfunction reassign_arms_trafficking(ns, member, min, max) {\\n    const gangster = new Gangster(ns);\\n    const candidate = [];\\n    for (const s of member) {\\n        if (!has_all_turf(ns)) {\\n            if (gangster.is_terrorist(s) || gangster.is_warrior(s)) {\\n                continue;\\n            }\\n        }\\n        if (min <= gangster.strength(s) && gangster.strength(s) < max) {\\n            candidate.push(s);\\n        }\\n    }\\n    gangster.traffick_arms(candidate);\\n}\\n\\n/**\\n * Reassign our miscellaneous gang members to threaten and blackmail\\n * high-profile targets.  Reassign our members if their Charisma stat is in the\\n * half-open interval [min, max).  We include the minimum threshold but exclude\\n * the maximum threshold.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to threaten and blackmail people.\\n * @param min The minimum value for the Charisma stat.\\n * @param max The maximum value for the Charisma stat.\\n */\\nfunction reassign_blackmail(ns, member, min, max) {\\n    const gangster = new Gangster(ns);\\n    const candidate = member.filter(\\n        (s) => min <= gangster.charisma(s) && gangster.charisma(s) < max\\n    );\\n    gangster.blackmail(candidate);\\n}\\n\\n/**\\n * Reassign combatants to other jobs.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign_combatant(ns) {\\n    const gangster = new Gangster(ns);\\n    const combatant = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_combatant(s));\\n    // Assign gang members with mid- to advanced-level stats to more\\n    // profitable jobs.\\n    reassign_extortion(ns, combatant, task_t.EXTORT, task_t.ROBBERY);\\n    reassign_robbery(ns, combatant, task_t.ROBBERY, task_t.TRAFFICK_ARMS);\\n    // Try to have at least one gang member assigned to commit acts of\\n    // terrorism.  This should help to increase our respect so we can recruit\\n    // more members.  However, if we already have the maximum number of\\n    // gangsters, then there is no need to have anyone be terrorists.\\n    reassign_terrorism(ns, combatant, task_t.TERROR, Infinity);\\n    // Assign other high-level members to trafficking illegal arms.\\n    reassign_arms_trafficking(ns, combatant, task_t.TRAFFICK_ARMS, Infinity);\\n}\\n\\n/**\\n * Reassign our miscellaneous gang members to run a con.  Reassign our members\\n * if their Charisma stat is in the half-open interval [min, max).  We include\\n * the minimum threshold but exclude the maximum threshold.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to run a con.\\n * @param min The minimum value for the Charisma stat.\\n * @param max The maximum value for the Charisma stat.\\n */\\nfunction reassign_con(ns, member, min, max) {\\n    const gangster = new Gangster(ns);\\n    const candidate = member.filter(\\n        (s) => min <= gangster.charisma(s) && gangster.charisma(s) < max\\n    );\\n    gangster.con(candidate);\\n}\\n\\n/**\\n * Reassign mid-level gang members to strongarm civilians on our turf.\\n * Reassign gang members if their Strength stat is in the half-open interval\\n * [min, max).  That is, we include the minimum threshold but exclude the\\n * maximum threshold.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to strongarm civilians.\\n * @param min The minimum value for the Strength stat.\\n * @param max The maximum value for the Strength stat.\\n */\\nfunction reassign_extortion(ns, member, min, max) {\\n    const gangster = new Gangster(ns);\\n    const candidate = member.filter(\\n        (s) => min <= gangster.strength(s) && gangster.strength(s) < max\\n    );\\n    gangster.extort(candidate);\\n}\\n\\n/**\\n * Reassign anyone who is in the neutral state to a default task.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign_from_neutral(ns) {\\n    const gangster = new Gangster(ns);\\n    const idle = ns.gang.getMemberNames().filter((s) => gangster.is_idle(s));\\n    if (idle.length === 0) {\\n        return;\\n    }\\n    const combatant = idle.filter((s) => gangster.is_combatant(s));\\n    const other = idle.filter(\\n        (s) => gangster.is_hacker(s) || gangster.is_miscellaneous(s)\\n    );\\n    gangster.extort(combatant);\\n    gangster.con(other);\\n}\\n\\n/**\\n * Reassign our Hacker to some other job.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign_hacker(ns) {\\n    const gangster = new Gangster(ns);\\n    const hacker = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_hacker(s));\\n    assert(hacker.length === 1);\\n    // This is not a hacking gang.  Reassign the Hacker to one of the jobs\\n    // normally done by a miscellaneous gang member.\\n    reassign_con(ns, hacker, task_t.CON, task_t.BLACKMAIL);\\n    reassign_blackmail(ns, hacker, task_t.BLACKMAIL, task_t.TRAFFICK_HUMAN);\\n    // If we already control 100% of the territory, then assign everyone to\\n    // trafficking illegal arms because this task generally earns more money\\n    // than human trafficking.\\n    if (has_all_turf(ns)) {\\n        reassign_arms_trafficking(ns, hacker, task_t.TRAFFICK_ARMS, Infinity);\\n        return;\\n    }\\n    reassign_human_trafficking(ns, hacker, task_t.TRAFFICK_HUMAN, Infinity);\\n}\\n\\n/**\\n * Reassign our miscellaneous gang members to engage in human trafficking.\\n * Reassign our members if their Charisma stat is in the half-open interval\\n * [min, max).  We include the minimum threshold but exclude the maximum\\n * threshold.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to operate a human trafficking ring.\\n * @param min The minimum value for the Charisma stat.\\n * @param max The maximum value for the Charisma stat.\\n */\\nfunction reassign_human_trafficking(ns, member, min, max) {\\n    const gangster = new Gangster(ns);\\n    const candidate = member.filter(\\n        (s) => min <= gangster.charisma(s) && gangster.charisma(s) < max\\n    );\\n    gangster.traffick_human(candidate);\\n}\\n\\n/**\\n * Reassign miscellaneous gang members to various jobs.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reassign_miscellaneous(ns) {\\n    const gangster = new Gangster(ns);\\n    const other = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_miscellaneous(s));\\n    reassign_con(ns, other, task_t.CON, task_t.BLACKMAIL);\\n    reassign_blackmail(ns, other, task_t.BLACKMAIL, task_t.TRAFFICK_HUMAN);\\n    // If we already control 100% of the territory, then assign everyone to\\n    // trafficking illegal arms because this task generally earns more money\\n    // than human trafficking.\\n    if (has_all_turf(ns)) {\\n        reassign_arms_trafficking(ns, other, task_t.TRAFFICK_ARMS, Infinity);\\n        return;\\n    }\\n    reassign_human_trafficking(ns, other, task_t.TRAFFICK_HUMAN, Infinity);\\n}\\n\\n/**\\n * Reassign above mid-level gang members to armed robbery.  Reassign gang\\n * members if their Strength stat is in the half-open interval [min, max).\\n * That is, we include the minimum threshold but exclude the maximum threshold.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to armed robbery.\\n * @param min The minimum value for the Strength stat.\\n * @param max The maximum value for the Strength stat.\\n */\\nfunction reassign_robbery(ns, member, min, max) {\\n    const gangster = new Gangster(ns);\\n    const candidate = member.filter(\\n        (s) => min <= gangster.strength(s) && gangster.strength(s) < max\\n    );\\n    gangster.robbery(candidate);\\n}\\n\\n/**\\n * Reassign advanced-level gang members to commit acts of terrorism.  Reassign\\n * gang members if their Strength stat is in the half-open interval [min, max).\\n * That is, we include the minimum threshold but exclude the maximum threshold.\\n * We usually assign members to acts of terrorism because this task greatly\\n * increases respect, which in turn helps to recruit new members, but does not\\n * generate income.  However, if we already have the maximum number of members,\\n * there is no reason to have any terrorists around.  Only assign a limited\\n * number of members to terrorism.\\n *\\n * @param ns The Netscript API.\\n * @param member An array of member names.  We want to reassign these members\\n *     to acts of terrorism.\\n * @param min The minimum value for the Strength stat.\\n * @param max The maximum value for the Strength stat.\\n */\\nfunction reassign_terrorism(ns, member, min, max) {\\n    if (has_terrorist(ns) && !has_max_members(ns)) {\\n        return;\\n    }\\n    // We already have the maximum number of gang members.  Reassign the\\n    // terrorists to trafficking illegal arms.\\n    const gangster = new Gangster(ns);\\n    if (has_max_members(ns)) {\\n        const name = ns.gang\\n            .getMemberNames()\\n            .filter((s) => gangster.is_terrorist(s));\\n        gangster.traffick_arms(name);\\n        return;\\n    }\\n    assert(!has_terrorist(ns));\\n    assert(!has_max_members(ns));\\n    // We want our Vanguard to commit acts of terrorism.\\n    const vanguard = member.filter(\\n        (s) => gangster.is_vanguard(s)\\n            && min <= gangster.strength(s)\\n            && gangster.strength(s) < max\\n    );\\n    if (vanguard.length === 0) {\\n        return;\\n    }\\n    assert(vanguard.length === 1);\\n    gangster.terrorism(vanguard);\\n}\\n\\n/**\\n * Recruit as many new members as possible.  Set the newbies to train their\\n * various stats.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction recruit(ns) {\\n    const gangster = new Gangster(ns);\\n    if (ns.gang.getMemberNames().length < members.MAX) {\\n        const newbie = gangster.recruit();\\n        gangster.train(newbie);\\n        if (newbie.length > 0) {\\n            newbie.forEach((s) => log(ns, `Recruited new member: ${s}`));\\n        }\\n    }\\n}\\n\\n/**\\n * Retrain the stats of gang members as necessary.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction retrain(ns) {\\n    const gangster = new Gangster(ns);\\n    const member = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.needs_training(s));\\n    gangster.train(member);\\n}\\n\\n/**\\n * Various sanity checks.\\n *\\n * @param ns The Netscript API.\\n * @return True if the checks pass; false otherwise.\\n */\\nfunction sanity_checks(ns) {\\n    if (ns.args.length !== 1) {\\n        log(ns, \\\"Must provide the name of a criminal organization\\\");\\n        return bool.FAILURE;\\n    }\\n    const faction = ns.args[0];\\n    if (!is_valid_faction(faction)) {\\n        log(ns, `Cannot create criminal gang within faction: ${faction}`);\\n        return bool.FAILURE;\\n    }\\n    return bool.SUCCESS;\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"gang.setTerritoryWarfare\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Manage our criminal gang.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction update(ns) {\\n    recruit(ns);\\n    retrain(ns);\\n    graduate(ns);\\n    // Ascend a gang member before we spend any more money on them.  After the\\n    // ascension, the member would lose all equipment and their stats would\\n    // reset.  We ascend the member now so down the pipeline we can retrain\\n    // and re-equip them.\\n    ascend(ns);\\n    equip(ns);\\n    // Do we have anyone on vigilante justice?\\n    if (has_vigilante(ns)) {\\n        if (penalty(ns) <= penalty_t.LOW) {\\n            reassign_after_vigilante_justice(ns);\\n            return;\\n        }\\n    }\\n    // Initially, our gang has a small number of members.  Assigning one or\\n    // more members to vigilante justice would do precious little to decrease\\n    // our wanted level.  With such a small membership, it is more important to\\n    // raise the members' stats and recruit more members than to lower our\\n    // wanted level.\\n    if (ns.gang.getMemberNames().length > members.HALF) {\\n        // Is our penalty too high?  If our penalty percentage exceeds a given\\n        // threshold, then reassign some gang members to vigilante justice in\\n        // order to lower our penalty.  Furthermore, reassign the remaining\\n        // members to jobs that attract a lower wanted level.\\n        if (penalty(ns) >= penalty_t.HIGH) {\\n            decrease_penalty(ns);\\n            return;\\n        }\\n    }\\n    reassign(ns);\\n    // Prepare for war.\\n    para_bellum(ns);\\n}\\n\\n/**\\n * Create and manage a criminal gang.  Our objective is to get a criminal gang\\n * started.  We let members train their stats.  Once a member graduates out of\\n * training, we set them to generate some money.  In the early stage of a\\n * BitNode, we need as many sources of income as possible and a criminal gang\\n * happens to be a source of revenue.\\n *\\n * This script accepts a command line argument, i.e. the name of the faction\\n * within which to create a criminal gang.  The faction must be a criminal\\n * organization.   We can create a criminal gang within any of the following\\n * criminal organizations:\\n *\\n * (1) Slum Snakes\\n * (2) Tetrads\\n * (3) The Syndicate\\n * (4) The Dark Army\\n * (5) Speakers for the Dead\\n *\\n * Usage: run quack/gang/crime.js [faction]\\n * Example: run quack/gang/crime.js \\\"Slum Snakes\\\"\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    if (!sanity_checks(ns)) {\\n        return;\\n    }\\n    // Create our criminal gang and recruit the first crop of gangsters.  By\\n    // default, we disable territory warfare.  Instead, we concentrate on\\n    // recruitment and building the strengths of our gang members.\\n    const faction = ns.args[0];\\n    await create_gang(ns, faction);\\n    log(ns, `Disable territory warfare for gang in ${faction}`);\\n    ns.gang.setTerritoryWarfare(bool.DISABLE);\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    recruit(ns);\\n    // Manage our gang.\\n    // A tick is a period of time as defined by the constant gang_t.TICK.  At\\n    // the start of each tick, there is a chance for our gang to clash against\\n    // any rival gang.  The tick threshold is the time near the start of a new\\n    // tick.  If we are at the tick threshold, then do whatever is necessary to\\n    // prepare for a clash against a rival gang.\\n    let other_gang = ns.gang.getOtherGangInformation();\\n    let tick_threshold = 1;\\n    for (;;) {\\n        if (enable_turf_war(ns)) {\\n            if (!ns.gang.getGangInformation().territoryWarfareEngaged) {\\n                log(ns, `Enable territory warfare for gang in ${faction}`);\\n                ns.gang.setTerritoryWarfare(bool.ENABLE);\\n            }\\n        } else if (ns.gang.getGangInformation().territoryWarfareEngaged) {\\n            log(ns, `Disable territory warfare for gang in ${faction}`);\\n            ns.gang.setTerritoryWarfare(bool.DISABLE);\\n        }\\n        // Are we in a new tick?  If we are having a turf war, then let our\\n        // gang members fight until a new tick occurs.\\n        if (is_in_war(ns) && is_new_tick(ns, other_gang)) {\\n            // The tick threshold should be a little under gang_t.TICK.\\n            tick_threshold = Date.now() + (gang_t.TICK - wait_t.SECOND);\\n            other_gang = ns.gang.getOtherGangInformation();\\n            reassign_after_warfare(ns);\\n            await ns.sleep(wait_t.MILLISECOND);\\n            continue;\\n        }\\n        // We are in the same tick.  Is it time to go to war?\\n        if (Date.now() > tick_threshold) {\\n            if (ns.gang.getGangInformation().territoryWarfareEngaged) {\\n                casus_belli(ns);\\n                await ns.sleep(wait_t.MILLISECOND);\\n                continue;\\n            }\\n        }\\n        update(ns);\\n        await ns.sleep(wait_t.MILLISECOND);\\n    }\\n}\\n\",\"filename\":\"/quack/gang/crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":33.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":449,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getOtherGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getChanceToWinClash\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { gang_t } from \\\"/quack/lib/constant/gang.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport {\\n    join_faction,\\n    raise_combat_stats,\\n    raise_hack,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The karma threshold.  We want to lower our karma to a given amount.  Outside\\n * of BN2, to join a gang we must have karma at -54,000 or lower.  It takes a\\n * very long time to achieve this many negative karma.  A more sensible option\\n * is to have a target karma value and try to lower our karma to that value.\\n * Then move on.  Say we want to lower our karma in 4 batches, each batch is\\n * followed by possibly a soft reset.  In each batch, we would need to achieve\\n * -13,500 karma.\\n *\\n * @param ns The Netscript API.\\n * @return Our current negative karma plus some more negative karma value as\\n *     low as -13,500.  Return 0 if we have enough negative karma to create a\\n *     gang.\\n */\\nfunction karma_threshold(ns) {\\n    const player = new Player(ns);\\n    const current_karma = Math.floor(player.karma());\\n    if (current_karma <= gang_t.KARMA) {\\n        return 0;\\n    }\\n    let target = -13500;\\n    const delta = gang_t.KARMA - current_karma;\\n    if (Math.abs(delta) < Math.abs(target)) {\\n        target = delta;\\n    }\\n    return Math.floor(current_karma + target);\\n}\\n\\n/**\\n * Run the next script(s) in our load chain for criminal gangs.\\n *\\n * @param ns The Netscript API.\\n * @param faction The name of a criminal organization.  Must be a faction that\\n *     allows us to create a criminal gang.\\n */\\nfunction load_chain(ns, faction) {\\n    const script = \\\"/quack/gang/crime.js\\\";\\n    const nthread = 1;\\n    ns.exec(script, home, nthread, faction);\\n}\\n\\n/**\\n * Decrease our karma low enough to allow us to create a gang.  We need -54,000\\n * karma.  Homicide yields -3 karma so we must commit homicide at most 18,000\\n * times.  We lower our karma in batches.  After each batch we might not have\\n * enough negative karma to create a gang.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function lower_karma(ns) {\\n    const threshold = karma_threshold(ns);\\n    ns.singularity.goToLocation(cities.generic.slum); // Raise Int XP.\\n    ns.singularity.commitCrime(crimes.KILL, bool.FOCUS);\\n    const player = new Player(ns);\\n    while (Math.floor(player.karma()) > threshold) {\\n        if (Math.floor(player.karma()) < gang_t.KARMA) {\\n            break;\\n        }\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * NOTE: Assume we are not in BN2.\\n *\\n * Join the criminal faction Speakers for the Dead.  Our ultimate purpose is to\\n * form and manage a gang within that faction.  To receive an invitation from\\n * Speakers for the Dead, we must satisfy these requirements:\\n *\\n * (1) At least 100 Hack.\\n * (2) At least 300 in each combat stat.\\n * (3) Killed at least 30 people.\\n * (4) Negative karma at -45 or lower.\\n * (5) Not working for CIA or NSA.\\n *\\n * Usage: run quack/gang/dead-speakers.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Should not be in BN2.  If in BN2, it's easier to join Slum Snakes.\\n    assert(bitnode[\\\"Rise of the Underworld\\\"] !== ns.getPlayer().bitNodeN);\\n    // Should not be working for any of the banned companies.\\n    const fac = \\\"Speakers for the Dead\\\";\\n    const player = new Player(ns);\\n    faction_req[fac].ban.map((e) => assert(!player.is_employer(e)));\\n    // Raise Hack and combat stats, ensure we have the required minimum karma,\\n    // and killed the required number of people.  Then join the faction\\n    // Speakers for the Dead.  Lower our karma so we can create a gang.\\n    await lower_karma(ns);\\n    if (!player.faction().includes(fac)) {\\n        await raise_hack(ns, faction_req[fac].hack);\\n        await raise_combat_stats(ns, faction_req[fac].combat);\\n        assert(player.karma() <= faction_req[fac].karma);\\n        await join_faction(ns, fac);\\n    }\\n    load_chain(ns, fac);\\n}\\n\",\"filename\":\"/quack/gang/dead-speakers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":541.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_gang_api } from \\\"/quack/lib/source.js\\\";\\nimport { exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Decide which criminal faction to join.  Our goal is to create a gang within\\n * a criminal organization.  We can create a criminal gang within any of the\\n * following criminal organizations:\\n *\\n * (1) Slum Snakes\\n * (2) Tetrads\\n * (3) The Syndicate\\n * (4) The Dark Army\\n * (5) Speakers for the Dead\\n *\\n * Slum Snakes has the lowest requirements for sending a faction invitation.\\n * This fits well with BN2 because in that BitNode we only need to join a\\n * criminal faction and then would be allowed to create a gang.  Thus, if we\\n * are in BN2 we should join Slum Snakes as early as possible and then create\\n * our gang.  In BitNodes other than BN2, we must satisfy 2 requirements to\\n * create a gang:\\n *\\n * (1) Our karma must be -54,000 or lower.\\n * (2) Satisfy the requirements for receiving an invitation from a criminal\\n *     faction.\\n *\\n * Thus, in BitNodes other than BN2, we should lower our karma as quickly as\\n * possible.  By the time our negative karma is at -54,000 or lower, it is\\n * likely that we would have also satisfied the requirements to join one of the\\n * other factions listed above.  We might be tempted to join Speakers for the\\n * Dead and create our criminal gang within that faction.  One reason is that\\n * Speakers for the Dead has the highest power multiplier of all criminal\\n * factions:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/power.ts\\n *\\n * The Black Hand has the same power multiplier as Speakers for the Dead.\\n * These are the only 2 factions with the highest power multipliers.  Why\\n * should we create our gang within any of these 2 factions?  The power\\n * multiplier affects only NPC gangs, not the gang we create.  The higher is\\n * the power multiplier of an NPC gang, the quicker would its power rise.\\n * Creating a gang within either of the above 2 factions means we would only\\n * need to worry about catching up with the power of the other powerful NPC\\n * gang.  However, this can be a problem because the most powerful NPC gang\\n * would devour the other less powerful NPC gangs and easily take over their\\n * territories.  If we have 2 powerful NPC gangs, i.e. Speakers for the Dead\\n * and The Black Hand, they can duke it out amongst themselves.  They might\\n * swallow up the territories of other weaker NPC gangs, but when these 2\\n * powerful gangs fight amongst themselves it can take a long time for one of\\n * them to be vanquished.\\n *\\n * Anyway, join Slum Snakes regardless of the BitNode we are in.\\n *\\n * Usage: run quack/gang/go.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    if (!has_gang_api(ns)) {\\n        log(ns, \\\"No access to Gang API\\\", colour.RED);\\n        return;\\n    }\\n    // Regardless of the BitNode we are in, join Slum Snakes and set up our\\n    // gang within that faction.\\n    const script = [\\n        \\\"/quack/gang/augment.js\\\",\\n        \\\"/quack/gang/program.js\\\",\\n        \\\"/quack/gang/slum-snakes.js\\\",\\n    ];\\n    script.forEach((s) => exec(ns, s));\\n\\n    // If we want, we can create a criminal gang within Speakers for the Dead.\\n    // Note that it can take a very long time to satisfy all requirements for\\n    // joining this faction and setting up a gang within that faction.\\n    // const script = \\\"/gang/dead-speakers.js\\\";\\n    // ns.exec(script, home, nthread);\\n}\\n\",\"filename\":\"/quack/gang/go.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_program } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Purchase port opener programs via the dark web.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction buy_programs(ns) {\\n    if (!has_tor_router(ns)) {\\n        return;\\n    }\\n    const unbought = (p) => !has_program(ns, p);\\n    const buy = (p) => ns.singularity.purchaseProgram(p);\\n    popen()\\n        .filter(unbought)\\n        .forEach((p) => {\\n            if (buy(p)) {\\n                log(ns, `Purchased program: ${p}`);\\n            }\\n        });\\n}\\n\\n/**\\n * Whether we have all port opener programs.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have all port opener programs; false otherwise.\\n */\\nfunction has_all_popen(ns) {\\n    const has = (p) => has_program(ns, p);\\n    return popen().every(has);\\n}\\n\\n/**\\n * Whether we have the TOR router.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have the TOR router; false otherwise.\\n */\\nfunction has_tor_router(ns) {\\n    return ns.singularity.purchaseTor();\\n}\\n\\n/**\\n * The port opener programs.\\n */\\nfunction popen() {\\n    // Ordered in increasing cost.\\n    return [\\n        darkweb.program.brutessh.NAME,\\n        darkweb.program.ftpcrack.NAME,\\n        darkweb.program.relaysmtp.NAME,\\n        darkweb.program.httpworm.NAME,\\n        darkweb.program.sqlinject.NAME,\\n    ];\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Purchase programs via the dark web.  We use any money available to us, most\\n * likely money generated by our gang.\\n *\\n * Usage: run gang/program.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Purchase programs via the dark web.\\n    log(ns, \\\"Buying programs via the dark web\\\");\\n    while (!has_all_popen(ns)) {\\n        buy_programs(ns);\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    log(ns, \\\"Purchased all port opener programs\\\");\\n}\\n\",\"filename\":\"/quack/gang/program.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":65.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { gang_t } from \\\"/quack/lib/constant/gang.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { join_faction } from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { work } from \\\"/quack/lib/singularity/work.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The karma threshold.  This value depends on the BitNode we are currently in.\\n *\\n * @param ns The Netscript API.\\n * @return The karma threshold.\\n */\\nfunction karma_threshold(ns) {\\n    if (bitnode[\\\"Rise of the Underworld\\\"] === ns.getPlayer().bitNodeN) {\\n        return faction_req[\\\"Slum Snakes\\\"].karma;\\n    }\\n    return gang_t.KARMA;\\n}\\n\\n/**\\n * Run the next script(s) in our load chain for criminal gangs.\\n *\\n * @param ns The Netscript API.\\n * @param faction The name of a criminal organization.  Must be a faction that\\n *     allows us to create a criminal gang.\\n */\\nfunction load_chain(ns, faction) {\\n    const script = \\\"/quack/gang/crime.js\\\";\\n    const nthread = 1;\\n    ns.exec(script, home, nthread, faction);\\n}\\n\\n/**\\n * Decrease our karma low enough to allow us to create a gang.  In BN2, we only\\n * need to satisfy the karma requirement of Slum Snakes.  In a BitNode other\\n * than BN2, we need -54,000 karma.  Homicide yields -3 karma so we must commit\\n * homicide at most 18,000 times.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function lower_karma(ns) {\\n    ns.singularity.goToLocation(cities.generic.slum); // Raise Int XP.\\n    ns.singularity.commitCrime(crimes.KILL, bool.FOCUS);\\n    const player = new Player(ns);\\n    const threshold = karma_threshold(ns);\\n    while (Math.floor(player.karma()) > threshold) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Raise our combat stats to a given threshold.  Mugging someone is one of the\\n * best ways to raise all of our combat stats.  Upon success, we gain XP for\\n * each of the following stats: Strength, Defense, Dexterity, Agility.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Each of our combat stats should be at least this level.\\n */\\nasync function raise_combat_stats(ns, threshold) {\\n    assert(threshold > 0);\\n    ns.singularity.goToLocation(cities.generic.slum); // Raise Int XP.\\n    // Continue to mug someone until each of our combat stats is at least\\n    // the given threshold.\\n    const player = new Player(ns);\\n    ns.singularity.commitCrime(crimes.MUG, bool.FOCUS);\\n    while (\\n        player.strength() < threshold\\n        || player.defense() < threshold\\n        || player.dexterity() < threshold\\n        || player.agility() < threshold\\n    ) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Join the Slum Snakes faction.  Our ultimate purpose is to form and manage\\n * a gang.  Among the criminal organizations, Slum Snakes has the lowest\\n * requirements for sending a faction invitation.  To receive an invitation\\n * from Slum Snakes, we must satisfy these requirements:\\n *\\n * (1) Each of the combat stats must be at least 30.\\n * (2) Karma must be -9 or lower.\\n * (3) At least $1m.\\n *\\n * Usage: run quack/gang/slum-snakes.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Raise combat stats, ensure we have the required minimum karma, raise our\\n    // income.  Then join the Slum Snakes faction.  Lower our karma so we can\\n    // create a gang.\\n    await lower_karma(ns);\\n    const fac = \\\"Slum Snakes\\\";\\n    const player = new Player(ns);\\n    if (!player.faction().includes(fac)) {\\n        await raise_combat_stats(ns, faction_req[fac].combat);\\n        assert(player.karma() <= faction_req[fac].karma);\\n        await work(ns, faction_req[fac].money);\\n        await join_faction(ns, fac);\\n    }\\n    load_chain(ns, fac);\\n}\\n\",\"filename\":\"/quack/gang/slum-snakes.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":458.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_singularity_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, exec, init_sleeves } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * This function should be run immediately after the soft reset of installing a\\n * bunch of Augmentations.  Our purpose is to gain some money and Hack XP\\n * early on when our stats are low.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function reboot(ns) {\\n    const script = [\\n        \\\"/quack/hgw/world.js\\\",\\n        \\\"/quack/gang/program.js\\\",\\n        // \\\"hnet-farm.js\\\",\\n        \\\"/quack/trade-bot.js\\\",\\n        \\\"/quack/cct/solver.js\\\",\\n        // \\\"hram.js\\\",\\n    ];\\n    // In \\\"BitNode-9: Hacktocracy\\\", we cannot buy servers so there is no point\\n    // in setting up a farm of purchased servers.\\n    if (bitnode.Hacktocracy !== ns.getPlayer().bitNodeN) {\\n        // script.unshift(\\\"buy-server.js\\\");\\n        script.unshift(\\\"/quack/hgw/pserv.js\\\");\\n    }\\n    script.forEach((s) => exec(ns, s));\\n    await init_sleeves(ns);\\n}\\n\\n/**\\n * NOTE: Assume our home server to have at least 512GB RAM.\\n *\\n * Restart our source of income and Hack XP.  This script is useful whenever we\\n * have installed a bunch of Augmentations and we want to automatically restart\\n * scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself or a low-end server.\\n *\\n * Usage: run quack/go-high.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    log(ns, \\\"Home server is high-end. Bootstrap with all scripts.\\\");\\n    assert(has_singularity_api(ns));\\n    await reboot(ns);\\n    exec(ns, \\\"/quack/chain/money.js\\\");\\n}\\n\",\"filename\":\"/quack/go-high.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_singularity_api } from \\\"/quack/lib/source.js\\\";\\nimport {\\n    assert, exec, has_program, init_sleeves,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Launch scripts to purchase port opener programs.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function init_popen(ns) {\\n    const pida = exec(ns, \\\"/quack/gang/program.js\\\");\\n    const pidb = exec(ns, \\\"/quack/world.js\\\");\\n    while (\\n        !has_program(ns, darkweb.program.brutessh.NAME)\\n        || !has_program(ns, darkweb.program.ftpcrack.NAME)\\n    ) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.kill(pida);\\n    ns.kill(pidb);\\n}\\n\\n/**\\n * This function should be run immediately after the soft reset of installing a\\n * bunch of Augmentations or after visiting a new BitNode.  Our purpose is to\\n * gain some money and Hack XP early on when our stats are low.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function reboot(ns) {\\n    // Execute a script, let it run for a while, kill the script, and run\\n    // another script.  Assume we do not have enough RAM to let multiple\\n    // scripts running at the same time.\\n    // const script = [\\\"hnet-farm.js\\\", \\\"low-end.js\\\"];\\n    // for (const s of script) {\\n    //     exec(ns, s);\\n    //     await ns.sleep(wait_t.DEFAULT);\\n    //     assert(ns.kill(s, home));\\n    // }\\n    await init_sleeves(ns);\\n    await init_popen(ns);\\n}\\n\\n/**\\n * NOTE: This script assumes our home server has a small amount of RAM,\\n * possibly less than 64GB RAM.\\n *\\n * Restart our source of income and Hack XP.  This script is useful whenever we\\n * have installed a bunch of Augmentations and we want to automatically restart\\n * scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself or a low-end server.\\n *\\n * Our goal in this script is to raise the amount of RAM on our home server to\\n * at least 512GB.\\n *\\n * Usage: run quack/go-low.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    log(\\n        ns,\\n        \\\"Home server is low-end. Bootstrap with a small number of scripts.\\\"\\n    );\\n    assert(has_singularity_api(ns));\\n    await reboot(ns);\\n    exec(ns, \\\"/quack/chain/money.js\\\");\\n}\\n\",\"filename\":\"/quack/go-low.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_singularity_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, exec, init_sleeves } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * This function should be run immediately after the soft reset of installing a\\n * bunch of Augmentations.  Our purpose is to gain some money and Hack XP\\n * early on when our stats are low.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function reboot(ns) {\\n    const target = \\\"/quack/hgw/world.js\\\";\\n    // const script = [target, \\\"hnet-farm.js\\\", \\\"/cct/solver.js\\\"];\\n    const script = [target, \\\"/quack/cct/solver.js\\\"];\\n    // In \\\"BitNode-9: Hacktocracy\\\", we cannot buy servers so there is no point\\n    // in setting up a farm of purchased servers.\\n    // TODO: Run script to buy Hacknet servers depending on whether we have\\n    // Source-File 9.\\n    if (bitnode.Hacktocracy !== ns.getPlayer().bitNodeN) {\\n        // script.unshift(\\\"buy-server.js\\\");\\n        script.unshift(\\\"/quack/hgw/pserv.js\\\");\\n    }\\n    script.forEach((s) => exec(ns, s));\\n    // Wait a while and then kill a script to free up some RAM on the home\\n    // server.\\n    await ns.sleep(wait_t.MINUTE);\\n    script.filter((s) => s !== target).forEach((t) => assert(ns.kill(t, home)));\\n    exec(ns, \\\"/quack/gang/program.js\\\");\\n    await init_sleeves(ns);\\n}\\n\\n/**\\n * NOTE: Assume our home server has at least 128GB RAM.\\n *\\n * Restart our source of income and Hack XP.  This script is useful whenever we\\n * have installed a bunch of Augmentations and we want to automatically restart\\n * scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself or a low-end server.\\n *\\n * Usage: run quack/go-mid.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    log(ns, \\\"Home server is mid-end. Bootstrap with some scripts.\\\");\\n    assert(has_singularity_api(ns));\\n    await reboot(ns);\\n    exec(ns, \\\"/quack/chain/money.js\\\");\\n}\\n\",\"filename\":\"/quack/go-mid.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":5.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home, home_t } from \\\"/quack/lib/constant/server.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_singularity_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Restart our source of income and Hack XP.  This script is useful whenever we\\n * have installed a bunch of Augmentations and we want to automatically restart\\n * scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself or a low-end server.\\n *\\n * Usage: run quack/go.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Check whether we have access to the Singularity API.  If the check fails,\\n    // then we cannot automate the game play so we exit the script.\\n    if (!has_singularity_api(ns)) {\\n        log(\\n            ns,\\n            \\\"No access to Singularity API. Cannot automate game play.\\\",\\n            colour.RED\\n        );\\n        return;\\n    }\\n    // Run some or all utility scripts, depending on the amount of RAM on our\\n    // home server.\\n    const server = ns.getServer(home);\\n    let script = \\\"\\\";\\n    if (server.maxRam >= home_t.RAM_HIGH) {\\n        script = \\\"/quack/go-high.js\\\";\\n    } else if (server.maxRam >= home_t.RAM_MID) {\\n        script = \\\"/quack/go-mid.js\\\";\\n    } else {\\n        assert(server.maxRam < home_t.RAM_MID);\\n        script = \\\"/quack/go-low.js\\\";\\n    }\\n    assert(script !== \\\"\\\");\\n    exec(ns, script);\\n}\\n\",\"filename\":\"/quack/go.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run quack/hack.js [targetServer]\\n * Example: run quack/hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"/quack/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume we have root access to the target server.\\n *\\n * Grow money on a target server.\\n *\\n * Usage: run quack/hgw/grow.js [targetServer]\\n * Example: run quack/hgw/grow.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    await ns.grow(target, opt);\\n}\\n\",\"filename\":\"/quack/hgw/grow.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume we have root access to the target server.\\n *\\n * Hack a server and steal its money.\\n *\\n * Usage: run quack/hgw/hack.js [targetServer]\\n * Example: run quack/hgw/hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    await ns.hack(target, opt);\\n}\\n\",\"filename\":\"/quack/hgw/hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { pserv } from \\\"/quack/lib/constant/pserv.js\\\";\\nimport { PservHGW } from \\\"/quack/lib/pbatch.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a target server.  Steal a certain percentage of the\\n * server's money, then weaken/grow the server until it is at minimum security\\n * level and maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of the purchased server to use.\\n * @param target Hack this world server.\\n * @param frac The fraction of money to steal.  Must be positive and at\\n *     most 1.\\n */\\nasync function hack(ns, host, target, frac) {\\n    const batcher = new PservHGW(ns, host);\\n    batcher.scp_scripts();\\n    for (;;) {\\n        await batcher.prep_gw(target);\\n        await batcher.hgw_hack(target, frac);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Various sanity checks.\\n *\\n * @param host Hostname of the server to target.\\n * @param frac The fraction of money to steal.  Must be positive and at\\n *     most 1.\\n */\\nfunction sanity_checks(host, frac) {\\n    assert(host !== \\\"\\\");\\n    const exclude_list = new Set(pserv.exclude);\\n    assert(!exclude_list.has(host));\\n    assert(frac > 0 && frac <= 1);\\n}\\n\\n/**\\n * A sequential batcher for purchased servers.  Each of the hack, grow, and\\n * weaken functions is separated into its own script.  When we need a particular\\n * HGW action, we launch the appropriate script against a target server.  The\\n * script accepts the following command line arguments.\\n *\\n * (1) host := Hostname of the purchased server to use.\\n * (2) target := Hostname of the server to target.\\n * (3) frac := The fraction of money to steal.\\n *\\n * Usage: run quack/hgw/pbatch.js [host] [target] [frac]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [host, target, frac] = ns.args;\\n    const fr = parseFloat(frac);\\n    sanity_checks(target, fr);\\n    await hack(ns, host, target, fr);\\n}\\n\",\"filename\":\"/quack/hgw/pbatch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { pserv } from \\\"/quack/lib/constant/pserv.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { PurchasedServer } from \\\"/quack/lib/pserv.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport {\\n    assert, is_bankrupt, nuke_servers, weight,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Buy servers, each having as high an amount of RAM as we can afford.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function buy_servers(ns) {\\n    const psv = new PurchasedServer(ns);\\n    const default_ram = pserv.DEFAULT_RAM_HGW;\\n    // By default, we want to purchase pserv.MIN_HGW servers.  As for the\\n    // remaining servers that make up the number to reach the maximum number of\\n    // purchased servers, we wait until we have enough money to purchase each of\\n    // them.  The constant pserv.MIN_HGW should be a small number so we can\\n    // bootstrap a source of passive income and Hack XP.\\n    let ram = pserv_ram(ns, pserv.MIN_HGW);\\n    if (ram <= default_ram) {\\n        // Try to purchase servers, each with the default amount of RAM.\\n        await stage_one(ns);\\n        return;\\n    }\\n    // Here we assume we already have purchased servers, each with the default\\n    // amount of RAM.  Now try to purchase servers, each with a higher amount\\n    // of RAM than the default amount.  We wait to accumulate enough money to\\n    // purchase the maximum number of servers.\\n    ram = pserv_ram(ns, psv.limit());\\n    if (ram <= default_ram) {\\n        return;\\n    }\\n    assert(ram > default_ram);\\n    await next_stage(ns, ram);\\n}\\n\\n/**\\n * Deploy a sequential batcher to a purchased server.  Use the server to hack\\n * a chosen target.\\n *\\n * @param ns The Netscript API.\\n * @param phost Run a sequential batcher on this purchased server.\\n * @param host Hostname of the server to target.\\n */\\nfunction deploy(ns, phost, host) {\\n    const script = pserv.PBATCH;\\n    const nthread = 1;\\n    const frac = pserv.DEFAULT_MONEY_FRAC;\\n    assert(!is_bankrupt(ns, host));\\n    const target = new Server(ns, host);\\n    assert(target.gain_root_access());\\n    ns.exec(script, home, nthread, phost, target.hostname(), frac);\\n}\\n\\n/**\\n * Determine which world servers to target.\\n *\\n * @param ns The Netscript API.\\n * @return An array of hostnames.  We have root access to each server.  The\\n *     array is sorted in descending order of server weight.\\n */\\nfunction find_candidates(ns) {\\n    const descending_weight = (s, t) => weight(ns, t) - weight(ns, s);\\n    const positive_weight = (host) => weight(ns, host) > 0;\\n    const exclude_list = new Set(pserv.exclude);\\n    const is_hackable = (host) => !exclude_list.has(host);\\n    const not_bankrupt = (host) => !is_bankrupt(ns, host);\\n    return nuke_servers(ns, network(ns))\\n        .filter(is_hackable)\\n        .filter(not_bankrupt)\\n        .filter(positive_weight)\\n        .sort(descending_weight);\\n}\\n\\n/**\\n * Whether we have the maximum number of purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return True if we already have the maximum number of purchased servers;\\n *     false otherwise.\\n */\\nfunction has_max_pserv(ns) {\\n    const player = new Player(ns);\\n    const psv = new PurchasedServer(ns);\\n    return player.pserv().length === psv.limit();\\n}\\n\\n/**\\n * Kill all sequential batcher scripts.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction kill_batchers(ns) {\\n    // Array of hostnames of purchased servers.\\n    const purchased_server = ns.getPurchasedServers();\\n    if (purchased_server.length < 1) {\\n        return;\\n    }\\n    // Array of hostnames of world servers.\\n    let target = network(ns);\\n    assert(target.length > 0);\\n    // Fraction of money to steal from a server.\\n    const frac = pserv.DEFAULT_MONEY_FRAC;\\n    const s = pserv.PBATCH;\\n\\n    // Which world server is the given purchased server targeting?\\n    const find_target = (phost, candidate) => {\\n        for (const host of candidate) {\\n            if (ns.isRunning(s, home, phost, host, frac)) {\\n                return host;\\n            }\\n        }\\n    };\\n    purchased_server.forEach((phost) => {\\n        const host = find_target(phost, target);\\n        if (host === undefined) {\\n            return;\\n        }\\n        ns.kill(s, home, phost, host, frac);\\n        target = target.filter((t) => t !== host);\\n    });\\n}\\n\\n/**\\n * Purchase servers that have more than the default amount of RAM.  Call this\\n * function multiple times with different arguments to upgrade our purchased\\n * servers to higher RAM.\\n *\\n * @param ns The Netscript API.\\n * @param ram The amount of RAM for each purchased server.\\n */\\nasync function next_stage(ns, ram) {\\n    const psv = new PurchasedServer(ns);\\n    assert(psv.is_valid_ram(ram));\\n    // If we have zero purchased servers, then buy servers with the given\\n    // amount of RAM.\\n    const player = new Player(ns);\\n    const current_pserv = player.pserv();\\n    const msg = `Buy servers with RAM: ${ram}`;\\n    if (current_pserv.length < 1) {\\n        ns.print(msg);\\n        await update(ns, ram);\\n        return;\\n    }\\n    // Assume we have at least 1 purchased server.\\n    assert(current_pserv.length > 0);\\n    const server = new Server(ns, current_pserv[0]);\\n    if (server.ram_max() < ram) {\\n        // If each purchased server has less than the given amount of RAM, then\\n        // delete the servers and purchase servers with the given amount of RAM.\\n        ns.print(msg);\\n        kill_batchers(ns);\\n        psv.kill_all();\\n        await update(ns, ram);\\n    } else if (server.ram_max() === ram) {\\n        // The current purchased servers have the same amount of RAM as our\\n        // target RAM.  Continue purchasing more servers with the current\\n        // amount of RAM.\\n        ns.print(msg);\\n        await update(ns, ram);\\n    } else {\\n        // Each current purchased server has more RAM than the given amount of\\n        // RAM.\\n        assert(ram < server.ram_max());\\n    }\\n}\\n\\n/**\\n * The possible amount of RAM for each purchased server.\\n *\\n * @param ns The Netscript API.\\n * @param minserv The minimum number of servers to buy.  Must be a positive\\n *     integer.\\n * @return The amount of RAM for each purchased server.  Return 0 if we cannot\\n *     afford the given number of purchased servers.\\n */\\nfunction pserv_ram(ns, minserv) {\\n    assert(minserv > 0);\\n    // The possible amount of RAM for a purchased server.  We want the lowest\\n    // value to be the default amount of RAM.\\n    const psv = new PurchasedServer(ns);\\n    let ram = psv.valid_ram().filter((r) => r >= pserv.DEFAULT_RAM_HGW);\\n    ram = MyArray.sort_descending(ram);\\n    // Let's see whether we can purchase servers, each having the given amount\\n    // of RAM.  Start with the highest amount of RAM.  See if we can buy at\\n    // least minserv servers, each with the given amount of RAM.  If not, then\\n    // decrease the amount of RAM and repeat the above process.\\n    const player = new Player(ns);\\n    const can_afford = (r) => minserv * psv.cost(r) < player.money();\\n    ram = ram.filter(can_afford);\\n    return ram.length > 0 ? ram[0] : 0;\\n}\\n\\n/**\\n * Reboot our sequential batchers after (possibly) reloading the game.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reboot(ns) {\\n    // We do not have any purchased servers.\\n    const purchased_server = ns.getPurchasedServers();\\n    if (purchased_server.length < 1) {\\n        return;\\n    }\\n    // Kill all sequential batcher scripts and all scripts on purchased servers.\\n    kill_batchers(ns);\\n    purchased_server.forEach((phost) => ns.killall(phost));\\n    // Launch a sequential batcher script for each purchased server.\\n    const candidate = find_candidates(ns);\\n    let k = 0;\\n    purchased_server.forEach((phost) => {\\n        const host = candidate[k];\\n        deploy(ns, phost, host);\\n        k++;\\n        if (k >= candidate.length) {\\n            k = 0;\\n        }\\n    });\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * This is the early stage, where it is assumed we are starting the game or\\n * have just installed a bunch of Augmentations.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function stage_one(ns) {\\n    // Do we already have the maximum number of purchased servers?\\n    const psv = new PurchasedServer(ns);\\n    const default_ram = pserv.DEFAULT_RAM_HGW;\\n    if (has_max_pserv(ns)) {\\n        const msg = `RAM: ${default_ram}. Already has max pserv.`;\\n        ns.print(msg);\\n        return;\\n    }\\n    // If we have zero purchased servers, then start with purchased servers\\n    // that have the default amount of RAM.\\n    const player = new Player(ns);\\n    const current_pserv = player.pserv();\\n    const msg = `Buy servers with default RAM: ${default_ram}`;\\n    if (current_pserv.length < 1) {\\n        ns.print(msg);\\n        await update(ns, default_ram);\\n        return;\\n    }\\n    // Assume we have at least 1 purchased server.\\n    assert(current_pserv.length > 0);\\n    assert(current_pserv.length < psv.limit());\\n    const server = new Server(ns, current_pserv[0]);\\n    // Skip the stage if a current purchased server has more than the default\\n    // amount of RAM.\\n    if (default_ram < server.ram_max()) {\\n        return;\\n    }\\n    assert(server.ram_max() === default_ram);\\n    ns.print(msg);\\n    await update(ns, default_ram);\\n}\\n\\n/**\\n * Purchase the maximum number of servers and run our sequential batcher on\\n * those servers.  The function chooses the \\\"best\\\" targets to hack.\\n *\\n * @param ns The Netscript API.\\n * @param ram The amount of RAM for each purchased server.  Must be a positive\\n *     integer and a power of 2.\\n */\\nasync function update(ns, ram) {\\n    // The amount of RAM must be a power of 2.  RAM is assumed to be in GB.\\n    const psv = new PurchasedServer(ns);\\n    const server_ram = Math.floor(ram);\\n    assert(psv.is_valid_ram(server_ram));\\n    // Continuously try to purchase a new server until we have reached the\\n    // maximum number of servers we can buy.\\n    const player = new Player(ns);\\n    let i = player.pserv().length;\\n    // Each purchased server targets a different world server.\\n    const candidate = find_candidates(ns).filter(\\n        (host) => !is_bankrupt(ns, host)\\n    );\\n    if (candidate.length === 0) {\\n        return;\\n    }\\n    let k = 0;\\n    const script = pserv.PBATCH;\\n    const has_funds = () => player.money() > psv.cost(server_ram);\\n    while (i < psv.limit()) {\\n        const serv = new Server(ns, home);\\n        if (has_funds() && serv.num_threads(script) > 0) {\\n            // Purchase a server.  Choose the best target server.\\n            const hostname = psv.purchase(pserv.PREFIX, server_ram);\\n            const host = candidate[k];\\n            deploy(ns, hostname, host);\\n            i++;\\n            k++;\\n            if (k >= candidate.length) {\\n                k = 0;\\n            }\\n        }\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n}\\n\\n/**\\n * A sequential batcher that uses purchased servers.\\n *\\n * Continuously try to purchase servers and use those to hack world servers.\\n * If our funds are sufficient, try to upgrade to servers with higher amounts\\n * of RAM.  Each purchased server uses HGW algorithms to prep and hack world\\n * servers.\\n *\\n * Usage: run quack/hgw/pserv.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    log(ns, \\\"Sequential batcher for purchased servers\\\");\\n    shush(ns);\\n    reboot(ns);\\n    // Continuously try to purchase more powerful servers.\\n    for (;;) {\\n        await buy_servers(ns);\\n        await ns.sleep(wait_t.MINUTE);\\n    }\\n}\\n\",\"filename\":\"/quack/hgw/pserv.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume we have root access to the target server.\\n *\\n * Lower the security level of a server.\\n *\\n * Usage: run quack/hgw/weaken.js [targetServer]\\n * Example: run quack/hgw/weaken.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    await ns.weaken(target, opt);\\n}\\n\",\"filename\":\"/quack/hgw/weaken.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { hgw } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { server } from \\\"/quack/lib/constant/server.js\\\";\\nimport {\\n    assemble_botnet,\\n    hgw_action,\\n    prep_gw,\\n    prep_wg,\\n} from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Choose the target server to prep and hack.\\n *\\n * @param ns The Netscript API.\\n * @return Hostname of the server to target.\\n */\\nfunction choose_target(ns) {\\n    assert(ns.getServerMaxMoney(server.JOES) > 0);\\n    return server.JOES;\\n}\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n */\\nasync function hack(ns, host) {\\n    for (;;) {\\n        await prep_server(ns, host);\\n        const botnet = assemble_botnet(\\n            ns,\\n            host,\\n            hgw.hack[host].FRACTION,\\n            bool.NOT_PREP\\n        );\\n        await hgw_action(ns, host, botnet, hgw.action.HACK);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Prep a server.  Weaken the server to its minimum security level and grow the\\n * server to its maximum amount of money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nasync function prep_server(ns, host) {\\n    switch (host) {\\n        case server.NOODLES:\\n        case server.JOES:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.PHANTASY:\\n            await prep_wg(ns, host);\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * A sequential batcher that pools the resources of world servers to target a\\n * common server.  Each of the hack, grow, and weaken functions is separated\\n * into its own script.  When we need a particular HGW action, we launch the\\n * appropriate script against a target server.  We pool the resources of all\\n * world servers, excluding our home server and purchased servers.\\n *\\n * Usage: run quack/hgw/world.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const host = choose_target(ns);\\n    log(ns, `Prep and hack ${host}`);\\n    await hack(ns, host);\\n}\\n\",\"filename\":\"/quack/hgw/world.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { hnet_t } from \\\"/quack/lib/constant/hacknet.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { has_hacknet_server_api } from \\\"/quack/lib/source.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Assume we have millions or even billions of dollars.  Add more nodes to our\\n * Hacknet farm.\\n *\\n * @param ns The Netscript API.\\n * @param n Increase the number of nodes to this amount.  Must be a positive\\n *     integer.\\n */\\nasync function expand_farm(ns, n) {\\n    const nNode = Math.floor(n);\\n    assert(nNode > 0);\\n    await setup_farm(ns, nNode);\\n}\\n\\n/**\\n * All nodes in our Hacknet farm.\\n *\\n * @param ns The Netscript API.\\n * @return An array of node IDs.  An empty array if we have zero nodes.\\n */\\nfunction hacknet_nodes(ns) {\\n    const n = ns.hacknet.numNodes();\\n    return n < 1 ? [] : MyArray.sequence(n);\\n}\\n\\n/**\\n * Whether we have sufficient money to cover a given cost.\\n *\\n * @param ns The Netscript API.\\n * @param cost Do we have enough funds to cover this cost?\\n * @return True if we have funds to cover the given cost; false otherwise.\\n */\\nfunction has_funds(ns, cost) {\\n    assert(cost > 0);\\n    return ns.getServerMoneyAvailable(home) > cost;\\n}\\n\\n/**\\n * Whether a node (or Hacknet server) has reached the maximum Level.\\n *\\n * @param ns The Netscript API.\\n * @param idx The ID of a node (or Hacknet server).\\n * @return True if the given node/server has reached its maximum Level;\\n *     false otherwise.\\n */\\nfunction has_max_level(ns, idx) {\\n    if (has_hacknet_server_api(ns)) {\\n        return node_level(ns, idx) === hnet_t.server.MAX_LEVEL;\\n    }\\n    return node_level(ns, idx) === hnet_t.MAX_LEVEL;\\n}\\n\\n/**\\n * Whether it is time to upgrade the Cores, RAM, and Cache of a Hacknet node or\\n * Hacknet server.  Upgrading the Cores or RAM or Cache is many times more\\n * expensive than upgrading the Level.  Make sure we upgrade the Cores, RAM, or\\n * Cache sparingly.  That is, the interval between successive upgrades of the\\n * Cores, RAM, or Cache should usually be longer than the corresponding interval\\n * for Level.\\n *\\n * @param ns The Netscript API.\\n * @param idx Whether to upgrade the Cores, RAM, or Cache of the Hacknet\\n *     node/server having this ID.\\n * @return True if it is time to upgrade the Cores, RAM, or Cache;\\n *     false otherwise.\\n */\\nfunction is_upgrade_core_ram_cache(ns, idx) {\\n    // Each time we upgrade the RAM of a Hacknet node by one unit, we\\n    // effectively double the current amount of RAM.  Starting from 1GB,\\n    // upgrading the RAM once would result in 2GB.  Upgrading the RAM another\\n    // time would result in 4GB.  And so on until we have reached 64GB, the\\n    // maximum amount of RAM for a Hacknet node.  Therefore we can upgrade the\\n    // RAM 6 times.  Divide these 6 upgrades into the 200 Level of a node, we\\n    // get the upgrade schedule:\\n    //\\n    // (1) 1st upgrade at 30 Level\\n    // (2) 2nd upgrade at 60 Level\\n    // (3) 3rd upgrade at 90 Level\\n    // (4) 4th upgrade at 120 Level\\n    // (5) 5th upgrade at 150 Level\\n    // (6) 6th upgrade at 180 Level\\n    //\\n    // Note that a Hacknet server has a maximum of 300 Level and 8,192GB RAM.\\n    //\\n    // On the other hand, upgrading the Cores once would add one point to the\\n    // current number of Cores.  Since a Hacknet node has a maximum of 16 Cores\\n    // and we start with 1 Core, we can upgrade the Cores a total of 15 times.\\n    // Follow the same upgrade schedule as per the schedule for upgrading RAM.\\n    //\\n    // Whenever it is time to upgrade the Cores and RAM, it might happen that\\n    // we do not have sufficient funds to finance the upgrades.  In that case,\\n    // we must skip the upgrade.  It is very likely that the Level of a Hacknet\\n    // node (or server) is at maximum whereas its Cores and RAM and Cache are\\n    // yet to be maxed out.  Thus the maximum Level is also part of the upgrade\\n    // schedule for Cores, RAM, and Cache (for server).\\n    //\\n    // If we have access to Hacknet servers, we want a shorter upgrade interval.\\n    if (has_max_level(ns, idx)) {\\n        return bool.IS_TIME;\\n    }\\n    const interval = has_hacknet_server_api(ns) ? 10 : 30;\\n    const remainder = node_level(ns, idx) % interval;\\n    return remainder === 0;\\n}\\n\\n/**\\n * The money and node/server thresholds.  We use the money threshold to gauge\\n * how many nodes/servers we should have at a particular stage.\\n *\\n * @param ns The Netscript API.\\n * @return An array [money, node] as follows:\\n *     (1) money := An array of money thresholds.  Higher money threshold means\\n *         we can afford more nodes or servers.\\n *     (2) node := An array of node or server thresholds.\\n */\\nfunction money_node_thresholds(ns) {\\n    const money = Array.from(hnet_t.MONEY);\\n    let node = Array.from(hnet_t.NODE);\\n    if (has_hacknet_server_api(ns)) {\\n        node = Array.from(hnet_t.SERVER);\\n    }\\n    return [money, node];\\n}\\n\\n/**\\n * The Level of a Hacknet node or server.\\n *\\n * @param ns The Netscript API.\\n * @param i The ID of a Hacknet node or server.  Must be non-negative.\\n * @return The Level of the Hacknet node/server whose ID is i.\\n */\\nfunction node_level(ns, i) {\\n    assert(i >= 0);\\n    return ns.hacknet.getNodeStats(i).level;\\n}\\n\\n/**\\n * Setup our farm of Hacknet nodes/servers.  We leave each node/server at\\n * Level 1, 1GB RAM, 1 Core, and Cache Level 1.  Our objective is to setup a\\n * farm of n Hacknet nodes/servers, each at base stat.\\n *\\n * @param ns The Netscript API.\\n * @param n How many Hacknet nodes/servers in our farm.  Must be a positive\\n *     integer.\\n */\\nasync function setup_farm(ns, n) {\\n    const nNode = Math.floor(n);\\n    assert(nNode > 0);\\n    assert(nNode <= ns.hacknet.maxNumNodes());\\n    // We already have a farm of n or more Hacknet nodes/servers.\\n    if (ns.hacknet.numNodes() >= nNode) {\\n        return;\\n    }\\n    // Purchase Hacknet nodes/servers for our farm.\\n    for (let i = ns.hacknet.numNodes(); i < nNode; i++) {\\n        if (!has_funds(ns, ns.hacknet.getPurchaseNodeCost())) {\\n            await ns.sleep(update_interval());\\n            continue;\\n        }\\n        const id = ns.hacknet.purchaseNode();\\n        assert(id !== -1);\\n        const s = has_hacknet_server_api(ns) ? \\\"server\\\" : \\\"node\\\";\\n        log(ns, `Purchased Hacknet ${s}: ${id}`);\\n    }\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * The interval between successive updates.\\n */\\nfunction update_interval() {\\n    return wait_t.MINUTE;\\n}\\n\\n/**\\n * Upgrade the stats of each Hacknet node/server by one point.  Assume we have\\n * at least one node/server.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction upgrade(ns) {\\n    upgrade_level(ns);\\n    // Should we also upgrade the Cores, RAM, and Cache?\\n    hacknet_nodes(ns)\\n        .filter((n) => is_upgrade_core_ram_cache(ns, n))\\n        .forEach((n) => {\\n            upgrade_core(ns, n);\\n            upgrade_ram(ns, n);\\n            upgrade_cache(ns, n);\\n        });\\n}\\n\\n/**\\n * Upgrade the Cache of a Hacknet server in our farm by one point.  Call this\\n * function multiple times to max out the Cache level of a server.  This\\n * function is applicable only to Hacknet servers.\\n *\\n * @param ns The Netscript API.\\n * @param idx Upgrade the Cache of the Hacknet server having this ID.\\n */\\nfunction upgrade_cache(ns, idx) {\\n    if (!has_hacknet_server_api(ns)) {\\n        return;\\n    }\\n    const farm = new Set(hacknet_nodes(ns));\\n    assert(farm.has(idx));\\n    // Add another Cache level to the Hacknet server.  The Cache level of a\\n    // server is at maximum if the cost of upgrading to the next Cache level is\\n    // Infinity.\\n    const howmany = 1; // Upgrade the Cache level this many times.\\n    const cost = ns.hacknet.getCacheUpgradeCost(idx, howmany);\\n    if (Number.isFinite(cost) && has_funds(ns, cost)) {\\n        assert(ns.hacknet.upgradeCache(idx, howmany));\\n    }\\n}\\n\\n/**\\n * Upgrade the Cores of a Hacknet node/server in our farm by one point.  Call\\n * this function multiple times to max out the number of Cores.\\n *\\n * @param ns The Netscript API.\\n * @param idx Upgrade the Cores of the Hacknet node/server having this ID.\\n */\\nfunction upgrade_core(ns, idx) {\\n    const farm = new Set(hacknet_nodes(ns));\\n    assert(farm.has(idx));\\n    // Add another Core to the Hacknet node/server.  The number of Cores of a\\n    // node/server is at maximum if the cost of upgrading to another Core is\\n    // Infinity.\\n    const howmany = 1; // Upgrade this many Cores at a time.\\n    const cost = ns.hacknet.getCoreUpgradeCost(idx, howmany);\\n    if (Number.isFinite(cost) && has_funds(ns, cost)) {\\n        assert(ns.hacknet.upgradeCore(idx, howmany));\\n    }\\n}\\n\\n/**\\n * Upgrade the Level of each Hacknet node/server in our farm by one point.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction upgrade_level(ns) {\\n    const howmany = 1; // Upgrade this many Levels at a time.\\n    hacknet_nodes(ns).forEach((n) => {\\n        // The Level of a node/server is at maximum if the cost of upgrading to\\n        // another Level is Infinity.\\n        const cost = ns.hacknet.getLevelUpgradeCost(n, howmany);\\n        if (Number.isFinite(cost) && has_funds(ns, cost)) {\\n            assert(ns.hacknet.upgradeLevel(n, howmany));\\n        }\\n    });\\n}\\n\\n/**\\n * Upgrade the RAM of a Hacknet node/server in our farm.\\n *\\n * @param ns The Netscript API.\\n * @param idx Upgrade the RAM of the Hacknet node/server having this ID.\\n */\\nfunction upgrade_ram(ns, idx) {\\n    const farm = new Set(hacknet_nodes(ns));\\n    assert(farm.has(idx));\\n    // The amount of RAM of a node/server is at maximum if the cost of upgrading\\n    // the RAM is Infinity.\\n    const howmany = 1; // Upgrade the RAM this many times.\\n    const cost = ns.hacknet.getRamUpgradeCost(idx, howmany);\\n    if (Number.isFinite(cost) && has_funds(ns, cost)) {\\n        assert(ns.hacknet.upgradeRam(idx, howmany));\\n    }\\n}\\n\\n/**\\n * Purchase and manage a farm of Hacknet nodes or Hacknet servers.\\n *\\n * Usage: run quack/hnet-farm.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    await setup_farm(ns, hnet_t.SEED_NODE);\\n    // Occassionally expand and upgrade the nodes/servers.\\n    const [money, node] = money_node_thresholds(ns);\\n    for (;;) {\\n        if (money.length > 0 && has_funds(ns, money[0])) {\\n            await expand_farm(ns, node[0]);\\n            // Ensure our Hacknet farm has at least the given number of\\n            // nodes/servers before moving on to the next money/node thresholds.\\n            if (ns.hacknet.numNodes() >= node[0]) {\\n                money.shift();\\n                node.shift();\\n            }\\n        }\\n        upgrade(ns);\\n        await ns.sleep(update_interval());\\n    }\\n}\\n\",\"filename\":\"/quack/hnet-farm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":87.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { script } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home, server } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { assert, server_of_max_weight } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The number of threads we can use to run a script on our home server.\\n *\\n * @param ns The Netscript API.\\n * @return The number of threads to use.  Always at least 1.\\n */\\nfunction home_num_threads(ns) {\\n    const home_serv = new Server(ns, home);\\n    const nthread = home_serv.num_threads(script);\\n    return nthread < 1 ? 1 : nthread;\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMaxMoney\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Constantly update the target to hack.\\n *\\n * @param ns The Netscript API.\\n * @param t A string representing the name of the current target.\\n * @return The hostname of the (possibly new) server currently being targeted.\\n */\\nfunction update(ns, t) {\\n    // Ensure we have root access on the chosen target.\\n    const target = server_of_max_weight(ns, network(ns));\\n    const serv = new Server(ns, target);\\n    assert(serv.has_root_access());\\n    // No new target.  Hack the current target if it is not already being\\n    // targeted.\\n    if (t === target) {\\n        if (!ns.isRunning(script, home, target)) {\\n            const nthread = home_num_threads(ns);\\n            ns.exec(script, home, nthread, target);\\n            ns.write(server.HRAM, target, io.WRITE);\\n        }\\n        return target;\\n    }\\n    // We have found a better target.  Hack this better server.\\n    assert(t !== target);\\n    if (ns.isRunning(script, home, t)) {\\n        assert(ns.kill(script, home, t));\\n    }\\n    const nthread = home_num_threads(ns);\\n    ns.exec(script, home, nthread, target);\\n    ns.write(server.HRAM, target, io.WRITE);\\n    return target;\\n}\\n\\n/**\\n * Use the RAM of our home server for miscellaneous tasks.  For now, use the\\n * home RAM to hack a world server.  If at some later time we need to devote the\\n * home RAM to another task, then this script should be suspended to free up\\n * some RAM.\\n *\\n * Usage: run quack/hram.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Periodically search for a better target.  Suspend this script, and kill\\n    // the spawned script, if we need to share our home server with a faction.\\n    let target = update(ns, \\\"\\\");\\n    for (;;) {\\n        // Do we need to suspend the script?\\n        if (ns.fileExists(server.SHARE, home)) {\\n            if (target !== \\\"\\\" && ns.isRunning(script, home, target)) {\\n                assert(ns.kill(script, home, target));\\n            }\\n            await ns.sleep(wait_t.DEFAULT);\\n            continue;\\n        }\\n        // Find a better target.\\n        target = update(ns, target);\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n}\\n\",\"filename\":\"/quack/hram.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\n\\n/**\\n * The player's karma.\\n *\\n * Usage: run quack/karma.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const player = new Player(ns);\\n    ns.tprint(`Karma: ${player.karma()}`);\\n}\\n\",\"filename\":\"/quack/karma.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\n\\n/**\\n * Kill all scripts on world or purchased servers.  Must provide one of the\\n * following at the command line:\\n *\\n * (1) pserv := Kill all scripts on all purchased servers.\\n * (2) world := Kill all scripts on all world servers where we have root access.\\n *\\n * Usage: run quack/kill-script.js [pserv | world]\\n * Example: run quack/kill-script.js pserv\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const error_msg = \\\"Must provide one command line argument: pserv | world\\\";\\n    // Must provide a command line argument to this script.\\n    if (ns.args.length < 1) {\\n        ns.tprint(error_msg);\\n        return;\\n    }\\n    const stype = ns.args[0];\\n    const player = new Player(ns);\\n    if (stype === \\\"pserv\\\") {\\n        // Kill all scripts on purchased servers.\\n        player.pserv().forEach((s) => ns.killall(s));\\n    } else if (stype === \\\"world\\\") {\\n        // Kill all scripts on world servers where we have root access.\\n        network(ns)\\n            .filter((s) => ns.hasRootAccess(s))\\n            .forEach((s) => ns.killall(s));\\n    } else {\\n        ns.tprint(error_msg);\\n    }\\n}\\n\",\"filename\":\"/quack/kill-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\n\\n/**\\n * Delete all purchased servers.  This would also kill all scripts running\\n * on each purchased server.\\n *\\n * Usage: run quack/kill-server.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const player = new Player(ns);\\n    player.pserv().forEach((s) => {\\n        ns.killall(s);\\n        ns.deleteServer(s);\\n    });\\n}\\n\",\"filename\":\"/quack/kill-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A class to hold various utility methods for dealing with arrays.  Cannot\\n * name it \\\"Array\\\" because there is already a class called \\\"Array\\\" in the\\n * standard API library.\\n */\\nexport class MyArray {\\n    /**\\n     * Whether the given array has only non-negative numbers.\\n     *\\n     * @param array An array of integers.  Cannot be an empty array.\\n     * @return true if the given array has only non-negative integers;\\n     *     false otherwise.\\n     */\\n    static all_nonnegative(array) {\\n        assert(array.length > 0);\\n        for (const a of array) {\\n            if (a < 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * The maximum element of an array.\\n     *\\n     * @param array We want to determine the maximum element of this array.\\n     *     Cannot be an empty array.\\n     * @return The largest element of the given array.\\n     */\\n    static max(array) {\\n        assert(array.length > 0);\\n        const init_value = -Infinity;\\n        return array.reduce((x, y) => Math.max(x, y), init_value);\\n    }\\n\\n    /**\\n     * A sequence of non-negative integers, starting from zero.  Each number in\\n     * the sequence is one more than the previous number.\\n     *\\n     * @param num How many numbers in the sequence.  Must be positive.  If\\n     *     num := 4, then our sequence is [0, 1, 2, 3].\\n     * @return An array representing a sequence of num numbers starting from 0.\\n     */\\n    static sequence(num) {\\n        const n = Math.floor(num);\\n        assert(n > 0);\\n        // Zoekeeper (Ansopedi#3422) on the Bitburner server of Discord pointed\\n        // out that this code is faster:\\n        //\\n        // return Array(n).fill().map((_, index) => index);\\n        //\\n        // However, the above is less readable than the line below.\\n        return [...Array(n).keys()];\\n    }\\n\\n    /**\\n     * Sort an array in ascending order.\\n     *\\n     * @param array We want to sort this array.  Cannot be an empty array.\\n     * @return A new array whose elements are sorted in ascending order.  If\\n     *     the array has duplicate elements, we are actually sorting in\\n     *     non-decreasing order.\\n     */\\n    static sort_ascending(array) {\\n        assert(array.length > 0);\\n        const arr = Array.from(array);\\n        arr.sort((a, b) => a - b);\\n        return arr;\\n    }\\n\\n    /**\\n     * Sort an array of 2-tuples in ascending order, using the first element of\\n     * each tuple.  The usual scenario is when we have an array of arrays like\\n     * so:\\n     *\\n     * [[1, 2], [3, 1], [1, 3], [5, 4]]\\n     *\\n     * where each element is a 2-tuple, i.e. an array of 2 elements.  The\\n     * sorted array would be\\n     *\\n     * [[1, 2], [1, 3], [3, 1], [5, 4]]\\n     *\\n     * @param array We want to sort this array of 2-tuples.  Cannot be an empty\\n     *     array.\\n     * @return A new array of 2-tuples, where each element is sorted in\\n     *     ascending order.  The sort is done based on the first element of\\n     *     each 2-tuple.\\n     */\\n    static sort_ascending_tuple(array) {\\n        assert(array.length > 0);\\n        const arr = Array.from(array);\\n        arr.sort((a, b) => a[0] - b[0]);\\n        return arr;\\n    }\\n\\n    /**\\n     * Sort an array in descending order.\\n     *\\n     * @param array We want to sort this array.  Cannot be an empty array.\\n     * @return A new array whose elements are sorted in descending order.  If\\n     *     the array has duplicate elements, then we are actually sorting the\\n     *     array in non-increasing order.\\n     */\\n    static sort_descending(array) {\\n        assert(array.length > 0);\\n        const arr = Array.from(array);\\n        arr.sort((a, b) => b - a);\\n        return arr;\\n    }\\n\\n    /**\\n     * Sum the elements of an array.\\n     *\\n     * @param array We want to add the elements of this array.  Cannot be an\\n     *     empty array.\\n     * @return The sum of the elements in the given array.\\n     */\\n    static sum(array) {\\n        assert(array.length > 0);\\n        const init_value = 0;\\n        return array.reduce((sum, current) => sum + current, init_value);\\n    }\\n}\\n\",\"filename\":\"/quack/lib/array.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions for solving coding contracts.\\n\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The index of an alphabetic character.\\n *\\n * @param c A character of the English alphabet.  Cannot be empty string.\\n * @return The index of the given character, where index starts from zero.\\n */\\nexport function char_index(c) {\\n    assert(c.length === 1);\\n    const alphabet = new Map([\\n        [\\\"A\\\", 0],\\n        [\\\"B\\\", 1],\\n        [\\\"C\\\", 2],\\n        [\\\"D\\\", 3],\\n        [\\\"E\\\", 4],\\n        [\\\"F\\\", 5],\\n        [\\\"G\\\", 6],\\n        [\\\"H\\\", 7],\\n        [\\\"I\\\", 8],\\n        [\\\"J\\\", 9],\\n        [\\\"K\\\", 10],\\n        [\\\"L\\\", 11],\\n        [\\\"M\\\", 12],\\n        [\\\"N\\\", 13],\\n        [\\\"O\\\", 14],\\n        [\\\"P\\\", 15],\\n        [\\\"Q\\\", 16],\\n        [\\\"R\\\", 17],\\n        [\\\"S\\\", 18],\\n        [\\\"T\\\", 19],\\n        [\\\"U\\\", 20],\\n        [\\\"V\\\", 21],\\n        [\\\"W\\\", 22],\\n        [\\\"X\\\", 23],\\n        [\\\"Y\\\", 24],\\n        [\\\"Z\\\", 25],\\n    ]);\\n    assert(alphabet.has(c));\\n    return alphabet.get(c);\\n}\\n\\n/**\\n * Count the total occurrence of 1 in a bit string.  This function does not\\n * necessarily count all 1s in a bit string.  Some positions can be skipped.\\n *\\n * @param msg A bit string, representing a possibly incomplete encoded message.\\n *     The message is encoded using Hamming code.  If the bit string is an\\n *     incomplete encoded message, the location of each parity bit has been\\n *     filled with rubbish.\\n * @param p The position of a parity (or redundant) bit.  Its value is always\\n *     a power of 2.  We start counting from this position in the bit string.\\n *     The value of p also tells us how many consecutive positions to skip.\\n *     In Hamming code, when checking parity we check p consecutive positions\\n *     and skip p consecutive positions, giving us a window of 2p consecutive\\n *     positions.  To reach the next window, we should skip 2p positions.\\n * @return The number of 1s in the given bit string, while skipping over\\n *     some positions.\\n */\\nexport function count_one(msg, p) {\\n    assert(msg.length > 0);\\n    assert(p > 0);\\n    let n1 = 0;\\n    let i = p;\\n    const skip = 2 * p;\\n    while (i < msg.length) {\\n        for (let j = i; j < i + p; j++) {\\n            if (msg[j] === 1) {\\n                n1++;\\n            }\\n        }\\n        i += skip;\\n    }\\n    return n1;\\n}\\n\\n/**\\n * An array of uppercase letters of the English alphabet.\\n */\\nexport function english_alphabet() {\\n    return \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\";\\n}\\n\\n/**\\n * Whether a character is an uppercase letter of the English alphabet.\\n *\\n * @param c A character.  Cannot be empty string.\\n * @return true if the given character is an uppercase letter of the English\\n *     alphabet; false otherwise.\\n */\\nexport function is_alphabetic(c) {\\n    assert(c.length === 1);\\n    return english_alphabet().includes(c);\\n}\\n\\n/**\\n * Log a failure when attempting to solve a coding contract.\\n *\\n * @param ns The Netscript API.\\n * @param fname Write our log to this file.  Must be a text file with\\n *     file extension \\\".txt\\\".\\n * @param cct The file name of the coding contract.\\n * @param host The hostname of the server where the coding contract is located.\\n * @param data The data used for solving the coding contract.\\n */\\nexport async function log_cct_failure(ns, fname, cct, host, data) {\\n    const date = new Date(Date.now());\\n    await ns.write(fname, date.toISOString(), io.APPEND);\\n    await ns.write(fname, `, ${host}, ${cct}${io.NEWLINE}`, io.APPEND);\\n    await ns.write(fname, data + io.NEWLINE, io.APPEND);\\n}\\n\\n/**\\n * Format a matrix as a string.\\n *\\n * @param mat A matrix, i.e. an array of arrays.\\n * @return The given matrix as a string.\\n */\\nexport function matrix_to_string(mat) {\\n    let string = \\\"\\\";\\n    const delim = \\\", \\\";\\n    for (let i = 0; i < mat.length; i++) {\\n        string += `[${mat[i]}]${delim}`;\\n    }\\n    string = string.slice(0, string.length - delim.length);\\n    return `[${string}]`;\\n}\\n\\n/**\\n * The maximum profit to be made when we are restricted to at most one\\n * transaction.  The algorithm is similar to Kadane's algorithm.  However, we\\n * must keep track of the minimum price as well as the maximum profit.\\n * Essentially, we want to buy low and sell high, but we are restricted to one\\n * transaction.  This means we are restricted by these rules:\\n *\\n * (1) Only one buy action.\\n * (2) Only one sell action.\\n * (3) Must first buy before we can sell.\\n *\\n * The idea is to determine two days i and j, where i < j and\\n * price[i] < price[j], such that the difference price[j] - price[i] is\\n * maximized.\\n *\\n * Refer to the following for more details:\\n *\\n * https://betterprogramming.pub/dynamic-programming-interview-questions-how-to-maximize-stock-profits-8ed4966c2206\\n *\\n * @param price An array where price[i] represents the price of a stock on\\n *     day i.  All prices are for the same stock.\\n * @return The maximum profit we can make, assuming at most one transaction.\\n *       Return 0 if no profit can be made or the price array is empty.\\n */\\nexport function max_profit_kadane(price) {\\n    // Empty price array means zero profit.\\n    if (price.length === 0) {\\n        return 0;\\n    }\\n    let max_profit = 0;\\n    let min_price = price[0];\\n    // Must start on the second day.  On the first day, we have only one\\n    // price value so the minimum of one value is that value itself.\\n    for (let i = 1; i < price.length; i++) {\\n        // We need to keep track of the minimum price.  Let mp be the minimum\\n        // price so far.  If the price on day i is lower than mp, we set mp to\\n        // to the new minimum price.  Otherwise, we move to the price on the\\n        // next day.\\n        min_price = Math.min(min_price, price[i]);\\n        // Why do we need to keep track of the minimum price so far?  Let mp be\\n        // the minimum price up to and including day i.  Let price[i] be the\\n        // price on day i.  The profit pf is defined as the price on day i\\n        // minus the running minimum price:\\n        //\\n        // pf := price[i] - mp\\n        //\\n        // Here, the minimum price mp occurs during one of the days from the\\n        // first to the current day, i.e. mp is one of the price values\\n        //\\n        // price[0], price[1], ..., price[i]\\n        //\\n        // If we were to buy the stock on some day j (0 <= j <= i) at the\\n        // minimum price of mp, we can sell the stock on day i to make a profit\\n        // of pf.  The following can happen:\\n        //\\n        // (1) mp < price[i].  We make a profit pf.  Let mpf be the maximum\\n        //     profit we can make on day i.  We compare the profit pf on day i\\n        //     to the maximum profit mpf we can make on day i.  If mpf < pf,\\n        //     then we adjust our maximum profit so far to the value of pf.\\n        //     Otherwise, we keep the value of mpf as is.  The maximum profit\\n        //     we can make so far is the maximum of mpf and pf.\\n        // (2) mp = price[i].  We break even.  No loss, no profit.\\n        // (3) mp > price[i].  We make a loss because we are selling our stock\\n        //     at a price lower than when we bought the stock.  Our minimum\\n        //     price should be adjusted to the price on day i.  The minimum\\n        //     price so far is the minimum of mp and price[i].\\n        const profit = price[i] - min_price;\\n        max_profit = Math.max(max_profit, profit);\\n    }\\n    return max_profit;\\n}\\n\\n/**\\n * The positions (or indices) where the parity bits are placed in a bit string\\n * that has been encoded using Hamming code.  These parity bits are also known\\n * as redundant bits to distinguish them from the overall parity bit placed at\\n * index 0 in the encoded bit string.\\n *\\n * @param p The number of parity bits.\\n * @return An array, where each element represents the position or index of a\\n *     parity bit.  These parity bits are also called redundant bits.\\n *     This array does not include the position of the overall parity\\n *     bit, which is assumed to be at index 0 in the encoded message.\\n */\\nexport function parity_position(p) {\\n    assert(p > 0);\\n    const array = [];\\n    for (let i = 0; i < p; i++) {\\n        array.push(2 ** i);\\n    }\\n    return array;\\n}\\n\\n/**\\n * Print to the terminal an error message about which Coding Contract we did\\n * not solve correctly.\\n *\\n * @param The Netscript API.\\n * @param host The hostname of the server where the Coding Contract was found.\\n * @param cct The file name of the Coding Contract.\\n */\\nexport function print_error(ns, host, cct) {\\n    const msg = `${host}: ${cct}: FAILURE`;\\n    log(ns, msg, colour.RED);\\n}\\n\\n/**\\n * Print to the terminal a message about the reward from successfully solving\\n * a Coding Contract.\\n *\\n * @param The Netscript API.\\n * @param host The hostname of the server where the Coding Contract was found.\\n * @param cct The file name of the Coding Contract.\\n * @param reward The reward from solving the Coding Contract.\\n */\\nexport function print_success(ns, host, cct, reward) {\\n    const msg = `${host}: ${cct}: ${reward}`;\\n    log(ns, msg);\\n}\\n\\n/**\\n * The maximum profit that can be made when we are restricted to at most two\\n * transactions.  Transactions must occur one after the other.  Suppose we buy\\n * one share of a stock on day i and sell the share on day j, where i < j.  We\\n * cannot buy another share of the same stock on any day between i and j.\\n * However, we are allowed to buy another share of the stock from day j+1\\n * onward.\\n *\\n * The above description hints at a simple solution.  We partition the price\\n * array into two non-overlapping parts:\\n *\\n * (1) The left part starts from day 0 and ends at day k, inclusive.  Run\\n *     Kadane's algorithm on the left subarray to get mpl as our maximum profit\\n *     for the left subarray.\\n * (2) The right part starts from day k+1 and ends at the last day in the price\\n *     array.  Run Kadane's algorithm on the right subarray to get mpr as our\\n *     maximum profit for the right subarray.\\n *\\n * The maximum profit is mpl + mpr.  This maximum profit is for one particular\\n * partition of the price array.  There are many other partitions, one for each\\n * value of k.  Calculate the maximum profit for each partition.  The true\\n * maximum profit is the maximum of the results of all partitions.\\n *\\n * @param price An array of prices, where price[i] is the price of one share of\\n *     a stock on day i.  All prices relate to the same stock.\\n * @return The maximum profit to be made, assuming we can perform at most\\n *     two transactions.  Return 0 if no profit can be made.\\n */\\nexport function stock_traderIII(price) {\\n    assert(price.length > 0);\\n    // Obtain all possible partitions of the price array.  Each partition\\n    // divides the array into two parts: the left subarray and the right\\n    // subarray.\\n    let max_profit = 0;\\n    for (let k = 0; k < price.length; k++) {\\n        // The left and right subarrays in the partition.\\n        const left = price.slice(0, k + 1);\\n        const right = price.slice(k + 1, price.length);\\n        // The maximum profit of each subarray in the partition.\\n        const mpl = max_profit_kadane(left);\\n        const mpr = max_profit_kadane(right);\\n        // The running maximum profit.\\n        max_profit = Math.max(max_profit, mpl + mpr);\\n    }\\n    return max_profit;\\n}\\n\",\"filename\":\"/quack/lib/cct.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constant values related to BitNodes.\\n\\n/**\\n * All named BitNodes.  The names are taken from this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/BitNode/BitNode.tsx\\n */\\nexport const bitnode = {\\n    \\\"Source Genesis\\\": 1,\\n    \\\"Rise of the Underworld\\\": 2,\\n    Corporatocracy: 3,\\n    \\\"The Singularity\\\": 4,\\n    \\\"Artificial Intelligence\\\": 5,\\n    Bladeburners: 6,\\n    \\\"Bladeburners 2079\\\": 7,\\n    \\\"Ghost of Wall Street\\\": 8,\\n    Hacktocracy: 9,\\n    \\\"Digital Carbon\\\": 10,\\n    \\\"The Big Crash\\\": 11,\\n    \\\"The Recursion\\\": 12,\\n    \\\"They're lunatics\\\": 13,\\n};\\n\",\"filename\":\"/quack/lib/constant/bn.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/**\\n * Various boolean values.\\n */\\nexport const bool = {\\n    /**\\n     * Whether or not a graph is bipartite.\\n     */\\n    BIPARTITE: true,\\n    NOT_BIPARTITE: false,\\n    /**\\n     * Whether or not to buy NeuroFlux Governor.\\n     */\\n    BUY_NFG: true,\\n    NO_BUY_NFG: false,\\n    /**\\n     * Whether or not we can run something.\\n     */\\n    CAN_RUN: true,\\n    NOT_RUN: false,\\n    /**\\n     * Whether or not a graph is directed.\\n     */\\n    DIRECTED: true,\\n    UNDIRECTED: false,\\n    /**\\n     * Enable or disable a feature.\\n     */\\n    ENABLE: true,\\n    DISABLE: false,\\n    /**\\n     * Whether or not to focus on an action.\\n     */\\n    FOCUS: true,\\n    NO_FOCUS: false,\\n    /**\\n     * Whether or not to graduate from a class or training.\\n     */\\n    GRADUATE: true,\\n    /**\\n     * Whether or not we have access to something.\\n     */\\n    HAS: true,\\n    NOT: false,\\n    /**\\n     * Whether or not we are prepping a server.\\n     */\\n    IS_PREP: true,\\n    NOT_PREP: false,\\n    /**\\n     * Whether or not this relates to a product.\\n     */\\n    IS_PRODUCT: true,\\n    NOT_PRODUCT: false,\\n    /**\\n     * Whether or not it is time for something to occur.\\n     */\\n    IS_TIME: true,\\n    NOT_TIME: false,\\n    /**\\n     * Whether or not to join an organization.\\n     */\\n    JOIN: true,\\n    NO_JOIN: false,\\n    /**\\n     * Whether or not we can jump.\\n     */\\n    JUMP: true,\\n    NO_JUMP: false,\\n    /**\\n     * Whether or not a server is low-end.\\n     */\\n    LOWEND: true,\\n    NOT_LOWEND: false,\\n    /**\\n     * Whether or not we can merge two things together.\\n     */\\n    MERGE: true,\\n    NO_MERGE: false,\\n    /**\\n     * Whether or not we can move from one state to another.\\n     */\\n    MOVE: true,\\n    NOT_MOVE: false,\\n    /**\\n     * Whether or not a new state has occurred.\\n     */\\n    NEW: true,\\n    NOT_NEW: false,\\n    /**\\n     * Whether or not to consider something that is purchased.\\n     */\\n    PURCHASED: true,\\n    NOT_PURCHASED: false,\\n    /**\\n     * Whether or not to raise money to purchase various items.\\n     */\\n    RAISE_MONEY: true,\\n    NO_RAISE_MONEY: false,\\n    /**\\n     * Whether or not a state is reachable.  These values are specific to\\n     * Array Jumping Game.\\n     */\\n    REACHABLE: 1,\\n    NOT_REACHABLE: 0,\\n    /**\\n     * Whether we are self-funding the creation of our corporation.\\n     */\\n    SELF_FUND: true,\\n    /**\\n     * Whether or not to skip an action.\\n     */\\n    SKIP: true,\\n    NO_SKIP: false,\\n    /**\\n     * Whether or not to stop the trade bot from purchasing shares of stocks.\\n     */\\n    STOP_TRADE: true,\\n    NO_STOP_TRADE: false,\\n    /**\\n     * Whether or not we are successful at something.\\n     */\\n    SUCCESS: true,\\n    FAILURE: false,\\n    /**\\n     * Whether or not something is valid or correct.\\n     */\\n    VALID: true,\\n    INVALID: false,\\n    /**\\n     * Whether to visit a particular location.\\n     */\\n    VISIT: true,\\n    NO_VISIT: false,\\n    /**\\n     * Whether we should wait for a condition to be met.\\n     */\\n    WAIT: true,\\n    NO_WAIT: false,\\n    /**\\n     * Whether we are (or should be) engaged in territory warfare.\\n     */\\n    WAR: true,\\n    NO_WAR: false,\\n    /**\\n     * Whether to work to increase money or stats.\\n     */\\n    WORK: true,\\n    NO_WORK: false,\\n};\\n\",\"filename\":\"/quack/lib/constant/bool.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constant values related to Coding Contracts.\\n\\nexport const cct = {\\n    /**\\n     * The suffix for files that contain Coding Contracts.\\n     */\\n    SUFFIX: \\\".cct\\\",\\n    /**\\n     * The time in milliseconds required for the game to randomly generate a\\n     * random Coding Contract on a random server, while in game.  While the\\n     * game is running, the probability for a Coding Contract to be spawned is\\n     * 0.25.  Each game cycle is 200 milliseconds.  The game randomly generates\\n     * a Coding Contract once every 3000 cycles.  Thus once every\\n     * 200 x 3000 = 600,000 milliseconds, or every 10 minutes, we have 25%\\n     * chance for a Coding Contract to spawn on a server.  These constants are\\n     * taken from\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/engine.tsx\\n     */\\n    UPDATE_TIME: 6e5,\\n};\\n\\n/**\\n * Various colours for graph colouring, i.e. testing whether a graph is\\n * bipartite.\\n */\\nexport const colour = {\\n    BLUE: 0,\\n    RED: 1,\\n    WHITE: 2,\\n};\\n\\n/**\\n * The types of chunk data in Lempel-Ziv compression and decompression.\\n */\\nexport const lzchunk = {\\n    /**\\n     * The chunk format L<string>.\\n     */\\n    LS: 1,\\n    /**\\n     * The chunk format LX.\\n     */\\n    LX: 2,\\n};\\n\\n/**\\n * The opening and closing parentheses.\\n */\\nexport const parenthesis = {\\n    CLOSE: \\\")\\\",\\n    OPEN: \\\"(\\\",\\n};\\n\\n/**\\n * A list of small prime numbers.\\n */\\nexport const small_primes = [\\n    2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\\n    73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\\n    157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\\n];\\n\\n/**\\n * The Vigenère square.\\n */\\nexport const vigenere_square = [\\n    \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\",\\n    \\\"BCDEFGHIJKLMNOPQRSTUVWXYZA\\\",\\n    \\\"CDEFGHIJKLMNOPQRSTUVWXYZAB\\\",\\n    \\\"DEFGHIJKLMNOPQRSTUVWXYZABC\\\",\\n    \\\"EFGHIJKLMNOPQRSTUVWXYZABCD\\\",\\n    \\\"FGHIJKLMNOPQRSTUVWXYZABCDE\\\",\\n    \\\"GHIJKLMNOPQRSTUVWXYZABCDEF\\\",\\n    \\\"HIJKLMNOPQRSTUVWXYZABCDEFG\\\",\\n    \\\"IJKLMNOPQRSTUVWXYZABCDEFGH\\\",\\n    \\\"JKLMNOPQRSTUVWXYZABCDEFGHI\\\",\\n    \\\"KLMNOPQRSTUVWXYZABCDEFGHIJ\\\",\\n    \\\"LMNOPQRSTUVWXYZABCDEFGHIJK\\\",\\n    \\\"MNOPQRSTUVWXYZABCDEFGHIJKL\\\",\\n    \\\"NOPQRSTUVWXYZABCDEFGHIJKLM\\\",\\n    \\\"OPQRSTUVWXYZABCDEFGHIJKLMN\\\",\\n    \\\"PQRSTUVWXYZABCDEFGHIJKLMNO\\\",\\n    \\\"QRSTUVWXYZABCDEFGHIJKLMNOP\\\",\\n    \\\"RSTUVWXYZABCDEFGHIJKLMNOPQ\\\",\\n    \\\"STUVWXYZABCDEFGHIJKLMNOPQR\\\",\\n    \\\"TUVWXYZABCDEFGHIJKLMNOPQRS\\\",\\n    \\\"UVWXYZABCDEFGHIJKLMNOPQRST\\\",\\n    \\\"VWXYZABCDEFGHIJKLMNOPQRSTU\\\",\\n    \\\"WXYZABCDEFGHIJKLMNOPQRSTUV\\\",\\n    \\\"XYZABCDEFGHIJKLMNOPQRSTUVW\\\",\\n    \\\"YZABCDEFGHIJKLMNOPQRSTUVWX\\\",\\n    \\\"ZABCDEFGHIJKLMNOPQRSTUVWXY\\\",\\n];\\n\",\"filename\":\"/quack/lib/constant/cct.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constant values related to corporation.\\n\\n/**\\n * Constants related to a corporation.\\n */\\nexport const corp = {\\n    /**\\n     * This file means that we should reload the script\\n     *\\n     * /corporation/agriculture.js\\n     *\\n     * after a soft reset.  In some cases, we do not want to start everything\\n     * all over again from the script\\n     *\\n     * /corporation/go.js\\n     */\\n    AGRI: \\\"/quack/corporation/agriculture.txt\\\",\\n    /**\\n     * The name of the Corporation API.  We use this to circumvent the namespace\\n     * RAM cost.\\n     */\\n    API: \\\"corporation\\\",\\n    /**\\n     * Constants related to an employee.\\n     */\\n    employee: {\\n        /**\\n         * Various attributes of an employee.\\n         */\\n        attribute: [\\n            \\\"charisma\\\",\\n            \\\"creativity\\\",\\n            \\\"efficiency\\\",\\n            \\\"energy\\\",\\n            \\\"experience\\\",\\n            \\\"happiness\\\",\\n            \\\"intelligence\\\",\\n            \\\"morale\\\",\\n            \\\"salary\\\",\\n        ],\\n    },\\n    /**\\n     * All available industries into which we can expand.  Data taken from this\\n     * file:\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/Corporation/data/Constants.ts\\n     */\\n    industry: {\\n        AGRI: \\\"Agriculture\\\",\\n        CHEM: \\\"Chemical\\\",\\n        COMP: \\\"Computers\\\",\\n        ENERGY: \\\"Energy\\\",\\n        FISH: \\\"Fishing\\\",\\n        FOOD: \\\"Food\\\",\\n        HEALTH: \\\"Healthcare\\\",\\n        LAND: \\\"RealEstate\\\",\\n        MINE: \\\"Mining\\\",\\n        PHARMA: \\\"Pharmaceutical\\\",\\n        ROBO: \\\"Robotics\\\",\\n        SOFTWARE: \\\"Software\\\",\\n        TOBACCO: \\\"Tobacco\\\",\\n        UTIL: \\\"Utilities\\\",\\n    },\\n    /**\\n     * A file to store the latest investment round we have completed.  Only\\n     * store the integer that represents the latest investment round in which\\n     * we accepted investment.\\n     */\\n    INVEST: \\\"/quack/corporation/invest.txt\\\",\\n    /**\\n     * This file means that we should reload the script\\n     *\\n     * /corporation/janitor.js\\n     *\\n     * after a soft reset.  In some cases, we do not want to start everything\\n     * all over again from the script\\n     *\\n     * /corporation/go.js\\n     */\\n    JANI: \\\"/quack/corporation/janitor.txt\\\",\\n    /**\\n     * The roles to assign to employees.  Data taken from this file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Corporation/EmployeePositions.ts\\n     */\\n    job: {\\n        BUSINESS: \\\"Business\\\",\\n        ENGINEER: \\\"Engineer\\\",\\n        MANAGEMENT: \\\"Management\\\",\\n        OPERATIONS: \\\"Operations\\\",\\n        RND: \\\"Research & Development\\\",\\n        TRAIN: \\\"Training\\\",\\n        IDLE: \\\"Unassigned\\\",\\n    },\\n    /**\\n     * Various types of materials.  Data taken from this file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Corporation/data/Constants.ts\\n     */\\n    material: {\\n        AI: \\\"AI Cores\\\",\\n        CHEMICAL: \\\"Chemicals\\\",\\n        DRUG: \\\"Drugs\\\",\\n        ENERGY: \\\"Energy\\\",\\n        FOOD: \\\"Food\\\",\\n        HARDWARE: \\\"Hardware\\\",\\n        LAND: \\\"Real Estate\\\",\\n        METAL: \\\"Metal\\\",\\n        PLANT: \\\"Plants\\\",\\n        ROBOT: \\\"Robots\\\",\\n        WATER: \\\"Water\\\",\\n    },\\n    /**\\n     * The name of our corporation.\\n     */\\n    NAME: \\\"Quacken Industries\\\",\\n    /**\\n     * The positions to assign to employees.  Data taken from this file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Corporation/EmployeePositions.ts\\n     */\\n    position: [\\n        \\\"Operations\\\",\\n        \\\"Engineer\\\",\\n        \\\"Business\\\",\\n        \\\"Management\\\",\\n        \\\"Research & Development\\\",\\n        \\\"Training\\\",\\n    ],\\n    /**\\n     * This file means that we should reload the script\\n     *\\n     * /corporation/prep.js\\n     *\\n     * after a soft reset.  In some cases, we do not want to start everything\\n     * all over again from the script\\n     *\\n     * /corporation/go.js\\n     */\\n    PREP: \\\"/quack/corporation/prep.txt\\\",\\n    /**\\n     * Various research that can be purchased.  Data taken from this file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Corporation/data/ResearchMetadata.ts\\n     */\\n    research: {\\n        ASSEMBLER: \\\"Self-Correcting Assemblers\\\",\\n        ASSIST: \\\"sudo.Assist\\\",\\n        BREW: \\\"AutoBrew\\\",\\n        BUY: \\\"Bulk Purchasing\\\",\\n        CAPACITY_I: \\\"uPgrade: Capacity.I\\\",\\n        CAPACITY_II: \\\"uPgrade: Capacity.II\\\",\\n        DASHBOARD: \\\"uPgrade: Dashboard\\\",\\n        DRONE: \\\"Drones\\\",\\n        DRONE_ASSEMBLY: \\\"Drones - Assembly\\\",\\n        DRONE_TRANSPORT: \\\"Drones - Transport\\\",\\n        DRUG: \\\"Automatic Drug Administration\\\",\\n        FULCRUM: \\\"uPgrade: Fulcrum\\\",\\n        INJECT: \\\"CPH4 Injections\\\",\\n        JOY: \\\"JoyWire\\\",\\n        JUICE: \\\"Go-Juice\\\",\\n        OVERCLOCK: \\\"Overclock\\\",\\n        PARTY: \\\"AutoPartyManager\\\",\\n        RND_LAB: \\\"Hi-Tech R&D Laboratory\\\",\\n        RECRUIT: \\\"HRBuddy-Recruitment\\\",\\n        STIMULATE: \\\"Sti.mu\\\",\\n        TA_I: \\\"Market-TA.I\\\",\\n        TA_II: \\\"Market-TA.II\\\",\\n        TRAIN: \\\"HRBuddy-Training\\\",\\n    },\\n    /**\\n     * The round of investment.\\n     */\\n    round: [\\\"one\\\", \\\"two\\\", \\\"three\\\", \\\"four\\\"],\\n    /**\\n     * This file means that we should reload the script\\n     *\\n     * /corporation/tobacco.js\\n     *\\n     * after a soft reset.  In some cases, we do not want to start everything\\n     * all over again from the script\\n     *\\n     * /corporation/go.js\\n     */\\n    TOBA: \\\"/quack/corporation/tobacco.txt\\\",\\n    /**\\n     * Unlock upgrades.  These are one-time unlockable upgrades and apply to the\\n     * entire corporation.  We cannot level these upgrades.  Data are taken from\\n     * this file:\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/Corporation/data/CorporationUnlockUpgrades.ts\\n     */\\n    unlock: {\\n        /**\\n         * Shady tactics to reduce our corporation's tax.\\n         */\\n        ACCOUNT: \\\"Shady Accounting\\\",\\n        /**\\n         * Statistics about our corporation and its supply chain.\\n         */\\n        CHAIN: \\\"VeChain\\\",\\n        /**\\n         * Display the competition of each material or product.\\n         */\\n        COMPETITION: \\\"Market Data - Competition\\\",\\n        /**\\n         * Display the demand of each material or product.\\n         */\\n        DEMAND: \\\"Market Research - Demand\\\",\\n        /**\\n         * Allows us to export goods.\\n         */\\n        EXPORT: \\\"Export\\\",\\n        /**\\n         * The Office API.\\n         */\\n        OFFICE: \\\"Office API\\\",\\n        /**\\n         * Private/public partnership or PPP.  Partner with national governments\\n         * to help lower our taxes.\\n         */\\n        PPP: \\\"Government Partnership\\\",\\n        /**\\n         * Allows us to purchase the exact amount of supply for production.\\n         */\\n        SMART: \\\"Smart Supply\\\",\\n        /**\\n         * The Warehouse API.\\n         */\\n        WAREHOUSE: \\\"Warehouse API\\\",\\n    },\\n    /**\\n     * These are level upgrades, as distinct from the unlock upgrades.  All\\n     * level upgrades start off as level 0.  We must purchase more levels for a\\n     * particular upgrade to increase its effectiveness.  Data taken from this\\n     * file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Corporation/data/Constants.ts\\n     */\\n    upgrade: {\\n        ANALYTIC: \\\"Wilson Analytics\\\",\\n        DREAM: \\\"DreamSense\\\",\\n        FACTORY: \\\"Smart Factories\\\",\\n        FOCUS: \\\"FocusWires\\\",\\n        INJECTOR: \\\"Nuoptimal Nootropic Injector Implants\\\",\\n        INSIGHT: \\\"Project Insight\\\",\\n        NEURAL: \\\"Neural Accelerators\\\",\\n        SALE: \\\"ABC SalesBots\\\",\\n        SPEECH: \\\"Speech Processor Implants\\\",\\n        STORAGE: \\\"Smart Storage\\\",\\n    },\\n};\\n\\n/**\\n * Thresholds on various aspects of a corporation.\\n */\\nexport const corp_t = {\\n    /**\\n     * The fraction of profit to issue as dividends.\\n     */\\n    DIVIDEND: 0.1,\\n    /**\\n     * Thresholds on various aspects of employees.\\n     */\\n    employee: {\\n        /**\\n         * The average energy percentage for an employee to be considered\\n         * vivacious.\\n         */\\n        ENERGY: 99.998,\\n        /**\\n         * The average happiness for an employee to be considered vivacious.\\n         */\\n        HAPPINESS: 99.998,\\n        /**\\n         * The average morale for an employee to be considered vivacious.\\n         */\\n        MORALE: 100,\\n    },\\n    /**\\n     * Various funds thresholds.  We use these thresholds to help us make\\n     * various decisions related to the direction of our corporation.\\n     */\\n    funds: {\\n        /**\\n         * Different rounds have different thresholds for the amount of funds we\\n         * want.\\n         */\\n        round: {\\n            /**\\n             * A very low funds threshold: $1b.\\n             */\\n            one: {\\n                N: 1e9,\\n            },\\n            /**\\n             * A low funds threshold: $2b.\\n             */\\n            two: {\\n                N: 2e9,\\n            },\\n        },\\n    },\\n    /**\\n     * The fraction of our corporation's funds to be invested in a product.\\n     */\\n    INVEST_MULT: 0.01,\\n    /**\\n     * The number of shares to issue for our Initial Public Offering (IPO).\\n     */\\n    IPO: 0,\\n    /**\\n     * Various thresholds related to an office.\\n     */\\n    office: {\\n        /**\\n         * The initial number of employees to hire for an office.\\n         */\\n        INIT_HIRE: 3,\\n    },\\n    /**\\n     * The maximum percentage progress.  For example, if the development of a\\n     * product has reached this progress threshold, then the product has\\n     * completed its development.\\n     */\\n    MAX_PROGRESS: 100,\\n    /**\\n     * Miscellaneous thresholds related to products.\\n     */\\n    product: {\\n        /**\\n         * Initially, we can develop at most this number of products.  To\\n         * develop another product, we must discontinue a product to make room\\n         * for a new product.\\n         */\\n        INIT_TAU: 3,\\n        /**\\n         * The maximum number of products that any division can manufacture.\\n         * Must have purchased \\\"uPgrade: Capacity.I\\\" and \\\"uPgrade: Capacity.II\\\".\\n         */\\n        MAX: 5,\\n    },\\n    /**\\n     * Various profit thresholds.  Each value is a rate per second.  We use\\n     * these thresholds to help us make various decisions related to the\\n     * direction of our corporation.\\n     */\\n    profit: {\\n        /**\\n         * Different rounds have different rates of profits we aim to achieve.\\n         */\\n        round: {\\n            /**\\n             * A very low profit threshold: $200k per second.\\n             */\\n            one: {\\n                N: 2e5,\\n            },\\n            /**\\n             * A low profit threshold: $300k per second.\\n             */\\n            two: {\\n                N: 3e5,\\n            },\\n            /**\\n             * A mid profit threshold: $1m per second.\\n             */\\n            three: {\\n                N: 1e6,\\n            },\\n            /**\\n             * A mid profit threshold: $2m per second.\\n             */\\n            four: {\\n                N: 2e6,\\n            },\\n        },\\n    },\\n    /**\\n     * Multiply the cost of a research by this amount.\\n     */\\n    RESEARCH_MULT: 2,\\n    /**\\n     * We need $150b to start a corporation.  Data taken from this file:\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/NetscriptFunctions/Corporation.ts\\n     */\\n    SEED_COST: 15e10,\\n    /**\\n     * Thresholds on various aspects of selling materials or products.\\n     */\\n    sell: {\\n        /**\\n         * The sell amount.\\n         */\\n        amount: {\\n            /**\\n             * Sell the maximum of whatever we have.\\n             */\\n            MAX: \\\"MAX\\\",\\n        },\\n        /**\\n         * The sell price.\\n         */\\n        price: {\\n            /**\\n             * Sell at the market price.\\n             */\\n            MP: \\\"MP\\\",\\n        },\\n    },\\n    /**\\n     * Each tick in a corporation is 10 seconds, expressed in terms of\\n     * milliseconds.\\n     */\\n    TICK: 1e4,\\n    /**\\n     * The same as TICK, but expressed in terms of seconds.\\n     */\\n    TICK_SECOND: 10,\\n    /**\\n     * Thresholds related to level upgrades.  These are distinct from unlock\\n     * upgrades.\\n     */\\n    upgrade: {\\n        /**\\n         * The cost to level up an upgrade should be no more than this fraction\\n         * of our profit.\\n         */\\n        COST_MULT: 0.5,\\n        /**\\n         * For our initial setup, we want at least 2 levels of various upgrades.\\n         */\\n        INIT_LEVEL: 2,\\n        /**\\n         * Upgrade thresholds for subsequent rounds.\\n         */\\n        round: {\\n            /**\\n             * Round 1 of upgrade.  Level up various upgrades to this level.\\n             */\\n            one: {\\n                LEVEL: 10,\\n            },\\n        },\\n    },\\n    /**\\n     * Various thresholds related to a warehouse.\\n     */\\n    warehouse: {\\n        /**\\n         * The initial upgraded size of a warehouse.  When a warehouse is\\n         * bought, it has a size of 100.  We want to upgrade our early warehouse\\n         * to this size.\\n         */\\n        INIT_UPGRADE_SIZE: 300,\\n    },\\n};\\n\\n/**\\n * Various thresholds and constants related to our Agriculture division.\\n */\\nexport const agriculture = {\\n    /**\\n     * City offices of our Agriculture division.\\n     */\\n    Aevum: {\\n        hire: {\\n            stage: {\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our division is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 1 more employee in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 2, // +2\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    Chongqing: {\\n        hire: {\\n            stage: {\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 2, // +2\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    Ishima: {\\n        hire: {\\n            stage: {\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 2, // +2\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    \\\"New Tokyo\\\": {\\n        hire: {\\n            stage: {\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 2, // +2\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    \\\"Sector-12\\\": {\\n        hire: {\\n            stage: {\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 2, // +2\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    Volhaven: {\\n        hire: {\\n            stage: {\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 2, // +2\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    /**\\n     * Hiring policies for various rounds of hiring.\\n     */\\n    hire: {\\n        /**\\n         * The policy for each stage of hiring.\\n         */\\n        stage: {\\n            /**\\n             * Stage 1 of hiring for an office.  We currently have employees in\\n             * these roles:\\n             *\\n             * (1) Operations x 1\\n             * (2) Engineer x 1\\n             * (3) Business x 1\\n             */\\n            one: {\\n                /**\\n                 * We want to hire an employee and assign them to this role.\\n                 */\\n                ROLE: \\\"Management\\\",\\n                /**\\n                 * The number of employees to hire for each office.\\n                 */\\n                WANT: 1,\\n                /**\\n                 * The current number of employees in each office who are\\n                 * assigned the above role.\\n                 */\\n                NOW: 0,\\n            },\\n            /**\\n             * Stage 2 of hiring for an office.  We currently have employees in\\n             * these roles:\\n             *\\n             * (1) Operations x 1\\n             * (2) Engineer x 1\\n             * (3) Business x 1\\n             * (4) Management x 1\\n             */\\n            two: {\\n                ROLE: \\\"Operations\\\",\\n                WANT: 1,\\n                NOW: 1,\\n            },\\n            /**\\n             * Stage 3 of hiring for an office.  We currently have employees in\\n             * these roles:\\n             *\\n             * (1) Operations x 2\\n             * (2) Engineer x 1\\n             * (3) Business x 1\\n             * (4) Management x 1\\n             */\\n            three: {\\n                ROLE: \\\"Engineer\\\",\\n                WANT: 1,\\n                NOW: 1,\\n            },\\n            /**\\n             * Stage 4 of hiring for an office.  We currently have employees in\\n             * these roles:\\n             *\\n             * (1) Operations x 2\\n             * (2) Engineer x 2\\n             * (3) Business x 1\\n             * (4) Management x 1\\n             */\\n            four: {\\n                ROLE: \\\"Business\\\",\\n                WANT: 1,\\n                NOW: 1,\\n            },\\n            /**\\n             * Stage 5 of hiring for an office.  We currently have employees in\\n             * these roles:\\n             *\\n             * (1) Operations x 2\\n             * (2) Engineer x 2\\n             * (3) Business x 2\\n             * (4) Management x 1\\n             */\\n            five: {\\n                ROLE: \\\"Management\\\",\\n                WANT: 1,\\n                NOW: 1,\\n            },\\n            /**\\n             * Stage 6 of hiring for an office.  We currently have employees in\\n             * these roles:\\n             *\\n             * (1) Operations x 2\\n             * (2) Engineer x 2\\n             * (3) Business x 2\\n             * (4) Management x 2\\n             */\\n            six: {\\n                ROLE: \\\"Operations\\\",\\n                WANT: 1,\\n                NOW: 2,\\n            },\\n        },\\n    },\\n    /**\\n     * Various thresholds on materials.\\n     */\\n    material: {\\n        /**\\n         * All materials sold by the Agriculture division.\\n         */\\n        sold: [corp.material.FOOD, corp.material.PLANT],\\n        /**\\n         * All materials bought by the Agriculture division.\\n         */\\n        ai: {\\n            /**\\n             * Purchasing thresholds.\\n             */\\n            buy: {\\n                /**\\n                 * The amount for our initial purchase.\\n                 */\\n                INIT: 75,\\n                /**\\n                 * Thresholds for various rounds.\\n                 */\\n                round: {\\n                    /**\\n                     * Threshold for round 1.\\n                     */\\n                    one: {\\n                        /**\\n                         * The amount to buy for this round.\\n                         */\\n                        N: 2445,\\n                        /**\\n                         * The target amount to have after the purchase.\\n                         */\\n                        TARGET: 2520,\\n                    },\\n                    two: {\\n                        N: 3750,\\n                        TARGET: 6270,\\n                    },\\n                },\\n            },\\n        },\\n        chemical: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n        drug: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n        energy: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n        food: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n        hardware: {\\n            buy: {\\n                INIT: 125,\\n                round: {\\n                    one: {\\n                        N: 2675,\\n                        TARGET: 2800,\\n                    },\\n                    two: {\\n                        N: 6500,\\n                        TARGET: 9300,\\n                    },\\n                },\\n            },\\n        },\\n        land: {\\n            buy: {\\n                INIT: 27e3,\\n                round: {\\n                    one: {\\n                        N: 119400,\\n                        TARGET: 146400,\\n                    },\\n                    two: {\\n                        N: 84e3,\\n                        TARGET: 230400,\\n                    },\\n                },\\n            },\\n        },\\n        metal: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n        plant: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n        robot: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 96,\\n                        TARGET: 96,\\n                    },\\n                    two: {\\n                        N: 630,\\n                        TARGET: 726,\\n                    },\\n                },\\n            },\\n        },\\n        water: {\\n            buy: {\\n                round: {\\n                    one: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                    two: {\\n                        N: 0,\\n                        TARGET: 0,\\n                    },\\n                },\\n            },\\n        },\\n    },\\n    /**\\n     * Various thresholds related to a warehouse.\\n     */\\n    warehouse: {\\n        /**\\n         * The initial upgraded size of a warehouse.  When a warehouse is\\n         * bought, it has a size of 100.  We want to upgrade our early warehouse\\n         * to this size.\\n         */\\n        INIT_UPGRADE_SIZE: 300,\\n        /**\\n         * Upgrade thresholds for subsequent rounds.\\n         */\\n        round: {\\n            /**\\n             * Round 1 of storage upgrade.  Expand the capacity of each\\n             * warehouse to this number.\\n             */\\n            one: {\\n                SIZE: 2e3,\\n            },\\n            two: {\\n                SIZE: 3800,\\n            },\\n        },\\n    },\\n};\\n\\n/**\\n * Various thresholds and constants related to our Tobacco division.\\n */\\nexport const tobacco = {\\n    /**\\n     * Only one city can be the developer city.\\n     */\\n    DEVELOPER_CITY: \\\"Aevum\\\",\\n    /**\\n     * City offices of our Tobacco division.\\n     */\\n    Aevum: {\\n        hire: {\\n            stage: {\\n                /**\\n                 * Stage 1 of hiring.  The maximum number of employees in each\\n                 * role.\\n                 */\\n                one: {\\n                    BUSINESS: 5,\\n                    ENGINEER: 9,\\n                    MANAGEMENT: 8,\\n                    OPERATIONS: 8,\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                two: {\\n                    BUSINESS: 9, // +4\\n                    ENGINEER: 13, // +4\\n                    MANAGEMENT: 10, // +2\\n                    OPERATIONS: 12, // +4\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                three: {\\n                    BUSINESS: 13, // +4\\n                    ENGINEER: 18, // +5\\n                    MANAGEMENT: 12, // +2\\n                    OPERATIONS: 17, // +5\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * From stage 4 onward, we want the number of employees at Aevum\\n                 * to be at least 60 ahead of other cities, within the same\\n                 * division.\\n                 */\\n                four: {\\n                    BUSINESS: 17, // +4\\n                    ENGINEER: 25, // +7\\n                    MANAGEMENT: 19, // +7\\n                    OPERATIONS: 24, // +7\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                five: {\\n                    BUSINESS: 19, // +2\\n                    ENGINEER: 30, // +5\\n                    MANAGEMENT: 24, // +5\\n                    OPERATIONS: 29, // +5\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                six: {\\n                    BUSINESS: 21, // +2\\n                    ENGINEER: 35, // +5\\n                    MANAGEMENT: 29, // +5\\n                    OPERATIONS: 34, // +5\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                seven: {\\n                    BUSINESS: 23, // +2\\n                    ENGINEER: 40, // +5\\n                    MANAGEMENT: 34, // +5\\n                    OPERATIONS: 39, // +5\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                eight: {\\n                    BUSINESS: 25, // +2\\n                    ENGINEER: 45, // +5\\n                    MANAGEMENT: 39, // +5\\n                    OPERATIONS: 44, // +5\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                nine: {\\n                    BUSINESS: 27, // +2\\n                    ENGINEER: 50, // +5\\n                    MANAGEMENT: 44, // +5\\n                    OPERATIONS: 49, // +5\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our corporation is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 2 more employees in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 2, // +2\\n                    ENGINEER: 4, // +4\\n                    MANAGEMENT: 4, // +4\\n                    OPERATIONS: 4, // +4\\n                    RND: 0,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    Chongqing: {\\n        hire: {\\n            stage: {\\n                one: {\\n                    BUSINESS: 1,\\n                    ENGINEER: 1,\\n                    MANAGEMENT: 1,\\n                    OPERATIONS: 1,\\n                    RND: 5,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                two: {\\n                    BUSINESS: 2, // +1\\n                    ENGINEER: 2, // +1\\n                    MANAGEMENT: 2, // +1\\n                    OPERATIONS: 2, // +1\\n                    RND: 9, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                three: {\\n                    BUSINESS: 3, // +1\\n                    ENGINEER: 3, // +1\\n                    MANAGEMENT: 3, // +1\\n                    OPERATIONS: 3, // +1\\n                    RND: 13, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * Do not hire any employees during stage 4, for this city as\\n                 * well as other cities.  From round 4 onward, we want the\\n                 * number of employees at cities other than the developer city\\n                 * to be at least 60 behind.\\n                 */\\n                four: {\\n                    BUSINESS: 3, // +0\\n                    ENGINEER: 3, // +0\\n                    MANAGEMENT: 3, // +0\\n                    OPERATIONS: 3, // +0\\n                    RND: 13, // +0\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                five: {\\n                    BUSINESS: 4, // +1\\n                    ENGINEER: 4, // +1\\n                    MANAGEMENT: 4, // +1\\n                    OPERATIONS: 4, // +1\\n                    RND: 18, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                six: {\\n                    BUSINESS: 5, // +1\\n                    ENGINEER: 5, // +1\\n                    MANAGEMENT: 5, // +1\\n                    OPERATIONS: 5, // +1\\n                    RND: 23, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                seven: {\\n                    BUSINESS: 6, // +1\\n                    ENGINEER: 6, // +1\\n                    MANAGEMENT: 6, // +1\\n                    OPERATIONS: 6, // +1\\n                    RND: 28, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                eight: {\\n                    BUSINESS: 7, // +1\\n                    ENGINEER: 7, // +1\\n                    MANAGEMENT: 7, // +1\\n                    OPERATIONS: 7, // +1\\n                    RND: 33, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                nine: {\\n                    BUSINESS: 8, // +1\\n                    ENGINEER: 8, // +1\\n                    MANAGEMENT: 8, // +1\\n                    OPERATIONS: 8, // +1\\n                    RND: 38, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our corporation is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 1 more employee in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 5, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    Ishima: {\\n        hire: {\\n            stage: {\\n                one: {\\n                    BUSINESS: 1,\\n                    ENGINEER: 1,\\n                    MANAGEMENT: 1,\\n                    OPERATIONS: 1,\\n                    RND: 5,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                two: {\\n                    BUSINESS: 2, // +1\\n                    ENGINEER: 2, // +1\\n                    MANAGEMENT: 2, // +1\\n                    OPERATIONS: 2, // +1\\n                    RND: 9, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                three: {\\n                    BUSINESS: 3, // +1\\n                    ENGINEER: 3, // +1\\n                    MANAGEMENT: 3, // +1\\n                    OPERATIONS: 3, // +1\\n                    RND: 13, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                four: {\\n                    BUSINESS: 3, // +0\\n                    ENGINEER: 3, // +0\\n                    MANAGEMENT: 3, // +0\\n                    OPERATIONS: 3, // +0\\n                    RND: 13, // +0\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                five: {\\n                    BUSINESS: 4, // +1\\n                    ENGINEER: 4, // +1\\n                    MANAGEMENT: 4, // +1\\n                    OPERATIONS: 4, // +1\\n                    RND: 18, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                six: {\\n                    BUSINESS: 5, // +1\\n                    ENGINEER: 5, // +1\\n                    MANAGEMENT: 5, // +1\\n                    OPERATIONS: 5, // +1\\n                    RND: 23, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                seven: {\\n                    BUSINESS: 6, // +1\\n                    ENGINEER: 6, // +1\\n                    MANAGEMENT: 6, // +1\\n                    OPERATIONS: 6, // +1\\n                    RND: 28, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                eight: {\\n                    BUSINESS: 7, // +1\\n                    ENGINEER: 7, // +1\\n                    MANAGEMENT: 7, // +1\\n                    OPERATIONS: 7, // +1\\n                    RND: 33, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                nine: {\\n                    BUSINESS: 8, // +1\\n                    ENGINEER: 8, // +1\\n                    MANAGEMENT: 8, // +1\\n                    OPERATIONS: 8, // +1\\n                    RND: 38, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our corporation is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 1 more employee in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 5, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    \\\"New Tokyo\\\": {\\n        hire: {\\n            stage: {\\n                one: {\\n                    BUSINESS: 1,\\n                    ENGINEER: 1,\\n                    MANAGEMENT: 1,\\n                    OPERATIONS: 1,\\n                    RND: 5,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                two: {\\n                    BUSINESS: 2, // +1\\n                    ENGINEER: 2, // +1\\n                    MANAGEMENT: 2, // +1\\n                    OPERATIONS: 2, // +1\\n                    RND: 9, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                three: {\\n                    BUSINESS: 3, // +1\\n                    ENGINEER: 3, // +1\\n                    MANAGEMENT: 3, // +1\\n                    OPERATIONS: 3, // +1\\n                    RND: 13, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                four: {\\n                    BUSINESS: 3, // +0\\n                    ENGINEER: 3, // +0\\n                    MANAGEMENT: 3, // +0\\n                    OPERATIONS: 3, // +0\\n                    RND: 13, // +0\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                five: {\\n                    BUSINESS: 4, // +1\\n                    ENGINEER: 4, // +1\\n                    MANAGEMENT: 4, // +1\\n                    OPERATIONS: 4, // +1\\n                    RND: 18, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                six: {\\n                    BUSINESS: 5, // +1\\n                    ENGINEER: 5, // +1\\n                    MANAGEMENT: 5, // +1\\n                    OPERATIONS: 5, // +1\\n                    RND: 23, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                seven: {\\n                    BUSINESS: 6, // +1\\n                    ENGINEER: 6, // +1\\n                    MANAGEMENT: 6, // +1\\n                    OPERATIONS: 6, // +1\\n                    RND: 28, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                eight: {\\n                    BUSINESS: 7, // +1\\n                    ENGINEER: 7, // +1\\n                    MANAGEMENT: 7, // +1\\n                    OPERATIONS: 7, // +1\\n                    RND: 33, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                nine: {\\n                    BUSINESS: 8, // +1\\n                    ENGINEER: 8, // +1\\n                    MANAGEMENT: 8, // +1\\n                    OPERATIONS: 8, // +1\\n                    RND: 38, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our corporation is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 1 more employee in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 5, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    \\\"Sector-12\\\": {\\n        hire: {\\n            stage: {\\n                one: {\\n                    BUSINESS: 1,\\n                    ENGINEER: 1,\\n                    MANAGEMENT: 1,\\n                    OPERATIONS: 1,\\n                    RND: 5,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                two: {\\n                    BUSINESS: 2, // +1\\n                    ENGINEER: 2, // +1\\n                    MANAGEMENT: 2, // +1\\n                    OPERATIONS: 2, // +1\\n                    RND: 9, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                three: {\\n                    BUSINESS: 3, // +1\\n                    ENGINEER: 3, // +1\\n                    MANAGEMENT: 3, // +1\\n                    OPERATIONS: 3, // +1\\n                    RND: 13, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                four: {\\n                    BUSINESS: 3, // +0\\n                    ENGINEER: 3, // +0\\n                    MANAGEMENT: 3, // +0\\n                    OPERATIONS: 3, // +0\\n                    RND: 13, // +0\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                five: {\\n                    BUSINESS: 4, // +1\\n                    ENGINEER: 4, // +1\\n                    MANAGEMENT: 4, // +1\\n                    OPERATIONS: 4, // +1\\n                    RND: 18, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                six: {\\n                    BUSINESS: 5, // +1\\n                    ENGINEER: 5, // +1\\n                    MANAGEMENT: 5, // +1\\n                    OPERATIONS: 5, // +1\\n                    RND: 23, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                seven: {\\n                    BUSINESS: 6, // +1\\n                    ENGINEER: 6, // +1\\n                    MANAGEMENT: 6, // +1\\n                    OPERATIONS: 6, // +1\\n                    RND: 28, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                eight: {\\n                    BUSINESS: 7, // +1\\n                    ENGINEER: 7, // +1\\n                    MANAGEMENT: 7, // +1\\n                    OPERATIONS: 7, // +1\\n                    RND: 33, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                nine: {\\n                    BUSINESS: 8, // +1\\n                    ENGINEER: 8, // +1\\n                    MANAGEMENT: 8, // +1\\n                    OPERATIONS: 8, // +1\\n                    RND: 38, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our corporation is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 1 more employee in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 5, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    Volhaven: {\\n        hire: {\\n            stage: {\\n                one: {\\n                    BUSINESS: 1,\\n                    ENGINEER: 1,\\n                    MANAGEMENT: 1,\\n                    OPERATIONS: 1,\\n                    RND: 5,\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                two: {\\n                    BUSINESS: 2, // +1\\n                    ENGINEER: 2, // +1\\n                    MANAGEMENT: 2, // +1\\n                    OPERATIONS: 2, // +1\\n                    RND: 9, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                three: {\\n                    BUSINESS: 3, // +1\\n                    ENGINEER: 3, // +1\\n                    MANAGEMENT: 3, // +1\\n                    OPERATIONS: 3, // +1\\n                    RND: 13, // +4\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                four: {\\n                    BUSINESS: 3, // +0\\n                    ENGINEER: 3, // +0\\n                    MANAGEMENT: 3, // +0\\n                    OPERATIONS: 3, // +0\\n                    RND: 13, // +0\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                five: {\\n                    BUSINESS: 4, // +1\\n                    ENGINEER: 4, // +1\\n                    MANAGEMENT: 4, // +1\\n                    OPERATIONS: 4, // +1\\n                    RND: 18, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                six: {\\n                    BUSINESS: 5, // +1\\n                    ENGINEER: 5, // +1\\n                    MANAGEMENT: 5, // +1\\n                    OPERATIONS: 5, // +1\\n                    RND: 23, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                seven: {\\n                    BUSINESS: 6, // +1\\n                    ENGINEER: 6, // +1\\n                    MANAGEMENT: 6, // +1\\n                    OPERATIONS: 6, // +1\\n                    RND: 28, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                eight: {\\n                    BUSINESS: 7, // +1\\n                    ENGINEER: 7, // +1\\n                    MANAGEMENT: 7, // +1\\n                    OPERATIONS: 7, // +1\\n                    RND: 33, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                nine: {\\n                    BUSINESS: 8, // +1\\n                    ENGINEER: 8, // +1\\n                    MANAGEMENT: 8, // +1\\n                    OPERATIONS: 8, // +1\\n                    RND: 38, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n                /**\\n                 * The n-th stage of hiring.  This is the general stage, where\\n                 * our corporation is in maintenance mode.  Each number is an\\n                 * increment of the current number of employees in the\\n                 * particular role.  For example, we want 1 more employee in\\n                 * the Business role.\\n                 */\\n                n: {\\n                    BUSINESS: 1, // +1\\n                    ENGINEER: 1, // +1\\n                    MANAGEMENT: 1, // +1\\n                    OPERATIONS: 1, // +1\\n                    RND: 5, // +5\\n                    TRAIN: 0,\\n                    IDLE: 0,\\n                },\\n            },\\n        },\\n    },\\n    /**\\n     * The products that our Tobacco division makes.\\n     */\\n    product: [\\n        \\\"Beedi\\\",\\n        \\\"Blunt\\\",\\n        \\\"Cigar\\\",\\n        \\\"Cigarette\\\",\\n        \\\"Cigarillo\\\",\\n        \\\"Dokha\\\",\\n        \\\"Gutka\\\",\\n        \\\"Hookah\\\",\\n        \\\"Iqmik\\\",\\n        \\\"Kiseru\\\",\\n        \\\"Kizami\\\",\\n        \\\"Kretek\\\",\\n        \\\"Mava\\\",\\n        \\\"Muʽassel\\\",\\n        \\\"Naswar\\\",\\n        \\\"Pipe\\\",\\n        \\\"Pouch\\\",\\n        \\\"RYO\\\",\\n        \\\"Snuff\\\",\\n        \\\"Snus\\\",\\n    ],\\n    /**\\n     * Various constants and thresholds related to research.\\n     */\\n    research: {\\n        round: {\\n            /**\\n             * In round 1 of research purchase, we want to buy\\n             * \\\"Hi-Tech R&D Laboratory\\\", which costs 5e3 in research points.\\n             * Wait until we have double that amount of research points.\\n             */\\n            one: {\\n                TAU: 10e3,\\n            },\\n            /**\\n             * In round 2 of research purchase, we want to buy \\\"Market-TA.I\\\"\\n             * (costs 20e3 research points) and \\\"Market-TA.II\\\"\\n             * (costs 50e3 research points) for a total of 70e3 research points.\\n             * Wait until we have double that amount of research points.\\n             */\\n            two: {\\n                TAU: 140e3,\\n            },\\n        },\\n    },\\n    /**\\n     * Various desired levels for each upgrade.\\n     */\\n    upgrade: {\\n        round: {\\n            /**\\n             * The maximum level of each upgrade.\\n             */\\n            one: {\\n                DreamSense: 20,\\n                FocusWires: 20,\\n                \\\"Neural Accelerators\\\": 20,\\n                \\\"Speech Processor Implants\\\": 20,\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 20,\\n                \\\"Project Insight\\\": 10,\\n                \\\"Wilson Analytics\\\": 0,\\n            },\\n            two: {\\n                DreamSense: 25, // +5\\n                FocusWires: 25, // +5\\n                \\\"Neural Accelerators\\\": 25, // +5\\n                \\\"Speech Processor Implants\\\": 25, // +5\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 25, // +5\\n                \\\"Project Insight\\\": 15, // +5\\n                \\\"Wilson Analytics\\\": 0, // +0\\n            },\\n            three: {\\n                DreamSense: 30, // +5\\n                FocusWires: 30, // +5\\n                \\\"Neural Accelerators\\\": 30, // +5\\n                \\\"Speech Processor Implants\\\": 30, // +5\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 30, // +5\\n                \\\"Project Insight\\\": 20, // +5\\n                \\\"Wilson Analytics\\\": 10, // +10\\n            },\\n            four: {\\n                DreamSense: 31, // +1\\n                FocusWires: 31, // +1\\n                \\\"Neural Accelerators\\\": 31, // +1\\n                \\\"Speech Processor Implants\\\": 31, // +1\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 31, // +1\\n                \\\"Project Insight\\\": 21, // +1\\n                \\\"Wilson Analytics\\\": 11, // +1\\n            },\\n            five: {\\n                DreamSense: 32, // +1\\n                FocusWires: 32, // +1\\n                \\\"Neural Accelerators\\\": 32, // +1\\n                \\\"Speech Processor Implants\\\": 32, // +1\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 32, // +1\\n                \\\"Project Insight\\\": 22, // +1\\n                \\\"Wilson Analytics\\\": 11, // +0\\n            },\\n            six: {\\n                DreamSense: 33, // +1\\n                FocusWires: 33, // +1\\n                \\\"Neural Accelerators\\\": 33, // +1\\n                \\\"Speech Processor Implants\\\": 33, // +1\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 33, // +1\\n                \\\"Project Insight\\\": 23, // +1\\n                \\\"Wilson Analytics\\\": 11, // +0\\n            },\\n            seven: {\\n                DreamSense: 34, // +1\\n                FocusWires: 34, // +1\\n                \\\"Neural Accelerators\\\": 34, // +1\\n                \\\"Speech Processor Implants\\\": 34, // +1\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 34, // +1\\n                \\\"Project Insight\\\": 24, // +1\\n                \\\"Wilson Analytics\\\": 11, // +0\\n            },\\n            eight: {\\n                DreamSense: 35, // +1\\n                FocusWires: 35, // +1\\n                \\\"Neural Accelerators\\\": 35, // +1\\n                \\\"Speech Processor Implants\\\": 35, // +1\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 35, // +1\\n                \\\"Project Insight\\\": 25, // +1\\n                \\\"Wilson Analytics\\\": 11, // +0\\n            },\\n            nine: {\\n                DreamSense: 36, // +1\\n                FocusWires: 36, // +1\\n                \\\"Neural Accelerators\\\": 36, // +1\\n                \\\"Speech Processor Implants\\\": 36, // +1\\n                \\\"Nuoptimal Nootropic Injector Implants\\\": 36, // +1\\n                \\\"Project Insight\\\": 26, // +1\\n                \\\"Wilson Analytics\\\": 12, // +1\\n            },\\n        },\\n    },\\n};\\n\",\"filename\":\"/quack/lib/constant/corp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constant values related to crimes.\\n\\n/**\\n * Various constants and thresholds related to crimes.\\n */\\nexport const crimes = {\\n    /**\\n     * All available crimes.\\n     */\\n    ASSASS: \\\"assassinate\\\",\\n    DRUG: \\\"deal drugs\\\",\\n    FORGE: \\\"bond forgery\\\",\\n    GTA: \\\"grand theft auto\\\",\\n    HEIST: \\\"heist\\\",\\n    KILL: \\\"homicide\\\",\\n    KIDNAP: \\\"kidnap and ransom\\\",\\n    LARCENY: \\\"larceny\\\",\\n    MUG: \\\"mug someone\\\",\\n    ROB: \\\"rob store\\\",\\n    SHOP: \\\"shoplift\\\",\\n    TRAFFICK: \\\"traffick illegal arms\\\",\\n};\\n\\n/**\\n * Various thresholds related to crimes.\\n */\\nexport const crimes_t = {\\n    /**\\n     * Mugging increases all of our combat stats.  Check whether each of our\\n     * combat stats is at least this value.\\n     */\\n    MUG: 10,\\n    /**\\n     * The default number of times we want to commit a particular crime.\\n     */\\n    n: 10,\\n    /**\\n     * Shoplift increases our Dexterity and Agility.  Check whether each of our\\n     * Dexterity and Agility is at least this value.\\n     */\\n    SHOP: 5,\\n};\\n\",\"filename\":\"/quack/lib/constant/crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to programs that can be created or bought\\n// via the dark web.\\n\\n/**\\n * All programs that can be created.  These programs can also be purchased via\\n * the dark web.  Data taken from this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Programs/data/ProgramsMetadata.ts\\n */\\nexport function all_programs() {\\n    // A map where the key/value pair is as follows:\\n    //\\n    // key := The name of a program.\\n    // value := The minimum Hack stat at which we are able to create the\\n    //     program.\\n    const program = new Map([\\n        [\\\"BruteSSH.exe\\\", 50],\\n        [\\\"FTPCrack.exe\\\", 100],\\n        [\\\"HTTPWorm.exe\\\", 500],\\n        [\\\"relaySMTP.exe\\\", 250],\\n        [\\\"SQLInject.exe\\\", 750],\\n        [\\\"DeepscanV1.exe\\\", 75],\\n        [\\\"DeepscanV2.exe\\\", 400],\\n        [\\\"ServerProfiler.exe\\\", 75],\\n        [\\\"AutoLink.exe\\\", 25],\\n        [\\\"Formulas.exe\\\", 1000],\\n    ]);\\n    return program;\\n}\\n\\n/**\\n * The cheapest programs available via the dark web are:\\n *\\n * (1) BruteSSH.exe\\n * (2) ServerProfiler.exe\\n * (3) DeepscanV1.exe\\n *\\n * Each costs the same amount of $500k.  Data taken from this page:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/DarkWeb/DarkWebItems.ts\\n *\\n * If we are to delete any of these cheapest programs, then we should\\n * definitely keep BruteSSH.exe.  The remaining candidates for deletion are\\n * ServerProfiler.exe and DeepscanV1.exe.  Decide which of these two programs\\n * we do not need and delete that one.\\n */\\nexport const cheapest_program = {\\n    COST: 5e5,\\n    NAME: \\\"DeepscanV1.exe\\\",\\n};\\n\\n/**\\n * These programs are port openers.  Each program can be used to open a\\n * specific port on a server.\\n */\\nexport const program = [\\n    \\\"BruteSSH.exe\\\",\\n    \\\"FTPCrack.exe\\\",\\n    \\\"HTTPWorm.exe\\\",\\n    \\\"relaySMTP.exe\\\",\\n    \\\"SQLInject.exe\\\",\\n];\\n\\n/**\\n * The purchasing schedule.  Use this schedule to help us buy a batch of\\n * programs, depending on our current funds.  This schedule is used whenever our\\n * money is less than some pre-defined constant M.  If our money is at least M,\\n * then we switch to a dynamic purchasing schedule.\\n */\\nexport const buy_schedule = {\\n    /**\\n     * When we use a dynamic purchasing schedule, this constant is used to help\\n     * us determine how many programs to buy in a batch.\\n     */\\n    DIVISOR: 1e12,\\n    /**\\n     * The money threshold at which we switch to a dynamic purchasing schedule.\\n     * If our money is less than this constant, use the pre-defined schedule\\n     * below.\\n     */\\n    DYNAMIC_TAU: 100e12,\\n    /**\\n     * How many programs in a batch.  Each number n means we purchase n copies\\n     * of a particular program.\\n     */\\n    howmany: [50, 25, 12, 6, 3, 1, 1],\\n    /**\\n     * The maximum batch size.  How many programs to purchase in one go.  Need a\\n     * limit on the batch size, otherwise the script for Intelligence farming\\n     * would slow down the UI.\\n     */\\n    MAX_BATCH_SIZE: 1e4,\\n    /**\\n     * Various money thresholds.\\n     */\\n    money: [\\n        10e12, // 10 trillion\\n        1e12, // 1 trillion\\n        500e9,\\n        100e9,\\n        1e9, // 1 billion\\n        100e6,\\n        10e6, // 10 million\\n    ],\\n    /**\\n     * The sleep time.  We sleep a given amount of time, depending on the batch\\n     * size and money.\\n     */\\n    time: [\\n        1, // 1 millisecond\\n        1,\\n        1e3, // 1 second\\n        10e3, // 10 seconds\\n        60e3,\\n        120e3, // 120 seconds or 2 minutes\\n        180e3, // 180 seconds or 3 minutes\\n    ],\\n};\\n\\n/**\\n * These are utility programs.  They are useful when we need to manually\\n * traverse the network of world servers.\\n */\\nexport const utility_program = [\\n    \\\"AutoLink.exe\\\",\\n    \\\"DeepscanV1.exe\\\",\\n    \\\"DeepscanV2.exe\\\",\\n    \\\"Formulas.exe\\\",\\n    \\\"ServerProfiler.exe\\\",\\n];\\n\",\"filename\":\"/quack/lib/constant/exe.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to factions and their Augmentations.\\n\\n/**\\n * Various constants and thresholds related to Augmentations.\\n */\\nexport const augment = {\\n    /**\\n     * The maximum number of Augmentations to purchase from a faction.  This\\n     * number does not include the NeuroFlux Governor.  We limit the number of\\n     * Augmentations to purchase to help speed up the process of buying all\\n     * Augmentations from a faction.  We purchase this number of Augmentations\\n     * from a faction and install them.  If the faction has any more\\n     * Augmentations (besides the NeuroFlux Governor), we purchase those after\\n     * the installation.  Some Augmentations require a huge amount of faction\\n     * reputation.  It can take a very long time to accumulate enough\\n     * reputation points, especially if an Augmentation requires at least one\\n     * million reputation points.  By purchasing a given number of\\n     * Augmentations and installing them, we gain some favour with the faction.\\n     * In case our favour points are high enough, we would be able to donate to\\n     * the faction in exchange for reputation points.  This should help to\\n     * shorten the amount of time required to reach a certain amount of\\n     * reputation points.\\n     */\\n    BUY_TAU: 5,\\n    /**\\n     * Named Augmentations.\\n     */\\n    NFG: \\\"NeuroFlux Governor\\\",\\n    TRP: \\\"The Red Pill\\\",\\n};\\n\\n/**\\n * Stat requirements for receiving an invitation from a faction.  Here is an\\n * explanation of each requirement.\\n *\\n * (1) backdoor := Must install a backdoor on this server.\\n * (2) ban := An array of companies at which we should not be working.\\n * (3) city := Must be located in this city.\\n * (4) combat := Lower threshold for each combat stat.  Each of our Strength,\\n *     Defense, Dexterity, and Agility must be at least this value.\\n * (5) hack := Lower threshold for our Hack stat.  Our Hack stat must be at\\n *     least this value.\\n * (6) karma := Our negative karma must be this value or lower.\\n * (7) kill := Must have killed at least this many people.\\n * (8) money := Must have at least this amount of money.\\n */\\nexport const faction_req = {\\n    Aevum: {\\n        city: \\\"Aevum\\\",\\n        money: 40e6,\\n    },\\n    \\\"Bachman & Associates\\\": {\\n        backdoor: \\\"b-and-a\\\",\\n        city: \\\"Aevum\\\",\\n    },\\n    BitRunners: {\\n        backdoor: \\\"run4theh111z\\\",\\n    },\\n    \\\"Blade Industries\\\": {\\n        backdoor: \\\"blade\\\",\\n        city: \\\"Sector-12\\\",\\n    },\\n    Chongqing: {\\n        city: \\\"Chongqing\\\",\\n        money: 20e6,\\n    },\\n    \\\"Clarke Incorporated\\\": {\\n        backdoor: \\\"clarkinc\\\",\\n        city: \\\"Aevum\\\",\\n    },\\n    CyberSec: {\\n        backdoor: \\\"CSEC\\\",\\n    },\\n    /**\\n     * This faction has a requirement not listed below.  We must install a\\n     * certain number of Augmentations.  This number can vary from one BitNode\\n     * to the next.\\n     */\\n    Daedalus: {\\n        combat: 1500,\\n        hack: 2500,\\n        money: 100e9,\\n    },\\n    ECorp: {\\n        backdoor: \\\"ecorp\\\",\\n        city: \\\"Aevum\\\",\\n    },\\n    \\\"Four Sigma\\\": {\\n        backdoor: \\\"4sigma\\\",\\n        city: \\\"Sector-12\\\",\\n    },\\n    \\\"Fulcrum Secret Technologies\\\": {\\n        backdoor: \\\"fulcrumassets\\\",\\n        city: \\\"Aevum\\\",\\n    },\\n    /**\\n     * This faction has a requirement not listed below.  We must install at\\n     * least 30 Augmentations.\\n     */\\n    Illuminati: {\\n        combat: 1200,\\n        hack: 1500,\\n        money: 150e9,\\n    },\\n    Ishima: {\\n        city: \\\"Ishima\\\",\\n        money: 30e6,\\n    },\\n    \\\"KuaiGong International\\\": {\\n        backdoor: \\\"kuai-gong\\\",\\n        city: \\\"Chongqing\\\",\\n    },\\n    MegaCorp: {\\n        backdoor: \\\"megacorp\\\",\\n        city: \\\"Sector-12\\\",\\n    },\\n    /**\\n     * This faction has another requirement not listed below.  Nodes in our\\n     * Hacknet farm must have a collective level of at least 100, a collective\\n     * RAM of at least 8, and a collective Cores of at least 4. For example, if\\n     * we have 3 Hacknet nodes then the Level of all 3 nodes should add up to\\n     * at least 100. One node can be at Level 50, another node can be at\\n     * Level 30, and the third node can be at Level 21.\\n     */\\n    Netburners: {\\n        hack: 80,\\n    },\\n    \\\"New Tokyo\\\": {\\n        city: \\\"New Tokyo\\\",\\n        money: 20e6,\\n    },\\n    NiteSec: {\\n        backdoor: \\\"avmnite-02h\\\",\\n    },\\n    NWO: {\\n        backdoor: \\\"nwo\\\",\\n        city: \\\"Volhaven\\\",\\n    },\\n    \\\"OmniTek Incorporated\\\": {\\n        backdoor: \\\"omnitek\\\",\\n        city: \\\"Volhaven\\\",\\n    },\\n    \\\"Sector-12\\\": {\\n        city: \\\"Sector-12\\\",\\n    },\\n    /**\\n     * This faction has another requirement not listed below.  We must be a\\n     * CTO, CFO, or CEO of a company.\\n     */\\n    Silhouette: {\\n        karma: -22,\\n        money: 15e6,\\n    },\\n    \\\"Slum Snakes\\\": {\\n        combat: 30,\\n        karma: -9,\\n        money: 1e6,\\n    },\\n    \\\"Speakers for the Dead\\\": {\\n        ban: [\\\"Central Intelligence Agency\\\", \\\"National Security Agency\\\"],\\n        combat: 300,\\n        hack: 100,\\n        karma: -45,\\n        kill: 30,\\n    },\\n    Tetrads: {\\n        city: \\\"Ishima\\\",\\n        combat: 75,\\n        karma: -18,\\n    },\\n    \\\"The Black Hand\\\": {\\n        backdoor: \\\"I.I.I.I\\\",\\n    },\\n    /**\\n     * This faction has a requirement not listed below.  We must have installed\\n     * at least 20 Augmentations.\\n     */\\n    \\\"The Covenant\\\": {\\n        combat: 850,\\n        hack: 850,\\n        money: 75e9,\\n    },\\n    \\\"The Dark Army\\\": {\\n        city: \\\"Chongqing\\\",\\n        combat: 300,\\n        hack: 300,\\n        karma: -45,\\n        kill: 5,\\n    },\\n    \\\"The Syndicate\\\": {\\n        city: \\\"Sector-12\\\",\\n        combat: 200,\\n        hack: 200,\\n        karma: -90,\\n        money: 10e6,\\n    },\\n    \\\"Tian Di Hui\\\": {\\n        city: \\\"Ishima\\\",\\n        hack: 50,\\n        money: 1e6,\\n    },\\n    Volhaven: {\\n        city: \\\"Volhaven\\\",\\n        money: 50e6,\\n    },\\n};\\n\\n/**\\n * Various thresholds related to factions.\\n */\\nexport const faction_t = {\\n    /**\\n     * Donate this percentage of our money to a faction.\\n     */\\n    DONATE_MULT: 0.2,\\n    /**\\n     * The minimum amount of reputation we must attain at a company.  This\\n     * reputation point is part of the pre-requisites for receiving an\\n     * invitation from a megacorporation faction.\\n     */\\n    CORP_REP: 3e5,\\n};\\n\\n/**\\n * Augmentations that are exclusive to various factions.  We can purchase some\\n * Augmentations provided that we are a member of the corresponding faction.\\n */\\nexport const exclusive_aug = {\\n    \\\"Bachman & Associates\\\": [\\\"SmartJaw\\\"],\\n    BitRunners: [\\n        \\\"BitRunners Neurolink\\\",\\n        \\\"Cranial Signal Processors - Gen V\\\",\\n        \\\"Neural Accelerator\\\",\\n    ],\\n    \\\"Blade Industries\\\": [\\\"Neotra\\\"],\\n    Chongqing: [\\\"Neuregen Gene Modification\\\"],\\n    \\\"Clarke Incorporated\\\": [\\n        \\\"Neuronal Densification\\\",\\n        \\\"nextSENS Gene Modification\\\",\\n    ],\\n    CyberSec: [\\n        \\\"Cranial Signal Processors - Gen I\\\",\\n        \\\"Neurotrainer I\\\",\\n        \\\"Synaptic Enhancement Implant\\\",\\n    ],\\n    Daedalus: [\\\"The Red Pill\\\"],\\n    ECorp: [\\\"ECorp HVMind Implant\\\"],\\n    \\\"Fulcrum Secret Technologies\\\": [\\n        \\\"PC Direct-Neural Interface NeuroNet Injector\\\",\\n    ],\\n    Illuminati: [\\\"QLink\\\"],\\n    Ishima: [\\\"INFRARET Enhancement\\\"],\\n    \\\"KuaiGong International\\\": [\\\"Photosynthetic Cells\\\"],\\n    MegaCorp: [\\\"CordiARC Fusion Reactor\\\"],\\n    Netburners: [\\n        \\\"Hacknet Node Cache Architecture Neural-Upload\\\",\\n        \\\"Hacknet Node Core Direct-Neural Interface\\\",\\n        \\\"Hacknet Node CPU Architecture Neural-Upload\\\",\\n        \\\"Hacknet Node Kernel Direct-Neural Interface\\\",\\n        \\\"Hacknet Node NIC Architecture Neural-Upload\\\",\\n    ],\\n    \\\"New Tokyo\\\": [\\\"NutriGen Implant\\\"],\\n    NiteSec: [\\\"CRTX42-AA Gene Modification\\\", \\\"Neural-Retention Enhancement\\\"],\\n    NWO: [\\\"Xanipher\\\"],\\n    \\\"OmniTek Incorporated\\\": [\\\"OmniTek InfoLoad\\\"],\\n    \\\"Sector-12\\\": [\\\"CashRoot Starter Kit\\\"],\\n    Silhouette: [\\\"TITN-41 Gene-Modification Injection\\\"],\\n    \\\"Slum Snakes\\\": [\\\"SmartSonar Implant\\\"],\\n    \\\"Speakers for the Dead\\\": [\\\"Graphene BrachiBlades Upgrade\\\"],\\n    Tetrads: [\\\"Bionic Arms\\\"],\\n    \\\"Tian Di Hui\\\": [\\\"Social Negotiation Assistant (S.N.A)\\\"],\\n    \\\"The Black Hand\\\": [\\\"The Black Hand\\\"],\\n    \\\"The Covenant\\\": [\\\"SPTN-97 Gene Modification\\\"],\\n    \\\"The Dark Army\\\": [\\\"Graphene Bionic Arms Upgrade\\\"],\\n    \\\"The Syndicate\\\": [\\\"BrachiBlades\\\"],\\n    Volhaven: [\\\"DermaForce Particle Barrier\\\"],\\n};\\n\\n/**\\n * Various divisions of factions in the game.\\n */\\nexport const factions = {\\n    /**\\n     * An array of all faction names.  The faction names are listed in a\\n     * specific order, usually along the following line of reasoning.\\n     *\\n     * (1) Sector-12 should be the first faction we must join.  The reason is\\n     *     simple.  This faction has the CashRoot Starter Kit Augmentation that\\n     *     grants us $1m and the BruteSSH.exe program after a soft reset.\\n     * (2) Netburners, CyberSec, and Tian Di Hui should be the next group of\\n     *     factions to join.  These factions have Augmentations that raise\\n     *     various hack-related stats.  In particular, Tian Di Hui has 4\\n     *     Augmentations that boost the amount of reputation we gain from\\n     *     factions and companies.\\n     * (3) BitRunners has an Augmentation that allows us to start with the\\n     *     FTPCrack.exe and relaySMTP.exe programs after a soft reset.\\n     * (4) The Syndicate has the Augmentation BrachiBlades, which is a\\n     *     pre-requisite of an Augmentation from Speakers for the Dead.\\n     *     Furthermore, The Syndicate has 2 Augmentations that boost the\\n     *     reputation we gain from factions and companies.\\n     * (5) Bachman & Associates has 5 Augmentations that boost the amount of\\n     *     reputation we gain from factions and companies.\\n     * (6) Aevum has the PCMatrix Augmentation that allows us to start with\\n     *     DeepscanV1.exe and AutoLink.exe after a soft reset.  These are\\n     *     strictly not necessary in an automated game play.\\n     * (7) Chongqing, Ishima, and New Tokyo are not enemies with each other.\\n     *     We can join all three factions at the same time, work toward\\n     *     purchasing all of their Augmentations, and install all Augmentations\\n     *     from all three factions at the same time.  Doing so can save us a\\n     *     lot of time as we do not need to go through a soft reset after\\n     *     purchasing all Augmentations from one faction.  However, we some way\\n     *     to generate a massive amount of income within a short amount of time.\\n     * (8) Volhaven should be the last city faction to join.\\n     * (9) NiteSec and The Black Hand are the remaining two hacking groups to\\n     *     join.  They have Augmentations to boost various hack-related stats.\\n     * (10) We can join the remaining megacorporation factions in any order we\\n     *      want.  These factions have various Augmentations that boost a\\n     *      number of social-related stats, i.e. reputation from factions and\\n     *      companies.  However, we should have purchased most or all of these\\n     *      from Bachman & Associates.\\n     * (11) Criminal organizations have Augmentations to boost various combat\\n     *      stats as well as social-related stats.  We should have bought from\\n     *      The Syndicate all or most of the Augmentations that boost our\\n     *      reputation gain from factions and companies.\\n     * (12) The endgame factions should be the last to join.  We can join\\n     *      Illuminati or The Covenant in any order we want.  However, Daedalus\\n     *      should be the very last faction that we join.\\n     */\\n    all: [\\n        /**\\n         * Early game factions, city factions, and hacking groups.\\n         */\\n        \\\"Sector-12\\\",\\n        \\\"Netburners\\\",\\n        \\\"CyberSec\\\",\\n        \\\"Tian Di Hui\\\",\\n        \\\"BitRunners\\\",\\n        /**\\n         * Criminal organization.\\n         */\\n        \\\"The Syndicate\\\",\\n        /**\\n         * Megacorporation.\\n         */\\n        \\\"Bachman & Associates\\\",\\n        /**\\n         * City factions.\\n         */\\n        \\\"Aevum\\\",\\n        \\\"Chongqing\\\",\\n        \\\"Ishima\\\",\\n        \\\"New Tokyo\\\",\\n        \\\"Volhaven\\\",\\n        /**\\n         * Hacking factions.\\n         */\\n        \\\"NiteSec\\\",\\n        \\\"The Black Hand\\\",\\n        /**\\n         * Megacorporations.\\n         */\\n        \\\"Blade Industries\\\",\\n        \\\"Clarke Incorporated\\\",\\n        \\\"ECorp\\\",\\n        \\\"Four Sigma\\\",\\n        \\\"Fulcrum Secret Technologies\\\",\\n        \\\"KuaiGong International\\\",\\n        \\\"MegaCorp\\\",\\n        \\\"NWO\\\",\\n        \\\"OmniTek Incorporated\\\",\\n        /**\\n         * Criminal organizations.\\n         */\\n        \\\"Silhouette\\\",\\n        \\\"Slum Snakes\\\",\\n        \\\"Speakers for the Dead\\\",\\n        \\\"Tetrads\\\",\\n        \\\"The Dark Army\\\",\\n        /**\\n         * Endgame factions.\\n         */\\n        \\\"Illuminati\\\",\\n        \\\"The Covenant\\\",\\n        \\\"Daedalus\\\",\\n    ],\\n    /**\\n     * Various early-game factions.\\n     */\\n    early: [\\\"Sector-12\\\", \\\"Netburners\\\", \\\"CyberSec\\\", \\\"Tian Di Hui\\\", \\\"BitRunners\\\"],\\n    /**\\n     * A bunch of factions that have these Augmentations:\\n     *\\n     * (1) Boost our faction reputation multiplier.\\n     * (2) Port opener programs.\\n     *\\n     * Join each of these factions, earn the required reputation points, and\\n     * purchase only the necessary Augmentations.\\n     */\\n    fast_track: {\\n        \\\"Sector-12\\\": [\\n            /**\\n             * This Augmentation allows us to start with $1m and BruteSSH.exe.\\n             */\\n            \\\"CashRoot Starter Kit\\\",\\n            \\\"Augmented Targeting I\\\",\\n            \\\"Combat Rib I\\\",\\n            \\\"Neuralstimulator\\\",\\n        ],\\n        CyberSec: [\\n            /**\\n             * This Augmentation is a pre-requisite of various Augmentations\\n             * from BitRunners.\\n             */\\n            \\\"Cranial Signal Processors - Gen I\\\",\\n        ],\\n        BitRunners: [\\n            /**\\n             * This Augmentation allows us to start with FTPCrack.exe and\\n             * relaySMTP.exe.\\n             */\\n            \\\"BitRunners Neurolink\\\",\\n            \\\"DataJack\\\",\\n        ],\\n        \\\"Tian Di Hui\\\": [\\n            \\\"ADR-V1 Pheromone Gene\\\",\\n            \\\"Social Negotiation Assistant (S.N.A)\\\",\\n        ],\\n        \\\"The Syndicate\\\": [\\\"The Shadow's Simulacrum\\\"],\\n        Aevum: [\\\"PCMatrix\\\"],\\n        \\\"Bachman & Associates\\\": [\\\"ADR-V2 Pheromone Gene\\\", \\\"SmartJaw\\\"],\\n    },\\n    /**\\n     * All megacorporation factions.\\n     */\\n    megacorp: [\\n        \\\"Bachman & Associates\\\",\\n        \\\"Blade Industries\\\",\\n        \\\"Clarke Incorporated\\\",\\n        \\\"ECorp\\\",\\n        \\\"Four Sigma\\\",\\n        \\\"Fulcrum Secret Technologies\\\",\\n        \\\"KuaiGong International\\\",\\n        \\\"MegaCorp\\\",\\n        \\\"NWO\\\",\\n        \\\"OmniTek Incorporated\\\",\\n    ],\\n};\\n\",\"filename\":\"/quack/lib/constant/faction.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values relating to gangs.\\n\\n/**\\n * Various armour pieces that a gang member can equip.  Going from top to\\n * bottom, the armour pieces are listed in order from least expensive to most\\n * expensive.  These values are taken from the following page:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/upgrades.ts\\n */\\nexport const armour = {\\n    VEST: \\\"Bulletproof Vest\\\",\\n    FULL: \\\"Full Body Armor\\\",\\n    LIQUID: \\\"Liquid Body Armor\\\",\\n    GRAPHENE: \\\"Graphene Plating Armor\\\",\\n};\\n\\n/**\\n * All Augmentations that can be equipped on a gang member.  The Augmentations\\n * are listed from least expensive to most expensive.  The data are taken from\\n * this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/upgrades.ts\\n */\\nexport const gang_augment = {\\n    WIRE: \\\"BitWire\\\", // 5e9\\n    DATA: \\\"DataJack\\\", // 7.5e9\\n    ARMS: \\\"Bionic Arms\\\", // 10e9\\n    LEGS: \\\"Bionic Legs\\\", // 10e9\\n    NEURAL: \\\"Neuralstimulator\\\", // 10e9\\n    WEAVE: \\\"Nanofiber Weave\\\", // 12e9\\n    SPINE: \\\"Bionic Spine\\\", // 15e9\\n    MUSCLE: \\\"Synfibril Muscle\\\", // 15e9\\n    BLADES: \\\"BrachiBlades\\\", // 20e9\\n    HEART: \\\"Synthetic Heart\\\", // 25e9\\n    BONE: \\\"Graphene Bone Lacings\\\", // 50e9\\n};\\n\\n/**\\n * Constants related to various aspects of our gang members.\\n */\\nexport const members = {\\n    /**\\n     * The maximum number of gang members to assign to Ethical Hacking.\\n     */\\n    EHACK: 1,\\n    /**\\n     * The number of members that constitute half of the maximum number of\\n     * members we can have.  This is the 50% membership mark.\\n     */\\n    HALF: 6,\\n    /**\\n     * The number of gangsters we can recruit upon creating our gang.  We must\\n     * earn more respect to recruit more gang members.\\n     */\\n    INITIAL: 3,\\n    /**\\n     * The maximum number of members in a gang.  This number is taken from the\\n     * file:\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/Constants.ts\\n     */\\n    MAX: 12,\\n    /**\\n     * Various roles for members of our gang.\\n     */\\n    ROLE: {\\n        artillery: \\\"Artillery\\\",\\n        hacker: \\\"Hacker\\\",\\n        medic: \\\"Medic\\\",\\n        pilot: \\\"Pilot\\\",\\n        punk: \\\"Punk\\\",\\n        spy: \\\"Spy\\\",\\n        thief: \\\"Thief\\\",\\n        traitor: \\\"Traitor\\\",\\n        vanguard: \\\"Vanguard\\\",\\n    },\\n    /**\\n     * The maximum number of gang members to assign to acts of terrorism.\\n     * Terrorism greatly increases our respect and wanted level, but generate\\n     * no income.  We should only have one terrorist.\\n     */\\n    TERRORIST: 1,\\n    /**\\n     * The maximum number of gang members to assign to vigilante justice.\\n     * Assume we are in a criminal gang.\\n     */\\n    VIGILANTE: 4,\\n    /**\\n     * The maximum number of gang members to assign to territory warfare.  This\\n     * threshold applies only when we are not engaged in territory warfare\\n     * against a rival gang.  If we are about to clash against a rival gang, we\\n     * should devote more members to warfare.  In general, this threshold helps\\n     * to build our power while we are not engaged in dispute against any rival\\n     * gang.\\n     */\\n    WARRIOR: 4,\\n};\\n\\n/**\\n * Miscellaneous constants related to various thresholds.\\n */\\nexport const gang_t = {\\n    /**\\n     * The minimum percentage boost to a stat of a member.  Let x be the\\n     * ascension multiplier of a member, gained by having ascended one or\\n     * more times.  Let y be the next ascension multiplier, a boost to x after\\n     * ascending the member another time.  The value of y is represented as\\n     * 1.p, where 100 * p is the percentage boost to x.  After the next\\n     * ascension, the new ascension multiplier of the member would be x * y.\\n     * We want the value of y to be at least the given threshold.\\n     */\\n    ASCEND: 1.25,\\n    /**\\n     * The cost or expenditure multiplier.  Equipment and Augmentations for a\\n     * gang member are expensive.  Whenever we make a decision to purchase a\\n     * new equipment or Augmentation for a gang member, we multiply the cost of\\n     * the equipment or Augmentation by this multiplier.  In case we do buy the\\n     * new equipment, at least we would not have spent all our funds.  Do not\\n     * want to go bankrupt because we decided to purchase an expensive\\n     * equipment.\\n     */\\n    COST_MULT: 5,\\n    /**\\n     * In BitNodes other than BN2.x we must decrease our karma to -54,000 or\\n     * lower as a pre-requisite for creating a gang.  This constant is taken\\n     * from the file:\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/Constants.ts\\n     */\\n    KARMA: -54e3,\\n    /**\\n     * The roster of our gang.  This lists the number of members we want for\\n     * each role.  Except for punk, we want at most 1 member in each of the\\n     * other roles.  The number 8 below is the number of members in a non-punk\\n     * role.\\n     */\\n    ROSTER: {\\n        artillery: 1,\\n        hacker: 1,\\n        medic: 1,\\n        pilot: 1,\\n        punk: members.MAX - 8,\\n        spy: 1,\\n        thief: 1,\\n        traitor: 1,\\n        vanguard: 1,\\n    },\\n    /**\\n     * The territory and power of each gang is updated approximately every 20\\n     * seconds.  We refer to this time period as a tick.\\n     */\\n    TICK: 20e3,\\n    /**\\n     * The minimum chance of winning a clash against a rival gang.  This chance\\n     * of victory is expressed as an integer percentage.  In general, we should\\n     * only engage in turf warfare against another gang if our chance of victory\\n     * is at least this number.  The win chance is not the same as the\\n     * probability of death.  The defense of a gang member determines their\\n     * chance of dying during a turf war against a rival gang.\\n     */\\n    WIN: 55,\\n};\\n\\n/**\\n * Various types of gangster roles.  A list of names for each role.  We\\n * randomly choose a name to assign to a new recruit.  We want our gang to have\\n * the following types of members:\\n *\\n * (1) Artillery.  A gun expert and ranged fighter.  Good with bow and arrows,\\n *     or missiles.\\n * (2) Hacker.  The computer wizard.\\n * (3) Medic.  This is our doctor.\\n * (4) Pilot.  Air support from a helicopter, drone, or aeroplane.\\n * (5) Punk.  Low level soldiers who rake in money for the gang by committing\\n *     various crimes.\\n * (6) Spy.  An expert in espionage and reconnaissance.\\n * (7) Thief.  Someone who steals treasure.  A sneak.\\n * (8) Traitor.  Someone who would likely betray the gang.\\n * (9) Vanguard.  Our frontliner and tank.\\n */\\nexport const gangster_t = {\\n    artillery: [\\n        // A\\n        \\\"Alfred Nobel\\\",\\n        \\\"Angus MacGyver\\\",\\n        \\\"Artemus Gordon\\\",\\n        // B\\n        \\\"Bill Dolworth\\\",\\n        \\\"Billy Calloway\\\",\\n        \\\"Billy Rosewood\\\",\\n        \\\"Bobby Jay\\\",\\n        \\\"Bomb Man\\\",\\n        \\\"Bomberman\\\",\\n        \\\"Bomb Voyage\\\",\\n        \\\"Boom Box\\\",\\n        \\\"Boom Stick\\\",\\n        \\\"Boris Turgoff\\\",\\n        \\\"Burt Gummer\\\",\\n        // C\\n        \\\"Carlton Lassiter\\\",\\n        \\\"Chaplain Reynolds\\\",\\n        \\\"Clay Allison\\\",\\n        \\\"Colleen Anderson\\\",\\n        \\\"Colonel John Casey\\\",\\n        // D\\n        \\\"David Thurston\\\",\\n        \\\"Demoman\\\",\\n        \\\"Dutch\\\",\\n        // E\\n        \\\"Edgar K. B. Montrose\\\",\\n        \\\"Eugene Tackleberry\\\",\\n        // F\\n        \\\"Fatman\\\",\\n        \\\"Forte Stollen\\\",\\n        // G\\n        \\\"Gunne Knutt\\\",\\n        \\\"Guy Fawkes\\\",\\n        // H\\n        \\\"Hange Zoe\\\",\\n        \\\"Harry the Horse\\\",\\n        \\\"Hawkeye\\\",\\n        \\\"Hawkeye Gough\\\",\\n        \\\"Hazel D'Ark\\\",\\n        \\\"Hero Shackleby\\\",\\n        \\\"Holly Summers\\\",\\n        // I\\n        \\\"Isao Ota\\\",\\n        // J\\n        \\\"Jayne Cobb\\\",\\n        \\\"Jean Havoc\\\",\\n        \\\"Jessica Clearkin\\\",\\n        \\\"John Rambo\\\",\\n        \\\"John Wick\\\",\\n        \\\"Jun the Swan\\\",\\n        // K\\n        \\\"Kell Tainer\\\",\\n        \\\"Kota Hirano\\\",\\n        // L\\n        \\\"Laurie Strode\\\",\\n        // M\\n        \\\"Malcolm Reed\\\",\\n        \\\"Mark Briscoe\\\",\\n        \\\"Marty McChicken\\\",\\n        \\\"Maya Jingu\\\",\\n        \\\"Mike Teevee\\\",\\n        \\\"Minene Uryuu\\\",\\n        // O\\n        \\\"Ossie Brunt\\\",\\n        // P\\n        \\\"Poppy Bros.\\\",\\n        \\\"Professor Shikishima\\\",\\n        \\\"Private Wilson\\\",\\n        // R\\n        \\\"Rally Vincent\\\",\\n        \\\"Revy\\\",\\n        \\\"Ritsuko Inoue\\\",\\n        \\\"Riza Hawkeye\\\",\\n        \\\"Robin Scherbatsky\\\",\\n        \\\"Rocket Raccoon\\\",\\n        \\\"Ryo Saeba\\\",\\n        // S\\n        \\\"Seras Victoria\\\",\\n        \\\"Shino Asada\\\",\\n        \\\"Shuri\\\",\\n        \\\"Sidney Alford\\\",\\n        \\\"Simo Häyhä\\\",\\n        // T\\n        \\\"Teddy Bomber\\\",\\n        \\\"Tiny Tina\\\",\\n        // V\\n        \\\"Vash the Stampede\\\",\\n        // Y\\n        \\\"Yoko Littner\\\",\\n    ],\\n    hacker: [\\n        // Numbers\\n        \\\"1337 H4X0R\\\",\\n        // A\\n        \\\"Acid Burn\\\",\\n        \\\"Adrian Lamo\\\",\\n        \\\"Aelita Schaeffer\\\",\\n        \\\"Akira Shirase\\\",\\n        \\\"Albert Gonzalez\\\",\\n        \\\"Anna Grimsdóttír\\\",\\n        \\\"Anonymouse\\\",\\n        \\\"Apoc\\\",\\n        \\\"ASTRA\\\",\\n        // B\\n        \\\"Benji Dunn\\\",\\n        \\\"Beto O'Rourke\\\",\\n        \\\"Boris Grishenko\\\",\\n        \\\"Brave Coward\\\",\\n        // C\\n        \\\"Carl Arbogast\\\",\\n        \\\"Chihiro Fujisaki\\\",\\n        \\\"Chloe O'Brian\\\",\\n        \\\"Chrumium\\\",\\n        \\\"Chuck Bartowski\\\",\\n        \\\"Crash Override\\\",\\n        \\\"Crumbmium\\\",\\n        \\\"Cypher\\\",\\n        // D\\n        \\\"Dade Murphy\\\",\\n        \\\"Darren Roskow\\\",\\n        \\\"David Levinson\\\",\\n        \\\"David Lightman\\\",\\n        \\\"Dennis Nedry\\\",\\n        \\\"Dozer\\\",\\n        // E\\n        \\\"Edward Snowden\\\",\\n        \\\"Edward Wong Hau Pepelu Tivrusky IV\\\",\\n        \\\"Eugene Belford\\\",\\n        // F\\n        \\\"Felicity Smoak\\\",\\n        \\\"Firefax\\\",\\n        // H\\n        \\\"Henry Dorsett Case\\\",\\n        \\\"Hiro Protagonist\\\",\\n        // I\\n        \\\"Interknit Explorer\\\",\\n        \\\"Internet Exploiter\\\",\\n        \\\"Irwin Emery\\\",\\n        // J\\n        \\\"Jeanson James Ancheta\\\",\\n        \\\"Jeremy Belpois\\\",\\n        \\\"Jobe Smith\\\",\\n        \\\"Jonathan James\\\",\\n        // K\\n        \\\"Kate Libby\\\",\\n        \\\"Kevin Flynn\\\",\\n        \\\"Kevin Mitnick\\\",\\n        \\\"Kevin Poulsen\\\",\\n        \\\"Kimberley Vanvaeck\\\",\\n        // L\\n        \\\"Laughing Man\\\",\\n        \\\"Lee Sampson\\\",\\n        \\\"Lex Murphy\\\",\\n        \\\"Lisbeth Salander\\\",\\n        \\\"Lord Nikon\\\",\\n        \\\"Luther Stickell\\\",\\n        // M\\n        \\\"Marshall Flinkman\\\",\\n        \\\"Martin Bishop\\\",\\n        \\\"Matthew Bevan\\\",\\n        \\\"Michael Calce\\\",\\n        \\\"Milo Hoffman\\\",\\n        \\\"Morpheus\\\",\\n        \\\"Mouse\\\",\\n        // N\\n        \\\"Neo\\\",\\n        \\\"Net Surfer\\\",\\n        // P\\n        \\\"Packet Sniffer\\\",\\n        \\\"Paul Cook\\\",\\n        \\\"Penny Brown\\\",\\n        \\\"Phandom of the Opera\\\",\\n        \\\"Phantom Phreak\\\",\\n        // R\\n        \\\"Rachel Gibson\\\",\\n        \\\"Ramόn Sánchez (Phantom Phreak)\\\",\\n        \\\"Randy Waterhouse\\\",\\n        \\\"Richard Pryce\\\",\\n        \\\"Riley Poole\\\",\\n        // S\\n        \\\"Susan Headley\\\",\\n        \\\"Switch\\\",\\n        // T\\n        \\\"The Plague\\\",\\n        \\\"TORricelli's Lore\\\",\\n        \\\"Trinity\\\",\\n        \\\"TypoManiac\\\",\\n        // Z\\n        \\\"Zero Cool\\\",\\n    ],\\n    medic: [\\n        // A\\n        \\\"Abascantus\\\",\\n        \\\"Adamantius Judaeus\\\",\\n        \\\"Aegimus\\\",\\n        \\\"Aelius Promotus\\\",\\n        \\\"Aemilia Hilaria\\\",\\n        \\\"Aeschrion of Pergamon\\\",\\n        \\\"Aëtius of Amida\\\",\\n        \\\"Agathinus\\\",\\n        \\\"Albucius\\\",\\n        \\\"Alexander Fleming\\\",\\n        \\\"Alexander of Tralles\\\",\\n        \\\"al-Zahrawi\\\",\\n        \\\"Ambroise Paré\\\",\\n        \\\"Amenhotep\\\",\\n        \\\"Andries van Wesel\\\",\\n        \\\"Androcydes\\\",\\n        \\\"Andromachus\\\",\\n        \\\"Anonymus Londinensis\\\",\\n        \\\"Antipater\\\",\\n        \\\"Antiphanes of Delos\\\",\\n        \\\"Antonius Castor\\\",\\n        \\\"Antyllus\\\",\\n        \\\"Apollonius Claudius\\\",\\n        \\\"Apollonius Cyprius\\\",\\n        \\\"Apollonius Organicus\\\",\\n        \\\"Apollonius Pergamenus\\\",\\n        \\\"Apollonius Pitaneus\\\",\\n        \\\"Apollonius Senior\\\",\\n        \\\"Apollonius Tarensis\\\",\\n        \\\"Apollonius Ther\\\",\\n        \\\"Apollonius Glaucus\\\",\\n        \\\"Apollonios of Kition\\\",\\n        \\\"Archigenes\\\",\\n        \\\"Arcyon\\\",\\n        \\\"Aretaeus\\\",\\n        \\\"Asclepiades of Bithynia\\\",\\n        \\\"Asclepiades Pharmacion\\\",\\n        \\\"Asclepius\\\",\\n        \\\"Aspasia the Physician\\\",\\n        \\\"Athenaeus of Attalia\\\",\\n        \\\"Atreya\\\",\\n        \\\"Aulus Cornelius Celsus\\\",\\n        // B\\n        \\\"Bharadwaja\\\",\\n        \\\"Bian Que\\\",\\n        \\\"Bogar\\\",\\n        \\\"Bolus of Mendes\\\",\\n        // C\\n        \\\"Caelius Aurelianus\\\",\\n        \\\"Carl Clauberg\\\",\\n        \\\"Cassius Felix\\\",\\n        \\\"Charaka\\\",\\n        \\\"Charles R. Drew\\\",\\n        \\\"Charmis of Marseilles\\\",\\n        \\\"Claudius Philoxenus \\\",\\n        \\\"Cosmas and Damian\\\",\\n        \\\"Crinas of Marseilles\\\",\\n        \\\"Cristina Yang\\\",\\n        \\\"Criton of Heraclea\\\",\\n        \\\"Ctesias of Cnidus\\\",\\n        // D\\n        \\\"Daniel Hale Williams\\\",\\n        \\\"Demetrius of Apamea\\\",\\n        \\\"Demosthenes Philalethes\\\",\\n        \\\"Derek Shepherd\\\",\\n        \\\"Dexippus of Cos\\\",\\n        \\\"Dieuches\\\",\\n        \\\"Diocles of Carystus\\\",\\n        \\\"Diomedes of Tarsus\\\",\\n        \\\"Dong Feng\\\",\\n        \\\"Doogie Howser\\\",\\n        \\\"Doug Ross\\\",\\n        \\\"Dr. Nick\\\",\\n        // E\\n        \\\"Edward Jenner\\\",\\n        \\\"Elizabeth Blackwell\\\",\\n        \\\"Erasistratus\\\",\\n        \\\"Eudemus\\\",\\n        // F\\n        \\\"Frasier Crane\\\",\\n        // G\\n        \\\"Gaius Stertinius Xenophon\\\",\\n        \\\"Galen of Pergamon\\\",\\n        \\\"George O'Malley\\\",\\n        \\\"Georges Mathé\\\",\\n        \\\"Getafix\\\",\\n        \\\"Gregory House\\\",\\n        // H\\n        \\\"Hannibal Lecter\\\",\\n        \\\"Harold Shipman\\\",\\n        \\\"Hawkeye Pierce\\\",\\n        \\\"Helen B. Taussig\\\",\\n        \\\"Heliodorus\\\",\\n        \\\"Henry Jekyll\\\",\\n        \\\"Heraclides of Tarentum\\\",\\n        \\\"Herophilos\\\",\\n        \\\"H. H. Holmes\\\",\\n        \\\"Hicesius\\\",\\n        \\\"Hippocrates\\\",\\n        \\\"Hua Tuo\\\",\\n        // I\\n        \\\"Ibn Sina\\\",\\n        \\\"Ignaz Semmelweis\\\",\\n        \\\"Irynachet\\\",\\n        // J\\n        \\\"Jack Kevorkian\\\",\\n        \\\"Jack Shephard\\\",\\n        \\\"Jackson Avery\\\",\\n        \\\"Jane Cooke Wright\\\",\\n        \\\"Jayant Patel\\\",\\n        \\\"Jivaka Komarabhacca\\\",\\n        \\\"John Bodkin Adams\\\",\\n        \\\"John Carter\\\",\\n        \\\"John Dolittle\\\",\\n        \\\"John Dorian\\\",\\n        \\\"John H. Watson\\\",\\n        \\\"John Snow\\\",\\n        \\\"Jonas Salk\\\",\\n        \\\"Josef Mengele\\\",\\n        \\\"Joseph Lister\\\",\\n        // K\\n        \\\"Kashyapa\\\",\\n        \\\"Korakkar\\\",\\n        // L\\n        \\\"Leonard H. McCoy\\\",\\n        \\\"Leoparda\\\",\\n        \\\"Les McPainy\\\",\\n        \\\"Lexie Grey\\\",\\n        \\\"Linda Burfield Hazzard\\\",\\n        // M\\n        \\\"Madhava-kara\\\",\\n        \\\"Marcellus Empiricus\\\",\\n        \\\"Marcellus of Side\\\",\\n        \\\"Marcel Petiot\\\",\\n        \\\"Mark Sloan\\\",\\n        \\\"Meges of Sidon\\\",\\n        \\\"Menemachus\\\",\\n        \\\"Menodotus of Nicomedia\\\",\\n        \\\"Meredith Grey\\\",\\n        \\\"Metrodora\\\",\\n        \\\"Michael DeBakey\\\",\\n        \\\"Michael Swango\\\",\\n        \\\"Michaela Quinn\\\",\\n        \\\"Mindy Lahiri\\\",\\n        \\\"Miranda Bailey\\\",\\n        \\\"Mnesitheus\\\",\\n        \\\"Morris Bolber\\\",\\n        // O\\n        \\\"Oribasius\\\",\\n        // P\\n        \\\"Pain Hathaway\\\",\\n        \\\"Pain Killer\\\",\\n        \\\"Paracelsus\\\",\\n        \\\"Patanjali\\\",\\n        \\\"Paul of Aegina\\\",\\n        \\\"Pedanius Dioscorides\\\",\\n        \\\"Penthu\\\",\\n        \\\"Peseshet\\\",\\n        \\\"Philagrius of Epirus\\\",\\n        \\\"Philinus of Cos\\\",\\n        \\\"Philistion of Locri\\\",\\n        \\\"Philumenus\\\",\\n        \\\"Pil Moore\\\",\\n        \\\"Plistonicus\\\",\\n        \\\"Praxagoras of Cos\\\",\\n        // Q\\n        \\\"Qar\\\",\\n        \\\"Quintus Gargilius Martialis\\\",\\n        // R\\n        \\\"Rabâ-ša-Marduk\\\",\\n        \\\"Remy Hadley\\\",\\n        \\\"Richard Needleman\\\",\\n        \\\"Robert Koch\\\",\\n        \\\"Rufus of Ephesus\\\",\\n        // S\\n        \\\"Saint Fabiola\\\",\\n        \\\"Sawbone\\\",\\n        \\\"Scribonius Largus\\\",\\n        \\\"Serapion of Alexandria\\\",\\n        \\\"Servilius Damocrates\\\",\\n        \\\"Sextius Niger\\\",\\n        \\\"Sextus Empiricus\\\",\\n        \\\"Sextus Placitus\\\",\\n        \\\"Shennong\\\",\\n        \\\"Shepseskaf-ankh\\\",\\n        \\\"Soranus of Ephesus\\\",\\n        // T\\n        \\\"Themison of Laodicea\\\",\\n        \\\"Theodorus Priscianus\\\",\\n        \\\"Theophilus Protospatharius\\\",\\n        \\\"Thessalus of Tralles\\\",\\n        \\\"Thomas Neill Cream\\\",\\n        \\\"Tirumular\\\",\\n        // V\\n        \\\"Virginia Apgar\\\",\\n        // W\\n        \\\"Walter Freeman\\\",\\n        \\\"William Osler\\\",\\n        // X\\n        \\\"Xenocrates of Aphrodisias\\\",\\n        // Z\\n        \\\"Zhang Zhongjing\\\",\\n        \\\"Zopyrus\\\",\\n    ],\\n    pilot: [\\n        // A\\n        \\\"Air Boss\\\",\\n        \\\"Air Bust\\\",\\n        \\\"Alan Shepard\\\",\\n        \\\"Alex Rogan\\\",\\n        \\\"Amelia Earhart\\\",\\n        \\\"Amuro Ray\\\",\\n        \\\"Amy Johnson\\\",\\n        \\\"Anne Morrow Lindbergh\\\",\\n        \\\"Asami Sato\\\",\\n        // B\\n        \\\"Baloo\\\",\\n        \\\"Beryl Markham\\\",\\n        \\\"Bessie Coleman\\\",\\n        \\\"Betty Skelton\\\",\\n        \\\"Bill Owens\\\",\\n        \\\"Buttery Fly\\\",\\n        \\\"Buzz Aldrin\\\",\\n        // C\\n        \\\"Charles Kingsford Smith\\\",\\n        \\\"Charles Lindbergh\\\",\\n        \\\"Chesley Sullenberger\\\",\\n        \\\"Chopper McFly\\\",\\n        // D\\n        \\\"Diana Barnato Walker\\\",\\n        \\\"Dieter F. Uchtdorf\\\",\\n        \\\"Douglas Bader\\\",\\n        \\\"DragonFlew\\\",\\n        // E\\n        \\\"Edward O'Hare\\\",\\n        \\\"Elliott Roosevelt\\\",\\n        \\\"Eugene Bullard\\\",\\n        // F\\n        \\\"Fly Undone\\\",\\n        \\\"Fox McCloud\\\",\\n        \\\"Francis Gary Powers\\\",\\n        // G\\n        \\\"Geraldyn M. Cobb\\\",\\n        \\\"Ghost of Kyiv\\\",\\n        // H\\n        \\\"Han Solo\\\",\\n        \\\"Hanna Reitsch\\\",\\n        \\\"Hans Boehm\\\",\\n        \\\"Hans von Hammer\\\",\\n        \\\"Harriet Quimby\\\",\\n        \\\"Hera Syndulla\\\",\\n        \\\"Hikaru Sulu\\\",\\n        \\\"Hoban Washburne\\\",\\n        \\\"Howard Hughes\\\",\\n        // I\\n        \\\"Iceman Kazansky\\\",\\n        \\\"Ilan Ramon\\\",\\n        // J\\n        \\\"Jacqueline Cochran\\\",\\n        \\\"James McCloud\\\",\\n        \\\"Jean Batten\\\",\\n        \\\"Joe Sullivan\\\",\\n        \\\"Joker Moreau\\\",\\n        \\\"Joseph Cooper\\\",\\n        // K\\n        \\\"Kara Thrace\\\",\\n        // L\\n        \\\"Lord Flashheart\\\",\\n        \\\"Lothar von Richthofen\\\",\\n        \\\"Louis Blériot\\\",\\n        \\\"Lydia Litvyak\\\",\\n        // M\\n        \\\"Mamma Aiuto\\\",\\n        \\\"Manfred von Richthofen\\\",\\n        \\\"Mathias Rust\\\",\\n        \\\"Maverick Mitchell\\\",\\n        \\\"Mitchell Gant\\\",\\n        // N\\n        \\\"Nadiya Savchenko\\\",\\n        \\\"Night Witches\\\",\\n        \\\"Niobe\\\",\\n        // O\\n        \\\"Orville Wright\\\",\\n        // P\\n        \\\"Pancho Barnes\\\",\\n        \\\"Pappy Boyington\\\",\\n        \\\"Paul Tibbets\\\",\\n        \\\"Piotr Skut\\\",\\n        \\\"Poe Dameron\\\",\\n        \\\"Porco Rosso\\\",\\n        // R\\n        \\\"Raymonde de Laroche\\\",\\n        \\\"Richard Bong\\\",\\n        \\\"Rick Husband\\\",\\n        // S\\n        \\\"Sabiha Gökçen\\\",\\n        \\\"Slip Stream\\\",\\n        \\\"Star Lord\\\",\\n        \\\"Steve Fossett\\\",\\n        \\\"Steven Hiller\\\",\\n        // T\\n        \\\"Topper Harley\\\",\\n        \\\"Turanga Leela\\\",\\n        // V\\n        \\\"Valentina Tereshkova\\\",\\n        \\\"Valentina Vostok\\\",\\n        // W\\n        \\\"Warbird\\\",\\n        \\\"Wolf O'Donnell\\\",\\n        // Y\\n        \\\"Yuri Gagarin\\\",\\n        // Z\\n        \\\"Xenia Onatopp\\\",\\n    ],\\n    punk: [\\n        // A\\n        \\\"Aella\\\",\\n        \\\"Ainippe\\\",\\n        \\\"Al Capone\\\",\\n        \\\"Alfhild\\\",\\n        \\\"Al Swearengen\\\",\\n        \\\"Alkippe\\\",\\n        \\\"Andromache\\\",\\n        \\\"Anna Nzinga\\\",\\n        \\\"Anne Bonny\\\",\\n        \\\"Anne Dieu le Veut\\\",\\n        \\\"Antianeira\\\",\\n        // B\\n        \\\"Beatrix Kiddo\\\",\\n        \\\"Black Bart\\\",\\n        \\\"Blackbeard\\\",\\n        \\\"Bonnie Parker\\\",\\n        \\\"Bryan Mills\\\",\\n        // C\\n        \\\"Captain Haddock\\\",\\n        \\\"Captain Hook\\\",\\n        \\\"Charlotte Badger\\\",\\n        \\\"Clyde Barrow\\\",\\n        // D\\n        \\\"Deborah Sampson\\\",\\n        \\\"Deianira\\\",\\n        \\\"Diana Prince\\\",\\n        \\\"Donbot\\\",\\n        \\\"Don Corleone\\\",\\n        \\\"Don Logan\\\",\\n        // E\\n        \\\"Elise Eskilsdotter\\\",\\n        \\\"Ellen Ripley\\\",\\n        \\\"Elvira Hancock\\\",\\n        \\\"Eowyn\\\",\\n        \\\"Erza Scarlet\\\",\\n        \\\"Evie\\\",\\n        // F\\n        \\\"Fat Tony\\\",\\n        \\\"Francois l'Olonnais\\\",\\n        // G\\n        \\\"Gemma Teller Morrow\\\",\\n        \\\"Gogo Yubari\\\",\\n        \\\"Grace O'Malley\\\",\\n        // H\\n        \\\"Harriet Tubman\\\",\\n        \\\"Hippolyta\\\",\\n        \\\"Hippomache\\\",\\n        // J\\n        \\\"Jack Sparrow\\\",\\n        \\\"Jacquotte Delahaye\\\",\\n        \\\"Jeanne de Clisson\\\",\\n        \\\"Jen Yu\\\",\\n        \\\"Joe Chill\\\",\\n        \\\"Jules Winnfield\\\",\\n        // K\\n        \\\"Katniss Everdeen\\\",\\n        \\\"Kiyuchiyo\\\",\\n        // L\\n        \\\"Leon\\\",\\n        \\\"Long Ben\\\",\\n        \\\"Long John Silver\\\",\\n        // M\\n        \\\"Ma Barker\\\",\\n        \\\"Ma Beagle\\\",\\n        \\\"Mark Gor\\\",\\n        \\\"Mary Read\\\",\\n        \\\"Melanippe\\\",\\n        \\\"Mia Wallace\\\",\\n        \\\"Mikasa Ackerman\\\",\\n        // N\\n        \\\"Ned Kelly\\\",\\n        \\\"Nucky Thompson\\\",\\n        // O\\n        \\\"O-Ren Ishii\\\",\\n        // R\\n        \\\"Rani Velu Nachiyar\\\",\\n        \\\"Red Rackham\\\",\\n        \\\"Rusla\\\",\\n        // S\\n        \\\"Sadie Farrell\\\",\\n        \\\"Sayyida al Hurra\\\",\\n        \\\"Shiva of the East\\\",\\n        \\\"Sir Francis Drake\\\",\\n        \\\"Sir Henry Morgan\\\",\\n        \\\"Snaps Provolone\\\",\\n        \\\"Stephanie St. Clair\\\",\\n        \\\"Stringer Bell\\\",\\n        // T\\n        \\\"Tom Stall\\\",\\n        \\\"Tony Montana\\\",\\n        \\\"Tony Soprano\\\",\\n        \\\"Tyler Durden\\\",\\n        \\\"U. Tolkien 2 Me\\\",\\n        // V\\n        \\\"Vincent Vega\\\",\\n        \\\"Virginia Hill\\\",\\n        // W\\n        \\\"William Kidd\\\",\\n        // Z\\n        \\\"Zoro Roronoa\\\",\\n    ],\\n    spy: [\\n        // A\\n        \\\"Agent 99\\\",\\n        \\\"Agent Kay\\\",\\n        \\\"Aldrich Ames\\\",\\n        \\\"Andree Borrel\\\",\\n        \\\"Ashraf Marwan\\\",\\n        \\\"Atomic Blonde\\\",\\n        \\\"Austin Millbarge\\\",\\n        \\\"Austin Powers\\\",\\n        // B\\n        \\\"Belle Boyd\\\",\\n        \\\"Bob Ho\\\",\\n        \\\"Boris Badenov\\\",\\n        // C\\n        \\\"Cody Banks\\\",\\n        // D\\n        \\\"Derek Flint\\\",\\n        \\\"Donald Maclean\\\",\\n        // E\\n        \\\"Eileen Nearne\\\",\\n        \\\"Emily Pollifax\\\",\\n        \\\"Emma Peel\\\",\\n        \\\"Emmett Fitz-Hume\\\",\\n        \\\"Ethan Hunt\\\",\\n        \\\"Ethel Rosenberg\\\",\\n        // F\\n        \\\"Felix Leiter\\\",\\n        \\\"Foxy Skulk\\\",\\n        \\\"Francis Walsingham\\\",\\n        \\\"Frederick Joubert Duquesne\\\",\\n        // G\\n        \\\"George Koval\\\",\\n        \\\"George Reginald Starr\\\",\\n        \\\"George Smiley\\\",\\n        \\\"Giacomo Casanova\\\",\\n        // H\\n        \\\"Harry Hart\\\",\\n        \\\"Harry Tasker\\\",\\n        \\\"Herbert Philbrick\\\",\\n        \\\"Hubert Bonisseur de La Bath\\\",\\n        // I\\n        \\\"Ian Fleming\\\",\\n        \\\"Illya Kuryakin\\\",\\n        // J\\n        \\\"Jack Bauer\\\",\\n        \\\"Jack Ryan\\\",\\n        \\\"James Armistead Lafayette\\\",\\n        \\\"James Bond\\\",\\n        \\\"Jane Blonde\\\",\\n        \\\"Jane Smith\\\",\\n        \\\"Jason Bourne\\\",\\n        \\\"John André\\\",\\n        \\\"John Drake\\\",\\n        \\\"John Steed\\\",\\n        \\\"John Vassall\\\",\\n        \\\"Johnny English\\\",\\n        \\\"Joseph Turner\\\",\\n        \\\"Julius Rosenberg\\\",\\n        // K\\n        \\\"Kim Philby\\\",\\n        \\\"Klaus Fuchs\\\",\\n        \\\"Krystyna Skarbek\\\",\\n        // L\\n        \\\"Lafayette C. Baker\\\",\\n        // M\\n        \\\"Markus Wolf\\\",\\n        \\\"Mata Hari\\\",\\n        \\\"Maxwell Smart\\\",\\n        \\\"Michael Westen\\\",\\n        // N\\n        \\\"Napoleon Solo\\\",\\n        \\\"Natasha Fatale\\\",\\n        \\\"Nathan D. Muir\\\",\\n        \\\"Noor Inayat Khan\\\",\\n        // O\\n        \\\"Odette Hallowes\\\",\\n        \\\"Oleg Gordievsky\\\",\\n        // P\\n        \\\"Peggy Shippen\\\",\\n        \\\"Perry the Platypus\\\",\\n        // R\\n        \\\"Ralph McGehee\\\",\\n        \\\"Richard Sorge\\\",\\n        // S\\n        \\\"Sarah Walker\\\",\\n        \\\"Savitri Devi\\\",\\n        \\\"Secret Squirrel\\\",\\n        \\\"Severus Snape\\\",\\n        \\\"Shi Pei Pu\\\",\\n        \\\"Simon Templar\\\",\\n        \\\"Sterling Archer\\\",\\n        \\\"Sydney Bristow\\\",\\n        // T\\n        \\\"Tara King\\\",\\n        \\\"Tom Bishop\\\",\\n        // V\\n        \\\"Violette Szabo\\\",\\n        \\\"Virginia Hall\\\",\\n        // W\\n        \\\"William Brandt\\\",\\n        \\\"William Stephenson\\\",\\n        // X\\n        \\\"Xander Cage\\\",\\n        // Y\\n        \\\"Yelena Belova\\\",\\n        \\\"Yisrael Bar\\\",\\n    ],\\n    thief: [\\n        // A\\n        \\\"Adam Worth\\\",\\n        \\\"Alan Golder\\\",\\n        \\\"Albert Spaggiari\\\",\\n        // B\\n        \\\"Belle Starr\\\",\\n        \\\"Bender Bending Rodríguez\\\",\\n        \\\"Bill Mason\\\",\\n        \\\"Butch Cassidy\\\",\\n        // C\\n        \\\"Carl Gugasian\\\",\\n        \\\"Carmen Sandiego\\\",\\n        \\\"Catwoman\\\",\\n        \\\"Cat Burglar\\\",\\n        \\\"Charles Peace\\\",\\n        \\\"Colton Harris-Moore\\\",\\n        // D\\n        \\\"Danny Ocean\\\",\\n        \\\"David Brankle\\\",\\n        \\\"Derek Creighton Smalls\\\",\\n        \\\"Dinner Set Gang\\\",\\n        \\\"Doris Marie Payne\\\",\\n        // F\\n        \\\"Fagin\\\",\\n        \\\"Forty Elephants Gang\\\",\\n        \\\"Francois Villon\\\",\\n        \\\"Frank Abagnale, Jr.\\\",\\n        // H\\n        \\\"Hans Gruber\\\",\\n        // I\\n        \\\"Irene Adler\\\",\\n        \\\"Ishikawa Goemon\\\",\\n        // J\\n        \\\"Jackie Brown\\\",\\n        \\\"Jeanne de Valois-Saint-Remy\\\",\\n        \\\"Jesse James\\\",\\n        \\\"Jesse Woodson James\\\",\\n        \\\"John Herbert Dillinger\\\",\\n        \\\"Jonathan Wild\\\",\\n        // K\\n        \\\"Kenny Kimes\\\",\\n        \\\"Keyser Söze\\\",\\n        \\\"Koose Munisamy Veerappan\\\",\\n        // L\\n        \\\"Lara Croft\\\",\\n        \\\"Lester Joseph Gillis\\\",\\n        // M\\n        \\\"Mary Frith\\\",\\n        \\\"Mithilesh Kumar Srivastava\\\",\\n        // N\\n        \\\"Neal Caffrey\\\",\\n        \\\"Neil McCauley\\\",\\n        // P\\n        \\\"Prometheus\\\",\\n        // R\\n        \\\"Richard Turpin\\\",\\n        \\\"Rob McYoinker\\\",\\n        \\\"Robert LeRoy Parker\\\",\\n        \\\"Robert Money\\\",\\n        \\\"Robin Hood\\\",\\n        // S\\n        \\\"Sante Singhrs\\\",\\n        \\\"Scott Lang\\\",\\n        \\\"Snake Jailbird\\\",\\n        \\\"Sofia Ivanovna Blyuvshtein\\\",\\n        \\\"Starlet Bandit\\\",\\n        \\\"Stephen Blumberg\\\",\\n        // V\\n        \\\"Vincenzo Peruggia\\\",\\n        \\\"Vincenzo Pipino\\\",\\n    ],\\n    traitor: [\\n        // A\\n        \\\"Alfred Redl\\\",\\n        \\\"Alan Nunn May\\\",\\n        \\\"Andrey Vlasov\\\",\\n        // B\\n        \\\"Benedict Arnold\\\",\\n        \\\"Briony Tallis\\\",\\n        // C\\n        \\\"Charles Trask\\\",\\n        \\\"Charlie Kahn\\\",\\n        // D\\n        \\\"Doña Marina\\\",\\n        // E\\n        \\\"Edmund Pevensie\\\",\\n        \\\"Emilio Aguinaldo\\\",\\n        \\\"Ephialtes of Trachis\\\",\\n        // F\\n        \\\"Fernand Mondego\\\",\\n        \\\"Fredo Corleone\\\",\\n        // G\\n        \\\"Gaius Cassius Longinus\\\",\\n        \\\"Gollum\\\",\\n        // I\\n        \\\"Iago\\\",\\n        // J\\n        \\\"Jaime Lannister\\\",\\n        \\\"Ji Ben\\\",\\n        \\\"Judas Iscariot\\\",\\n        // L\\n        \\\"Lu Bu\\\",\\n        // M\\n        \\\"Marcus Junius Brutus\\\",\\n        \\\"Marvelous Chester\\\",\\n        \\\"Maven Calore\\\",\\n        \\\"Mir Jafar\\\",\\n        \\\"Mordechai Vanunu\\\",\\n        // P\\n        \\\"Petrus of Thorolund\\\",\\n        \\\"Pierre Laval\\\",\\n        \\\"Philippe Petain\\\",\\n        // Q\\n        \\\"Qin Hui\\\",\\n        // S\\n        \\\"Sidney Reilly\\\",\\n        \\\"Stella Kubler\\\",\\n        // T\\n        \\\"Trusty Patches\\\",\\n        // V\\n        \\\"Vidkun Quisling\\\",\\n        // W\\n        \\\"Wang Jingwei\\\",\\n        \\\"Winston Smith\\\",\\n    ],\\n    vanguard: [\\n        // A\\n        \\\"Achilles\\\",\\n        \\\"Akbar\\\",\\n        \\\"Alaric the Visigoth\\\",\\n        \\\"Alexander the Great\\\",\\n        \\\"Amina Sukhera\\\",\\n        \\\"Anita Garibaldi\\\",\\n        \\\"Aqualtune\\\",\\n        \\\"Aragorn\\\",\\n        \\\"Arawelo\\\",\\n        \\\"Arjuna\\\",\\n        \\\"Arminius\\\",\\n        \\\"Artemisia of Caria\\\",\\n        \\\"Asterix\\\",\\n        \\\"Asuna Yuuki\\\",\\n        \\\"Attila the Hun\\\",\\n        // B\\n        \\\"Babur\\\",\\n        \\\"Basil the Bulgar-Slayer\\\",\\n        \\\"Bhima\\\",\\n        \\\"Bjorn Ironside\\\",\\n        \\\"Boudicca\\\",\\n        // C\\n        \\\"Chen Jinnan\\\",\\n        \\\"Cnut the Great\\\",\\n        \\\"Colestah\\\",\\n        \\\"Constantine the Great\\\",\\n        \\\"Count Roland\\\",\\n        \\\"Cynane\\\",\\n        \\\"Cyrus the Great\\\",\\n        // D\\n        \\\"Douglas Haig\\\",\\n        \\\"Duke of Wellington\\\",\\n        // E\\n        \\\"Egil Skallagrimsson\\\",\\n        \\\"Eric Bloodaxe\\\",\\n        \\\"Erik the Red\\\",\\n        // F\\n        \\\"Fu Hao\\\",\\n        // G\\n        \\\"Galvarino\\\",\\n        \\\"Genghis Khan\\\",\\n        \\\"George Washington\\\",\\n        \\\"Gunnar Hamundarson\\\",\\n        \\\"Guts\\\",\\n        // H\\n        \\\"Hannibal Barca\\\",\\n        \\\"Harald Hardrada\\\",\\n        \\\"Hatshepsut\\\",\\n        \\\"Hattori Hanzo\\\",\\n        \\\"Hector\\\",\\n        \\\"Horatius Cocles\\\",\\n        // I\\n        \\\"I. M. Stronk\\\",\\n        \\\"Isshin\\\",\\n        // J\\n        \\\"Joan of Arc\\\",\\n        \\\"Julius Caesar\\\",\\n        // K\\n        \\\"Kahina\\\",\\n        \\\"Khutulun\\\",\\n        \\\"King Alfred\\\",\\n        \\\"King Arthur\\\",\\n        \\\"Knight Artorias\\\",\\n        // L\\n        \\\"Lady Trieu\\\",\\n        \\\"Leif Erikson\\\",\\n        \\\"Leonidas of Sparta\\\",\\n        \\\"Lord Nelson\\\",\\n        \\\"Lozen\\\",\\n        // M\\n        \\\"Maria Quiteria\\\",\\n        \\\"Maximus Decimus Meridius\\\",\\n        \\\"Meat Shield\\\",\\n        \\\"Miltiades\\\",\\n        \\\"Miyamoto Musashi\\\",\\n        // N\\n        \\\"Nakano Takeko\\\",\\n        \\\"Napoleon Bonaparte\\\",\\n        \\\"Nat Turner\\\",\\n        // O\\n        \\\"Obelix\\\",\\n        \\\"Oda Nobunaga\\\",\\n        \\\"Olympias\\\",\\n        // P\\n        \\\"Peter the Great\\\",\\n        \\\"Pyrrhus of Epirus\\\",\\n        // R\\n        \\\"Ragnor Lodbrok\\\",\\n        \\\"Richard the Lionheart\\\",\\n        \\\"Rollo of Normandy\\\",\\n        // S\\n        \\\"Saladin\\\",\\n        \\\"Sam Sharpe\\\",\\n        \\\"Sambhaji Bhosale\\\",\\n        \\\"Scathach\\\",\\n        \\\"Scipio Africanus\\\",\\n        \\\"Siegward of Catarina\\\",\\n        \\\"Simon Bolivar\\\",\\n        \\\"Sirris\\\",\\n        \\\"Sitting Bull\\\",\\n        \\\"Slave Knight Gael\\\",\\n        \\\"Solaire of Astora\\\",\\n        \\\"Sparethra\\\",\\n        \\\"Spartacus\\\",\\n        \\\"Sun Tzu\\\",\\n        // T\\n        \\\"T. E. Lawrence\\\",\\n        \\\"Teuta\\\",\\n        \\\"Tokugawa Ieyasu\\\",\\n        \\\"Tomoe Gozen\\\",\\n        \\\"Tomyris\\\",\\n        \\\"Toyotomi Hideyoshi\\\",\\n        // U\\n        \\\"Uesugi Kenshin\\\",\\n        // V\\n        \\\"Vlad the Impaler\\\",\\n        \\\"Vercingetorix\\\",\\n        // W\\n        \\\"William the Conqueror\\\",\\n        \\\"William Wallace\\\",\\n        // X\\n        \\\"Xiahou Dun\\\",\\n        // Y\\n        \\\"Yue Fei\\\",\\n        \\\"Yuria of Londor\\\",\\n        // Z\\n        \\\"Zenobia\\\",\\n        \\\"Zheng Yi Sao\\\",\\n    ],\\n};\\n\\n/**\\n * Various thresholds related to the penalty.\\n */\\nexport const penalty_t = {\\n    /**\\n     * The penalty percentage threshold at which we should lower our wanted\\n     * level.  If our penalty percentage is at least this value, then we should\\n     * reassign some gang members to jobs such as vigilante justice or ethical\\n     * hacking to help reduce our wanted level.\\n     */\\n    HIGH: 10,\\n    /**\\n     * The penalty percentage threshold at which we should move gang members\\n     * out of jobs that lower our wanted level.  Such jobs are vigilante\\n     * justice and ethical hacking.  In general, we strive to have as low\\n     * wanted level as possible.  However, if our wanted level is below this\\n     * threshold, then we should reassign members to jobs that yield income.\\n     */\\n    LOW: 2,\\n};\\n\\n/**\\n * Various rootkits we can purchase for a gang member.  Going from top to\\n * bottom, the rootkits are listed in ascending order of price.  The rootkit\\n * names are taken from this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/upgrades.ts\\n */\\nexport const rootkit = {\\n    NUKE: \\\"NUKE Rootkit\\\",\\n    SOUL: \\\"Soulstealer Rootkit\\\",\\n    HMAP: \\\"Hmap Node\\\",\\n    DEMON: \\\"Demon Rootkit\\\",\\n    JACK: \\\"Jack the Ripper\\\",\\n};\\n\\n/**\\n * Various tasks to which a gang member can be assigned.  The task names are\\n * taken from this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/tasks.ts\\n */\\nexport const task = {\\n    /**\\n     * Set a gang member to the idle state.  This is the default state upon\\n     * recruitment.\\n     * Gang: criminal, hacking\\n     */\\n    IDLE: \\\"Unassigned\\\",\\n    //\\n    // Hacking gangs.\\n    //\\n    /**\\n     * Set a gang member to commit cyberterrorism.\\n     * Gang: hacking\\n     * Money: N/A\\n     * Respect: great\\n     * Wanted: great\\n     */\\n    CYBERTERROR: \\\"Cyberterrorism\\\",\\n    /**\\n     * Set a gang member to attempt distributed denial of service (DDoS)\\n     * attacks.\\n     * Gang: hacking\\n     * Money: N/A\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    DDOS: \\\"DDoS Attacks\\\",\\n    /**\\n     * Set a gang member as an ethical hacker.\\n     * Gang: hacking\\n     * Money: yes\\n     * Respect: N/A\\n     * Wanted: negative\\n     */\\n    EHACK: \\\"Ethical Hacking\\\",\\n    /**\\n     * Set a gang member to commit financial fraud and digital counterfeiting.\\n     * Gang: hacking\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: slight\\n     */\\n    FRAUD: \\\"Fraud & Counterfeiting\\\",\\n    /**\\n     * Set a gang member to attempt identity theft.\\n     * Gang: hacking\\n     * Money: yes\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    ID_THEFT: \\\"Identity Theft\\\",\\n    /**\\n     * Set a gang member to launder money.\\n     * Gang: hacking\\n     * Money: yes\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    LAUNDER: \\\"Money Laundering\\\",\\n    /**\\n     * Set a gang member to attempt phishing scams and attacks.\\n     * Gang: hacking\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: slight\\n     */\\n    PHISH: \\\"Phishing\\\",\\n    /**\\n     * Set a gang member to create and distribute ransomware.\\n     * Gang: hacking\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: slight\\n     */\\n    RANSOMWARE: \\\"Ransomware\\\",\\n    /**\\n     * Set a gang member to create and distribute malicious viruses.\\n     * Gang: hacking\\n     * Money: N/A\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    VIRUS: \\\"Plant Virus\\\",\\n    //\\n    // Criminal gangs.\\n    //\\n    /**\\n     * Set a gang member to threaten and blackmail high-profile targets.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: slight\\n     */\\n    BLACKMAIL: \\\"Threaten & Blackmail\\\",\\n    /**\\n     * Set a gang member to run cons.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    CON: \\\"Run a Con\\\",\\n    /**\\n     * Set a gang member to sell drugs.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: slight\\n     */\\n    DRUGS: \\\"Deal Drugs\\\",\\n    /**\\n     * Set a gang member to extort civilians in our turf.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: yes\\n     */\\n    EXTORT: \\\"Strongarm Civilians\\\",\\n    /**\\n     * Set a gang member to randomly mug a person.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: slight\\n     * Wanted: very slight\\n     */\\n    MUG: \\\"Mug People\\\",\\n    /**\\n     * Set a gang member to commit armed robbery.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    ROBBERY: \\\"Armed Robbery\\\",\\n    /**\\n     * Set a gang member to commit acts of terrorism.\\n     * Gang: criminal\\n     * Money: N/A\\n     * Respect: great\\n     * Wanted: great\\n     */\\n    TERROR: \\\"Terrorism\\\",\\n    /**\\n     * Set a gang member to traffick illegal arms.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    TRAFFICK_ARMS: \\\"Traffick Illegal Arms\\\",\\n    /**\\n     * Set a gang member to attempt human trafficking.\\n     * Gang: criminal\\n     * Money: yes\\n     * Respect: yes\\n     * Wanted: yes\\n     */\\n    TRAFFICK_HUMAN: \\\"Human Trafficking\\\",\\n    //\\n    // Both criminal and hacking gangs.\\n    //\\n    /**\\n     * Set a gang member to train their Charisma stat.\\n     * Gang: criminal, hacking\\n     * Money: N/A\\n     * Wanted: N/A\\n     */\\n    CHARISMA: \\\"Train Charisma\\\",\\n    /**\\n     * Set a gang member to train their combat stats, i.e. Str, Def, Dex, Agi.\\n     * Gang: criminal, hacking\\n     * Money: N/A\\n     * Wanted: N/A\\n     */\\n    COMBAT: \\\"Train Combat\\\",\\n    /**\\n     * Set a gang member to train their Hack stat.\\n     * Gang: criminal, hacking\\n     * Money: N/A\\n     * Wanted: N/A\\n     */\\n    HACK: \\\"Train Hacking\\\",\\n    /**\\n     * Set a gang member to engage in territorial warfare against other gangs.\\n     * Gang: criminal, hacking\\n     * Money: N/A\\n     * Wanted: N/A\\n     */\\n    TURF_WAR: \\\"Territory Warfare\\\",\\n    /**\\n     * Set a gang member to be a vigilante and protect the city from criminals.\\n     * Gang: criminal, hacking\\n     * Money: N/A\\n     * Respect: N/A\\n     * Wanted: negative\\n     */\\n    VIGILANTE: \\\"Vigilante Justice\\\",\\n};\\n\\n/**\\n * Stat thresholds related to various tasks.\\n */\\nexport const task_t = {\\n    /**\\n     * The minimum Charisma stat at which a gang member might be assigned to\\n     * threaten and blackmail high-profile targets.\\n     */\\n    BLACKMAIL: 200,\\n    /**\\n     * The minimum threshold for the Charisma stat that a new recruit must\\n     * attain.  A new recruit might be assigned to train their Charisma.  They\\n     * graduate out of Charisma training after their Charisma stat is at least\\n     * this number.\\n     */\\n    CHARISMA: 15,\\n    /**\\n     * The minimum threshold for the combat stats that a new recruit must\\n     * attain.  A new recruit might be assigned to train their combat stats.\\n     * They graduate out of combat training after their combat stats are at\\n     * least this threshold.\\n     */\\n    COMBAT: 15,\\n    /**\\n     * The minimum Charisma stat at which a gang member might be assigned to\\n     * running a con.\\n     */\\n    CON: 100,\\n    /**\\n     * The minimum Hack stat at which a gang member might be assigned to commit\\n     * acts of cyberterrorism.\\n     */\\n    CYBER_TERROR: 400,\\n    /**\\n     * The minimum threshold on a combat stat at which a gang member might be\\n     * assigned to strongarm civilians.  For example, if a member has Strength\\n     * at least this number, then we might want to reassign the member to\\n     * strongarm civilians.\\n     */\\n    EXTORT: 50,\\n    /**\\n     * The minimum Hack stat at which a gang member might be assigned to commit\\n     * financial fraud and digital counterfeiting.\\n     */\\n    FRAUD: 200,\\n    /**\\n     * The minimum threshold for the Hack stat that a new recruit must attain.\\n     * A new recruit might be assigned to train their Hack stat.  They graduate\\n     * out of Hack training once their Hack stat is at least this number.\\n     */\\n    HACK: 15,\\n    /**\\n     * The minimum Hack stat at which a gang member might be assigned to\\n     * identity theft.\\n     */\\n    ID: 100,\\n    /**\\n     * The minimum Hack stat at which a gang member might be assigned to\\n     * launder money.\\n     */\\n    LAUNDER: 300,\\n    /**\\n     * The minimum Hack stat at which a gang member might be assigned to\\n     * phishing scams.\\n     */\\n    PHISH: 50,\\n    /**\\n     * The minimum threshold on a combat stat at which a gang member might be\\n     * assigned to armed robbery.  For example, if a member has Strength at\\n     * least this number, then we might want to re-assign the member to armed\\n     * robbery.\\n     */\\n    ROBBERY: 200,\\n    /**\\n     * The minimum threshold on a combat stat at which a gang member might be\\n     * assigned to acts of terrorism.  For example, if a member has Strength at\\n     * least this number, then we might want to re-assign the member to commit\\n     * acts of terrorism.\\n     */\\n    TERROR: 400,\\n    /**\\n     * The minimum threshold on a combat stat at which a gang member might be\\n     * assigned to trafficking illegal arms.  For example, if a member has\\n     * Strength at least this number, then we might want to reassign the\\n     * member to trafficking illegal arms.\\n     */\\n    TRAFFICK_ARMS: 300,\\n    /**\\n     * The minimum Charisma stat at which a gang member might be assigned to\\n     * trafficking humans.\\n     */\\n    TRAFFICK_HUMAN: 300,\\n};\\n\\n/**\\n * Various vehicles with which a gang member can be equipped.  Going from top\\n * to bottom, the vehicles are listed from least expensive to most expensive.\\n * The values are taken from this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/upgrades.ts\\n */\\nexport const vehicle = {\\n    FORD: \\\"Ford Flex V20\\\",\\n    ATX: \\\"ATX1070 Superbike\\\",\\n    MB: \\\"Mercedes-Benz S9001\\\",\\n    FERRARI: \\\"White Ferrari\\\",\\n};\\n\\n/**\\n * Various weapons we can purchase for our gang members.  Going from top to\\n * bottom in the given order, the weapons are listed from least expensive to\\n * most expensive.  The weapon names are taken from this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/upgrades.ts\\n */\\nexport const weapon = {\\n    BAT: \\\"Baseball Bat\\\",\\n    KATANA: \\\"Katana\\\",\\n    GLOCK: \\\"Glock 18C\\\",\\n    PNINE: \\\"P90C\\\",\\n    STEYR: \\\"Steyr AUG\\\",\\n    AK: \\\"AK-47\\\",\\n    MFIFTEEN: \\\"M15A10 Assault Rifle\\\",\\n    AWM: \\\"AWM Sniper Rifle\\\",\\n};\\n\",\"filename\":\"/quack/lib/constant/gang.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to Hacknet nodes and servers.\\n\\n/**\\n * Various thresholds on our Hacknet farm.\\n */\\nexport const hnet_t = {\\n    /**\\n     * The maximum Level of a Hacknet node.  This number is taken from the file\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/Hacknet/data/Constants.ts\\n     */\\n    MAX_LEVEL: 200,\\n    /**\\n     * The money thresholds.  Use these to help us gauge how many Hacknet nodes\\n     * we should purchase.  The values 1e6 and 1e9 mean million and billion,\\n     * respectively.\\n     */\\n    MONEY: [10e6, 100e6, 1e9, 100e9],\\n    /**\\n     * The node thresholds.  At certain money thresholds, we should have the\\n     * corresponding number of nodes.\\n     */\\n    NODE: [6, 12, 24, 30],\\n    /**\\n     * The initial number of Hacknet nodes to buy.  Start our Hacknet farm\\n     * with this many seed nodes.\\n     */\\n    SEED_NODE: 3,\\n    /**\\n     * The server thresholds.  We can have at most 20 Hacknet servers.  At\\n     * certain money thresholds, we should have the corresponding number of\\n     * servers.\\n     */\\n    SERVER: [5, 10, 15, 20],\\n    /**\\n     * Thresholds related to Hacknet servers.\\n     */\\n    server: {\\n        /**\\n         * The maximum amount of cache a Hacknet server can have.  Data taken\\n         * from this file:\\n         *\\n         * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Hacknet/data/Constants.ts\\n         */\\n        MAX_CACHE: 15,\\n        /**\\n         * The maximum number of Cores a Hacknet server can have.  Data taken\\n         * from this file:\\n         *\\n         * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Hacknet/data/Constants.ts\\n         */\\n        MAX_CORE: 128,\\n        /**\\n         * The maximum Level of a Hacknet server.  Data taken from this file:\\n         *\\n         * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Hacknet/data/Constants.ts\\n         */\\n        MAX_LEVEL: 300,\\n        /**\\n         * The maximum amount of RAM of a Hacknet server.  Data taken from this\\n         * file:\\n         *\\n         * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Hacknet/data/Constants.ts\\n         */\\n        MAX_RAM: 8192,\\n    },\\n};\\n\",\"filename\":\"/quack/lib/constant/hacknet.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constant values related to input and output.\\n\\n/**\\n * Constants for input and output.\\n */\\nexport const io = {\\n    APPEND: \\\"a\\\",\\n    NEWLINE: \\\"\\\\n\\\",\\n    WRITE: \\\"w\\\",\\n};\\n\",\"filename\":\"/quack/lib/constant/io.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":693,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to various locations in the game world.\\n\\n/**\\n * All cities and their locations.  Data taken from:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Locations/data/LocationNames.ts\\n *\\n * Below are explanation of each field in a city object.  If a city object does\\n * not have a particular field, this means the city does not have the\\n * corresponding location.\\n *\\n * (1) company := An array of company names.  We can work for these companies.\\n * (2) gov := An array of names of governmental sites, e.g. police station or\\n *     government agency.\\n * (3) gym := An array of gym names.\\n * (4) leisure := A leisure centre, e.g. casino or arcade.\\n * (5) other := A miscellaneous location in the city.\\n * (6) shop := A hardware shop, where we can purchase servers or upgrade our\\n *     home server.\\n * (7) uni := The name of the city's university.\\n */\\nexport const cities = {\\n    /**\\n     * All cities in the game world.\\n     */\\n    all: [\\\"Aevum\\\", \\\"Chongqing\\\", \\\"Ishima\\\", \\\"New Tokyo\\\", \\\"Sector-12\\\", \\\"Volhaven\\\"],\\n    /**\\n     * Aevum locations.\\n     */\\n    Aevum: {\\n        company: [\\n            \\\"AeroCorp\\\",\\n            \\\"Bachman & Associates\\\",\\n            \\\"Clarke Incorporated\\\",\\n            \\\"ECorp\\\",\\n            \\\"Fulcrum Technologies\\\",\\n            \\\"Galactic Cybersystems\\\",\\n            \\\"Rho Construction\\\",\\n            \\\"Watchdog Security\\\",\\n        ],\\n        gov: [\\\"Aevum Police Headquarters\\\"],\\n        gym: [\\\"Crush Fitness Gym\\\", \\\"Snap Fitness Gym\\\"],\\n        leisure: \\\"Iker Molina Casino\\\",\\n        shop: \\\"NetLink Technologies\\\",\\n        uni: \\\"Summit University\\\",\\n    },\\n    /**\\n     * Chongqing locations.\\n     */\\n    Chongqing: {\\n        company: [\\\"KuaiGong International\\\", \\\"Solaris Space Systems\\\"],\\n        other: \\\"Church of the Machine God\\\",\\n    },\\n    /**\\n     * Ishima locations.\\n     */\\n    Ishima: {\\n        company: [\\\"Nova Medical\\\", \\\"Omega Software\\\"],\\n        other: \\\"0x6C1\\\",\\n        shop: \\\"Storm Technologies\\\",\\n    },\\n    /**\\n     * New Tokyo locations.\\n     */\\n    \\\"New Tokyo\\\": {\\n        company: [\\n            \\\"DefComm\\\",\\n            \\\"Global Pharmaceuticals\\\",\\n            \\\"Noodle Bar\\\",\\n            \\\"VitaLife\\\",\\n        ],\\n        leisure: \\\"Arcade\\\",\\n    },\\n    /**\\n     * Sector-12 locations.\\n     */\\n    \\\"Sector-12\\\": {\\n        company: [\\n            \\\"Blade Industries\\\",\\n            \\\"Carmichael Security\\\",\\n            \\\"DeltaOne\\\",\\n            \\\"FoodNStuff\\\",\\n            \\\"Four Sigma\\\",\\n            \\\"Icarus Microsystems\\\",\\n            \\\"Joe's Guns\\\",\\n            \\\"MegaCorp\\\",\\n            \\\"Universal Energy\\\",\\n        ],\\n        gov: [\\n            \\\"Central Intelligence Agency\\\",\\n            \\\"National Security Agency\\\",\\n            \\\"Sector-12 City Hall\\\",\\n        ],\\n        gym: [\\\"Iron Gym\\\", \\\"Powerhouse Gym\\\"],\\n        shop: \\\"Alpha Enterprises\\\",\\n        uni: \\\"Rothman University\\\",\\n    },\\n    /**\\n     * Volhaven locations.\\n     */\\n    Volhaven: {\\n        company: [\\n            \\\"CompuTek\\\",\\n            \\\"Helios Labs\\\",\\n            \\\"LexoCorp\\\",\\n            \\\"NWO\\\",\\n            \\\"Omnia Cybersystems\\\",\\n            \\\"SysCore Securities\\\",\\n        ],\\n        gym: [\\\"Millenium Fitness Gym\\\"],\\n        shop: \\\"OmniTek Incorporated\\\",\\n        uni: \\\"ZB Institute of Technology\\\",\\n    },\\n    /**\\n     * These are generic locations that are found in every city.\\n     */\\n    generic: {\\n        hospital: \\\"Hospital\\\",\\n        slum: \\\"The Slums\\\",\\n        TA: \\\"Travel Agency\\\",\\n        WSE: \\\"World Stock Exchange\\\",\\n    },\\n};\\n\",\"filename\":\"/quack/lib/constant/location.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values.  These can be numeric constants or string\\n// constants.\\n\\n/**\\n * The bases for various number systems.\\n */\\nexport const base = {\\n    /**\\n     * The base of the binary number system.\\n     */\\n    BINARY: 2,\\n    /**\\n     * The base of the decimal number system.\\n     */\\n    DECIMAL: 10,\\n};\\n\\n/**\\n * Use ANSI escape codes to add colour.  Refer to this page for more details:\\n *\\n * https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html\\n */\\nexport const colour = {\\n    DARK_GREEN: \\\"\\\\u001b[38;5;22m\\\",\\n    GREEN: \\\"\\\\u001b[32m\\\",\\n    RED: \\\"\\\\u001b[31m\\\",\\n    RESET: \\\"\\\\u001b[0m\\\",\\n};\\n\\n/**\\n * Various constants related to the dark web.\\n */\\nexport const darkweb = {\\n    /**\\n     * Constants related to various programs that can be purchased via the dark\\n     * web.  The cost data are taken from this file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/DarkWeb/DarkWebItems.ts\\n     */\\n    program: {\\n        brutessh: {\\n            COST: 500e3,\\n            NAME: \\\"BruteSSH.exe\\\",\\n        },\\n        ftpcrack: {\\n            COST: 1.5e6,\\n            NAME: \\\"FTPCrack.exe\\\",\\n        },\\n        httpworm: {\\n            COST: 30e6,\\n            NAME: \\\"HTTPWorm.exe\\\",\\n        },\\n        relaysmtp: {\\n            COST: 5e6,\\n            NAME: \\\"relaySMTP.exe\\\",\\n        },\\n        sqlinject: {\\n            COST: 250e6,\\n            NAME: \\\"SQLInject.exe\\\",\\n        },\\n    },\\n    /**\\n     * The Tor router.\\n     */\\n    tor: {\\n        /**\\n         * Cost of the Tor router.  Data from this file:\\n         *\\n         * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Constants.ts\\n         */\\n        COST: 200e3,\\n    },\\n};\\n\\n/**\\n * Various constants in the model of hack/grow/weaken (HGW).\\n */\\nexport const hgw = {\\n    /**\\n     * Various actions in the HGW model.\\n     */\\n    action: {\\n        GROW: \\\"grow\\\",\\n        HACK: \\\"hack\\\",\\n        WEAKEN: \\\"weaken\\\",\\n    },\\n    /**\\n     * Wait this extra amount of time in milliseconds when we perform an HGW\\n     * action.\\n     */\\n    BUFFER_TIME: 100,\\n    /**\\n     * The fraction of money to steal from a server.\\n     */\\n    hack: {\\n        joesguns: {\\n            FRACTION: 0.7,\\n        },\\n        n00dles: {\\n            FRACTION: 0.5,\\n        },\\n        phantasy: {\\n            FRACTION: 0.5,\\n        },\\n    },\\n    /**\\n     * The fraction amount of money to steal from a server.  If it is 0.5, then\\n     * we steal 50% of the server's money.\\n     */\\n    MONEY_PERCENT: 0.5,\\n    /**\\n     * Various scripts in the HGW model.\\n     */\\n    script: {\\n        /**\\n         * The grow script.  Use this script to grow money on a server.\\n         */\\n        GROW: \\\"/quack/hgw/grow.js\\\",\\n        /**\\n         * The hack script.  Use this script to hack a server.\\n         */\\n        HACK: \\\"/quack/hgw/hack.js\\\",\\n        /**\\n         * The weaken script.  Use this script to lower the security of a\\n         * server.\\n         */\\n        WEAKEN: \\\"/quack/hgw/weaken.js\\\",\\n    },\\n    /**\\n     * Various strategies for preparing a server.\\n     */\\n    strategy: {\\n        /**\\n         * Grow first, followed by weaken.  Repeat in a loop.\\n         */\\n        GW: \\\"gw\\\",\\n        /**\\n         * Get a server to maximum money first.  Then repeatedly weaken the\\n         * server.\\n         */\\n        MGW: \\\"mgw\\\",\\n        /**\\n         * Get a server to minimum security first.  Then apply the strategy GW.\\n         */\\n        MWG: \\\"mwg\\\",\\n        /**\\n         * Weaken first, followed by grow.  Repeat in a loop.\\n         */\\n        WG: \\\"wg\\\",\\n    },\\n};\\n\\n/**\\n * Always have this amount of money in reserve.  When engaging in any\\n * purchasing activities, we do not want to spend all our money.  We spend only\\n * if doing so would leave us with at least this amount of money left over.\\n */\\nexport const money_reserve = 50e6;\\n\\n/**\\n * The hack script.  This script is used for hacking a server.\\n */\\nexport const script = \\\"/quack/hack.js\\\";\\n\\n/**\\n * The minimum required Hack stat to enable a player to work at most companies.\\n */\\nexport const work_hack_lvl = 250;\\n\",\"filename\":\"/quack/lib/constant/misc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, server } from \\\"/quack/lib/constant/server.js\\\";\\n\\n// A bunch of constant values related to purchased servers.\\n\\nexport const pserv = {\\n    /**\\n     * The default fraction of money to steal from a world server.\\n     */\\n    DEFAULT_MONEY_FRAC: 0.9,\\n    /**\\n     * The default amount of RAM for each purchased server.  We assume each\\n     * purchased server would use some kind of batcher to prep and hack a world\\n     * server.\\n     */\\n    DEFAULT_RAM_HGW: 1024,\\n    /**\\n     * Purchased servers should not hack any of these targets.\\n     */\\n    exclude: [home, server.JOES, server.NOODLES],\\n    /**\\n     * The minimum amount of RAM each purchased server should have to be\\n     * considered high-end.\\n     */\\n    HIGH_RAM: 16384,\\n    /**\\n     * By default, we purchase this many servers to kickstart our farm of\\n     * purchased servers as an early source of income and Hack XP.\\n     */\\n    MIN: 13,\\n    /**\\n     * By default, we buy this many servers to kickstart our farm of\\n     * purchased servers.  Each purchased server is assumed to use some\\n     * kind of batcher to prep and hack a world server.\\n     */\\n    MIN_HGW: 1,\\n    /**\\n     * A script that implements a sequential batcher for purchased servers.\\n     */\\n    PBATCH: \\\"/quack/hgw/pbatch.js\\\",\\n    /**\\n     * The prefix for the name of each purchased server.  The very first\\n     * purchased server is always named \\\"pserv\\\".  Any subsequent purchased\\n     * server is named as pserv-n, where n is a non-negative integer.\\n     */\\n    PREFIX: \\\"pserv\\\",\\n    /**\\n     * An array of valid RAM for a purchased server.  Each RAM amount is a\\n     * power of 2.\\n     */\\n    RAM: [\\n        32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536,\\n        131072, 262144, 524288, 1048576,\\n    ],\\n};\\n\",\"filename\":\"/quack/lib/constant/pserv.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to servers in the game world.  We exclude\\n// purchased servers.\\n\\n/**\\n * The home server of the player.\\n */\\nexport const home = \\\"home\\\";\\n\\n/**\\n * Various thresholds related to our home server.\\n */\\nexport const home_t = {\\n    /**\\n     * The maximum number of Cores on the home server.  This is not necessarily\\n     * the greatest number of Cores the home server can have.  Use this\\n     * constant to help us decide whether to upgrade our home server any\\n     * further.\\n     */\\n    CORE: 4,\\n    /**\\n     * The maximum amount of RAM on the home server.  This is not necessarily\\n     * the largest amount of RAM the home server can have.  Use this constant\\n     * to help us decide whether to upgrade our home server any further.\\n     */\\n    RAM: 262144, // 2^18\\n    /**\\n     * The minimum amount of RAM for a high-end home server.\\n     */\\n    RAM_HIGH: 512,\\n    /**\\n     * The minimum amount of RAM for a high-end home server, assuming that we\\n     * have level 2 of \\\"Source-File 4: The Singularity\\\".\\n     */\\n    RAM_HUGE: 1024,\\n    /**\\n     * The minimum amount of RAM for a high-end home server, assuming that we\\n     * have level at most 1 of \\\"Source-File 4: The Singularity\\\".\\n     */\\n    RAM_MASSIVE: 2048,\\n    /**\\n     * The minimum amount of RAM for a mid-sized home server.\\n     */\\n    RAM_MID: 128,\\n    /**\\n     * Reserve various amounts of RAM on the home server.\\n     */\\n    reserve: {\\n        /**\\n         * By default, we reserve this amount of RAM on the home server.\\n         */\\n        DEFAULT: 64,\\n        /**\\n         * If our home server is high-end or better, reserve this amount of RAM.\\n         */\\n        HIGH: 512,\\n        /**\\n         * If we have only level 2 of \\\"Source-File 4: The Singularity\\\".\\n         */\\n        HUGE: 1024,\\n        /**\\n         * If we have only level 1 of \\\"Source-File 4: The Singularity\\\".\\n         */\\n        MASSIVE: 2048,\\n        /**\\n         * If our home server is mid-end or thereabout, reserve this amount of\\n         * RAM.\\n         */\\n        MID: 128,\\n    },\\n};\\n\\n/**\\n * Various constants related to a server.\\n */\\nexport const server = {\\n    /**\\n     * The server foodnstuff.\\n     */\\n    FOOD: \\\"foodnstuff\\\",\\n    /**\\n     * The server joesguns.\\n     */\\n    JOES: \\\"joesguns\\\",\\n    /**\\n     * The name of a text file.  The file contains the hostname of the server we\\n     * are currently targetting.  We use our home RAM to hack the target.\\n     */\\n    HRAM: \\\"/quack/hram.txt\\\",\\n    /**\\n     * The server n00dles.\\n     */\\n    NOODLES: \\\"n00dles\\\",\\n    /**\\n     * The darkweb server, accessible after purchasing the Tor router.\\n     */\\n    ONION: \\\"darkweb\\\",\\n    /**\\n     * The server phantasy.\\n     */\\n    PHANTASY: \\\"phantasy\\\",\\n    /**\\n     * The name of a text file.  If a file with the given name appears on our\\n     * home server, then it means one of the following:\\n     *\\n     * (1) We are sharing our home server with a faction.  Doing so boosts our\\n     *     reputation gain within the faction.\\n     * (2) We want to suspend the most RAM intensive script in order to free up\\n     *     some RAM on the home server.\\n     */\\n    SHARE: \\\"/quack/share.txt\\\",\\n    /**\\n     * The name of the script for sharing our home server with a faction.\\n     */\\n    SHARE_SCRIPT: \\\"/quack/share.js\\\",\\n    /**\\n     * The server sigma-cosmetics.\\n     */\\n    SIGMA: \\\"sigma-cosmetics\\\",\\n    /**\\n     * The w0r1d_d43m0n server.\\n     */\\n    WD: \\\"w0r1d_d43m0n\\\",\\n};\\n\\n/**\\n * Various thresholds related to servers.\\n */\\nexport const server_t = {\\n    /**\\n     * The number of low-end servers to target.  This number means we target n\\n     * servers that have the lowest Hack stat requirement.  This number is\\n     * divided into various tiers.  We use each tier, depending on various\\n     * criteria.\\n     */\\n    lowend: {\\n        LOW: 1,\\n        MID: 2,\\n        HIGH: 3,\\n    },\\n};\\n\",\"filename\":\"/quack/lib/constant/server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constants related to sleeves.\\n\\n/**\\n * Miscellaneous thresholds related to sleeves.  A sleeve is a digital carbon\\n * copy (CC) of the player.\\n */\\nexport const cc_t = {\\n    /**\\n     * The cost or expenditure multiplier.  Augmentations for a sleeve are\\n     * expensive.  Whenever we make a decision to purchase an Augmentation for a\\n     * sleeve, we multiply the cost of the Augmentation by this multiplier.  In\\n     * case we do buy the Augmentation, at least we would not have spent all our\\n     * funds.  Do not want to go bankrupt because we decided to purchase an\\n     * expensive Augmentation.\\n     */\\n    COST_MULT: 3,\\n    /**\\n     * The maximum number of sleeves we can have.\\n     */\\n    MAX_SLEEVE: 8,\\n    /**\\n     * The maximum value at which a sleeve is fully synchronized with the\\n     * player's consciousness.\\n     */\\n    MAX_SYNC: 100,\\n    /**\\n     * The minimum shock value of a sleeve.\\n     */\\n    MIN_SHOCK: 0,\\n    /**\\n     * Mugging increases all of a sleeve's combat stats.  Let a sleeve mug until\\n     * each of their combat stats is at least this value.\\n     */\\n    MUG: 10,\\n    /**\\n     * Shoplift increases a sleeve's Dexterity and Agility.  Let a sleeve\\n     * shoplift until their Dexterity and Agility are at least this value.\\n     */\\n    SHOP: 5,\\n};\\n\",\"filename\":\"/quack/lib/constant/sleeve.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":703,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to studying at a university.\\n\\n/**\\n * Various courses we can study at a university.  Data taken from\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/NetscriptFunctions/Singularity.ts\\n */\\nexport const course = {\\n    ALGO: \\\"Algorithms\\\",\\n    CS: \\\"Study Computer Science\\\",\\n    DATA: \\\"Data Structures\\\",\\n    LEAD: \\\"Leadership\\\",\\n    MANAGE: \\\"Management\\\",\\n    NET: \\\"Networks\\\",\\n};\\n\",\"filename\":\"/quack/lib/constant/study.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Various constants related to time.\\n\\n/**\\n * Various pre-defined periods.  Use these as our waiting times.  If we want\\n * a custom period of time, we should define it using the given amount of\\n * time in millisecond, second, or minute.\\n */\\nexport const wait_t = {\\n    /**\\n     * The default waiting period in seconds.  Use this for most purposes, when\\n     * we wait for an action to complete.\\n     */\\n    DEFAULT: 5e3,\\n    /**\\n     * One hour expressed in milliseconds.\\n     */\\n    HOUR: 36e5,\\n    /**\\n     * One millisecond.\\n     */\\n    MILLISECOND: 1,\\n    /**\\n     * One minute expressed in milliseconds.\\n     */\\n    MINUTE: 6e4,\\n    /**\\n     * One second expressed in milliseconds.\\n     */\\n    SECOND: 1e3,\\n};\\n\",\"filename\":\"/quack/lib/constant/time.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to working at a company or for a faction.\\n\\n/**\\n * Areas of employment within a company or faction.\\n */\\nexport const job_area = {\\n    BUSINESS: \\\"Business\\\",\\n    FIELD: \\\"Field Work\\\",\\n    HACK: \\\"Hacking Contracts\\\",\\n    SOFTWARE: \\\"Software\\\",\\n};\\n\\n/**\\n * Job titles at various companies.  Data taken from\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Company/data/companypositionnames.ts\\n */\\nexport const job_title = {\\n    CEO: \\\"Chief Executive Officer\\\",\\n    CFO: \\\"Chief Financial Officer\\\",\\n    CTO: \\\"Chief Technology Officer\\\",\\n};\\n\",\"filename\":\"/quack/lib/constant/work.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values related to the World Stock Exchange.\\n\\n/**\\n * Various thresholds related to the market forecast.\\n */\\nexport const forecast = {\\n    /**\\n     * The buying threshold for the market forecast.  We skip buying shares if\\n     * the forecast is below this threshold.\\n     */\\n    BUY: 0.575,\\n    /**\\n     * A selling threshold for the market forecast.  We sell all shares of a\\n     * stock if the forecast is below this threshold.\\n     */\\n    SELL: 0.5,\\n    /**\\n     * The threshold for the market volatility.  We do not buy shares if the\\n     * volatility is above this threshold.\\n     */\\n    VOLATILITY: 0.05,\\n};\\n\\n/**\\n * Miscellaneous constants.\\n */\\nexport const wse = {\\n    /**\\n     * A multiplier for the amount of money we should have in reserve.  When\\n     * trading on the Stock Market, we should not spend all our money on\\n     * shares.  Instead we should have a fixed amount of money in reserve.  The\\n     * multiplier is used to calculate how much money we should have before we\\n     * buy any shares.  Let our funds threshold be the reserve multiplier times\\n     * the amount of money to be held in reserve.  If our current amount of\\n     * money is greater than the resulting product, then we have sufficient\\n     * funds.  Increase the value of this constant to hold more money in\\n     * reserve.\\n     */\\n    RESERVE_MULT: 1.1,\\n    /**\\n     * The minimum amount of money we are willing to spend to purchase shares\\n     * of a stock.  This is our spending threshold.  If our money is less than\\n     * the spending threshold, then do not purchase any shares.\\n     */\\n    SPEND_T: 5e6,\\n    /**\\n     * The Stock Market updates approximately every 6 seconds.\\n     */\\n    TICK: 6e3,\\n    /**\\n     * A file name.  If the trade bot detects the existence of this file on the\\n     * home server, it would stop purchasing shares of stocks.  The behaviour\\n     * is subject to certain conditions.  See the trade-bot.js script for more\\n     * details.\\n     */\\n    STOP_BUY: \\\"/quack/trade_bot_stop_buy.txt\\\",\\n};\\n\",\"filename\":\"/quack/lib/constant/wse.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { corp, corp_t } from \\\"/quack/lib/constant/corp.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { assert, is_boolean, is_valid_city } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A class to manage a corporation.  We typically use the Corporation API by\\n * calling its functions along the format\\n *\\n * ns[\\\"corporation\\\"].functionName()\\n *\\n * as a means of circumventing the high RAM cost.\\n */\\nexport class Corporation {\\n    /**\\n     * The namespace for the Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * Initialize a Corporation object.\\n     *\\n     * @param ns The namespace for the Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#ns = ns;\\n    }\\n\\n    /**\\n     * All divisions of our corporation.\\n     *\\n     * @return An array containing the names of all divisions of our\\n     *     corporation.\\n     */\\n    all_divisions() {\\n        return this.#ns.corporation.getCorporation().divisions;\\n    }\\n\\n    /**\\n     * All products manufactured by a particular division.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @return An array of product names, each product being made by the given\\n     *     division.\\n     */\\n    all_products(div) {\\n        assert(this.has_division(div));\\n        return this.#ns.corporation.getDivision(div).products;\\n    }\\n\\n    /**\\n     * The average stats for all employees in an office.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return An object as follows:\\n     *     {\\n     *         charisma: // The average charisma.\\n     *         creativity: // The average creativity.\\n     *         efficiency: // The average efficiency.\\n     *         energy: // The average energy.\\n     *         experience: // The average experience.\\n     *         happiness: // The average happiness.\\n     *         intelligence: // The average intelligence.\\n     *         morale: // The average morale.\\n     *         salary: // The average salary.\\n     *     }\\n     */\\n    avg_employee_stats(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const employee = this.#ns.corporation.getOffice(div, ct).employees;\\n        assert(employee.length > 0);\\n        // Default is average of 0 in each attribute.\\n        const { attribute } = corp.employee;\\n        const avg_stat = {};\\n        attribute.forEach((a) => {\\n            avg_stat[a] = 0;\\n        });\\n        // A function to abbreviate the name of an attribute.  We get the first\\n        // 3 characters of the string.  The reason is that the function\\n        // getOffice() of the Office API returns an object where the keys are\\n        // each the first 3 characters of the above attribute names.\\n        const start = 0;\\n        const end = 3;\\n        const abbreviate = (x) => x.slice(start, end);\\n        // The average of each attribute for all employees in an office.  Use\\n        // the following formula to calculate the average:\\n        //\\n        // a_{i+1} = (x_{i+1} + (i * a_i)) / (i + 1)\\n        //\\n        // a_{i+1} := The current average value.\\n        // a_i := The previous average value.\\n        // x_{i+1} := The current data point.\\n        // i := Index of the current data point; zero-based.\\n        for (let i = 0; i < employee.length; i++) {\\n            const stat = this.#ns.corporation.getEmployee(div, ct, employee[i]);\\n            attribute.forEach((a) => {\\n                const b = abbreviate(a);\\n                avg_stat[a] = (stat[b] + i * avg_stat[a]) / (i + 1);\\n            });\\n        }\\n        return avg_stat;\\n    }\\n\\n    /**\\n     * Purchase a research for a division.  The cost is in research points, not\\n     * the corporation's funds.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a research to buy.\\n     * @return True if the purchase was successful or we already have the\\n     *     research; false otherwise.\\n     */\\n    buy_research(div, name) {\\n        if (this.has_research(div, name)) {\\n            return bool.HAS;\\n        }\\n        if (this.division_research(div) < this.research_cost(div, name)) {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.research(div, name);\\n        return this.has_research(div, name);\\n    }\\n\\n    /**\\n     * Purchase an unlock upgrade.  This type of upgrade is a one-time\\n     * unlockable.  It applies to the entire corporation and cannot be levelled.\\n     *\\n     * @param upg A string representing the name of an unlock upgrade.\\n     * @return True if we successfully purchased the given unlock upgrade or\\n     *     already have it; false otherwise.\\n     */\\n    buy_unlock_upgrade(upg) {\\n        assert(this.is_valid_unlock_upgrade(upg));\\n        if (this.has_unlock_upgrade(upg)) {\\n            return bool.SUCCESS;\\n        }\\n        const cost = this.#ns.corporation.getUnlockUpgradeCost(upg);\\n        if (this.funds() < cost) {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.unlockUpgrade(upg);\\n        return this.has_unlock_upgrade(upg);\\n    }\\n\\n    /**\\n     * Purchase a warehouse for a division in a particular city.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return True if the purchase was successful; false otherwise.\\n     */\\n    buy_warehouse(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const cost = this.#ns.corporation.getPurchaseWarehouseCost();\\n        if (this.funds() < cost) {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.purchaseWarehouse(div, ct);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * Start a corporation.  We can start a corporation in one of two ways:\\n     *\\n     * (1) Self-funded.  Use $150b of our own money to start a corporation.\\n     *     This works in any BitNode, but has the disadvantage that we must have\\n     *     at least $150b upfront.\\n     * (2) Get a loan.  Take out a loan of $150b to start our corporation.  This\\n     *     only works in BN3.\\n     *\\n     * @return True if our corporation is successfully created; false otherwise.\\n     */\\n    create() {\\n        const player = new Player(this.#ns);\\n        // Assume we are in BN3.  Use our own money to start a corporation,\\n        // otherwise take out a loan.\\n        if (bitnode.Corporatocracy === player.bitnode()) {\\n            const self_fund = player.money() >= corp_t.SEED_COST;\\n            return this.#ns.corporation.createCorporation(corp.NAME, self_fund);\\n        }\\n        // We are in a BitNode other than BN3.  Must use our own money to start\\n        // a corporation.  There is no option to take out a loan.\\n        if (player.money() < corp_t.SEED_COST) {\\n            return bool.FAILURE;\\n        }\\n        return this.#ns.corporation.createCorporation(\\n            corp.NAME,\\n            bool.SELF_FUND\\n        );\\n    }\\n\\n    /**\\n     * Create a new product.\\n     *\\n     * @param div A string representing the name of a division of our\\n     *     corporation.\\n     * @param ct A string representing the name of a city.  We want to develop\\n     *     our product in this city.\\n     * @param name A string representing the name of our product.\\n     * @param investd The amount to invest in the design of the product.\\n     * @param investm The amount to invest in the marketing of the product.\\n     */\\n    create_product(div, ct, name, investd, investm) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(name !== \\\"\\\");\\n        assert(investd > 0);\\n        assert(investm > 0);\\n        this.#ns.corporation.makeProduct(div, ct, name, investd, investm);\\n    }\\n\\n    /**\\n     * The amount of money to invest in the design of a product.\\n     *\\n     * @return How much money to invest in the design of a product.\\n     */\\n    design_investment() {\\n        const amount = Math.floor(this.funds() * corp_t.INVEST_MULT);\\n        assert(amount > 0);\\n        return amount;\\n    }\\n\\n    /**\\n     * Discontinue a product.\\n     *\\n     * @param div A string representing the name of a division of our\\n     *     corporation.\\n     * @param name A string representing the name of a product to discontinue.\\n     */\\n    discontinue_product(div, name) {\\n        assert(this.has_product(div, name));\\n        this.#ns.corporation.discontinueProduct(div, name);\\n    }\\n\\n    /**\\n     * The amount of scientific research accumulated within a division.\\n     * Research points are required to purchase research.\\n     *\\n     * @param div A string representing the name of a division of our\\n     *     corporation.\\n     * @return The amount of scientific research of the given division.\\n     */\\n    division_research(div) {\\n        assert(this.has_division(div));\\n        return this.#ns.corporation.getDivision(div).research;\\n    }\\n\\n    /**\\n     * Use Market TA I and/or Market TA II to auto-set the selling price of a\\n     * product or material that is manufactured by a particular division.\\n     *\\n     * @param div A string representing the name of a division of our\\n     *     corporation.\\n     * @param isprod A boolean signifying whether to enable Market TA for a\\n     *     product.  Pass in true to enable Market TA for a product.  If false,\\n     *     then enable Market TA for a material.\\n     * @param name A string representing the name of a product or material.\\n     * @param ct A string representing the name of a city.  Default is empty\\n     *     string.  If isprod is false, then this parameter cannot be an empty\\n     *     string.\\n     */\\n    enable_market_ta(div, isprod, name, ct = \\\"\\\") {\\n        assert(is_boolean(isprod));\\n        if (isprod) {\\n            assert(this.has_product(div, name));\\n            if (this.has_research(div, corp.research.TA_I)) {\\n                this.#ns.corporation.setProductMarketTA1(\\n                    div,\\n                    name,\\n                    bool.ENABLE\\n                );\\n            }\\n            if (this.has_research(div, corp.research.TA_II)) {\\n                this.#ns.corporation.setProductMarketTA2(\\n                    div,\\n                    name,\\n                    bool.ENABLE\\n                );\\n            }\\n            return;\\n        }\\n        assert(this.has_material(div, ct, name));\\n        if (this.has_research(div, corp.research.TA_I)) {\\n            this.#ns.corporation.setMaterialMarketTA1(\\n                div,\\n                ct,\\n                name,\\n                bool.ENABLE\\n            );\\n        }\\n        if (this.has_research(div, corp.research.TA_II)) {\\n            this.#ns.corporation.setMaterialMarketTA2(\\n                div,\\n                ct,\\n                name,\\n                bool.ENABLE\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Enable Smart Supply for the warehouse of each division in each city.\\n     */\\n    enable_smart_supply() {\\n        this.all_divisions().forEach((div) => {\\n            cities.all.forEach((ct) => {\\n                this.#ns.corporation.setSmartSupply(div, ct, bool.ENABLE);\\n            });\\n        });\\n    }\\n\\n    /**\\n     * Expand our corporation into other cities.  We open a division office in\\n     * another city.\\n     *\\n     * @param div A string representing the name of a division of our\\n     *     corporation.\\n     * @param ct A string representing the name of a city.  We want to expand\\n     *     the given division into this city.\\n     * @return True if the expansion is successful or we already have a division\\n     *     office in the given city; false otherwise.\\n     */\\n    expand_city(div, ct) {\\n        if (this.has_division_office(div, ct)) {\\n            return bool.SUCCESS;\\n        }\\n        this.#ns.corporation.expandCity(div, ct);\\n        return this.has_division_office(div, ct);\\n    }\\n\\n    /**\\n     * Expand our corporation into another industry.\\n     *\\n     * @param ind We want to expand into this industry.\\n     */\\n    expand_industry(ind) {\\n        assert(this.is_valid_industry(ind));\\n        if (!this.has_division(ind)) {\\n            this.#ns.corporation.expandIndustry(ind, ind);\\n        }\\n    }\\n\\n    /**\\n     * The funds available to our corporation.\\n     *\\n     * @return The amount of funds our corporation has.\\n     */\\n    funds() {\\n        return this.#ns.corporation.getCorporation().funds;\\n    }\\n\\n    /**\\n     * Convert our corporation into publicly traded.\\n     */\\n    go_public() {\\n        this.#ns.corporation.goPublic(corp_t.IPO);\\n    }\\n\\n    /**\\n     * Whether we have already created a corporation.\\n     *\\n     * @return True if we have already created a corporation; false otherwise.\\n     */\\n    has_corp() {\\n        try {\\n            assert(this.#ns.corporation.getCorporation().name === corp.NAME);\\n            return bool.HAS;\\n        } catch {\\n            return bool.NOT;\\n        }\\n    }\\n\\n    /**\\n     * Whether we have a particular division.  This is also known as an\\n     * industry.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @return True if we have expanded into the given division;\\n     *     false otherwise.\\n     */\\n    has_division(div) {\\n        const has_div = (d) => d === div;\\n        return this.#ns.corporation.getCorporation().divisions.some(has_div);\\n    }\\n\\n    /**\\n     * Whether one of our divisions has an office in a given city.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return True if the given division has an office in the particular city;\\n     *     false otherwise.\\n     */\\n    has_division_office(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        for (const d of this.#ns.corporation.getCorporation().divisions) {\\n            if (d.name === div) {\\n                return d.cities.includes(ct);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Whether a division has enough research points to buy a particular\\n     * research.  When buying a research, we try not to spend all research\\n     * points on the research.  Rather, we reserve some research points so they\\n     * are not all spent.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a research.\\n     * @return True if the given division has enough research points to spend on\\n     *     the particular research; false otherwise.\\n     */\\n    has_enough_research_points(div, name) {\\n        const int = (x) => Math.floor(x);\\n        const n = corp_t.RESEARCH_MULT;\\n        const marked_up_cost = Math.ceil(n * this.research_cost(div, name));\\n        return int(this.division_research(div)) >= marked_up_cost;\\n    }\\n\\n    /**\\n     * Whether a division has a particular material.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @param name A string representing the name of a material.\\n     * @return True if the given office of the division has the specified\\n     *     material; false otherwise.\\n     */\\n    has_material(div, ct, name) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        try {\\n            const mat = this.#ns.corporation.getMaterial(div, ct, name);\\n            assert(mat.name === name);\\n            return bool.HAS;\\n        } catch {\\n            return bool.NOT;\\n        }\\n    }\\n\\n    /**\\n     * Whether we have access to the Office and Warehouse APIs.  We have\\n     * permanent access to these APIs after we have destroyed BN3.3.\\n     *\\n     * @return True if we have access to the Office and Warehouse APIs;\\n     *     false otherwise.\\n     */\\n    has_office_warehouse_api() {\\n        return (\\n            this.has_unlock_upgrade(corp.unlock.OFFICE)\\n            && this.has_unlock_upgrade(corp.unlock.WAREHOUSE)\\n        );\\n    }\\n\\n    /**\\n     * Whether a division has a particular product.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a product.\\n     * @return True if the given division has the specified product;\\n     *     false otherwise.\\n     */\\n    has_product(div, name) {\\n        assert(this.has_division(div));\\n        try {\\n            const product = this.#ns.corporation.getProduct(div, name);\\n            assert(product.name === name);\\n            return bool.HAS;\\n        } catch {\\n            return bool.NOT;\\n        }\\n    }\\n\\n    /**\\n     * Whether we have a particular research unlocked.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a research.\\n     * @return True if we already have the given research; false otherwise.\\n     */\\n    has_research(div, name) {\\n        assert(this.has_division(div));\\n        assert(this.is_valid_research(name));\\n        return this.#ns.corporation.hasResearched(div, name);\\n    }\\n\\n    /**\\n     * Whether we have an unlockable upgrade.\\n     *\\n     * @param upg A string representing the name of an unlock upgrade.\\n     * @return True if we already have the given unlock upgrade;\\n     *     false otherwise.\\n     */\\n    has_unlock_upgrade(upg) {\\n        assert(this.is_valid_unlock_upgrade(upg));\\n        return this.#ns.corporation.hasUnlockUpgrade(upg);\\n    }\\n\\n    /**\\n     * Hire a new employee for an office.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return A string representing the name of the newly hired employee.  An\\n     *     empty string if we fail to hire a new employee.\\n     */\\n    hire(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const worker = this.#ns.corporation.hireEmployee(div, ct);\\n        return worker !== undefined ? worker.name : \\\"\\\";\\n    }\\n\\n    /**\\n     * Hire AdVert.inc to advertise for our corporation.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @return True if the hiring was successful; false otherwise.\\n     */\\n    hire_advert(div) {\\n        assert(this.has_division(div));\\n        const cost = this.#ns.corporation.getHireAdVertCost(div);\\n        if (this.funds() > cost) {\\n            this.#ns.corporation.hireAdVert(div);\\n            return bool.SUCCESS;\\n        }\\n        return bool.FAILURE;\\n    }\\n\\n    /**\\n     * Hire the initial crop of employees for a new office in a city.  Assign an\\n     * employee to each of the initial positions.\\n     *\\n     * @param div The name of a division.\\n     * @param ct The name of a city.\\n     */\\n    initial_hire(div, ct) {\\n        const max = corp_t.office.INIT_HIRE;\\n        for (let i = this.num_employees(div, ct); i < max; i++) {\\n            const name = this.hire(div, ct);\\n            if (name !== \\\"\\\") {\\n                this.#ns.corporation.assignJob(div, ct, name, corp.position[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Whether an office is at capacity, i.e. we already hired the maximum\\n     * number of employees for the office.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return True if the given office is at capacity; false otherwise.\\n     */\\n    is_at_capacity(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const { employees, size } = this.#ns.corporation.getOffice(div, ct);\\n        return employees.length === size;\\n    }\\n\\n    /**\\n     * Whether we have completed the development of a product.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a product.\\n     * @return True if the given product has been completed; false otherwise.\\n     */\\n    is_product_complete(div, name) {\\n        assert(this.has_product(div, name));\\n        return (\\n            this.#ns.corporation.getProduct(div, name).developmentProgress\\n            >= corp_t.MAX_PROGRESS\\n        );\\n    }\\n\\n    /**\\n     * Whether our corporation is publicly traded.\\n     *\\n     * @return True if our corporation is publicly traded; false otherwise.\\n     */\\n    is_public() {\\n        return this.#ns.corporation.getCorporation().public;\\n    }\\n\\n    /**\\n     * Whether a particular research is available to a division.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a research.\\n     * @return True if the given research is available to the division;\\n     *     false otherwise.\\n     */\\n    is_research_available(div, name) {\\n        assert(this.has_division(div));\\n        assert(this.is_valid_research(name));\\n        try {\\n            this.research_cost(div, name);\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * Whether the given name represents a valid industry.\\n     *\\n     * @param name A string representing the name of an industry.\\n     * @return True if the given name refers to a valid industry;\\n     *     false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_industry(name) {\\n        assert(name !== \\\"\\\");\\n        const industry = new Set(Object.values(corp.industry));\\n        return industry.has(name);\\n    }\\n\\n    /**\\n     * Whether the given name represents a valid material.\\n     *\\n     * @param name A string representing a material name.\\n     * @return True if the given name represents a valid material;\\n     *     false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_material(name) {\\n        assert(name !== \\\"\\\");\\n        const material = new Set(Object.values(corp.material));\\n        return material.has(name);\\n    }\\n\\n    /**\\n     * Whether the given name represents a valid research.\\n     *\\n     * @param name A string representing the name of a research.\\n     * @return True if the given name represents a valid research;\\n     *     false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_research(name) {\\n        assert(name !== \\\"\\\");\\n        const research = new Set(Object.values(corp.research));\\n        return research.has(name);\\n    }\\n\\n    /**\\n     * Whether the given role is valid.\\n     *\\n     * @param role The name of a job to assign an employee.\\n     * @return True if the given name represents a valid role; false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_role(role) {\\n        const job = new Set(Object.values(corp.job));\\n        return job.has(role);\\n    }\\n\\n    /**\\n     * Whether the given string represents a valid round number.  The round\\n     * number corresponds to the number of times we have accepted investment\\n     * money.  The round number should be a word representing the number.\\n     *\\n     * @param str A string representing the round number.\\n     * @return True if the string represents a valid round number;\\n     *     false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_round(str) {\\n        const round = new Set(corp.round);\\n        return round.has(str);\\n    }\\n\\n    /**\\n     * Whether the given name refers to a valid unlock upgrade.\\n     *\\n     * @param upg A string representing the name of an unlock upgrade.\\n     * @return True if the given name refers to a valid unlock upgrade;\\n     *     false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_unlock_upgrade(upg) {\\n        assert(upg !== \\\"\\\");\\n        const upgrade = new Set(Object.values(corp.unlock));\\n        return upgrade.has(upg);\\n    }\\n\\n    /**\\n     * Whether the given name refers to a valid level upgrade.\\n     *\\n     * @param upg A string representing the name of a level upgrade.\\n     * @return True if the given name refers to a valid level upgrade;\\n     *     false otherwise.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    is_valid_upgrade(upg) {\\n        assert(upg !== \\\"\\\");\\n        const upgrade = new Set(Object.values(corp.upgrade));\\n        return upgrade.has(upg);\\n    }\\n\\n    /**\\n     * Whether the employees in an office are vivacious.  An office is said to\\n     * be vivacious if:\\n     *\\n     * (1) The average employee morale is 100.000.\\n     * (2) The average employee happiness is 99.998 or higher.\\n     * (3) The average employee energy is 99.998 or higher.\\n     *\\n     * @param div The name of a division.\\n     * @param ct The name of a city.\\n     * @return True if the employees in an office are vivacious;\\n     *     false otherwise.\\n     */\\n    is_vivacious(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const stat = this.avg_employee_stats(div, ct);\\n        const int = (x) => Math.floor(x * 1000);\\n        return (\\n            int(stat.morale) >= int(corp_t.employee.MORALE)\\n            && int(stat.happiness) >= int(corp_t.employee.HAPPINESS)\\n            && int(stat.energy) >= int(corp_t.employee.ENERGY)\\n        );\\n    }\\n\\n    /**\\n     * Issue dividends to shareholders.\\n     */\\n    issue_dividends() {\\n        assert(this.is_public());\\n        this.#ns.corporation.issueDividends(corp_t.DIVIDEND);\\n    }\\n\\n    /**\\n     * The level of an upgrade that can be levelled.\\n     *\\n     * @param name The name of an upgrade that can be levelled.\\n     * @return The level of the given upgrade.\\n     */\\n    level(name) {\\n        assert(this.is_valid_upgrade(name));\\n        return this.#ns.corporation.getUpgradeLevel(name);\\n    }\\n\\n    /**\\n     * Level up an upgrade that can be levelled.  A level upgrade is not the\\n     * same as an unlock upgrade.\\n     *\\n     * @param name The name of the upgrade to level.\\n     * @return True if we successfully levelled up the given upgrade;\\n     *     false otherwise.\\n     */\\n    level_upgrade(name) {\\n        assert(this.is_valid_upgrade(name));\\n        const cost = this.#ns.corporation.getUpgradeLevelCost(name);\\n        if (this.funds() < cost) {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.levelUpgrade(name);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * The amount of money to invest in the marketing of a product.\\n     *\\n     * @return How much money to invest in the marketing of a product.\\n     */\\n    marketing_investment() {\\n        const amount = Math.floor(this.funds() * corp_t.INVEST_MULT);\\n        assert(amount > 0);\\n        return amount;\\n    }\\n\\n    /**\\n     * Purchase an amount of a material.  We buy this material for a division in\\n     * a particular city.\\n     *\\n     * @param div The name of a division.\\n     * @param ct The name of a city.\\n     * @param name The name of the material to buy.\\n     * @param amt The amount to buy.\\n     */\\n    async material_buy(div, ct, name, amt) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(this.is_valid_material(name));\\n        assert(amt > 0);\\n        const rate = amt / corp_t.TICK_SECOND; // Amount per second.\\n        let { qty } = this.#ns.corporation.getMaterial(div, ct, name);\\n        const target = qty + amt;\\n        this.#ns.corporation.buyMaterial(div, ct, name, rate);\\n        while (qty < target) {\\n            await this.#ns.sleep(wait_t.MILLISECOND);\\n            qty = this.#ns.corporation.getMaterial(div, ct, name).qty;\\n        }\\n        this.#ns.corporation.buyMaterial(div, ct, name, 0);\\n    }\\n\\n    /**\\n     * The initial selling of our materials.  The amount is the maximum of\\n     * whatever we have.  The price is set at the market price.\\n     *\\n     * @param div The name of a division.\\n     * @param ct The name of a city.\\n     * @param name The name of the material to sell.\\n     */\\n    material_initial_sell(div, ct, name) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(this.is_valid_material(name));\\n        this.#ns.corporation.sellMaterial(\\n            div,\\n            ct,\\n            name,\\n            corp_t.sell.amount.MAX,\\n            corp_t.sell.price.MP\\n        );\\n    }\\n\\n    /**\\n     * The amount of a material currently held in a warehouse of a city.\\n     *\\n     * @param div The name of a division.\\n     * @param ct The name of a city.\\n     * @param name The name of the material.\\n     * @return The amount of the given material currently held in the warehouse\\n     *     of the particular division, in the given city.\\n     */\\n    material_qty(div, ct, name) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(this.is_valid_material(name));\\n        return this.#ns.corporation.getMaterial(div, ct, name).qty;\\n    }\\n\\n    /**\\n     * Hire an employee and assign them to the given role.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @param role Assign the new hire to this role.\\n     * @return True if the hiring was successful; false otherwise.\\n     */\\n    new_hire(div, ct, role) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(this.is_valid_role(role));\\n        const name = this.hire(div, ct);\\n        if (name === \\\"\\\") {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.assignJob(div, ct, name, role);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * The number of employees in an office.\\n     *\\n     * @param div The name of a division.\\n     * @param ct The name of a city.\\n     * @return The number of employees in the given division at the given city.\\n     */\\n    num_employees(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employees.length;\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned the role of\\n     * Business.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Business.\\n     */\\n    num_business(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs.Business;\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned the role of\\n     * Engineer.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Engineer.\\n     */\\n    num_engineer(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs.Engineer;\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned to Idle.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Idle.\\n     */\\n    num_idle(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs.Unassigned;\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned to Management.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Management.\\n     */\\n    num_management(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs.Management;\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned to Operations.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Operations.\\n     */\\n    num_operations(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs.Operations;\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned to\\n     * Research & Development.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Research & Development.\\n     */\\n    num_rnd(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const rnd = \\\"Research & Development\\\";\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs[rnd];\\n    }\\n\\n    /**\\n     * The number of employees in an office who are assigned to Training.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The number of employees in the given office who have been\\n     *     assigned to the role of Training.\\n     */\\n    num_training(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).employeeJobs.Training;\\n    }\\n\\n    /**\\n     * The capacity of an office, i.e. the number of employees the office can\\n     * accommodate.  This is not the same as the number of employees in the\\n     * office.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The size of the given office.\\n     */\\n    office_capacity(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getOffice(div, ct).size;\\n    }\\n\\n    /**\\n     * The rating of a given product.  The rating is a weighted score of various\\n     * attributes of a product.  The following attributes are taken into account\\n     * when calculating the rating of a product:\\n     *\\n     * (1) Quality\\n     * (2) Performance\\n     * (3) Durability\\n     * (4) Reliability\\n     * (5) Aesthetics\\n     * (6) Features\\n     *\\n     * Information taken from this file:\\n     *\\n     * https://github.com/bitburner-official/bitburner-src/blob/dev/src/Corporation/Product.ts\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a product.\\n     * @return The rating of the given product.\\n     */\\n    product_rating(div, name) {\\n        assert(this.has_product(div, name));\\n        return this.#ns.corporation.getProduct(div, name).rat;\\n    }\\n\\n    /**\\n     * Sell a product that has been developed in a given division.  The amount\\n     * to sell and the selling price are automatically determined.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @param name The name of the product.\\n     */\\n    product_sell(div, ct, name) {\\n        assert(this.has_product(div, name));\\n        assert(is_valid_city(ct));\\n        this.#ns.corporation.sellProduct(\\n            div,\\n            ct,\\n            name,\\n            corp_t.sell.amount.MAX,\\n            corp_t.sell.price.MP,\\n            bool.NOT\\n        );\\n    }\\n\\n    /**\\n     * The profit per second during the current tick.\\n     *\\n     * @return The profit of our corporation, expressed as per second during\\n     *     the current tick.\\n     */\\n    profit() {\\n        const { expenses, revenue } = this.#ns.corporation.getCorporation();\\n        return revenue - expenses;\\n    }\\n\\n    /**\\n     * The cost in research points of a particular research.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param name A string representing the name of a research to buy.\\n     * @return The amount of research points required to unlock the given\\n     *     research.\\n     */\\n    research_cost(div, name) {\\n        assert(this.has_division(div));\\n        assert(this.is_valid_research(name));\\n        return this.#ns.corporation.getResearchCost(div, name);\\n    }\\n\\n    /**\\n     * The cost to level up an upgrade.\\n     *\\n     * @param upg A string representing the name of an upgrade.\\n     * @return The cost to level up the given upgrade.\\n     */\\n    upgrade_cost(upg) {\\n        assert(this.is_valid_upgrade(upg));\\n        return this.#ns.corporation.getUpgradeLevelCost(upg);\\n    }\\n\\n    /**\\n     * Upgrade the office of a division in a particular city.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @param n How many times to upgrade.  Must be a positive integer.\\n     * @return True if the upgrade was successful; false otherwise.\\n     */\\n    upgrade_office(div, ct, n) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(n >= 1);\\n        const cost = this.#ns.corporation.getOfficeSizeUpgradeCost(div, ct, n);\\n        if (this.funds() < cost) {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.upgradeOfficeSize(div, ct, n);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * Upgrade the warehouse of a division in a particular city.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @param n How many times to upgrade.  Must be a positive integer.\\n     * @return True if the upgrade was successful; false otherwise.\\n     */\\n    upgrade_warehouse(div, ct, n) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        assert(n >= 1);\\n        const cost = this.#ns.corporation.getUpgradeWarehouseCost(div, ct, n);\\n        if (this.funds() < cost) {\\n            return bool.FAILURE;\\n        }\\n        this.#ns.corporation.upgradeWarehouse(div, ct, n);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * Waiting for each office to be vivacious.\\n     */\\n    async vivacious_office() {\\n        for (const div of this.all_divisions()) {\\n            const vivacious = (c) => this.is_vivacious(div, c);\\n            while (!cities.all.every(vivacious)) {\\n                await this.#ns.sleep(wait_t.SECOND);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * The size or capacity of a warehouse.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     * @return The storage size of the given warehouse.\\n     */\\n    warehouse_capacity(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        return this.#ns.corporation.getWarehouse(div, ct).size;\\n    }\\n\\n    /**\\n     * Upgrade a newly purchased warehouse to the initial capacity.\\n     *\\n     * @param div A string representing the name of a division.\\n     * @param ct A string representing the name of a city.\\n     */\\n    warehouse_init_upgrade(div, ct) {\\n        assert(this.has_division(div));\\n        assert(is_valid_city(ct));\\n        const howmany = 1;\\n        while (\\n            this.#ns.corporation.getWarehouse(div, ct).size\\n            < corp_t.warehouse.INIT_UPGRADE_SIZE\\n        ) {\\n            this.upgrade_warehouse(div, ct, howmany);\\n        }\\n    }\\n}\\n\",\"filename\":\"/quack/lib/corporation/corp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":713,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport {\\n    agriculture,\\n    corp,\\n    corp_t,\\n    tobacco,\\n} from \\\"/quack/lib/constant/corp.js\\\";\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Corporation } from \\\"/quack/lib/corporation/corp.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { random_integer } from \\\"/quack/lib/random.js\\\";\\nimport { assert, is_boolean } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Purchase both \\\"Market-TA.I\\\" and \\\"Market-TA.II\\\".\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @return True if we already have both research in the given division or we\\n *     have successfully bought both research for the division; false otherwise.\\n */\\nexport function buy_market_ta(ns, div) {\\n    const res = [corp.research.TA_I, corp.research.TA_II];\\n    const org = new Corporation(ns);\\n    const has_research = (r) => org.has_research(div, r);\\n    if (res.every(has_research)) {\\n        return bool.HAS;\\n    }\\n    res.forEach((r) => {\\n        if (org.has_enough_research_points(div, r)) {\\n            org.buy_research(div, r);\\n        }\\n    });\\n    return res.every(has_research);\\n}\\n\\n/**\\n * Purchase a particular research.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division of our corporation.\\n * @param name A string representing the name of a research we want to buy.\\n */\\nexport async function buy_research(ns, div, name) {\\n    const org = new Corporation(ns);\\n    if (org.has_research(div, name)) {\\n        return;\\n    }\\n    while (!org.has_enough_research_points(div, name)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    while (!org.buy_research(div, name)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Remove files created by our corporation scripts.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function corp_cleanup(ns) {\\n    const junk = [corp.AGRI, corp.INVEST, corp.JANI, corp.PREP, corp.TOBA];\\n    junk.forEach((f) => ns.rm(f, home));\\n}\\n\\n/**\\n * Create a product for a division.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division of our corporation.\\n * @return The name of the product under development.\\n */\\nexport function create_product(ns, div) {\\n    const org = new Corporation(ns);\\n    assert(org.has_division(div));\\n    const name = product_name(ns, div);\\n    assert(!org.has_product(div, name));\\n    org.create_product(\\n        div,\\n        developer_city(ns, div),\\n        name,\\n        org.design_investment(),\\n        org.marketing_investment()\\n    );\\n    return name;\\n}\\n\\n/**\\n * The developer city of a particular division.  This city is responsible for\\n * product development.\\n *\\n * @param div A string representing the name of a division of our corporation.\\n * @return The developer city of the given division.\\n */\\nfunction developer_city(ns, div) {\\n    const org = new Corporation(ns);\\n    assert(org.has_division(div));\\n    switch (div) {\\n        case corp.industry.TOBACCO:\\n            return tobacco.DEVELOPER_CITY;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Discontinue a product.  We choose the product of lowest rating and\\n * discontinue that product.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division of our corporation.\\n * @return The name of the discontinued product.\\n */\\nexport function discontinue_product(ns, div) {\\n    // Determine the product that has the lowest rating.\\n    const org = new Corporation(ns);\\n    let name = \\\"\\\";\\n    let min_rating = Infinity;\\n    org.all_products(div).forEach((p) => {\\n        const rating = org.product_rating(div, p);\\n        if (min_rating > rating) {\\n            min_rating = rating;\\n            name = p;\\n        }\\n    });\\n    // Discontinue the product that has the lowest rating.\\n    assert(name !== \\\"\\\");\\n    org.discontinue_product(div, name);\\n    return name;\\n}\\n\\n/**\\n * Expand a division by opening offices in other cities.  After opening a new\\n * division office, we also purchase a warehouse for that office.\\n *\\n * @param ns The Netscript API.\\n * @param div We want to branch this division into other cities.\\n * @return An array of city names, where we have opened new division offices.\\n */\\nexport async function expand_city(ns, div) {\\n    const org = new Corporation(ns);\\n    const new_office = [];\\n    for (const ct of cities.all) {\\n        if (!org.has_division_office(div, ct)) {\\n            org.expand_city(div, ct);\\n            while (!org.buy_warehouse(div, ct)) {\\n                await ns.sleep(wait_t.SECOND);\\n            }\\n            new_office.push(ct);\\n        }\\n    }\\n    return new_office;\\n}\\n\\n/**\\n * Wait for a product to be 100% complete.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param name A string representing the name of a product currently under\\n *     development.\\n */\\nexport async function finishing_product(ns, div, name) {\\n    const org = new Corporation(ns);\\n    while (!org.is_product_complete(div, name)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Whether a division has all research it needs.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param res An array of names of research we care about.\\n * @return True if we have all research available to be purchased;\\n *     false otherwise.\\n */\\nexport function has_all_research(ns, div, res) {\\n    assert(res.length > 0);\\n    const org = new Corporation(ns);\\n    const available_res = res.filter((r) => org.is_research_available(div, r));\\n    const has_research = (x) => org.has_research(div, x);\\n    return available_res.every(has_research);\\n}\\n\\n/**\\n * Hire a crop of employees for a division.  Use this function when a division\\n * is in maintenance mode.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param wait A boolean signifying whether we want to wait to accumulate enough\\n *     money to hire employees.  If set to false, then we abort the hiring\\n *     process if we do not have sufficient funds to hire an employee.\\n */\\nexport async function hire(ns, div, wait) {\\n    for (const ct of cities.all) {\\n        const num = hire_increment(div, ct);\\n        for (const role of Object.values(corp.job)) {\\n            await hireling(ns, div, ct, num[role], role, wait);\\n        }\\n    }\\n}\\n\\n/**\\n * Hire AdVert.inc to advertise for a division.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n */\\nexport async function hire_advert(ns, div) {\\n    const org = new Corporation(ns);\\n    while (!org.hire_advert(div)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Hire AdVert.inc to advertise for a division, but only do so if it does not\\n * cost too much.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n */\\nexport async function hire_advert_frugal(ns, div) {\\n    const org = new Corporation(ns);\\n    const max_funds = Math.floor(corp_t.upgrade.COST_MULT * org.profit());\\n    const cost = Math.ceil(ns.corporation.getHireAdVertCost(div));\\n    if (cost >= max_funds) {\\n        return;\\n    }\\n    while (!org.hire_advert(div)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * The number of employees to hire for each role in a division.\\n *\\n * @param div A string representing the name of a division.\\n * @param ct A string representing the name of a city.\\n * @return An object as follows:\\n *     {\\n *         Business: Number, // Hire this many for Business role.\\n *         Engineer: Number, // Hire this many for Engineer role.\\n *         Management: Number, // Hire this many for Management role.\\n *         Operations: Number, // Hire this many for Operations role.\\n *         \\\"Research & Development\\\": Number, // Hire this many for R&D role.\\n *         Training: Number, // Hire this many for Training role.\\n *         Unassigned: Number, // Hire this many for Idle role.\\n *     }\\n */\\nfunction hire_increment(div, ct) {\\n    switch (div) {\\n        case corp.industry.AGRI:\\n            return {\\n                Business: agriculture[ct].hire.stage.n.BUSINESS,\\n                Engineer: agriculture[ct].hire.stage.n.ENGINEER,\\n                Management: agriculture[ct].hire.stage.n.MANAGEMENT,\\n                Operations: agriculture[ct].hire.stage.n.OPERATIONS,\\n                \\\"Research & Development\\\": agriculture[ct].hire.stage.n.RND,\\n                Training: agriculture[ct].hire.stage.n.TRAIN,\\n                Unassigned: agriculture[ct].hire.stage.n.IDLE,\\n            };\\n        case corp.industry.TOBACCO:\\n            return {\\n                Business: tobacco[ct].hire.stage.n.BUSINESS,\\n                Engineer: tobacco[ct].hire.stage.n.ENGINEER,\\n                Management: tobacco[ct].hire.stage.n.MANAGEMENT,\\n                Operations: tobacco[ct].hire.stage.n.OPERATIONS,\\n                \\\"Research & Development\\\": tobacco[ct].hire.stage.n.RND,\\n                Training: tobacco[ct].hire.stage.n.TRAIN,\\n                Unassigned: tobacco[ct].hire.stage.n.IDLE,\\n            };\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Hire a bunch of employees for a particular role.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param ct A string representing the name of a city.\\n * @param num Hire this many employees.\\n * @param job Assign each new employee to this role.\\n * @param wait A boolean signifying whether we want to wait to accumulate enough\\n *     money to hire an employee.  If set to false, then we abort the hiring\\n *     process if we do not have sufficient funds to hire an employee.\\n */\\nasync function hireling(ns, div, ct, num, job, wait) {\\n    assert(num >= 0);\\n    assert(is_boolean(wait));\\n    for (let i = 0; i < num; i++) {\\n        await new_hire(ns, div, ct, job, wait);\\n    }\\n}\\n\\n/**\\n * A round of investment offer.\\n *\\n * @param ns The Netscript API.\\n * @param r A string (i.e. word) representing the investment round.  If it is\\n *     round 1, pass in the word \\\"one\\\" and so on.\\n */\\nexport async function investment_offer(ns, r) {\\n    // Determine the latest investment round wherein we accepted investment\\n    // money.  Why not use the attribute below?\\n    //\\n    // ns.corporation.getInvestmentOffer().round\\n    //\\n    // Corp is rather broken (buggy) at the moment in v2.1.  The value of the\\n    // above attribute does not seem to persist after you save and quit the\\n    // game.  Our fix is to use a text file to keep track of the investment\\n    // round number.\\n    let latest_round = -1;\\n    if (ns.fileExists(corp.INVEST)) {\\n        latest_round = parseInt(ns.read(corp.INVEST), base.DECIMAL);\\n    } else {\\n        ns.write(corp.INVEST, \\\"0\\\", io.WRITE);\\n        latest_round = 0;\\n    }\\n    if (to_number(r) !== latest_round + 1) {\\n        return;\\n    }\\n    // Need to wait for our corporation to make a certain amount of profit per\\n    // second, and have a certain amount of funds.\\n    log(ns, `Round ${to_number(r)} of investment`);\\n    const profit_tau = ns.nFormat(corp_t.profit.round[r].N, \\\"$0,0.00a\\\");\\n    log(ns, `Waiting for sufficient profit: ${profit_tau}/s`);\\n    const org = new Corporation(ns);\\n    while (org.profit() < corp_t.profit.round[r].N) {\\n        await ns.sleep(corp_t.TICK);\\n    }\\n    const { funds, shares } = ns.corporation.getInvestmentOffer();\\n    ns.corporation.acceptInvestmentOffer();\\n    const fundsf = ns.nFormat(funds, \\\"$0,0.00a\\\");\\n    const sharesf = ns.nFormat(shares, \\\"0,0.00a\\\");\\n    log(\\n        ns,\\n        `Received ${fundsf} in exchange for ${sharesf} shares of corporation`\\n    );\\n    // Keep track of the latest round of investment.\\n    latest_round++;\\n    ns.write(corp.INVEST, String(latest_round), io.WRITE);\\n}\\n\\n/**\\n * Levelling up various upgrades, if it does not cost too much.\\n *\\n * @param ns The Netscript API.\\n * @return An array of the names of the upgrades we have levelled up.  An empty\\n *     array if we did not level up any upgrades.\\n */\\nexport function level_upgrade(ns) {\\n    const org = new Corporation(ns);\\n    const levelled_upg = [];\\n    for (const upg of Object.values(corp.upgrade)) {\\n        const max_funds = Math.floor(corp_t.upgrade.COST_MULT * org.profit());\\n        const cost = Math.ceil(org.upgrade_cost(upg));\\n        if (cost < max_funds) {\\n            if (org.level_upgrade(upg)) {\\n                levelled_upg.push(upg);\\n            }\\n        }\\n    }\\n    return levelled_upg;\\n}\\n\\n/**\\n * Purchase various other unlock upgrades.\\n *\\n * @param ns The Netscript API.\\n * @return An array of the names of the unlock upgrades we have purcahsed.  An\\n *     empty array if we did not buy any unlock upgrades.\\n */\\nexport async function more_unlock_upgrade(ns) {\\n    const org = new Corporation(ns);\\n    const unlock_upgrade = [];\\n    const unlock = [corp.unlock.ACCOUNT, corp.unlock.PPP];\\n    for (const upg of unlock) {\\n        if (org.has_unlock_upgrade(upg)) {\\n            continue;\\n        }\\n        while (!org.has_unlock_upgrade(upg)) {\\n            org.buy_unlock_upgrade(upg);\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n        unlock_upgrade.push(upg);\\n    }\\n    return unlock_upgrade;\\n}\\n\\n/**\\n * Hire an employee for an office.  We want to hire an employee to fill a\\n * particular role.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param ct A string representing the name of a city.\\n * @param role We want to hire for this role.\\n * @param wait A boolean signifying whether we want to wait to accumulate enough\\n *     money to hire an employee.  If set to false, then we abort the hiring\\n *     process if we do not have sufficient funds to hire an employee.\\n */\\nexport async function new_hire(ns, div, ct, role, wait) {\\n    assert(is_boolean(wait));\\n    const howmany = 1; // How many times to upgrade.\\n    const org = new Corporation(ns);\\n    let success = false;\\n    if (org.is_at_capacity(div, ct)) {\\n        success = org.upgrade_office(div, ct, howmany);\\n        if (!success && wait) {\\n            while (!org.upgrade_office(div, ct, howmany)) {\\n                await ns.sleep(corp_t.TICK);\\n            }\\n        }\\n    }\\n    success = org.new_hire(div, ct, role);\\n    if (!success && wait) {\\n        while (!org.new_hire(div, ct, role)) {\\n            await ns.sleep(corp_t.TICK);\\n        }\\n    }\\n}\\n\\n/**\\n * A random product name.  We should not currently have this product.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @return A string representing the name of a product.\\n */\\nexport function product_name(ns, div) {\\n    const support = [corp.industry.TOBACCO];\\n    assert(support.includes(div));\\n    const low = 0;\\n    let high = low;\\n    let product = [];\\n    switch (div) {\\n        case corp.industry.TOBACCO:\\n            product = Array.from(tobacco.product);\\n            high = product.length - 1;\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n    const org = new Corporation(ns);\\n    let i = random_integer(low, high);\\n    while (org.has_product(div, product[i])) {\\n        i = random_integer(low, high);\\n    }\\n    return product[i];\\n}\\n\\n/**\\n * Sell a product we have developed in a division.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @param name A string representing the name of a product.\\n */\\nexport function sell_product(ns, div, name) {\\n    const org = new Corporation(ns);\\n    assert(org.is_product_complete(div, name));\\n    cities.all.forEach((ct) => org.product_sell(div, ct, name));\\n    org.enable_market_ta(div, bool.IS_PRODUCT, name);\\n}\\n\\n/**\\n * Setup a research lab within a division.  We need a research lab for a\\n * division before can acquire other research for the division.\\n *\\n * @param ns The Netscript API.\\n * @param div A string representing the name of a division.\\n * @return True if we already have a research lab in the given division or we\\n *     have successfully setup a research lab for the division; false otherwise.\\n */\\nexport function setup_research_lab(ns, div) {\\n    const res = corp.research.RND_LAB;\\n    const org = new Corporation(ns);\\n    if (org.has_research(div, res)) {\\n        return bool.HAS;\\n    }\\n    if (org.has_enough_research_points(div, res)) {\\n        return org.buy_research(div, res);\\n    }\\n    return bool.NOT;\\n}\\n\\n/**\\n * Purchase the Smart Supply unlock upgrade.  This is a one-time unlockable\\n * upgrade.  It applies to the entire corporation and cannot be levelled.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function smart_supply(ns) {\\n    const org = new Corporation(ns);\\n    if (!org.has_unlock_upgrade(corp.unlock.SMART)) {\\n        org.buy_unlock_upgrade(corp.unlock.SMART);\\n    }\\n    org.enable_smart_supply();\\n}\\n\\n/**\\n * Convert a number in words to integer.\\n *\\n * @param str A word representing a number.  For example, \\\"one\\\" refers to\\n *     the integer 1.\\n * @return The integer equivalent of the given number.\\n */\\nexport function to_number(str) {\\n    assert(str !== \\\"\\\");\\n    const round = {\\n        one: 1,\\n        two: 2,\\n        three: 3,\\n        four: 4,\\n        five: 5,\\n        six: 6,\\n        seven: 7,\\n        eight: 8,\\n        nine: 9,\\n    };\\n    return round[str];\\n}\\n\",\"filename\":\"/quack/lib/corporation/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"corporation.getInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.acceptInvestmentOffer\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport {\\n    armour,\\n    gang_augment,\\n    gang_t,\\n    gangster_t,\\n    members,\\n    rootkit,\\n    task,\\n    task_t,\\n    vehicle,\\n    weapon,\\n} from \\\"/quack/lib/constant/gang.js\\\";\\nimport { money_reserve } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { random_integer } from \\\"/quack/lib/random.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A class that holds various information about a gangster.\\n */\\nexport class Gangster {\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * Initialize a Gangster object.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#ns = ns;\\n    }\\n\\n    /**\\n     * The Agility stat of a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return The Agility stat of the given member.\\n     */\\n    agility(name) {\\n        assert(this.is_member(name));\\n        return this.#ns.gang.getMemberInformation(name).agi;\\n    }\\n\\n    /**\\n     * Ascend a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return True if the ascension is successful; false otherwise.\\n     */\\n    ascend(name) {\\n        assert(this.is_member(name));\\n        const asc = this.#ns.gang.getAscensionResult(name);\\n        if (undefined === asc) {\\n            return bool.FAILURE;\\n        }\\n        // Convert a number in the form 1.xyz to 1xy.  We multiply the number\\n        // by 100 and take the integer part.  So 1.25 would be 125.  We do this\\n        // because comparing floating point numbers can be tricky and result in\\n        // unexpected behaviour.  It is easier and simpler to compare integers.\\n        const to_int = (x) => Math.floor(100 * x);\\n        // See whether we can ascend this gang member.  The cases of combatant,\\n        // hacker, and miscellaneous are each handled separately.\\n        const tau = to_int(gang_t.ASCEND);\\n        let ascend_this_member = false;\\n        if (this.is_combatant(name)) {\\n            if (\\n                to_int(asc.agi) > tau\\n                || to_int(asc.def) > tau\\n                || to_int(asc.dex) > tau\\n                || to_int(asc.str) > tau\\n            ) {\\n                ascend_this_member = true;\\n            }\\n        } else if (this.is_hacker(name)) {\\n            if (to_int(asc.hack) > tau || to_int(asc.cha) > tau) {\\n                ascend_this_member = true;\\n            }\\n        } else {\\n            assert(this.is_miscellaneous(name));\\n            if (\\n                to_int(asc.cha) > tau\\n                || to_int(asc.agi) > tau\\n                || to_int(asc.def) > tau\\n                || to_int(asc.dex) > tau\\n                || to_int(asc.str) > tau\\n            ) {\\n                ascend_this_member = true;\\n            }\\n        }\\n        // Now ascend the gangster.\\n        if (ascend_this_member) {\\n            const result = this.#ns.gang.ascendMember(name);\\n            if (undefined !== result) {\\n                return bool.SUCCESS;\\n            }\\n        }\\n        return bool.FAILURE;\\n    }\\n\\n    /**\\n     * Assign gang members to threaten and blackmail high-profile targets.\\n     *\\n     * @param name An array of member names.\\n     */\\n    blackmail(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members threaten and blackmail people.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_blackmailer(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.BLACKMAIL));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * The Charisma stat of a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return The Charisma stat of the given member.\\n     */\\n    charisma(name) {\\n        assert(this.is_member(name));\\n        return this.#ns.gang.getMemberInformation(name).cha;\\n    }\\n\\n    /**\\n     * Assign gang members to run a con.\\n     *\\n     * @param name An array of member names.\\n     */\\n    con(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members run a con.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_con_artist(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.CON));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to deal drugs.\\n     *\\n     * @param name An array of member names.\\n     */\\n    deal_drugs(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members be involved in dealing drugs.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_dealing_drugs(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.DRUGS));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * The Defense stat of a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return The Defense stat of the given member.\\n     */\\n    defense(name) {\\n        assert(this.is_member(name));\\n        return this.#ns.gang.getMemberInformation(name).def;\\n    }\\n\\n    /**\\n     * The Dexterity stat of a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return The Dexterity stat of the given member.\\n     */\\n    dexterity(name) {\\n        assert(this.is_member(name));\\n        return this.#ns.gang.getMemberInformation(name).dex;\\n    }\\n\\n    /**\\n     * Purchase the given armour piece and equip it on a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param amr A string representing the name of an armour piece.\\n     * @return true if the armour is successfully purchased for the given\\n     *     member; false otherwise.\\n     */\\n    equip_armour(name, amr) {\\n        assert(this.is_member(name));\\n        const gang_armour = new Set(Object.values(armour));\\n        assert(gang_armour.has(amr));\\n        const cost = this.#ns.gang.getEquipmentCost(amr);\\n        const funds = this.#player_money() - money_reserve;\\n        if (funds < gang_t.COST_MULT * cost) {\\n            return bool.FAILURE;\\n        }\\n        return this.#ns.gang.purchaseEquipment(name, amr);\\n    }\\n\\n    /**\\n     * Purchase the given Augmentation and equip it on a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param aug A string representing the name of an Augmentation.\\n     * @return true if the Augmentation is successfully purchased for the given\\n     *     member; false otherwise.\\n     */\\n    equip_augment(name, aug) {\\n        assert(this.is_member(name));\\n        const gang_aug = new Set(Object.values(gang_augment));\\n        assert(gang_aug.has(aug));\\n        const cost = this.#ns.gang.getEquipmentCost(aug);\\n        const funds = this.#player_money() - money_reserve;\\n        if (funds < gang_t.COST_MULT * cost) {\\n            return bool.FAILURE;\\n        }\\n        return this.#ns.gang.purchaseEquipment(name, aug);\\n    }\\n\\n    /**\\n     * Purchase the given rootkit and equip it on a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param kit A string representing the name of a rootkit.\\n     * @return true if the rootkit is successfully purchased for the given\\n     *     member; false otherwise.\\n     */\\n    equip_rootkit(name, kit) {\\n        assert(this.is_member(name));\\n        const gang_rootkit = new Set(Object.values(rootkit));\\n        assert(gang_rootkit.has(kit));\\n        const cost = this.#ns.gang.getEquipmentCost(kit);\\n        const funds = this.#player_money() - money_reserve;\\n        if (funds < gang_t.COST_MULT * cost) {\\n            return bool.FAILURE;\\n        }\\n        return this.#ns.gang.purchaseEquipment(name, kit);\\n    }\\n\\n    /**\\n     * Purchase the given vehicle and equip it on a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param vhc A string representing the name of a vehicle.\\n     * @return true if the vehicle is successfully purchased for the given\\n     *     member; false otherwise.\\n     */\\n    equip_vehicle(name, vhc) {\\n        assert(this.is_member(name));\\n        const gang_vehicle = new Set(Object.values(vehicle));\\n        assert(gang_vehicle.has(vhc));\\n        const cost = this.#ns.gang.getEquipmentCost(vhc);\\n        const funds = this.#player_money() - money_reserve;\\n        if (funds < gang_t.COST_MULT * cost) {\\n            return bool.FAILURE;\\n        }\\n        return this.#ns.gang.purchaseEquipment(name, vhc);\\n    }\\n\\n    /**\\n     * Purchase the given weapon and equip it on a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param wpn A string representing the name of a weapon.\\n     * @return true if the weapon is successfully purchased for the given\\n     *     member; false otherwise.\\n     */\\n    equip_weapon(name, wpn) {\\n        assert(this.is_member(name));\\n        const gang_weapon = new Set(Object.values(weapon));\\n        assert(gang_weapon.has(wpn));\\n        const cost = this.#ns.gang.getEquipmentCost(wpn);\\n        const funds = this.#player_money() - money_reserve;\\n        if (funds < gang_t.COST_MULT * cost) {\\n            return bool.FAILURE;\\n        }\\n        return this.#ns.gang.purchaseEquipment(name, wpn);\\n    }\\n\\n    /**\\n     * Assign gang members to ethical hacking.\\n     *\\n     * @param name An array of member names.\\n     */\\n    ethical_hacking(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members be involved in ethical hacking.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_ethical_hacker(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.EHACK));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to extort civilians on our turf.\\n     *\\n     * @param name An array of member names.\\n     */\\n    extort(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members strongarm civilians.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_extortionist(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.EXTORT));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to commit financial fraud and digital counterfeiting.\\n     *\\n     * @param name An array of member names.\\n     */\\n    fraud(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members commit financial fraud and digital counterfeiting.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_fraudster(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.FRAUD));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Graduate gang members who have been training their combat stats.  Assign\\n     * them to mug random people.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.\\n     * @param threshold A combatant transitions to mugging once each of their\\n     *     combat stats is at least this amount.\\n     */\\n    graduate_combatant(name, threshold) {\\n        // Sanity checks.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        name.forEach((s) => assert(this.is_member(s)));\\n        const min = Math.floor(threshold);\\n        assert(min > 0);\\n        // After training their combat stats, members graduate to mugging\\n        // random people.\\n        const graduate = name.filter(\\n            (s) => this.is_combatant(s)\\n                && this.is_training_combat(s)\\n                && this.strength(s) >= min\\n                && this.defense(s) >= min\\n                && this.dexterity(s) >= min\\n                && this.agility(s) >= min\\n        );\\n        this.mug(graduate);\\n    }\\n\\n    /**\\n     * Graduate gang members who have been training their Hack stat.  Although\\n     * hackers primarily train their Hack stat, they could also benefit from\\n     * some training in their Charisma stat.  After a hacker has trained their\\n     * Hack and Charisma stats, assign them their first job.  The first job of\\n     * the hacker depends on whether we have a criminal or hacking gang.  If we\\n     * have a criminal gang, then the first job of the hacker is the same as the\\n     * first job of a miscellaneous member.  In case our gang is a hacking gang,\\n     * the first job of a hacker is to create and distribute ransomware.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.\\n     * @param threshold A hacker transitions to ransomware (or the first job of\\n     *     a miscellaneous gangster) once their Hack stat is at least this\\n     *     amount.  The transition is also affected by their Charisma stat.  If\\n     *     they do not have sufficient Charisma, they must train their Charisma\\n     *     stat before being assigned their first job.\\n     */\\n    graduate_hacker(name, threshold) {\\n        // Sanity checks.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        name.forEach((s) => assert(this.is_member(s)));\\n        const min = Math.floor(threshold);\\n        assert(min > 0);\\n        // After training their Hack stat, a hacker also trains their Charisma\\n        // stat.\\n        const hacker = name.filter((s) => this.is_hacker(s));\\n        const hack_graduate = hacker.filter(\\n            (s) => this.is_training_hack(s) && this.hack(s) >= min\\n        );\\n        this.train_charisma(hack_graduate);\\n        // Once a hacker's Hack and Charisma stats are of minimum amounts,\\n        // assign them their first job.\\n        const charisma_graduate = hacker.filter(\\n            (s) => this.is_training_charisma(s)\\n                && this.charisma(s) >= task_t.CHARISMA\\n        );\\n        if (this.#ns.gang.getGangInformation().isHacking) {\\n            this.ransomware(charisma_graduate);\\n            return;\\n        }\\n        this.deal_drugs(charisma_graduate);\\n    }\\n\\n    /**\\n     * Graduate miscellaneous members who have been training their Charisma\\n     * stat.  Although miscellaneous members primarily train their Charisma\\n     * stat, they could also benefit from some training in their combat stats.\\n     * After a miscellaneous member has trained their Charisma and combat stats,\\n     * assign them their first job of dealing drugs.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.\\n     * @param threshold A miscellaneous member transitions to dealing drugs\\n     *     once their Charisma stat is at least this amount.  The transition is\\n     *     also affected by their combat stats.  If they do not have sufficient\\n     *     combat stats, they must train their combat stats before being\\n     *     assigned their first job.\\n     */\\n    graduate_other(name, threshold) {\\n        // Sanity checks.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        name.forEach((s) => assert(this.is_member(s)));\\n        const min = Math.floor(threshold);\\n        assert(min > 0);\\n        // After training their Charisma stat, a miscellaneous member also\\n        // trains their combat stats.\\n        const graduate = name.filter((s) => this.is_miscellaneous(s));\\n        const charisma_graduate = graduate.filter(\\n            (s) => this.is_training_charisma(s) && this.charisma(s) >= min\\n        );\\n        this.train_combat(charisma_graduate);\\n        // Once the Charisma and combat stats of a miscellaneous member are of\\n        // minimum amounts, assign them their first job.\\n        const combat_graduate = graduate.filter(\\n            (s) => this.is_training_combat(s)\\n                && this.strength(s) >= task_t.COMBAT\\n                && this.defense(s) >= task_t.COMBAT\\n                && this.dexterity(s) >= task_t.COMBAT\\n                && this.agility(s) >= task_t.COMBAT\\n        );\\n        this.deal_drugs(combat_graduate);\\n    }\\n\\n    /**\\n     * The Hack stat of a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return The Hack stat of the given member.\\n     */\\n    hack(name) {\\n        assert(this.is_member(name));\\n        return this.#ns.gang.getMemberInformation(name).hack;\\n    }\\n\\n    /**\\n     * Whether a gang member has a particular armour piece.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param amr A string representing the name of an armour.\\n     * @return true if the gang member has the given armour piece;\\n     *     false otherwise.\\n     */\\n    has_armour(name, amr) {\\n        assert(this.is_member(name));\\n        const gang_armour = new Set(Object.values(armour));\\n        assert(gang_armour.has(amr));\\n        const equipment = new Set(\\n            this.#ns.gang.getMemberInformation(name).upgrades\\n        );\\n        return equipment.has(amr);\\n    }\\n\\n    /**\\n     * Whether a gang member has a particular Augmentation.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param aug A string representing the name of an Augmentation.\\n     * @return true if the gang member has the given Augmentation;\\n     *     false otherwise.\\n     */\\n    has_augment(name, aug) {\\n        assert(this.is_member(name));\\n        const gang_aug = new Set(Object.values(gang_augment));\\n        assert(gang_aug.has(aug));\\n        const equipment = new Set(\\n            this.#ns.gang.getMemberInformation(name).augmentations\\n        );\\n        return equipment.has(aug);\\n    }\\n\\n    /**\\n     * Whether a gang member has a particular rootkit.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param kit A string representing the name of a rootkit.\\n     * @return true if the gang member has the given rootkit; false otherwise.\\n     */\\n    has_rootkit(name, kit) {\\n        assert(this.is_member(name));\\n        const gang_rootkit = new Set(Object.values(rootkit));\\n        assert(gang_rootkit.has(kit));\\n        const equipment = new Set(\\n            this.#ns.gang.getMemberInformation(name).upgrades\\n        );\\n        return equipment.has(kit);\\n    }\\n\\n    /**\\n     * Whether a gang member has a particular vehicle.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param vhc A string representing the name of a vehicle.\\n     * @return true if the gang member has the given vehicle; false otherwise.\\n     */\\n    has_vehicle(name, vhc) {\\n        assert(this.is_member(name));\\n        const gang_vehicle = new Set(Object.values(vehicle));\\n        assert(gang_vehicle.has(vhc));\\n        const equipment = new Set(\\n            this.#ns.gang.getMemberInformation(name).upgrades\\n        );\\n        return equipment.has(vhc);\\n    }\\n\\n    /**\\n     * Whether a gang member has a particular weapon.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @param wpn A string representing the name of a weapon.\\n     * @return true if the gang member has the given weapon; false otherwise.\\n     */\\n    has_weapon(name, wpn) {\\n        assert(this.is_member(name));\\n        const gang_weapon = new Set(Object.values(weapon));\\n        assert(gang_weapon.has(wpn));\\n        const equipment = new Set(\\n            this.#ns.gang.getMemberInformation(name).upgrades\\n        );\\n        return equipment.has(wpn);\\n    }\\n\\n    /**\\n     * Assign gang members to commit identity theft.\\n     *\\n     * @param name An array of member names.\\n     */\\n    id_theft(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members commit identity theft.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_id_thief(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.ID_THEFT));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Whether a gang member is engaged in trafficking illegal arms.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is trafficking illegal arms;\\n     *     false otherwise.\\n     */\\n    is_arms_trafficker(name) {\\n        assert(this.is_member(name));\\n        const current_task = this.#ns.gang.getMemberInformation(name).task;\\n        return task.TRAFFICK_ARMS === current_task;\\n    }\\n\\n    /**\\n     * Whether a gang member has been assigned the role of Artillery.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member takes on the role of Artillery;\\n     *     false otherwise.\\n     */\\n    is_artillery(name) {\\n        assert(this.is_member(name));\\n        return this.role(name) === members.ROLE.artillery;\\n    }\\n\\n    /**\\n     * Whether a gang member is threatening and blackmailing high-profile\\n     * targets.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is threatening and blackmailing people;\\n     *     false otherwise.\\n     */\\n    is_blackmailer(name) {\\n        assert(this.is_member(name));\\n        return task.BLACKMAIL === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is a combatant.  A gangster is a combatant if they\\n     * have been assigned one of these roles:\\n     *\\n     * (1) Artillery\\n     * (2) Pilot\\n     * (3) Punk\\n     * (4) Vanguard\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is a combatant; false otherwise.\\n     */\\n    is_combatant(name) {\\n        return (\\n            this.is_artillery(name)\\n            || this.is_pilot(name)\\n            || this.is_punk(name)\\n            || this.is_vanguard(name)\\n        );\\n    }\\n\\n    /**\\n     * Whether a gang member is running a con.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is running a con; false otherwise.\\n     */\\n    is_con_artist(name) {\\n        assert(this.is_member(name));\\n        return task.CON === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is creating and distributing ransomware.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is involved in the creation and\\n     *     distribution of ransomware; false otherwise.\\n     */\\n    is_creating_ransomware(name) {\\n        assert(this.is_member(name));\\n        const current_task = this.#ns.gang.getMemberInformation(name).task;\\n        return task.RANSOMWARE === current_task;\\n    }\\n\\n    /**\\n     * Whether a gang member is involved in dealing drugs.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is dealing drugs; false otherwise.\\n     */\\n    is_dealing_drugs(name) {\\n        assert(this.is_member(name));\\n        return task.DRUGS === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is engaged in ethical hacking.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is engaged in ethical hacking;\\n     *     false otherwise.\\n     */\\n    is_ethical_hacker(name) {\\n        assert(this.is_member(name));\\n        return task.EHACK === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is strongarming civilians.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is strongarming civilians;\\n     *     false otherwise.\\n     */\\n    is_extortionist(name) {\\n        assert(this.is_member(name));\\n        return task.EXTORT === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is committing financial fraud and digital\\n     * counterfeiting.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is committing financial fraud and\\n     *     digital counterfeiting; false otherwise.\\n     */\\n    is_fraudster(name) {\\n        assert(this.is_member(name));\\n        return task.FRAUD === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is a hacker.  A gangster is a hacker if they have\\n     * been assigned the role of Hacker.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is a hacker; false otherwise.\\n     */\\n    is_hacker(name) {\\n        assert(this.is_member(name));\\n        return this.role(name) === members.ROLE.hacker;\\n    }\\n\\n    /**\\n     * Whether a gang member is operating a human trafficking ring.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is trafficking humans; false otherwise.\\n     */\\n    is_human_trafficker(name) {\\n        assert(this.is_member(name));\\n        const current_task = this.#ns.gang.getMemberInformation(name).task;\\n        return task.TRAFFICK_HUMAN === current_task;\\n    }\\n\\n    /**\\n     * Whether a gang member is committing identity theft.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is committing identity theft;\\n     *     false otherwise.\\n     */\\n    is_id_thief(name) {\\n        assert(this.is_member(name));\\n        return task.ID_THEFT === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is currently unassigned.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is idle; false otherwise.\\n     */\\n    is_idle(name) {\\n        assert(this.is_member(name));\\n        return task.IDLE === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is laundering money.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is laundering money; false otherwise.\\n     */\\n    is_launderer(name) {\\n        assert(this.is_member(name));\\n        return task.LAUNDER === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether the given name belongs to a member of our gang.\\n     *\\n     * @param name A string representing the name of a gangster.  A member's\\n     *     name should be prefixed with their role, according to the format:\\n     *     \\\"[Role] Full Name\\\".\\n     * @return true if our gang has the specified member; false otherwise.\\n     */\\n    is_member(name) {\\n        assert(name.length > 0);\\n        const member = new Set(this.#ns.gang.getMemberNames());\\n        return member.has(name);\\n    }\\n\\n    /**\\n     * Whether a gang member holds one of the following miscellaneous roles:\\n     *\\n     * (1) Medic\\n     * (2) Spy\\n     * (3) Thief\\n     * (4) Traitor\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member holds a miscellaneous role;\\n     *     false otherwise.\\n     */\\n    is_miscellaneous(name) {\\n        assert(this.is_member(name));\\n        const role = this.role(name);\\n        return (\\n            role === members.ROLE.medic\\n            || role === members.ROLE.spy\\n            || role === members.ROLE.thief\\n            || role === members.ROLE.traitor\\n        );\\n    }\\n\\n    /**\\n     * Whether a gang member is mugging random people on the streets.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is mugging random people;\\n     *     false otherwise.\\n     */\\n    is_mugger(name) {\\n        assert(this.is_member(name));\\n        return task.MUG === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is committing phishing scams.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is involved in a phishing scam;\\n     *     false otherwise.\\n     */\\n    is_phisher(name) {\\n        assert(this.is_member(name));\\n        return task.PHISH === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member has been assigned the role of Pilot.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member takes on the role of Pilot;\\n     *     false otherwise.\\n     */\\n    is_pilot(name) {\\n        assert(this.is_member(name));\\n        return this.role(name) === members.ROLE.pilot;\\n    }\\n\\n    /**\\n     * Whether a gang member has been assigned the role of Punk.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member takes on the role of Punk;\\n     *     false otherwise.\\n     */\\n    is_punk(name) {\\n        assert(this.is_member(name));\\n        return this.role(name) === members.ROLE.punk;\\n    }\\n\\n    /**\\n     * Whether a gang member is engaged in armed robbery.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is committing armed robbery;\\n     *     false otherwise.\\n     */\\n    is_robber(name) {\\n        assert(this.is_member(name));\\n        return task.ROBBERY === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is committing acts of terrorism.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is committing acts of terrorism;\\n     *     false otherwise.\\n     */\\n    is_terrorist(name) {\\n        assert(this.is_member(name));\\n        return task.TERROR === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is in combat, charisma, or hack training.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is in combat, charisma, or hack\\n     *     training; false otherwise.\\n     */\\n    is_training(name) {\\n        return (\\n            this.is_training_charisma(name)\\n            || this.is_training_combat(name)\\n            || this.is_training_hack(name)\\n        );\\n    }\\n\\n    /**\\n     * Whether a gang member is in charisma training.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is in charisma training;\\n     *     false otherwise.\\n     */\\n    is_training_charisma(name) {\\n        assert(this.is_member(name));\\n        return task.CHARISMA === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is in combat training.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is in combat training; false otherwise.\\n     */\\n    is_training_combat(name) {\\n        assert(this.is_member(name));\\n        return task.COMBAT === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is in hack training.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is in hack training; false otherwise.\\n     */\\n    is_training_hack(name) {\\n        assert(this.is_member(name));\\n        return task.HACK === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member has been assigned the role of Vanguard.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is taking on the role of Vanguard;\\n     *     false otherwise.\\n     */\\n    is_vanguard(name) {\\n        assert(this.is_member(name));\\n        return this.role(name) === members.ROLE.vanguard;\\n    }\\n\\n    /**\\n     * Whether a gang member is engaged in vigilante justice.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is engaged in vigilante justice;\\n     *     false otherwise.\\n     */\\n    is_vigilante(name) {\\n        assert(this.is_member(name));\\n        return task.VIGILANTE === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Whether a gang member is engaged in turf warfare.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member is engaged in turf warfare;\\n     *     false otherwise.\\n     */\\n    is_warrior(name) {\\n        assert(this.is_member(name));\\n        return task.TURF_WAR === this.#ns.gang.getMemberInformation(name).task;\\n    }\\n\\n    /**\\n     * Assign gang members to launder money.\\n     *\\n     * @param name An array of member names.\\n     */\\n    launder(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members launder money.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_launderer(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.LAUNDER));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to mug random people on the street.\\n     *\\n     * @param name An array of member names.\\n     */\\n    mug(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members mug random people.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_mugger(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.MUG));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Whether a gang member needs to train their Charisma stat.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member needs Charisma training;\\n     *     false otherwise.\\n     */\\n    needs_charisma_training(name) {\\n        assert(this.is_member(name));\\n        return this.charisma(name) < task_t.CHARISMA;\\n    }\\n\\n    /**\\n     * Whether a gang member needs to train their combat stats.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member needs combat training; false otherwise.\\n     */\\n    needs_combat_training(name) {\\n        if (\\n            this.strength(name) < task_t.COMBAT\\n            || this.defense(name) < task_t.COMBAT\\n            || this.dexterity(name) < task_t.COMBAT\\n            || this.agility(name) < task_t.COMBAT\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Whether a gang member needs to train their Hack stat.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member needs Hack training; false otherwise.\\n     */\\n    needs_hack_training(name) {\\n        assert(this.is_member(name));\\n        return this.hack(name) < task_t.HACK;\\n    }\\n\\n    /**\\n     * Whether a gang member needs training in various stats.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return true if the given member needs training in one or more stats;\\n     *     false otherwise.\\n     */\\n    needs_training(name) {\\n        if (this.is_combatant(name)) {\\n            return this.needs_combat_training(name);\\n        }\\n        if (this.is_hacker(name)) {\\n            return (\\n                this.needs_hack_training(name)\\n                || this.needs_charisma_training(name)\\n            );\\n        }\\n        assert(this.is_miscellaneous(name));\\n        return (\\n            this.needs_charisma_training(name)\\n            || this.needs_combat_training(name)\\n        );\\n    }\\n\\n    /**\\n     * Assign gang members to the idle state.\\n     *\\n     * @param name An array of member names.\\n     */\\n    neutral(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members be in the idle state.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            this.#ns.gang.setMemberTask(s, task.IDLE);\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to commit phishing scams.\\n     *\\n     * @param name An array of member names.\\n     */\\n    phish(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members commit phishing scams.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_phisher(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.PHISH));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * The player's total amount of money.\\n     */\\n    #player_money() {\\n        return this.#ns.getServerMoneyAvailable(home);\\n    }\\n\\n    /**\\n     * A random name with which to assign a new gang member.\\n     *\\n     * @param name An array of potential names for our new recruit.  Use this\\n     *     array to randomly choose a name for our new member.\\n     * @return A string representing the name of our newest member.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    #random_name(name) {\\n        assert(name.length > 0);\\n        const min = 0;\\n        const max = name.length - 1;\\n        const i = random_integer(min, max);\\n        return name[i];\\n    }\\n\\n    /**\\n     * Assign gang members to create and distribute ransomware.\\n     *\\n     * @param name An array of member names.\\n     */\\n    ransomware(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members create and distribute ransomware.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_creating_ransomware(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.RANSOMWARE));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Recruit as many new gang members as possible.  There is a maximum to how\\n     * many members can be in our gang.  We want our gang to have the following\\n     * structure and let each member role play.\\n     *\\n     * (1) Artillery x 1.  A gun expert and ranged fighter.  Good with bow and\\n     *     arrows, or missiles.\\n     * (2) Hacker x 1.  The computer wizard.\\n     * (3) Medic x 1.  This is our doctor.\\n     * (4) Pilot x 1.  Air support from a helicopter, drone, or aeroplane.\\n     * (5) Punk x n.  Low level soldiers who rake in money for the gang by\\n     *     committing various crimes.  As many as we can recruit.\\n     * (6) Spy x 1.  An expert in espionage and reconnaissance.\\n     * (7) Thief x 1.  Someone who steals treasure.  A sneak.\\n     * (8) Traitor x 1.  Someone who would likely betray the gang.\\n     * (9) Vanguard x 1.  Our frontliner and tank.\\n     *\\n     * @return An array of the names of the new recruits.  Each name follows\\n     *     the format \\\"[Role] Full Name\\\".  Return an empty array if we cannot\\n     *     recruit any new members.\\n     */\\n    recruit() {\\n        const newbie = [];\\n        const roster = this.#roster();\\n        while (this.#ns.gang.canRecruitMember()) {\\n            let role = \\\"\\\";\\n            if (roster.vanguard < gang_t.ROSTER.vanguard) {\\n                role = members.ROLE.vanguard;\\n            } else if (roster.hacker < gang_t.ROSTER.hacker) {\\n                role = members.ROLE.hacker;\\n            } else if (roster.punk < gang_t.ROSTER.punk) {\\n                role = members.ROLE.punk;\\n            } else if (roster.artillery < gang_t.ROSTER.artillery) {\\n                role = members.ROLE.artillery;\\n            } else if (roster.medic < gang_t.ROSTER.medic) {\\n                role = members.ROLE.medic;\\n            } else if (roster.pilot < gang_t.ROSTER.pilot) {\\n                role = members.ROLE.pilot;\\n            } else if (roster.spy < gang_t.ROSTER.spy) {\\n                role = members.ROLE.spy;\\n            } else if (roster.thief < gang_t.ROSTER.thief) {\\n                role = members.ROLE.thief;\\n            } else if (roster.traitor < gang_t.ROSTER.traitor) {\\n                role = members.ROLE.traitor;\\n            }\\n            assert(role !== \\\"\\\");\\n            const role_lowercase = role.toLowerCase();\\n            const name = this.#recruit_member(gangster_t[role_lowercase], role);\\n            roster[role_lowercase]++;\\n            newbie.push(name);\\n        }\\n        return newbie;\\n    }\\n\\n    /**\\n     * Recruit a member to our gang.  Assume that we can recruit.\\n     *\\n     * @param name An array of potential names for our new recruit.  Choose a\\n     *     random name from this array.\\n     * @param role A string representing the role of our new recruit.\\n     * @return A string representing the role and name of our new member.\\n     *     Follow the format \\\"[Role] Full Name\\\".\\n     */\\n    #recruit_member(name, role) {\\n        assert(this.#ns.gang.canRecruitMember());\\n        assert(name.length > 0);\\n        assert(role.length > 0);\\n        let s = `[${role}] ${this.#random_name(name)}`;\\n        while (this.is_member(s)) {\\n            s = `[${role}] ${this.#random_name(name)}`;\\n        }\\n        assert(this.#ns.gang.recruitMember(s));\\n        return s;\\n    }\\n\\n    /**\\n     * Assign gang members to armed robbery.\\n     *\\n     * @param name An array of member names.\\n     */\\n    robbery(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members engage in armed robbery.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_robber(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.ROBBERY));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * The role of a gang member.  The name of a member follows the format:\\n     *\\n     * [Role] Full Name\\n     *\\n     * We can easily extract the role from this format.\\n     *\\n     * @param name A string representing the name of a gangster.\\n     * @return The role of the given gang member.\\n     */\\n    role(name) {\\n        assert(this.is_member(name));\\n        const prefix = name.split(\\\" \\\")[0];\\n        return prefix.replace(/[^a-zA-Z]/g, \\\"\\\");\\n    }\\n\\n    /**\\n     * Our current gang members and their roles.\\n     *\\n     * @return An object as follows:\\n     *\\n     *     {\\n     *         \\\"artillery\\\": number,\\n     *         \\\"hacker\\\": number,\\n     *         \\\"medic\\\": number,\\n     *         \\\"pilot\\\": number,\\n     *         \\\"punk\\\": number,\\n     *         \\\"spy\\\": number,\\n     *         \\\"thief\\\": number,\\n     *         \\\"traitor\\\": number,\\n     *         \\\"vanguard\\\": number,\\n     *     }\\n     *\\n     *     Each number represents the number of members who hold the\\n     *     corresponding role.\\n     */\\n    #roster() {\\n        const member = {\\n            artillery: 0,\\n            hacker: 0,\\n            medic: 0,\\n            pilot: 0,\\n            punk: 0,\\n            spy: 0,\\n            thief: 0,\\n            traitor: 0,\\n            vanguard: 0,\\n        };\\n        // Assume the name of each member follows this format:\\n        //\\n        // [Role] Full Name\\n        for (const name of this.#ns.gang.getMemberNames()) {\\n            const role = this.role(name).toLowerCase();\\n            member[role]++;\\n        }\\n        return member;\\n    }\\n\\n    /**\\n     * The Strength stat of a gang member.\\n     *\\n     * @param name A string representing the name of a gang member.\\n     * @return The Strength stat of the given member.\\n     */\\n    strength(name) {\\n        assert(this.is_member(name));\\n        return this.#ns.gang.getMemberInformation(name).str;\\n    }\\n\\n    /**\\n     * Assign gang members to commit acts of terrorism.\\n     *\\n     * @param name An array of member names.\\n     */\\n    terrorism(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members engage in terrorism.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_terrorist(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.TERROR));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to trafficking illegal arms.\\n     *\\n     * @param name An array of member names.\\n     */\\n    traffick_arms(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members engage in trafficking illegal arms.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_arms_trafficker(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.TRAFFICK_ARMS));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to engage in human trafficking.\\n     *\\n     * @param name An array of member names.\\n     */\\n    traffick_human(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members operate a human trafficking ring.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_human_trafficker(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.TRAFFICK_HUMAN));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Train one or more stats of a gang member.  The type of stats to train\\n     * depends on the role of a member.\\n     *\\n     * (1) Artillery, Pilot, Punk, Vanguard.  These roles specialize\\n     *     exclusively in combat stats.  Any gains in Hack or Charisma are\\n     *     incidental.\\n     * (2) Hacker.  This role focuses mostly on Hack stat, but also benefits\\n     *     from some investment in Charisma.\\n     * (3) Medic, Spy, Thief, Traitor.  These roles are primarily\\n     *     Charisma-based, but could benefit from some training in combat stats.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.  Each name follows the format \\\"[Role] Full Name\\\".  We\\n     *     want to raise various stats of each of these members.\\n     */\\n    train(name) {\\n        // Sanity checks.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        name.forEach((s) => assert(this.is_member(s)));\\n        // Train various stats.  The stat(s) to train, and the amount of time\\n        // spent in training, depend on a member's role.\\n        const hacker = name.filter((s) => this.is_hacker(s));\\n        const combatant = name.filter((s) => this.is_combatant(s));\\n        const other = name.filter((s) => this.is_miscellaneous(s));\\n        assert(hacker.length > 0 || combatant.length > 0 || other.length > 0);\\n        this.train_combat(combatant);\\n        this.train_hack(hacker);\\n        this.train_charisma(other);\\n    }\\n\\n    /**\\n     * Raise the Charisma stat of gang members.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.  We want to raise the Charisma stat of each of these\\n     *     members.\\n     */\\n    train_charisma(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Charisma training.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_training_charisma(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.CHARISMA));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Raise the combat stats of gang members.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.  We want to raise the combat stats of each of these\\n     *     members.\\n     */\\n    train_combat(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Combat training.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_training_combat(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.COMBAT));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Raise the Hack stat of gang members.\\n     *\\n     * @param name An array each of whose elements is a string that represents\\n     *     a member name.  We want to raise the Hack stat of each of these\\n     *     members.\\n     */\\n    train_hack(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Hack training.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_training_hack(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.HACK));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to engage in turf warfare.\\n     *\\n     * @param name An array of member names.\\n     */\\n    turf_war(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members engage in turf warfare.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_warrior(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.TURF_WAR));\\n            }\\n        });\\n    }\\n\\n    /**\\n     * Assign gang members to vigilante justice.\\n     *\\n     * @param name An array of member names.\\n     */\\n    vigilante(name) {\\n        // Sanity check.\\n        if (name.length === 0) {\\n            return;\\n        }\\n        // Let gang members be vigilantes.\\n        name.forEach((s) => {\\n            assert(this.is_member(s));\\n            if (!this.is_vigilante(s)) {\\n                assert(this.#ns.gang.setMemberTask(s, task.VIGILANTE));\\n            }\\n        });\\n    }\\n}\\n\",\"filename\":\"/quack/lib/gang/gangster.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Utility functions for managing a gang.\\n\\nimport { members } from \\\"/quack/lib/constant/gang.js\\\";\\nimport { Gangster } from \\\"/quack/lib/gang/gangster.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Choose the number of gang members to assign to vigilante justice.  The number\\n * of gangsters who will be assigned to these jobs depends on our current\\n * membership.\\n *\\n * @param ns The Netscript API.\\n * @return The number of members to assign to vigilante justice.\\n */\\nfunction choose_vigilante_threshold(ns) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    assert(members.VIGILANTE > 0);\\n    // Lower the threshold, depending on our gang membership.\\n    const mid_point = Math.floor(members.MAX / 2);\\n    const quarter_point = mid_point + Math.floor(mid_point / 2);\\n    const ngangster = ns.gang.getMemberNames().length;\\n    if (ngangster === members.INITIAL) {\\n        return 1;\\n    }\\n    if (members.INITIAL < ngangster && ngangster <= mid_point) {\\n        return 2;\\n    }\\n    if (mid_point < ngangster && ngangster <= quarter_point) {\\n        return 3;\\n    }\\n    assert(quarter_point < ngangster && ngangster <= members.MAX);\\n    return Math.floor(members.VIGILANTE);\\n}\\n\\n/**\\n * Whether we already have enough gang members assigned to vigilante justice.\\n *\\n * @param ns The Netscript API.\\n * @return true if enough gangsters are assigned to vigilante justice;\\n *     false otherwise.\\n */\\nfunction has_enough_vigilante(ns) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    const tau = choose_vigilante_threshold(ns);\\n    const gangster = new Gangster(ns);\\n    const vigilante = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vigilante(s));\\n    return tau === vigilante.length;\\n}\\n\\n/**\\n * We have too many gang members in vigilante justice.  Reassign the excess\\n * members to some other jobs.\\n *\\n * @param ns The Netscript API.\\n * @param threshold We want this many members to be in vigilante justice.\\n */\\nfunction reassign_excess_vigilante(ns, threshold) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    const tau = Math.floor(threshold);\\n    assert(tau > 0);\\n    const gangster = new Gangster(ns);\\n    const vigilante = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vigilante(s));\\n    const hacker = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_hacker(s));\\n    const vanguard = vigilante.filter((s) => gangster.is_vanguard(s));\\n    // The Vanguard is always the first to be assigned to vigilante justice.\\n    // The Hacker is always the next member to be assigned to this task.\\n    let vigilante_hacker = vanguard.concat(hacker);\\n    vigilante_hacker = vigilante_hacker.concat(\\n        vigilante.filter((s) => !gangster.is_vanguard(s))\\n    );\\n    assert(vigilante_hacker.length > tau);\\n    const candidate = [];\\n    while (vigilante_hacker.length > tau) {\\n        candidate.push(vigilante_hacker.pop());\\n    }\\n    assert(candidate.length > 0);\\n    gangster.vigilante(vigilante_hacker);\\n    // Reassign the rest to other jobs.\\n    reassign_other(ns, candidate);\\n}\\n\\n/**\\n * Reassign some members to other jobs.\\n *\\n * @param ns The Netscript API.\\n * @param name An array of member names.\\n */\\nfunction reassign_other(ns, name) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    if (name.length === 0) {\\n        return;\\n    }\\n    const trainee = [];\\n    const other = [];\\n    const gangster = new Gangster(ns);\\n    for (const s of name) {\\n        if (gangster.needs_training(s) && !gangster.is_training(s)) {\\n            trainee.push(s);\\n            continue;\\n        }\\n        other.push(s);\\n    }\\n    gangster.train_combat(trainee);\\n    gangster.extort(other);\\n}\\n\\n/**\\n * Reassign a number of our gang members to vigilante justice before doing a\\n * soft reset.  Our objective is to lower our wanted level while other gang\\n * members are involved in other jobs.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function reassign_soft_reset(ns) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    // We want only one gang member on vigilante justice.  That member is the\\n    // Vanguard.\\n    const gangster = new Gangster(ns);\\n    const vanguard = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vanguard(s));\\n    assert(vanguard.length === 1);\\n    gangster.vigilante(vanguard);\\n    // Other members currently on vigilante justice are reassigned to other\\n    // jobs.\\n    const vigilante = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vigilante(s) && !gangster.is_vanguard(s));\\n    vigilante.forEach((s) => {\\n        if (gangster.is_hacker(s)) {\\n            gangster.blackmail([s]);\\n        } else {\\n            gangster.extort([s]);\\n        }\\n    });\\n}\\n\\n/**\\n * We do not have enough gang members in vigilante justice.  Reassign some\\n * members to these jobs.\\n *\\n * @param ns The Netscript API.\\n * @param threshold We want this many members to be in vigilante justice.\\n */\\nfunction reassign_to_vigilante(ns, threshold) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    const tau = Math.floor(threshold);\\n    assert(tau > 0);\\n    // All gang members who should be on vigilante justice.\\n    const gangster = new Gangster(ns);\\n    const vanguard = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vanguard(s));\\n    const hacker = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_hacker(s));\\n    const artillery = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_artillery(s));\\n    const pilot = ns.gang.getMemberNames().filter((s) => gangster.is_pilot(s));\\n    // Determine which members to assign to vigilante justice.  The Vanguard is\\n    // always the first to be assigned to vigilante justice.  This is followed\\n    // by the Hacker.  Next comes the Artillery and the Pilot, who are assigned\\n    // to vigilante justice in that order.\\n    const candidate = [vanguard, hacker, artillery, pilot].flat();\\n    const vigilante = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vigilante(s));\\n    assert(vigilante.length < candidate.length);\\n    assert(vigilante.length < tau);\\n    while (vigilante.includes(candidate[0])) {\\n        candidate.shift();\\n    }\\n    const nmore = tau - vigilante.length;\\n    assert(nmore > 0);\\n    while (candidate.length > nmore) {\\n        candidate.pop();\\n    }\\n    // Assign the candidates to vigilante justice.\\n    gangster.vigilante(candidate);\\n}\\n\\n/**\\n * Reassign a number of our gang members to vigilante justice.  Our objective is\\n * to lower our wanted level.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function reassign_vigilante(ns) {\\n    assert(!ns.gang.getGangInformation().isHacking);\\n    // Initially, our gang has a small number of members.  Assigning one or\\n    // more members to vigilante justice would do precious little to decrease\\n    // our wanted level.  With such a small membership, it is more important to\\n    // raise the members' stats and recruit more members than to lower our\\n    // wanted level.\\n    assert(ns.gang.getMemberNames().length > members.HALF);\\n    // Do we already have the required number of members on vigilante justice?\\n    if (has_enough_vigilante(ns)) {\\n        return;\\n    }\\n    // We have more vigilantes than the given threshold.  Move some members out\\n    // of vigilante justice and into some other jobs.\\n    const gangster = new Gangster(ns);\\n    const tau = choose_vigilante_threshold(ns);\\n    const vigilante = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_vigilante(s));\\n    if (vigilante.length > tau) {\\n        reassign_excess_vigilante(ns, tau);\\n        return;\\n    }\\n    // If we already have some vigilantes, then add more members to vigilante\\n    // justice to make up the required threshold.\\n    assert(vigilante.length < tau);\\n    reassign_to_vigilante(ns, tau);\\n}\\n\\n/**\\n * The strongest member in our gang.\\n *\\n * @param ns The Netscript API.\\n * @param member Choose from among this array of member names.\\n * @return A string representing the name of the strongest gang member.\\n */\\nexport function strongest_member(ns, member) {\\n    assert(member.length > 0);\\n    let maxstr = -Infinity;\\n    let name = \\\"\\\";\\n    for (const s of member) {\\n        const { str } = ns.gang.getMemberInformation(s);\\n        if (str > maxstr) {\\n            maxstr = str;\\n            name = s;\\n        }\\n    }\\n    assert(name !== \\\"\\\");\\n    return name;\\n}\\n\",\"filename\":\"/quack/lib/gang/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":23.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { hgw } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport {\\n    assert,\\n    can_run_script,\\n    gain_root_access,\\n    num_threads,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n// Utility functions in the model of hack/grow/weaken or HGW.\\n\\n/**\\n * Choose the servers from our botnet to use for hacking or otherwise.  The\\n * servers are chosen such that the total number of threads they offer allow us\\n * to steal a certain percentage of a target's money.  Essentially, the problem\\n * is this.  We know we need n threads to steal a fraction of a target's money.\\n * Choose servers from among our botnet that would allow us to hack using n\\n * threads or thereabout.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n * @param frac The fraction of money to steal.  Must be between 0 and 1.\\n * @param is_prep Are we prepping a world server?  If is_prep is true, the\\n *     function will ignore the parameters host and frac.\\n * @return An array of objects {host, thread} as follows:\\n *\\n *     (1) host := Hostname of a server where we are to run our hack script.\\n *     (2) thread := The number of threads to use on the given server.\\n *\\n *     If is_prep is true, then return an array of hostnames of world servers.\\n */\\nexport function assemble_botnet(ns, host, frac, is_prep) {\\n    if (is_prep) {\\n        return nuke_servers(ns);\\n    }\\n    const s = hgw.script.HACK;\\n    const nthread = (serv) => num_threads(ns, s, serv);\\n    const descending = (a, b) => nthread(b) - nthread(a);\\n    const has_ram_to_run_script = (serv) => can_run_script(ns, s, serv);\\n    const money = target_money(ns, host, frac);\\n    const max_threads = Math.floor(ns.hackAnalyzeThreads(host, money));\\n    const botnet = [];\\n    let n = 0;\\n    nuke_servers(ns)\\n        .filter(has_ram_to_run_script)\\n        .sort(descending)\\n        .forEach((serv) => {\\n            if (n >= max_threads) {\\n                return;\\n            }\\n            const k = threads_to_use(ns, serv, n, max_threads);\\n            botnet.push({ host: serv, thread: k });\\n            n += k;\\n            assert(n <= max_threads);\\n        });\\n    assert(botnet.length > 0);\\n    return botnet;\\n}\\n\\n/**\\n * Attempt to gain root access to a given server.  After gaining root access, we\\n * copy our HGW scripts over to the server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have root access to the given server; false otherwise.\\n */\\nfunction gain_admin_access(ns, host) {\\n    if (gain_root_access(ns, host)) {\\n        const file = [hgw.script.GROW, hgw.script.HACK, hgw.script.WEAKEN];\\n        ns.scp(file, host, home);\\n        return bool.HAS;\\n    }\\n    return bool.NOT;\\n}\\n\\n/**\\n * Whether a server's money is at its maximum.\\n *\\n * @param ns The Netscript API.\\n * @param host The hostname of a server.\\n * @return True if the amount of money on the given server is at its maximum;\\n *     false otherwise.\\n */\\nexport function has_max_money(ns, host) {\\n    const { moneyAvailable, moneyMax } = ns.getServer(host);\\n    return moneyAvailable >= moneyMax;\\n}\\n\\n/**\\n * Whether a server's security level is at its minimum.\\n *\\n * @param ns The Netscript API.\\n * @param host The hostname of a server.\\n * @return True if the security level of the given server is at its minimum;\\n *     false otherwise.\\n */\\nexport function has_min_security(ns, host) {\\n    const { hackDifficulty, minDifficulty } = ns.getServer(host);\\n    return hackDifficulty <= minDifficulty;\\n}\\n\\n/**\\n * Perform an HGW action against a target server.\\n *\\n * @param ns The Netscript API.\\n * @param host Perform an HGW action against this server.  Cannot be our home\\n *     server.\\n * @param botnet An array of world servers to which we have root access.  Use\\n *     these servers to perform an HGW action against the given target.  Cannot\\n *     be empty array.\\n * @param action The action we want to perform against the given target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Hack money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n */\\nexport async function hgw_action(ns, host, botnet, action) {\\n    assert(host !== \\\"\\\");\\n    assert(host !== home);\\n    assert(botnet.length > 0);\\n\\n    const time = hgw_wait_time(ns, host, action);\\n    const s = hgw_script(action);\\n    let has_ram_to_run_script = (serv) => can_run_script(ns, s, serv);\\n    const nthread = (serv) => num_threads(ns, s, serv);\\n    let run_script = (serv) => ns.exec(s, serv, nthread(serv), host);\\n    if (action === hgw.action.HACK) {\\n        has_ram_to_run_script = (obj) => can_run_script(ns, s, obj.host);\\n        run_script = (obj) => ns.exec(s, obj.host, obj.thread, host);\\n    }\\n    const pid = botnet.filter(has_ram_to_run_script).map(run_script);\\n    if (pid.length === 0) {\\n        return;\\n    }\\n    await ns.sleep(time);\\n    while (!is_action_done(ns, pid)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * The HGW script to use for a given HGW action.\\n *\\n * @param action The action we want to perform against a target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Steal money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n * @return The HGW script corresponding to the given action.\\n */\\nexport function hgw_script(action) {\\n    switch (action) {\\n        case hgw.action.GROW:\\n            return hgw.script.GROW;\\n        case hgw.action.HACK:\\n            return hgw.script.HACK;\\n        case hgw.action.WEAKEN:\\n            return hgw.script.WEAKEN;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * The amount of time in milliseconds we must wait for an HGW action to\\n * complete.\\n *\\n * @param ns The Netscript API.\\n * @param host Perform an HGW action against this server.\\n * @param action The action we want to perform against the given target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Steal money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n * @return The amount of time required for the given action to complete on the\\n *     target server.\\n */\\nexport function hgw_wait_time(ns, host, action) {\\n    switch (action) {\\n        case hgw.action.GROW:\\n            return ns.getGrowTime(host);\\n        case hgw.action.HACK:\\n            return ns.getHackTime(host);\\n        case hgw.action.WEAKEN:\\n            return ns.getWeakenTime(host);\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Whether an HGW action is completed.\\n *\\n * @param ns The Netscript API.\\n * @param pid An array of PIDs.\\n * @return True if all processes having the given PIDs are done;\\n *     false otherwise.\\n */\\nfunction is_action_done(ns, pid) {\\n    assert(pid.length > 0);\\n    const is_done = (i) => !ns.isRunning(i);\\n    return pid.every(is_done);\\n}\\n\\n/**\\n * Gain root access to as many world servers as we can.\\n *\\n * @param ns The Netscript API.\\n * @return An array of hostnames of servers.  We have root access to each\\n *     server.\\n */\\nexport function nuke_servers(ns) {\\n    return network(ns).filter((host) => gain_admin_access(ns, host));\\n}\\n\\n/**\\n * Prepare a server for hacking.  We use the following strategy.\\n *\\n * (1) Grow\\n * (2) Weaken\\n *\\n * Apply the above strategy in a loop.  Repeat until the target server has\\n * minimum security level and maximum money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nexport async function prep_gw(ns, host) {\\n    for (;;) {\\n        const botnet = assemble_botnet(ns, host, 0, bool.IS_PREP);\\n        if (!has_max_money(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.GROW);\\n        }\\n        if (!has_min_security(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.WEAKEN);\\n        }\\n        if (has_min_security(ns, host) && has_max_money(ns, host)) {\\n            return;\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Prepare a server for hacking.  Grow a server to maximum money, then weaken\\n * the server to minimum security level.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nexport async function prep_mgw(ns, host) {\\n    while (!has_max_money(ns, host)) {\\n        const botnet = assemble_botnet(ns, host, 0, bool.IS_PREP);\\n        await hgw_action(ns, host, botnet, hgw.action.GROW);\\n        await ns.sleep(0);\\n    }\\n    while (!has_min_security(ns, host)) {\\n        const botnet = assemble_botnet(ns, host, 0, bool.IS_PREP);\\n        await hgw_action(ns, host, botnet, hgw.action.WEAKEN);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Prepare a server for hacking.  Weaken a server to its minimum security level,\\n * then apply the strategy gw.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nexport async function prep_mwg(ns, host) {\\n    while (!has_min_security(ns, host)) {\\n        const botnet = assemble_botnet(ns, host, 0, bool.IS_PREP);\\n        await hgw_action(ns, host, botnet, hgw.action.WEAKEN);\\n        await ns.sleep(0);\\n    }\\n    await prep_gw(ns, host);\\n}\\n\\n/**\\n * Prepare a server for hacking.  We use the following strategy.\\n *\\n * (1) Weaken\\n * (2) Grow\\n *\\n * Apply the above strategy in a loop.  Repeat until the target server has\\n * minimum security and maximum money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nexport async function prep_wg(ns, host) {\\n    for (;;) {\\n        const botnet = assemble_botnet(ns, host, 0, bool.IS_PREP);\\n        if (!has_min_security(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.WEAKEN);\\n        }\\n        if (!has_max_money(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.GROW);\\n        }\\n        if (has_min_security(ns, host) && has_max_money(ns, host)) {\\n            return;\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * The amount of money to steal from a server.  We should refrain from emptying\\n * a server of all of its money.  Instead, our objective should be to steal a\\n * fraction of a server's money.\\n *\\n * @param ns The Netscript API.\\n * @param host Steal money from this server.\\n * @param frac The fraction of money to steal.\\n * @return The amount of money to steal from the given server.\\n */\\nexport function target_money(ns, host, frac) {\\n    return Math.floor(frac * ns.getServer(host).moneyMax);\\n}\\n\\n/**\\n * The number of threads to use on a given server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a server.\\n * @param current The current total number of threads.\\n * @param max The overall maximum number of threads we should use.\\n * @return The number of threads to use on the given server to run our hack\\n *     script.\\n */\\nfunction threads_to_use(ns, host, current, max) {\\n    assert(current >= 0);\\n    assert(max > 0);\\n    const k = num_threads(ns, hgw.script.HACK, host);\\n    if (current + k <= max) {\\n        return k;\\n    }\\n    assert(current + k > max);\\n    const j = max - current;\\n    assert(j > 0 && j < k);\\n    assert(current + j <= max);\\n    return j;\\n}\\n\",\"filename\":\"/quack/lib/hgw.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n// Miscellaneous functions for input/output.\\n\\n/**\\n * Create a text file.  We typically use a text file to communicate with various\\n * scripts.\\n *\\n * @param ns The Netscript API.\\n * @param fname Full path of the file name.\\n * @param data Write this data to the text file.\\n */\\nexport function create_file(ns, fname, data) {\\n    assert(fname !== \\\"\\\");\\n    assert(data !== \\\"\\\");\\n    ns.write(fname, data, io.WRITE);\\n}\\n\\n/**\\n * Print a log to the terminal.\\n *\\n * @param ns The Netscript API.\\n * @param msg Print this message to the terminal.\\n * @param clr Use this colour to print the given message.  Must be a string\\n *     representation of a Unicode escape sequence.  Default is empty string,\\n *     which means we use the default colour theme of the terminal.\\n */\\nexport function log(ns, msg, clr = \\\"\\\") {\\n    const date = new Date(Date.now()).toISOString();\\n    const suffix = clr !== \\\"\\\" ? colour.RESET : \\\"\\\";\\n    ns.tprintf(`[${date}] ${clr}${ns.getScriptName()}: ${msg}${suffix}`);\\n}\\n\\n/**\\n * Convert a RAM amount in the game to a value suitable for display in the\\n * terminal.\\n *\\n * @param ns The Netscript API.\\n * @param n An amount of RAM as returned by a function in the game.\\n * @return An amount of RAM suitable to be displayed in the terminal.\\n */\\nexport function format_ram(ns, n) {\\n    assert(n > 0);\\n    const byte_factor = 1e9;\\n    return ns.nFormat(n * byte_factor, \\\"0.00b\\\");\\n}\\n\",\"filename\":\"/quack/lib/io.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/**\\n * A class to hold information about money.\\n */\\nexport class Money {\\n    /**\\n     * The value for one million.\\n     */\\n    #million;\\n\\n    /**\\n     * Initialize a money object.\\n     */\\n    constructor() {\\n        this.#million = 1e6;\\n    }\\n\\n    /**\\n     * One billion, i.e. 10^9.\\n     */\\n    billion() {\\n        return 1000 * this.million();\\n    }\\n\\n    /**\\n     * One million, i.e. 10^6.\\n     */\\n    million() {\\n        return this.#million;\\n    }\\n\\n    /**\\n     * One quadrillion, i.e. 10^15.\\n     */\\n    quadrillion() {\\n        return 1000 * this.trillion();\\n    }\\n\\n    /**\\n     * One trillion, i.e. 10^12.\\n     */\\n    trillion() {\\n        return 1000 * this.billion();\\n    }\\n}\\n\",\"filename\":\"/quack/lib/money.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A class and various utility functions related to network.\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assert, filter_pserv } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A combinatorial graph, commonly referred to as a graph.\\n */\\nexport class Graph {\\n    /**\\n     * The adjacency map.  Each key is a vertex or node of the graph.  Each\\n     * value is an array of vertices to which the key is adjacent.  For\\n     * example, given a node i, adj[i] is an array such that each node in the\\n     * array is a neighbour of i.\\n     */\\n    #adj;\\n\\n    /**\\n     * A boolean signifying whether each edge is directed or undirected.\\n     */\\n    #directed;\\n\\n    /**\\n     * A graph object.\\n     *\\n     * @param directed A boolean indicating whether each edge of the graph is\\n     *     directed or undirected.  If true, then each edge is directed.  If\\n     *     false, then each edge is undirected.\\n     */\\n    constructor(directed) {\\n        this.#adj = new Map();\\n        this.#directed = false;\\n        if (directed) {\\n            this.#directed = true;\\n        }\\n    }\\n\\n    /**\\n     * Add an edge to this graph.\\n     *\\n     * @param u, v An edge between vertices u and v.\\n     * @return true if the edge was successfully added to the graph;\\n     *     false otherwise or the edge is already in the graph.\\n     */\\n    add_edge(u, v) {\\n        // Already have the edge.\\n        if (this.has_edge(u, v)) {\\n            return bool.FAILURE;\\n        }\\n        // First, add the nodes if we don't have them already.\\n        if (!this.has_node(u)) {\\n            assert(this.add_node(u));\\n        }\\n        if (!this.has_node(v)) {\\n            assert(this.add_node(v));\\n        }\\n        // Now insert the edge (u, v).\\n        // If the graph is directed, only need to add the edge (u, v).\\n        // If the graph is undirected, also must add the edge (v, u).\\n        const u_neighbour = this.neighbour(u);\\n        u_neighbour.push(v);\\n        this.#adj.set(u, u_neighbour);\\n        // Undirected graph.\\n        if (!this.#directed) {\\n            const v_neighbour = this.neighbour(v);\\n            v_neighbour.push(u);\\n            this.#adj.set(v, v_neighbour);\\n        }\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * Add a vertex to this graph.\\n     *\\n     * @param v Add this node.\\n     * @return true if the given node was successfully added;\\n     *     false otherwise or the node already exists in the graph.\\n     */\\n    add_node(v) {\\n        if (this.has_node(v)) {\\n            return bool.FAILURE;\\n        }\\n        this.#adj.set(v, []);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * Use Dijkstra's algorithm to determine a shortest path from a given\\n     * node to all nodes in a graph.\\n     *\\n     * @param source The source vertex.  All shortest paths must start\\n     *     from this node.\\n     * @return These two data structures:\\n     *     (1) A map of the shortest number of nodes in a path to a target\\n     *         node.  Each path starts from the given source node.  For\\n     *         example, the map element A[i] means the shortest number of nodes\\n     *         in a path to node i.\\n     *     (2) A map of the node preceding a given node, in a shortest path.\\n     *         For example, the map element M[i] gives a node that directly\\n     *         connects to node i, where M[i] and i are nodes in a shortest\\n     *         path.\\n     */\\n    #dijkstra(source) {\\n        // The implementation is the same for both directed and undirected\\n        // graphs.\\n        // A map of the shortest number of nodes in a path to a target node.\\n        const dist = new Map();\\n        // A map of the node preceding a given node.\\n        const prev = new Map();\\n        // A queue of nodes to visit.\\n        let queue = [];\\n        // Initialization.\\n        for (const v of this.nodes()) {\\n            dist.set(v, Infinity);\\n            prev.set(v, undefined);\\n            queue.push(v);\\n        }\\n        // The distance from the source node to itself is zero.\\n        dist.set(source, 0);\\n        prev.set(source, undefined);\\n        queue.push(source);\\n        // Search for shortest paths from the source node to other nodes.  This\\n        // is an unweighted graph so the weight between a node and any of its\\n        // neighbours is 1.\\n        const weight = 1;\\n        while (queue.length > 0) {\\n            const u = this.#minimumq(queue, dist);\\n            queue = queue.filter((s) => s !== u);\\n            // Consider the neighbours of u.  Each neighbour must still be in\\n            // the queue.\\n            let neighbour = Array.from(this.neighbour(u));\\n            // eslint-disable-next-line no-loop-func\\n            neighbour = neighbour.filter((s) => queue.includes(s));\\n            for (const v of neighbour) {\\n                const alt = dist.get(u) + weight;\\n                // We have found a shorter path to v.\\n                if (alt < dist.get(v)) {\\n                    dist.set(v, alt);\\n                    prev.set(v, u);\\n                }\\n            }\\n        }\\n        return [dist, prev];\\n    }\\n\\n    /**\\n     * All edges of this graph, as an array of arrays.\\n     */\\n    edges() {\\n        // Directed graph.\\n        if (this.#directed) {\\n            const edge = [];\\n            this.nodes().forEach((u) => {\\n                this.neighbour(u).forEach((v) => edge.push([u, v]));\\n            });\\n            return edge;\\n        }\\n        // Undirected graph.\\n        assert(!this.#directed);\\n        const edge = new Set();\\n        for (const u of this.nodes()) {\\n            for (const v of this.neighbour(u)) {\\n                // Assume nodes to be comparable, i.e. we can compare the node\\n                // values.  If each node is an integer, the nodes are\\n                // comparable because there is an ordering of numbers.  If each\\n                // node is a string of alphabetic characters, the nodes are\\n                // also comparable because we can use lexicographic ordering.\\n                if (u > v) {\\n                    continue;\\n                }\\n                assert(!edge.has([u, v]));\\n                edge.add([u, v]);\\n            }\\n        }\\n        return [...edge];\\n    }\\n\\n    /**\\n     * Whether the graph has the given edge.\\n     *\\n     * @param u, v Check the graph for this edge.\\n     * @return true if the graph has the edge (u, v); false otherwise.\\n     */\\n    has_edge(u, v) {\\n        if (!this.has_node(u)) {\\n            return bool.NOT;\\n        }\\n        if (!this.has_node(v)) {\\n            return bool.NOT;\\n        }\\n        // Directed graph.\\n        if (this.#directed) {\\n            const neighbour = this.neighbour(u);\\n            return neighbour.includes(v);\\n        }\\n        // Undirected graph.\\n        assert(!this.#directed);\\n        const u_neighbour = this.neighbour(u);\\n        const v_neighbour = this.neighbour(v);\\n        if (u_neighbour.includes(v)) {\\n            assert(v_neighbour.includes(u));\\n            return bool.HAS;\\n        }\\n        return bool.NOT;\\n    }\\n\\n    /**\\n     * Whether the graph has the given vertex.\\n     *\\n     * @param v Check for the presence or absence of this vertex.\\n     * @return true if the graph already has the vertex; false otherwise.\\n     */\\n    has_node(v) {\\n        return this.#adj.has(v);\\n    }\\n\\n    /**\\n     * Choose the node i with minimum dist[i].  This is a simple\\n     * implementation.  For better performance, the queue should be implemented\\n     * as a minimum priority queue.\\n     *\\n     * @param queue An array of nodes to visit.\\n     * @param dist A map of the shortest number of nodes in a path to\\n     *     a target node.\\n     * @return The node i such that dist[i] is minimal.\\n     */\\n    // eslint-disable-next-line class-methods-use-this\\n    #minimumq(queue, dist) {\\n        assert(queue.length > 0);\\n        assert(dist.size > 0);\\n        let node = queue[0];\\n        for (const v of queue) {\\n            if (dist.get(v) < dist.get(node)) {\\n                node = v;\\n            }\\n        }\\n        return node;\\n    }\\n\\n    /**\\n     * The neighbours of a vertex.\\n     *\\n     * @param v A node of this graph.\\n     * @return An array representing the neighbours of the given node.\\n     */\\n    neighbour(v) {\\n        assert(this.has_node(v));\\n        return this.#adj.get(v);\\n    }\\n\\n    /**\\n     * All nodes of this graph, as an array.\\n     */\\n    nodes() {\\n        const vertex = [...this.#adj.keys()];\\n        vertex.sort();\\n        return vertex;\\n    }\\n\\n    /**\\n     * Determine a shortest path from the source to the target.\\n     *\\n     * @param source Start our path from this node.\\n     * @param target We want to reach this node.\\n     * @return An array representing a shortest path from source to target.\\n     *     An empty array if the target is not reachable from the source.\\n     */\\n    shortest_path(source, target) {\\n        // The implementation is the same for directed and undirected graphs.\\n        assert(this.has_node(source));\\n        assert(this.has_node(target));\\n        const [dist, prev] = this.#dijkstra(source);\\n        // Ensure the target is reachable from the source node.\\n        if (!dist.has(target)) {\\n            return [];\\n        }\\n        const stack = [];\\n        let u = target;\\n        // Start from the target and work backward to find a shortest path from\\n        // the source to the target.\\n        while (prev.get(u) !== undefined) {\\n            stack.push(u);\\n            u = prev.get(u);\\n        }\\n        // Target is not reachable from the source node.\\n        if (stack.length === 0) {\\n            return [];\\n        }\\n        // Reconstruct the full path from source to target.\\n        assert(stack.length > 0);\\n        stack.push(source);\\n        stack.reverse();\\n        return stack;\\n    }\\n}\\n\\n/**\\n * Scan the network of servers in the game world.  Each server must be\\n * reachable from our home server.  We do not include purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return An array of servers that can be reached from home.  Purchased\\n *     servers are excluded.\\n */\\nexport function network(ns) {\\n    const q = [home];\\n    const visit = new Set([home]);\\n    while (q.length > 0) {\\n        const u = q.shift();\\n        ns.scan(u)\\n            .filter((v) => !visit.has(v))\\n            .forEach((x) => {\\n                visit.add(x);\\n                q.push(x);\\n            });\\n    }\\n    visit.delete(home);\\n    return filter_pserv(ns, [...visit]);\\n}\\n\\n/**\\n * Determine a shortest path from the source server to the target server\\n * in the network of world servers.\\n *\\n * @param ns The Netscript API.\\n * @param source Start our path from this server.\\n * @param target We want to reach this server.\\n * @return An array of shortest path from source to target.  An\\n *     empty array if the target is not reachable from the source.\\n */\\nexport function shortest_path(ns, source, target) {\\n    // Represent the network of world servers as an undirected graph.\\n    const stack = [];\\n    const visit = new Set();\\n    stack.push(source);\\n    const graph = new Graph(bool.UNDIRECTED);\\n    // Use breath-first search to navigate the network.\\n    while (stack.length > 0) {\\n        const s = stack.pop();\\n        // Have we visited the server s yet?\\n        if (visit.has(s)) {\\n            continue;\\n        }\\n        visit.add(s);\\n        // All neighbours of s, excluding the purchased servers.\\n        const neighbour = [...filter_pserv(ns, ns.scan(s))];\\n        stack.push(...neighbour);\\n        for (const t of neighbour) {\\n            // Have we visited the server t yet?\\n            if (visit.has(t)) {\\n                continue;\\n            }\\n            assert(graph.add_edge(s, t));\\n        }\\n    }\\n    // A shortest path from source to target.\\n    return graph.shortest_path(source, target);\\n}\\n\",\"filename\":\"/quack/lib/network.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { hgw } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport {\\n    has_max_money,\\n    has_min_security,\\n    hgw_script,\\n    hgw_wait_time,\\n    target_money,\\n} from \\\"/quack/lib/hgw.js\\\";\\nimport { assert, can_run_script, num_threads } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A purchased server that uses a proto-batcher.\\n */\\nexport class PservHGW {\\n    /**\\n     * Hostname of a purchased server.\\n     */\\n    #phost;\\n\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * Create an object to represent a purchased server that uses a\\n     * proto-batcher.\\n     *\\n     * @param ns The Netscript API.\\n     * @param host Hostname of a purchased server.\\n     */\\n    constructor(ns, host) {\\n        this.#ns = ns;\\n        this.#phost = host;\\n    }\\n\\n    /**\\n     * Perform an HGW action against a target server.\\n     *\\n     * @param host Perform an HGW action against this server.  Cannot be our\\n     *     home server.\\n     * @param action The action we want to perform against the given target\\n     *     server.  Supported actions are:\\n     *     (1) \\\"grow\\\" := Grow money on the target server.\\n     *     (2) \\\"weaken\\\" := Weaken the security level of the target server.\\n     */\\n    async hgw_action(host, action) {\\n        assert(host !== \\\"\\\");\\n        assert(host !== home);\\n        const time = hgw_wait_time(this.#ns, host, action);\\n        const s = hgw_script(action);\\n        assert(can_run_script(this.#ns, s, this.#phost));\\n        const nthread = () => num_threads(this.#ns, s, this.#phost);\\n        const run_script = () => this.#ns.exec(s, this.#phost, nthread(), host);\\n        const pid = run_script();\\n        await this.#ns.sleep(time);\\n        const is_action_done = () => !this.#ns.isRunning(pid);\\n        while (!is_action_done()) {\\n            await this.#ns.sleep(wait_t.SECOND);\\n        }\\n    }\\n\\n    /**\\n     * Perform the hack HGW action against a target server.\\n     *\\n     * @param host Hack this server.  Cannot be our home server.\\n     * @param frac The fraction of money to steal.  Must be positive and at\\n     *     most 1.\\n     */\\n    async hgw_hack(host, frac) {\\n        assert(host !== \\\"\\\");\\n        assert(host !== home);\\n        assert(frac > 0 && frac <= 1);\\n\\n        // max_threads := The number of threads to use to hack the target server\\n        //     in order to steal the given fraction of money.\\n        // max_server_threads := The maximum number of threads the purchased\\n        //     server allows us to run the hack script.\\n        const money = target_money(this.#ns, host, frac);\\n        const max_threads = Math.floor(\\n            this.#ns.hackAnalyzeThreads(host, money)\\n        );\\n        const time = hgw_wait_time(this.#ns, host, hgw.action.HACK);\\n        const s = hgw_script(hgw.action.HACK);\\n        assert(can_run_script(this.#ns, s, this.#phost));\\n        const max_server_threads = num_threads(this.#ns, s, this.#phost);\\n        let nthread = max_threads;\\n        if (max_threads > max_server_threads) {\\n            nthread = max_server_threads;\\n        }\\n\\n        const run_script = () => this.#ns.exec(s, this.#phost, nthread, host);\\n        const pid = run_script();\\n        await this.#ns.sleep(time);\\n        const is_action_done = () => !this.#ns.isRunning(pid);\\n        while (!is_action_done()) {\\n            await this.#ns.sleep(wait_t.SECOND);\\n        }\\n    }\\n\\n    /**\\n     * Prepare a world server for hacking.  We use the following strategy.\\n     *\\n     * (1) Grow\\n     * (2) Weaken\\n     *\\n     * Apply the above strategy in a loop.  Repeat until the target server has\\n     * minimum security level and maximum money.\\n     *\\n     * @param host Prep this world server.\\n     */\\n    async prep_gw(host) {\\n        for (;;) {\\n            if (!has_max_money(this.#ns, host)) {\\n                await this.hgw_action(host, hgw.action.GROW);\\n            }\\n            if (!has_min_security(this.#ns, host)) {\\n                await this.hgw_action(host, hgw.action.WEAKEN);\\n            }\\n            if (\\n                has_min_security(this.#ns, host)\\n                && has_max_money(this.#ns, host)\\n            ) {\\n                return;\\n            }\\n            await this.#ns.sleep(0);\\n        }\\n    }\\n\\n    /**\\n     * Copy our HGW scripts over to a purchased server.\\n     */\\n    scp_scripts() {\\n        const file = [hgw.script.GROW, hgw.script.HACK, hgw.script.WEAKEN];\\n        this.#ns.scp(file, this.#phost, home);\\n    }\\n}\\n\",\"filename\":\"/quack/lib/pbatch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { program } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { script } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A class that holds all information about a player.\\n */\\nexport class Player {\\n    /**\\n     * The name of the home server of this player.\\n     */\\n    #home;\\n\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * Programs that allow a player to open ports on a world server.\\n     * These are port openers.\\n     */\\n    #port_opener;\\n\\n    /**\\n     * Programs necessary for visiting the network of world servers.\\n     * These are usually network programs.\\n     */\\n    #program;\\n\\n    /**\\n     * The hack script of the player.  Assumed to be located on the player's\\n     * home server.\\n     */\\n    #script;\\n\\n    /**\\n     * Initialize a Player object.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#home = home;\\n        this.#ns = ns;\\n        this.#port_opener = Array.from(program);\\n        this.#program = [\\\"DeepscanV1.exe\\\", \\\"DeepscanV2.exe\\\", \\\"NUKE.exe\\\"];\\n        this.#script = script;\\n    }\\n\\n    /**\\n     * The player's agility level.\\n     */\\n    agility() {\\n        return this.#ns.getPlayer().skills.agility;\\n    }\\n\\n    /**\\n     * The BitNode in which the player currently inhabits.\\n     */\\n    bitnode() {\\n        return this.#ns.getPlayer().bitNodeN;\\n    }\\n\\n    /**\\n     * The player's current Charisma level.\\n     */\\n    charisma() {\\n        return this.#ns.getPlayer().skills.charisma;\\n    }\\n\\n    /**\\n     * The current city where the player is located.\\n     */\\n    city() {\\n        return this.#ns.getPlayer().city;\\n    }\\n\\n    /**\\n     * The player's defense level.\\n     */\\n    defense() {\\n        return this.#ns.getPlayer().skills.defense;\\n    }\\n\\n    /**\\n     * The player's dexterity level.\\n     */\\n    dexterity() {\\n        return this.#ns.getPlayer().skills.dexterity;\\n    }\\n\\n    /**\\n     * An array of all factions to which the player is a member.\\n     */\\n    faction() {\\n        return this.#ns.getPlayer().factions;\\n    }\\n\\n    /**\\n     * The current Hack stat of the player.\\n     */\\n    hacking_skill() {\\n        return this.#ns.getHackingLevel();\\n    }\\n\\n    /**\\n     * Whether the player has all programs to open all ports on any world\\n     * server.\\n     *\\n     * @return true if the player can open all ports on another server;\\n     *     false otherwise.\\n     */\\n    has_all_port_openers() {\\n        return this.num_ports() === this.#port_opener.length;\\n    }\\n\\n    /**\\n     * Whether the player has all programs to visit all world servers and open\\n     * all ports on any world server.\\n     *\\n     * @return true if the player has all network programs and port openers;\\n     *     false otherwise.\\n     */\\n    has_all_programs() {\\n        const prog = Array.from(this.#port_opener).concat(this.#program);\\n        assert(prog.length > 0);\\n        for (const p of prog) {\\n            if (!this.has_program(p)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * Whether we have a given program.\\n     *\\n     * @param p A program we want to check.\\n     */\\n    has_program(p) {\\n        return this.#ns.fileExists(p, this.home());\\n    }\\n\\n    /**\\n     * Whether we have purchased the TOR router.\\n     *\\n     * @return true if we have purchased the TOR router; false otherwise.\\n     */\\n    has_tor() {\\n        return this.#ns.hasTorRouter();\\n    }\\n\\n    /**\\n     * The home server of the player.\\n     */\\n    home() {\\n        return this.#home;\\n    }\\n\\n    /**\\n     * Whether the player is working for a company.\\n     *\\n     * @param company A string representing the name of a company.\\n     * @return true if the player is working for the given company;\\n     *     false otherwise.\\n     */\\n    is_employer(company) {\\n        assert(company.length > 0);\\n        const employer = new Set(Object.keys(this.#ns.getPlayer().jobs));\\n        return employer.has(company);\\n    }\\n\\n    /**\\n     * Whether the player is a member of a faction.\\n     *\\n     * @param fac A string representing the name of a faction.\\n     * @return true if the player belongs to the given faction; false otherwise.\\n     */\\n    is_member(fac) {\\n        assert(fac !== \\\"\\\");\\n        return this.#ns.getPlayer().factions.includes(fac);\\n    }\\n\\n    /**\\n     * The position the player holds at a given company.\\n     *\\n     * @param company The name of a company.\\n     * @return The position the player currently holds at the given company.\\n     *     Return an empty string if the player does not hold any position at\\n     *     the given company.\\n     */\\n    job(company) {\\n        assert(company.length > 0);\\n        const stat = this.#ns.getPlayer();\\n        if (stat.jobs[company] === undefined) {\\n            return \\\"\\\";\\n        }\\n        return stat.jobs[company];\\n    }\\n\\n    /**\\n     * The player's karma.  This is an Easter egg, buried in the source code\\n     * of the game.  Refer to this file:\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/NetscriptFunctions/Extra.ts\\n     */\\n    karma() {\\n        return this.#ns.heart.break();\\n    }\\n\\n    /**\\n     * The amount of money available to this player.\\n     */\\n    money() {\\n        return this.#ns.getServerMoneyAvailable(this.home());\\n    }\\n\\n    /**\\n     * The number of people the player has killed.\\n     */\\n    nkill() {\\n        return this.#ns.getPlayer().numPeopleKilled;\\n    }\\n\\n    /**\\n     * Determine the number of ports a player can currently open on servers in\\n     * the game world.  This depends on whether the player has the necessary\\n     * hacking programs on the home server.\\n     */\\n    num_ports() {\\n        // These are programs that can be created after satisfying certain\\n        // conditions.\\n        let prog = Array.from(this.#port_opener);\\n        // Determine the number of ports we can open on other servers.\\n        prog = prog.filter((p) => this.#ns.fileExists(p, this.home()));\\n        return prog.length;\\n    }\\n\\n    /**\\n     * All purchased servers of this player.\\n     */\\n    pserv() {\\n        return this.#ns.getPurchasedServers();\\n    }\\n\\n    /**\\n     * The name of the hacking script of the player.\\n     */\\n    script() {\\n        return this.#script;\\n    }\\n\\n    /**\\n     * The player's strength level.\\n     */\\n    strength() {\\n        return this.#ns.getPlayer().skills.strength;\\n    }\\n}\\n\",\"filename\":\"/quack/lib/player.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { script } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { pserv } from \\\"/quack/lib/constant/pserv.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A class that holds information specific to purchased servers.\\n */\\nexport class PurchasedServer {\\n    /**\\n     * The player's home server.\\n     */\\n    #home;\\n\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * The player's main hacking script.\\n     */\\n    #script;\\n\\n    /**\\n     * Possible amount of RAM (GB) for a purchased server.\\n     */\\n    #valid_ram;\\n\\n    /**\\n     * Create an object to represent a purchased server.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#home = home;\\n        this.#ns = ns;\\n        this.#script = script;\\n        this.#valid_ram = Array.from(pserv.RAM);\\n    }\\n\\n    /**\\n     * The cost of buying a server with the given amount of RAM (GB).\\n     *\\n     * @param ram The amount of RAM (GB) to buy with this purchased server.\\n     *     RAM is assumed to be given as a power of 2.\\n     */\\n    cost(ram) {\\n        assert(this.is_valid_ram(ram));\\n        return this.#ns.getPurchasedServerCost(ram);\\n    }\\n\\n    /**\\n     * Choose the default amount of RAM (in GB) for a new purchased server.\\n     * The chosen amount of RAM should allow the purchased server to run our\\n     * hacking script using at least 2 threads.\\n     */\\n    default_ram() {\\n        const script_ram = this.#ns.getScriptRam(this.#script, this.#home);\\n        let i = 0;\\n        while (script_ram > this.#valid_ram[i]) {\\n            i++;\\n        }\\n        assert(i + 1 <= this.#valid_ram.length);\\n        return this.#valid_ram[i + 1];\\n    }\\n\\n    /**\\n     * Whether the given amount of RAM (GB) is valid for a purchased server.\\n     *\\n     * @param ram The amount of RAM in GB.  Must be a power of 2.  Lowest is\\n     *     2GB.  Will round down to the nearest whole number.\\n     * @return true if the given amount of RAM is valid for a purchased server;\\n     *     false otherwise.\\n     */\\n    is_valid_ram(ram) {\\n        const n = Math.floor(ram);\\n        return this.#valid_ram.includes(n);\\n    }\\n\\n    /**\\n     * Delete all purchased servers.  This would also kill all scripts running\\n     * on each purchased server.\\n     */\\n    kill_all() {\\n        for (const server of this.#ns.getPurchasedServers()) {\\n            // Kill all scripts running on a purchased server.\\n            this.#ns.killall(server);\\n            // Delete the purchased server.\\n            this.#ns.deleteServer(server);\\n        }\\n    }\\n\\n    /**\\n     * The maximum number of purchased servers that can be bought.\\n     */\\n    limit() {\\n        return this.#ns.getPurchasedServerLimit();\\n    }\\n\\n    /**\\n     * Purchase a new server with the given hostname and amount of RAM (GB).\\n     *\\n     * @param hostname The hostname of the new purchased server.  If a player\\n     *     already has a purchased server with the given hostname, append a\\n     *     numeric value to the hostname.\\n     * @param ram The amount of RAM (GB) of the purchased server.\\n     * @return The hostname of the newly purchased server.\\n     */\\n    purchase(hostname, ram) {\\n        return this.#ns.purchaseServer(hostname, ram);\\n    }\\n\\n    /**\\n     * The possible amount of RAM a purchased server can have.  According to\\n     * this page\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.ns.getpurchasedservercost.md\\n     *\\n     * the highest amount of RAM for a purchased server is 1048576.\\n     */\\n    valid_ram() {\\n        return this.#valid_ram;\\n    }\\n}\\n\",\"filename\":\"/quack/lib/pserv.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":733,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions relating to random number generations.\\n\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A random integer between a minimum a and a maximum b, inclusive.  Code is\\n * adapted from\\n *\\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\\n *\\n * @param a The minimum integer value.\\n * @param b The maximum integer value.\\n * @return A random integer in the range [a, b], inclusive.  The returned\\n *     integer can be the given minimum or the given maximum.\\n */\\nexport function random_integer(a, b) {\\n    const min = Math.ceil(a);\\n    const max = Math.floor(b);\\n    const n = Math.floor(Math.random() * (max - min + 1) + min);\\n    assert(a <= n);\\n    assert(n <= b);\\n    return n;\\n}\\n\",\"filename\":\"/quack/lib/random.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { script } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home, home_t } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A server class that holds all information about a server, whether it be\\n * a purchased server or a server found on the network in the game world.\\n */\\nexport class Server {\\n    /**\\n     * The amount of Hack stat required to hack this server.\\n     */\\n    #hacking_skill;\\n\\n    /**\\n     * The player's home server.\\n     */\\n    #home;\\n\\n    /**\\n     * The hostname of this server.\\n     */\\n    #hostname;\\n\\n    /**\\n     * The maximum amount of money this server can hold.\\n     */\\n    #money_max;\\n\\n    /**\\n     * How many ports must be opened on this server in order to run\\n     * NUKE.exe on it.\\n     */\\n    #n_ports_required;\\n\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * Reserve this amount of RAM.  We want the server to always have at least\\n     * this amount of RAM available.  The reserve RAM is important especially\\n     * if this is the player's home server.  We want to have a minimum amount\\n     * of RAM on the home server for various purposes.\\n     */\\n    #ram_reserve;\\n\\n    /**\\n     * The player's main hacking script.\\n     */\\n    #script;\\n\\n    /**\\n     * The minimum security level to which this server can be weakened.\\n     */\\n    #security_min;\\n\\n    /**\\n     * Create a server object with the given hostname.\\n     *\\n     * @param ns The Netscript API.\\n     * @param hostname The hostname of a server.  The server must exist in the\\n     *     game world and can be either a purchased server or a server found on\\n     *     the network in the game world.\\n     */\\n    constructor(ns, hostname) {\\n        assert(hostname.length > 0);\\n        const server = ns.getServer(hostname);\\n        this.#hacking_skill = server.requiredHackingSkill;\\n        this.#home = home;\\n        this.#hostname = server.hostname;\\n        this.#money_max = server.moneyMax;\\n        this.#n_ports_required = server.numOpenPortsRequired;\\n        this.#ns = ns;\\n        this.#script = script;\\n        this.#security_min = server.minDifficulty;\\n        // By default, we do not reserve any RAM.  However, if this is the\\n        // player's home server, then reserve some RAM.\\n        this.#ram_reserve = 0;\\n        if (this.is_home()) {\\n            // Reserve an amount of RAM, depending on the maximum RAM on the\\n            // home server.\\n            this.#ram_reserve = this.#reserve_ram();\\n        }\\n    }\\n\\n    /**\\n     * How much RAM (in GB) is available on this server.\\n     */\\n    available_ram() {\\n        return this.ram_max() - this.#ns.getServerUsedRam(this.hostname());\\n    }\\n\\n    /**\\n     * Whether the server has enough RAM to run a given script, using at\\n     * least one thread.  We ignore any amount of RAM that has been reserved,\\n     * using all available RAM to help us make a decision.\\n     *\\n     * @param s We want to run this script on this server.\\n     * @return true if the given script can be run on this server;\\n     *     false otherwise.\\n     */\\n    can_run_script(s) {\\n        const script_ram = this.#ns.getScriptRam(s, this.#home);\\n        const server_ram = this.available_ram();\\n        if (server_ram < 1) {\\n            return bool.NOT_RUN;\\n        }\\n        const nthread = Math.floor(server_ram / script_ram);\\n        if (nthread < 1) {\\n            return bool.NOT_RUN;\\n        }\\n        return bool.CAN_RUN;\\n    }\\n\\n    /**\\n     * The number of CPU Cores on this server.\\n     */\\n    cores() {\\n        return this.#ns.getServer(this.hostname()).cpuCores;\\n    }\\n\\n    /**\\n     * Copy our hack script over to this server.  Run the hack script on this\\n     * server and use the server to hack the given target.\\n     *\\n     * @param target We run our hack script against this target server.\\n     * @return True if our hack script is running on the server using at least\\n     *     one thread; false otherwise.  The method can return false if, for\\n     *     example, there is no free RAM on the server or we do not have root\\n     *     access on either servers.\\n     */\\n    deploy(target) {\\n        assert(target.length > 0);\\n        const targ = this.#ns.getServer(target);\\n        if (\\n            !this.has_root_access()\\n            || !targ.hasAdminRights\\n            || !this.#ns.fileExists(this.#script, this.#home)\\n        ) {\\n            return bool.FAILURE;\\n        }\\n        // No free RAM on server to run our hack script.\\n        const nthread = this.num_threads(this.#script);\\n        if (nthread < 1) {\\n            return bool.FAILURE;\\n        }\\n        // Copy our script over to this server.  Use the server to hack the\\n        // target.\\n        this.#ns.scp(this.#script, this.hostname(), this.#home);\\n        this.#ns.exec(this.#script, this.hostname(), nthread, targ.hostname);\\n        return bool.SUCCESS;\\n    }\\n\\n    /**\\n     * Try to gain root access on this server.\\n     *\\n     * @return true if the player has root access to this server;\\n     *     false if root access cannot be obtained.\\n     */\\n    gain_root_access() {\\n        // Do we already have root access to this server?\\n        if (this.has_root_access()) {\\n            return true;\\n        }\\n        // Try to open all required ports and nuke the server.\\n        try {\\n            this.#ns.brutessh(this.hostname());\\n        } catch {}\\n        try {\\n            this.#ns.ftpcrack(this.hostname());\\n        } catch {}\\n        try {\\n            this.#ns.httpworm(this.hostname());\\n        } catch {}\\n        try {\\n            this.#ns.relaysmtp(this.hostname());\\n        } catch {}\\n        try {\\n            this.#ns.sqlinject(this.hostname());\\n        } catch {}\\n        try {\\n            this.#ns.nuke(this.hostname());\\n            return true;\\n        } catch {\\n            assert(!this.has_root_access());\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * Increase the amount of money available on this server.\\n     *\\n     */\\n    async grow() {\\n        await this.#ns.grow(this.hostname());\\n    }\\n\\n    /**\\n     * Steal money from this server.\\n     *\\n     */\\n    async hack() {\\n        await this.#ns.hack(this.hostname());\\n    }\\n\\n    /**\\n     * The amount of Hack stat required to hack this server.\\n     */\\n    hacking_skill() {\\n        return this.#hacking_skill;\\n    }\\n\\n    /**\\n     * Whether we have root access to this server.\\n     *\\n     * @return true if we have root access to this server; false otherwise.\\n     */\\n    has_root_access() {\\n        return this.#ns.hasRootAccess(this.hostname());\\n    }\\n\\n    /**\\n     * The hostname of this server.\\n     */\\n    hostname() {\\n        return this.#hostname;\\n    }\\n\\n    /**\\n     * Determine whether the server is bankrupt, i.e. it can't hold any money.\\n     * This is not the same as there being zero money currently on the server.\\n     * The server can have zero money currently available, but we can grow the\\n     * server.  The server is bankrupt if the maximum amount of money it\\n     * can hold is zero.\\n     *\\n     * @return true if the server is bankrupt; false otherwise.\\n     */\\n    is_bankrupt() {\\n        return Math.floor(this.money_max()) === 0;\\n    }\\n\\n    /**\\n     * Whether this is our home server.\\n     *\\n     * @return True if this server is our home server; false otherwise.\\n     */\\n    is_home() {\\n        return this.hostname() === this.#home;\\n    }\\n\\n    /**\\n     * Whether we have purchased this server.\\n     *\\n     * @return True if this is a purchased server; false otherwise.\\n     */\\n    is_pserv() {\\n        return this.#ns.getServer(this.hostname()).purchasedByPlayer;\\n    }\\n\\n    /**\\n     * Whether this server is currently running a script.\\n     *\\n     * @param s Check to see if this script is currently running on the\\n     *     server.\\n     * @return True if the given script is running on the server;\\n     *     false otherwise.\\n     */\\n    is_running_script(s) {\\n        return this.#ns.scriptRunning(s, this.hostname());\\n    }\\n\\n    /**\\n     * The amount of money currently available on the server.\\n     *\\n     */\\n    money_available() {\\n        return this.#ns.getServerMoneyAvailable(this.hostname());\\n    }\\n\\n    /**\\n     * The maximum amount of money this server can hold.\\n     */\\n    money_max() {\\n        return this.#money_max;\\n    }\\n\\n    /**\\n     * The number of ports that must be opened in order to hack this server.\\n     */\\n    num_ports_required() {\\n        return this.#n_ports_required;\\n    }\\n\\n    /**\\n     * Determine how many threads we can run a given script on this server.\\n     * This function takes care not to use all available RAM on the player's\\n     * home server.  If this is the player's home server, the function reserves\\n     * some amount of RAM on the home server and use the remaining available\\n     * RAM to calculate the number of threads to devote to the given script.\\n     *\\n     * @param s We want to run this script on the server.  The script must\\n     *     exist on our home server.\\n     * @return The number of threads that can be used to run the given script\\n     *     on this server.  Return 0 if the amount of RAM to reserve is higher\\n     *     than the available RAM.\\n     */\\n    num_threads(s) {\\n        const script_ram = this.#ns.getScriptRam(s, this.#home);\\n        const server_ram = this.available_ram() - this.#ram_reserve;\\n        if (server_ram < 1) {\\n            return 0;\\n        }\\n        const nthread = Math.floor(server_ram / script_ram);\\n        return nthread;\\n    }\\n\\n    /**\\n     * The maximum amount of RAM (GB) of this server.\\n     */\\n    ram_max() {\\n        return this.#ns.getServer(this.hostname()).maxRam;\\n    }\\n\\n    /**\\n     * Reserve some RAM on the home server.  Use this method when we know we\\n     * have level 3 of \\\"Source-File 4: The Singularity\\\".  Even if we are in\\n     * BN4.1 or BN4.2, the game allows us to use Singularity functions at their\\n     * lowest RAM costs as if we have level 3 of the Source-File.\\n     *\\n     * @return The amount of RAM to reserve.\\n     */\\n    #reserve_ram() {\\n        // if (this.ram_max() >= home_t.RAM_HUGE) {\\n        //     return home_t.reserve.HIGH;\\n        // }\\n        if (this.ram_max() >= home_t.RAM_HIGH) {\\n            return home_t.reserve.HIGH / 2;\\n        }\\n        if (this.ram_max() >= home_t.RAM_HIGH / 2) {\\n            return home_t.reserve.MID;\\n        }\\n        if (this.ram_max() < home_t.reserve.DEFAULT) {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * The current security level of this server.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    security_level() {\\n        return this.#ns.getServerSecurityLevel(this.hostname());\\n    }\\n\\n    /**\\n     * The minimum security level to which this server can be weakened.\\n     */\\n    security_min() {\\n        return this.#security_min;\\n    }\\n\\n    /**\\n     * The number of threads to use for each instance of a script.  We want to\\n     * run various instances of a script, each instance uses a certain number\\n     * of threads.  Given the number of instances to run, we want to know how\\n     * many threads each instance can use.\\n     *\\n     * @param s The script to run on this server.\\n     * @param n We want to run this many instances of the given script.\\n     *     Must be a positive integer.\\n     * @return The number of threads for each instance of the script.\\n     *     Return 0 if we cannot run any scripts on this server.\\n     */\\n    threads_per_instance(s, n) {\\n        const ninstance = Math.floor(n);\\n        assert(ninstance > 0);\\n        return Math.floor(this.num_threads(s) / ninstance);\\n    }\\n\\n    /**\\n     * Weaken the security of this server.\\n     *\\n     */\\n    async weaken() {\\n        await this.#ns.weaken(this.hostname());\\n    }\\n}\\n\",\"filename\":\"/quack/lib/server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to Augmentations.\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { augment } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { work_hack_lvl } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { commit_crime } from \\\"/quack/lib/singularity/crime.js\\\";\\nimport { work } from \\\"/quack/lib/singularity/work.js\\\";\\nimport {\\n    assert,\\n    is_valid_faction,\\n    trade_bot_resume,\\n    trade_bot_stop_buy,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Augmentations we still need to purchase from a faction.  From all\\n * Augmentations that are yet to be purchased, we choose n Augmentations where\\n * one of these has reputation requirement higher than the remaining n - 1.  We\\n * order the Augmentations from least reputation requirement to highest\\n * reputation requirement and make our decision using this ascending list.  For\\n * example, if n = 5 we would be purchasing the first 5 Augmentations that have\\n * the lowest reputation requirements.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to purchase all Augmentations from this faction.\\n * @return An array of Augmentation names.  We do not yet have these\\n *     Augmentations.  This array never includes the NeuroFlux Governor\\n *     Augmentation.  An empty array if there are no Augmentations to buy from\\n *     the given faction.\\n */\\nexport function augment_to_buy(ns, fac) {\\n    assert(is_valid_faction(fac));\\n    // All Augmentations we have not yet purchased from the given faction.\\n    // Exclude the NeuroFlux Governor.\\n    const owned_aug = new Set(\\n        ns.singularity.getOwnedAugmentations(bool.PURCHASED)\\n    );\\n    let fac_aug = ns.singularity.getAugmentationsFromFaction(fac);\\n    fac_aug = fac_aug\\n        .filter((a) => !owned_aug.has(a))\\n        .filter((b) => b !== augment.NFG);\\n    if (fac_aug.length === 0) {\\n        return [];\\n    }\\n    // Choose n Augmentations that have the least reputation requirements.\\n    const tobuy = [];\\n    let i = 0;\\n    while (i < augment.BUY_TAU) {\\n        const aug = lowest_reputation(ns, fac_aug);\\n        tobuy.push(aug);\\n        fac_aug = fac_aug.filter((a) => a !== aug);\\n        if (fac_aug.length === 0) {\\n            break;\\n        }\\n        i++;\\n    }\\n    assert(tobuy.length > 0);\\n    return tobuy;\\n}\\n\\n/**\\n * Augmentations we have purchased and are yet to be installed.\\n *\\n * @param ns The Netscript API.\\n * @return An array of Augmentation names.  These are Augmentations we have\\n *     bought, but we have not yet installed them.  Can be an empty array.\\n */\\nexport function augment_to_install(ns) {\\n    const purchased_aug = ns.singularity.getOwnedAugmentations(bool.PURCHASED);\\n    const installed_aug = owned_augment(ns);\\n    return purchased_aug.filter((a) => !installed_aug.has(a));\\n}\\n\\n/**\\n * Choose the most expensive Augmentation to buy.  Why should we buy the most\\n * expensive Augmentation first?  The answer is simple.  After we have\\n * purchased an Augmentation from a faction, the cost of each remaining\\n * Augmentation is raised by a multiplier.  Had we not purchased the most\\n * expensive Augmentation, its cost would now be much higher than previously.\\n *\\n * @param ns The Netscript API.\\n * @param candidate An array of Augmentation names.  Cannot be an empty array.\\n * @return The name of the most expensive Augmentation from the given array.\\n */\\nexport function choose_augment(ns, candidate) {\\n    assert(candidate.length > 0);\\n    let max = -Infinity;\\n    let aug = \\\"\\\";\\n    for (const a of candidate) {\\n        const cost = Math.ceil(ns.singularity.getAugmentationPrice(a));\\n        if (max < cost) {\\n            max = cost;\\n            aug = a;\\n        }\\n    }\\n    assert(aug !== \\\"\\\");\\n    return aug;\\n}\\n\\n/**\\n * Whether we have a given Augmentation.\\n *\\n * @param ns The Netscript API.\\n * @param aug Check this Augmentation.\\n * @return true if we have already purchased the given Augmentation;\\n *     false otherwise.\\n */\\nexport function has_augment(ns, aug) {\\n    const candidate = new Set(\\n        ns.singularity.getOwnedAugmentations(bool.PURCHASED)\\n    );\\n    return candidate.has(aug);\\n}\\n\\n/**\\n * Determine an Augmentation that requires the least reputation points.\\n *\\n * @param ns The Netscript API.\\n * @param candidate An array of Augmentation names.  This array does not include\\n *     the NeuroFlux Governor.\\n * @return A string representing the name of an Augmentation that requires the\\n *     lowest amount of reputation points.\\n */\\nfunction lowest_reputation(ns, candidate) {\\n    assert(candidate.length > 0);\\n    assert(!candidate.includes(augment.NFG));\\n    let min = Infinity;\\n    let min_aug = \\\"\\\";\\n    for (const aug of candidate) {\\n        const rep = Math.ceil(ns.singularity.getAugmentationRepReq(aug));\\n        if (min > rep) {\\n            min = rep;\\n            min_aug = aug;\\n        }\\n    }\\n    assert(min_aug !== \\\"\\\");\\n    return min_aug;\\n}\\n\\n/**\\n * The number of Augmentations we have purchased.  This number only includes\\n * those that have been bought and not yet installed.\\n *\\n * @param ns The Netscript API.\\n * @return How many Augmentations we have bought and yet to install.\\n */\\nfunction num_augment(ns) {\\n    const owned_aug = ns.singularity.getOwnedAugmentations(bool.NOT_PURCHASED);\\n    const owned_bought_aug = ns.singularity.getOwnedAugmentations(\\n        bool.PURCHASED\\n    );\\n    assert(owned_bought_aug.length >= owned_aug.length);\\n    const npurchase = owned_bought_aug.length - owned_aug.length;\\n    return npurchase;\\n}\\n\\n/**\\n * All Augmentations we own and have already installed.\\n *\\n * @param ns The Netscript API.\\n * @return A set of all Augmentations we own.  These Augmentations are already\\n *     installed.\\n */\\nexport function owned_augment(ns) {\\n    return new Set(ns.singularity.getOwnedAugmentations(bool.NOT_PURCHASED));\\n}\\n\\n/**\\n * All pre-requisites of an Augmentation.  Include only pre-requisites we have\\n * not yet purchased.\\n *\\n * @param ns The Netscript API.\\n * @param aug A string representing the name of an Augmentation.\\n * @return An array of Augmentation names.  Each Augmentation in the array is a\\n *     pre-requisite of the given Augmentation.  Return an empty array if the\\n *     given Augmentation has no pre-requisites or we have already purchased\\n *     all of its pre-requisites.\\n */\\nexport function prerequisites(ns, aug) {\\n    assert(aug !== \\\"\\\");\\n    const prereq = ns.singularity.getAugmentationPrereq(aug);\\n    if (prereq.length === 0) {\\n        return [];\\n    }\\n    return prereq.filter((a) => !has_augment(ns, a));\\n}\\n\\n/**\\n * Purchase a bunch of Augmentations from a faction.  Buying Augmentations can\\n * be expensive.  If our trade bot is running, tell it to stop buying and start\\n * selling all shares.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to buy Augmentations from this faction.\\n * @param stop_trade A boolean signifying whether the trade bot should stop\\n *     buying shares of stocks.\\n * @param buy_nfg A boolean signifying whether to upgrade the NeuroFlux Governor\\n *     Augmentation.\\n * @param raise_money A boolean signifying whether we should raise funds to buy\\n *     Augmentations.  We can raise funds by working at a company or committing\\n *     crimes.\\n */\\nexport async function purchase_augment(\\n    ns,\\n    fac,\\n    stop_trade,\\n    buy_nfg,\\n    raise_money\\n) {\\n    // Sanity checks.\\n    assert(is_valid_faction(fac));\\n    let candidate = augment_to_buy(ns, fac);\\n    if (candidate.length === 0) {\\n        return;\\n    }\\n    // Tell the trade bot to stop buying shares of stocks.  We want to cash in\\n    // on our shares and raise money to buy Augmentations.\\n    if (stop_trade) {\\n        await trade_bot_stop_buy(ns);\\n    }\\n    // Below is our purchasing strategy.\\n    //\\n    // (1) Purchase the most expensive Augmentation first.\\n    // (2) If an Augmentation has a pre-requisite that we have not yet bought,\\n    //     purchase the pre-requisite first.\\n    // (3) Leave the NeuroFlux Governor Augmentation to last.\\n    const fac_aug = new Set(ns.singularity.getAugmentationsFromFaction(fac));\\n    const fac_has_aug = (a) => fac_aug.has(a);\\n    while (candidate.length > 0) {\\n        if (num_augment(ns) >= augment.BUY_TAU) {\\n            break;\\n        }\\n        // Choose the most expensive Augmentation.\\n        const aug = choose_augment(ns, candidate);\\n        if (has_augment(ns, aug)) {\\n            candidate = candidate.filter((a) => a !== aug);\\n            continue;\\n        }\\n        // If the most expensive Augmentation has no pre-requisites or we have\\n        // already purchased all of its pre-requisites, then purchase the\\n        // Augmentation.\\n        let prereq = prerequisites(ns, aug);\\n        if (prereq.length === 0) {\\n            await purchase_aug(ns, aug, fac, raise_money);\\n            candidate = candidate.filter((a) => a !== aug);\\n            continue;\\n        }\\n        // If the Augmentation has one or more pre-requisites we have not yet\\n        // purchased, then first purchase the pre-requisites.  Ensure that the\\n        // faction has the pre-requisites as well.\\n        if (!prereq.every(fac_has_aug)) {\\n            candidate = candidate.filter((a) => a !== aug);\\n            continue;\\n        }\\n        while (prereq.length > 0) {\\n            const pre = choose_augment(ns, prereq);\\n            await purchase_aug(ns, pre, fac, raise_money);\\n            prereq = prereq.filter((a) => a !== pre);\\n        }\\n        await purchase_aug(ns, aug, fac, raise_money);\\n        candidate = candidate.filter((a) => a !== aug);\\n    }\\n    // Level up the NeuroFlux Governor Augmentation as high as our funds allows.\\n    if (buy_nfg) {\\n        let cost = Math.ceil(ns.singularity.getAugmentationPrice(augment.NFG));\\n        let nfg_rep = Math.ceil(\\n            ns.singularity.getAugmentationRepReq(augment.NFG)\\n        );\\n        let fac_rep = Math.floor(ns.singularity.getFactionRep(fac));\\n        let money = ns.getServerMoneyAvailable(home);\\n        while (cost <= money && nfg_rep <= fac_rep) {\\n            assert(ns.singularity.purchaseAugmentation(fac, augment.NFG));\\n            cost = Math.ceil(ns.singularity.getAugmentationPrice(augment.NFG));\\n            nfg_rep = Math.ceil(\\n                ns.singularity.getAugmentationRepReq(augment.NFG)\\n            );\\n            fac_rep = Math.floor(ns.singularity.getFactionRep(fac));\\n            money = ns.getServerMoneyAvailable(home);\\n        }\\n    }\\n    // The trade bot can now resume buying and selling shares.\\n    if (stop_trade) {\\n        trade_bot_resume(ns);\\n    }\\n}\\n\\n/**\\n * Purchase an Augmentation.\\n *\\n * @param ns The Netscript API.\\n * @param aug We want to purchase this Augmentation.\\n * @param fac We want to purchase the given Augmentation from this faction.\\n * @param raise_money A boolean signifying whether we should raise funds to buy\\n *     the given Augmentation.  We can raise funds by working at a company or\\n *     committing crimes.\\n */\\nasync function purchase_aug(ns, aug, fac, raise_money) {\\n    // Purchase any pre-requisites first.\\n    let prereq = prerequisites(ns, aug);\\n    while (prereq.length > 0) {\\n        const pre = choose_augment(ns, prereq);\\n        await purchase_aug(ns, pre, fac, raise_money);\\n        prereq = prereq.filter((a) => a !== pre);\\n    }\\n    // Having purchased all pre-requisites of an Augmentation, now purchase\\n    // the Augmentation.\\n    let success = false;\\n    const cost = Math.ceil(ns.singularity.getAugmentationPrice(aug));\\n    while (!success) {\\n        if (has_augment(ns, aug)) {\\n            break;\\n        }\\n        if (ns.getServerMoneyAvailable(home) < cost) {\\n            if (raise_money) {\\n                if (ns.getHackingLevel() < work_hack_lvl) {\\n                    log(ns, `Raising Hack stat to target: ${work_hack_lvl}`);\\n                    await commit_crime(ns, cost);\\n                } else {\\n                    log(\\n                        ns,\\n                        `Raising money to target: ${ns.nFormat(\\n                            cost,\\n                            \\\"$0,0.00a\\\"\\n                        )}`\\n                    );\\n                    await work(ns, cost);\\n                }\\n            }\\n        }\\n        await ns.sleep(wait_t.SECOND);\\n        success = ns.singularity.purchaseAugmentation(fac, aug);\\n    }\\n    assert(has_augment(ns, aug));\\n    log(ns, `Purchased ${aug} from ${fac}`);\\n}\\n\",\"filename\":\"/quack/lib/singularity/augment.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":702.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to crime.\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Commit various crimes to raise our income to a given threshold.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Continue to commit crime as long as our income is below\\n *     this threshold.\\n */\\nexport async function commit_crime(ns, threshold) {\\n    assert(threshold > 0);\\n    const script = \\\"/quack/singularity/crime.js\\\";\\n    const nthread = 1;\\n    ns.exec(script, home, nthread, threshold);\\n    let money = ns.getServerMoneyAvailable(home);\\n    while (money < threshold || ns.singularity.isBusy()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        money = ns.getServerMoneyAvailable(home);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Choose a crime that has the highest chance of success.\\n *\\n * @param ns The Netscript API.\\n * @param crime An array of crime names.\\n * @return An array of strings, where each element is the name of a crime.\\n *     If the array has multiple elements, then all crimes in the array have\\n *     the same chance of success.\\n */\\nexport function greatest_chance(ns, crime) {\\n    assert(crime.length > 0);\\n    let max = 0;\\n    const chance = new Map();\\n    const million = 1e6;\\n    for (const c of crime) {\\n        // We want to avoid floating point numbers when we compare the chance\\n        // of success of various crimes.  Convert the probability of success to\\n        // an integer.\\n        const prob = ns.singularity.getCrimeChance(c);\\n        const n = Math.round(prob * million);\\n        if (max < n) {\\n            max = n;\\n        }\\n        if (chance.has(n)) {\\n            const crime_name = chance.get(n);\\n            crime_name.push(c);\\n            chance.set(n, crime_name);\\n            continue;\\n        }\\n        const crime_name = [c];\\n        chance.set(n, crime_name);\\n    }\\n    return chance.get(max);\\n}\\n\\n/**\\n * Accumulate negative karma.  Stop when our negative karma is at or lower than\\n * a given threshold.\\n *\\n * @param ns The Netscript API.\\n * @param threshold We want our negative karma to be at or lower than this\\n *     threshold.  Must be a negative integer.\\n * @param crime The crime we must carry out to lower our karma.\\n *     Either \\\"shoplift\\\" or \\\"homicide\\\".\\n * @param nkill If crime := \\\"homicide\\\", then we must also provide the target\\n *     number of people to kill.  Pass in 0 if the crime is not homicide.  Pass\\n *     in Infinity if we care only about lowering our karma and not about the\\n *     number of people killed.  Must be a non-negative integer.\\n */\\nexport async function lower_karma(ns, threshold, crime, nkill) {\\n    // Sanity checks.\\n    assert(threshold < 0);\\n    assert(crimes.SHOP === crime || crimes.KILL === crime);\\n    assert(nkill >= 0);\\n    // Relocate to raise Intelligence XP.\\n    ns.singularity.goToLocation(cities.generic.slum);\\n    // Shoplift.  Use the ceiling function to convert the karma value to an\\n    // integer.  It is safer to compare integers than it is to compare floating\\n    // point numbers.\\n    const player = new Player(ns);\\n    if (crimes.SHOP === crime) {\\n        ns.singularity.commitCrime(crime, bool.FOCUS);\\n        while (Math.ceil(player.karma()) > threshold) {\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n        ns.singularity.stopAction();\\n        assert(Math.ceil(player.karma()) < 0);\\n        assert(Math.ceil(player.karma()) <= threshold);\\n        return;\\n    }\\n    // Homicide.\\n    assert(crimes.KILL === crime);\\n    ns.singularity.commitCrime(crime, bool.FOCUS);\\n    while (Math.ceil(player.karma()) > threshold || player.nkill() < nkill) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    assert(Math.ceil(player.karma()) < 0);\\n    assert(Math.ceil(player.karma()) <= threshold);\\n    assert(player.nkill() >= nkill);\\n}\\n\",\"filename\":\"/quack/lib/singularity/crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":269.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.getCrimeChance\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to factions.\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport {\\n    factions,\\n    faction_req,\\n    faction_t,\\n} from \\\"/quack/lib/constant/faction.js\\\";\\nimport { home, server } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { augment_to_buy } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { visit_city } from \\\"/quack/lib/singularity/network.js\\\";\\nimport { study } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { assert, is_valid_faction } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Wait for an invitation from the target faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want an invitation from this faction.\\n */\\nasync function await_invitation(ns, fac) {\\n    assert(is_valid_faction(fac));\\n    let invite = new Set(ns.singularity.checkFactionInvitations());\\n    while (!invite.has(fac)) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        invite = new Set(ns.singularity.checkFactionInvitations());\\n    }\\n}\\n\\n/**\\n * Whether a given faction is a megacorporation faction.\\n *\\n * @param fac The name of a faction.\\n * @return true if the given faction is a megacorporation faction;\\n *     false otherwise.\\n */\\nfunction is_megacorp_faction(fac) {\\n    return factions.megacorp.includes(fac);\\n}\\n\\n/**\\n * Join as many factions as we can.  We typically do this to raise our\\n * Intelligence stat.  Call this function prior to installing one or more\\n * Augmentations, or before hacking the w0r1d_d43m0n server.\\n */\\nexport function join_all_factions(ns) {\\n    const invite = new Set(ns.singularity.checkFactionInvitations());\\n    factions.all\\n        .filter((f) => invite.has(f))\\n        .forEach((g) => ns.singularity.joinFaction(g));\\n}\\n\\n/**\\n * Join a faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to join this faction.\\n */\\nexport async function join_faction(ns, fac) {\\n    assert(is_valid_faction(fac));\\n    log(ns, `Join faction: ${fac}`);\\n    // Since version 2.0 of the game, we must be working for a megacorporation\\n    // while waiting for an invitation from the corresponding faction.  We can\\n    // quit working once we have joined the faction.\\n    let company = fac;\\n    if (is_megacorp_faction(fac)) {\\n        if (fac === \\\"Fulcrum Secret Technologies\\\") {\\n            company = \\\"Fulcrum Technologies\\\";\\n        }\\n        ns.singularity.applyToCompany(company, job_area.SOFTWARE);\\n        ns.singularity.workForCompany(company, bool.FOCUS);\\n    }\\n    // Join the faction.\\n    const player = new Player(ns);\\n    const joined_faction = new Set(player.faction());\\n    if (!joined_faction.has(fac)) {\\n        await await_invitation(ns, fac);\\n        ns.singularity.joinFaction(fac);\\n    }\\n    // We are a member of the target faction.  Quit working for the\\n    // corresponding megacorporation.\\n    if (is_megacorp_faction(fac)) {\\n        ns.singularity.stopAction();\\n        ns.singularity.quitJob(company);\\n    }\\n}\\n\\n/**\\n * Raise each of our combat stats to a given level.  An easy way to raise our\\n * combat stats is to go to the slum of any city and either mug someone or\\n * commit homicide.  Mugging yields more XP for all our combat stats than\\n * homicide.  However, there are two reasons why we should choose homicide.\\n * First, it yields more negative karma than mugging.  We need lots of negative\\n * karma in order to create a gang.  Second, homicide yields more money than\\n * mugging.  Commit homicide until we meet the requirements for receiving an\\n * invitation from Slum Snakes.  Join Slum Snakes and perform Field Work for\\n * the faction to rapidly raise all our combat stats.  Another option is to\\n * join Tetrads and carry out Field Work for this other faction.  Choose Slum\\n * Snakes or Tetrads, depending on whether we have a gang within the other\\n * faction.  For example, if we have a gang within Slum Snakes, we are not\\n * allowed to perform Field Work for Slum Snakes.  In that case, join Tetrads.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Each of our combat stats should be raised to at least this\\n *     value.  Must be a positive integer.\\n */\\nexport async function raise_combat_stats(ns, threshold) {\\n    // Sanity checks.\\n    const tau = Math.ceil(threshold);\\n    assert(tau > 0);\\n    const player = new Player(ns);\\n    if (\\n        player.strength() >= tau\\n        && player.defense() >= tau\\n        && player.dexterity() >= tau\\n        && player.agility() >= tau\\n    ) {\\n        return;\\n    }\\n    // Commit homicide to raise all our combat stats.\\n    let target = \\\"Slum Snakes\\\";\\n    let city = \\\"Sector-12\\\";\\n    if (ns.gang.inGang()) {\\n        if (ns.gang.getGangInformation().faction === target) {\\n            target = \\\"Tetrads\\\";\\n            city = faction_req[target].city;\\n        }\\n    }\\n    await visit_city(ns, city);\\n    ns.singularity.commitCrime(crimes.KILL, bool.FOCUS);\\n    // Wait to receive an invitation from Slum Snakes (or Tetrads) and perform\\n    // Field Work for the faction.  Among the criminal organizations, Slum\\n    // Snakes has the lowest requirements.  Tetrads has slightly higher\\n    // requirements.\\n    const joined_faction = player.faction();\\n    if (!joined_faction.includes(target)) {\\n        await await_invitation(ns, target);\\n        ns.singularity.joinFaction(target);\\n    }\\n    ns.singularity.workForFaction(target, job_area.FIELD, bool.FOCUS);\\n    while (\\n        player.strength() < tau\\n        || player.defense() < tau\\n        || player.dexterity() < tau\\n        || player.agility() < tau\\n    ) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Raise our Hack stat.  Stop when our Hack stat is at least a given level.\\n *\\n * @param ns The Netscript API.\\n * @param threshold We want our Hack stat to be at least this level.  Must be a\\n *     positive integer.\\n */\\nexport async function raise_hack(ns, threshold) {\\n    assert(threshold > 0);\\n    const player = new Player(ns);\\n    if (player.hacking_skill() >= threshold) {\\n        return;\\n    }\\n    // Join a faction.  Choose from one of the early factions we should have\\n    // already joined.  See whether we can join one of them and perform\\n    // Hacking Contracts.\\n    const invite = new Set(ns.singularity.checkFactionInvitations());\\n    let target = \\\"\\\";\\n    for (const f of factions.early) {\\n        if (invite.has(f) || player.is_member(f)) {\\n            target = f;\\n            ns.singularity.joinFaction(f);\\n            break;\\n        }\\n    }\\n    // Carry out Hacking Contracts for the faction.\\n    if (target !== \\\"\\\") {\\n        ns.singularity.workForFaction(target, job_area.HACK, bool.FOCUS);\\n        while (player.hacking_skill() < threshold) {\\n            await ns.sleep(wait_t.DEFAULT);\\n        }\\n        ns.singularity.stopAction();\\n        return;\\n    }\\n    // Cannot join one of the early factions.  Default to studying at\\n    // university.\\n    const current_city = player.city();\\n    const new_city = \\\"Sector-12\\\";\\n    await visit_city(ns, new_city);\\n    await study(ns, threshold);\\n    await visit_city(ns, current_city);\\n}\\n\\n/**\\n * Start sharing our home server with a faction.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function start_share_home(ns) {\\n    // Tell the script hram.js to suspend whatever it is doing.  This should\\n    // free up some RAM on the home server.\\n    // await hram_suspend(ns);\\n    // Share our home server with a faction.\\n    const serv = new Server(ns, home);\\n    const ncopy = 1;\\n    let nthread = serv.threads_per_instance(server.SHARE_SCRIPT, ncopy);\\n    if (nthread < 1) {\\n        nthread = 1;\\n    }\\n    ns.exec(server.SHARE_SCRIPT, home, nthread);\\n}\\n\\n/**\\n * Stop sharing our home server with a faction.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction stop_share_home(ns) {\\n    if (ns.isRunning(server.SHARE_SCRIPT, home)) {\\n        assert(ns.kill(server.SHARE_SCRIPT, home));\\n    }\\n    // hram_resume(ns);\\n}\\n\\n/**\\n * The total amount of reputation points we need to earn in order to purchase\\n * some Augmentations from a faction.  This is not necessarily the highest\\n * reputation requirement of any Augmentation.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to earn reputation points from this faction.\\n * @return The maximum amount of reputation points we must earn from a faction.\\n *     Return 0 if we do not need to earn any reputation points.\\n */\\nfunction total_reputation(ns, fac) {\\n    const augment = augment_to_buy(ns, fac);\\n    if (augment.length === 0) {\\n        return 0;\\n    }\\n    // The total reputation points we need to earn.\\n    let max = -Infinity;\\n    for (const aug of augment) {\\n        const rep = ns.singularity.getAugmentationRepReq(aug);\\n        if (max < rep) {\\n            max = rep;\\n        }\\n    }\\n    return max;\\n}\\n\\n/**\\n * Work for a faction.  Stop working when we have accumulated enough reputation\\n * points to purchase all Augmentations from the faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to work for this faction.\\n * @param work_type The type of work to carry out for the given faction.\\n *     Either \\\"Hacking Contracts\\\" or \\\"Field Work\\\".\\n */\\nexport async function work_for_faction(ns, fac, work_type) {\\n    assert(is_valid_faction(fac));\\n    log(ns, `Work for faction: ${fac}`);\\n    assert(job_area.HACK === work_type || job_area.FIELD === work_type);\\n    // Share our home server with the faction.  Doing so would boost the amount\\n    // of reputation points we earn.\\n    await start_share_home(ns);\\n    log(ns, `Share home server with faction: ${fac}`);\\n    // Start working for the faction.\\n    const threshold = total_reputation(ns, fac);\\n    if (threshold === 0) {\\n        return;\\n    }\\n    ns.singularity.workForFaction(fac, work_type, bool.FOCUS);\\n    while (ns.singularity.getFactionRep(fac) < threshold) {\\n        // Donate some money to the faction in exchange for reputation points.\\n        const amount = Math.floor(\\n            faction_t.DONATE_MULT * ns.getServerMoneyAvailable(home)\\n        );\\n        ns.singularity.donateToFaction(fac, amount);\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.singularity.stopAction();\\n    // We no longer need to share our home server with the faction.\\n    stop_share_home(ns);\\n    log(ns, `Stop sharing home server with faction: ${fac}`);\\n}\\n\",\"filename\":\"/quack/lib/singularity/faction.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":838.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":743,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to network.\\n\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { shortest_path } from \\\"/quack/lib/network.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Connect to a given server.  The target server can be multiple hops away.\\n *\\n * @param ns The Netscript API.\\n * @param source The source node.  We are currently on this server.\\n * @param target We want to connect to this server.  Not necessarily a\\n *     neighbour node.\\n */\\nexport function connect_to(ns, source, target) {\\n    const path = shortest_path(ns, source, target);\\n    assert(path.length > 0);\\n    assert(source === path[0]);\\n    path.shift();\\n    while (path.length > 0) {\\n        const node = path.shift();\\n        assert(ns.singularity.connect(node));\\n    }\\n}\\n\\n/**\\n * Install a backdoor on a world server.\\n *\\n * @param ns The Netscript API.\\n * @param hostname We want to install a backdoor on the server having this\\n *     hostname.  Assume that we have root access to the target server.\\n */\\nexport async function install_backdoor(ns, hostname) {\\n    // Sanity checks.\\n    const player = new Player(ns);\\n    const server = new Server(ns, hostname);\\n    assert(player.hacking_skill() >= server.hacking_skill());\\n    assert(server.has_root_access());\\n    // Install a backdoor on the target server.\\n    connect_to(ns, player.home(), server.hostname());\\n    await ns.singularity.installBackdoor();\\n    connect_to(ns, server.hostname(), player.home());\\n}\\n\\n/**\\n * Travel to a city.\\n *\\n * @param ns The Netscript API.\\n * @param city We want to travel to this city.\\n */\\nexport async function visit_city(ns, city) {\\n    const player = new Player(ns);\\n    if (player.city() === city) {\\n        return;\\n    }\\n    ns.singularity.goToLocation(cities.generic.TA); // Raise Int XP.\\n    let success = ns.singularity.travelToCity(city);\\n    while (!success) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        success = ns.singularity.travelToCity(city);\\n    }\\n}\\n\",\"filename\":\"/quack/lib/singularity/network.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":186.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { program as popen } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { darkweb, work_hack_lvl } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { raise_hack } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { choose_hardware_company } from \\\"/quack/lib/singularity/util.js\\\";\\nimport { work } from \\\"/quack/lib/singularity/work.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n// Utility functions related to programs.\\n\\n/**\\n * Purchase all programs from the dark web.\\n *\\n * @param ns The Netscript API.\\n * @param visit A boolean signifying whether to visit a hardware store.\\n *     Although not required, we typically visit a hardware store to increase\\n *     our Intelligence XP.\\n * @param wrk A boolean signifying whether to work to increase our funds or\\n *     required stats.  We require money to puchase programs.  In most cases, we\\n *     require certain stats to be offered a job.\\n */\\nexport async function buy_all_programs(ns, visit, wrk) {\\n    // Purchase the Tor router from a hardware store.\\n    const shop = await choose_hardware_company(ns, visit);\\n    if (visit) {\\n        ns.singularity.goToLocation(shop);\\n    }\\n    await buy_tor_router(ns, wrk);\\n    // Work out which programs we still need to purchase via the dark web.\\n    let program = ns.singularity.getDarkwebPrograms();\\n    assert(program.length > 0);\\n    const player = new Player(ns);\\n    program = program.filter((p) => !player.has_program(p));\\n    if (program.length === 0) {\\n        return;\\n    }\\n    // Purchase all remaining programs.\\n    await buy_programs(ns, popen, wrk);\\n}\\n\\n/**\\n * Purchase all programs from a given list.\\n *\\n * @param ns The Netscript API.\\n * @param program We want to buy all programs from this list.\\n * @param wrk A boolean signifying whether to work to increase our funds or\\n *     required stats.  We require money to puchase programs.  In most cases, we\\n *     require certain stats to be offered a job.\\n */\\nasync function buy_programs(ns, program, wrk) {\\n    assert(program.length > 0);\\n    // First, determine which programs we do not have.\\n    const player = new Player(ns);\\n    let prog = Array.from(program);\\n    prog = prog.filter((p) => !player.has_program(p));\\n    if (prog.length === 0) {\\n        return;\\n    }\\n    // Purchase the remaining programs.\\n    log(ns, `Buying port openers: ${prog.join(\\\", \\\")}`);\\n    while (prog.length > 0) {\\n        const [p, cost] = cheapest(ns, prog);\\n        if (player.has_program(p)) {\\n            prog = prog.filter((e) => e !== p);\\n            continue;\\n        }\\n        while (player.money() < cost) {\\n            if (player.hacking_skill() < work_hack_lvl) {\\n                if (wrk) {\\n                    await raise_hack(ns, target_hack_lvl(ns));\\n                }\\n                await ns.sleep(wait_t.SECOND);\\n                continue;\\n            }\\n            if (wrk) {\\n                await work(ns, cost);\\n            }\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n        assert(ns.singularity.purchaseProgram(p));\\n        log(ns, `Purchased program ${p}`);\\n        prog = prog.filter((e) => e !== p);\\n    }\\n}\\n\\n/**\\n * Purchase the Tor router so we can access the dark web.\\n *\\n * @param ns The Netscript API.\\n * @param wrk A boolean signifying whether to work to increase our funds or\\n *     required stats.  We require money to puchase the Tor router.  In most\\n *     cases, we require certain stats to be offered a job.\\n */\\nasync function buy_tor_router(ns, wrk) {\\n    log(ns, \\\"Purchase Tor router\\\");\\n    const player = new Player(ns);\\n    while (!ns.singularity.purchaseTor()) {\\n        if (player.hacking_skill() < work_hack_lvl) {\\n            if (wrk) {\\n                await raise_hack(ns, target_hack_lvl(ns));\\n            }\\n            await ns.sleep(wait_t.SECOND);\\n            continue;\\n        }\\n        if (wrk) {\\n            await work(ns, darkweb.tor.COST);\\n        }\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Choose the least expensive program that can be purchased via the dark web.\\n *\\n * @param ns The Netscript API.\\n * @param program An array of program names.  We want to determine the cheapest\\n *     program from among this list.\\n * @return An array [prog, cost] as follows.\\n *     (1) prog := The name of cheapest program from among the given list of\\n *         program names.\\n *     (2) cost := The cost of the cheapest program.\\n */\\nfunction cheapest(ns, program) {\\n    assert(program.length > 0);\\n    let mincost = Infinity;\\n    let prog = \\\"\\\";\\n    for (const p of program) {\\n        const cost = ns.singularity.getDarkwebProgramCost(p);\\n        if (mincost > cost) {\\n            mincost = cost;\\n            prog = p;\\n        }\\n    }\\n    assert(mincost > 0);\\n    assert(prog.length > 0);\\n    assert(program.includes(prog));\\n    return [prog, mincost];\\n}\\n\\n/**\\n * Raise our Hack stat to at least a given number.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction target_hack_lvl(ns) {\\n    const player = new Player(ns);\\n    return player.hacking_skill() + 5;\\n}\\n\",\"filename\":\"/quack/lib/singularity/program.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":388.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebPrograms\",\"cost\":8},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.getDarkwebProgramCost\",\"cost\":8},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to study at a university.\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { course } from \\\"/quack/lib/constant/study.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Determine the university at which we should study.\\n *\\n * @param ns The Netscript API.\\n * @return A string representing the name of the university where we should\\n *     study.  An empty string if the player is located in a city that does not\\n *     have a university.\\n */\\nfunction choose_university(ns) {\\n    const { city } = ns.getPlayer();\\n    const { uni } = cities[city];\\n    if (undefined === uni) {\\n        return \\\"\\\";\\n    }\\n    return uni;\\n}\\n\\n/**\\n * Increase our Hack stat.  Continue doing so until our Hack stat is at least\\n * a given threshold.\\n *\\n * @param ns The Netscript API.\\n * @param threshold We want to increase our Hack stat to be at least this\\n *     threshold.\\n */\\nexport async function raise_hack(ns, threshold) {\\n    assert(threshold > 0);\\n    while (ns.getHackingLevel() < threshold) {\\n        await study(ns, threshold);\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n}\\n\\n/**\\n * Increase our Hack stat.  We stop when either of the following conditions are\\n * satisfied.\\n *\\n * (1) Our Hack stat is at least the given threshold.\\n * (2) We receive an invitation from the given faction.\\n *\\n * @param ns The Netscript API.\\n * @param threshold We want to increase our Hack stat to at least this\\n *     threshold.  The function can exit even if our Hack stat is below the\\n *     given threshold.\\n * @param fac The name of a faction.  We want to receive an invitation from this\\n *     faction.  The function can exit even if we do not receive an invitation\\n *     from the given faction.\\n */\\nexport async function raise_hack_until(ns, threshold, fac) {\\n    const tau = Math.floor(threshold);\\n    assert(tau > 0);\\n    assert(fac !== \\\"\\\");\\n    // By default, we study the free computer science course at a university.\\n    const uni = choose_university(ns);\\n    assert(uni !== \\\"\\\");\\n    ns.singularity.goToLocation(uni); // Raise Intelligence XP.\\n    assert(ns.singularity.universityCourse(uni, course.CS, bool.FOCUS));\\n    while (ns.getHackingLevel() < tau) {\\n        if (ns.getPlayer().factions.includes(fac)) {\\n            break;\\n        }\\n        const invitation = ns.singularity.checkFactionInvitations();\\n        if (invitation.includes(fac)) {\\n            break;\\n        }\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    assert(ns.singularity.stopAction());\\n}\\n\\n/**\\n * Study at a university to raise our Hack stat.  Use this function under the\\n * following situations:\\n *\\n * (1) Immediately after installing one or more Augmentations.\\n * (2) When we start all over on a different BitNode.\\n * (3) If there is a special need to increase our Hack stat.\\n *\\n * Note that some cities have universities, while others do not.  If we really\\n * want to study at a university, ensure we are located in a city that has a\\n * university.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Study until we have reached at least this amount of\\n *     Hack stat.\\n */\\nexport async function study(ns, threshold) {\\n    assert(threshold > 0);\\n    const uni = choose_university(ns);\\n    const empty_str = \\\"\\\";\\n    if (empty_str === uni) {\\n        return;\\n    }\\n    // Go to a different location to gain some Intelligence XP.\\n    assert(empty_str !== uni);\\n    ns.singularity.goToLocation(uni);\\n    // Study the free computer science course at a university.\\n    assert(ns.singularity.universityCourse(uni, course.CS, bool.FOCUS));\\n    // Stop our study when our Hack stat is at least the given threshold.\\n    while (ns.getHackingLevel() < threshold) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    assert(ns.singularity.stopAction());\\n}\\n\",\"filename\":\"/quack/lib/singularity/study.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":178.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to the Singularity API.\\n\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\n\\n/**\\n * Determine the hardware company we should visit.  The company can sell us\\n * more RAM for our home server.\\n *\\n * @param ns The Netscript API.\\n * @param visit A boolean signifying whether to visit the travel agency.\\n *     Although not required, we typically visit a travel agency to raise our\\n *     Intelligence XP.\\n * @return A string representing the name of a hardware store.\\n */\\nexport async function choose_hardware_company(ns, visit) {\\n    let { city } = ns.getPlayer();\\n    // There are no hardware stores in Chongqing and New Tokyo.  If we are\\n    // currently in either of these cities, travel to Sector-12 to increase our\\n    // Intelligence XP.\\n    if (city === \\\"Chongqing\\\" || city === \\\"New Tokyo\\\") {\\n        city = \\\"Sector-12\\\";\\n        if (visit) {\\n            ns.singularity.goToLocation(cities.generic.TA);\\n        }\\n        let success = ns.singularity.travelToCity(city);\\n        while (!success) {\\n            await ns.sleep(wait_t.SECOND);\\n            success = ns.singularity.travelToCity(city);\\n        }\\n    }\\n    return cities[city].shop;\\n}\\n\",\"filename\":\"/quack/lib/singularity/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":114.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions related to work.\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { work_hack_lvl } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { job_area, job_title } from \\\"/quack/lib/constant/work.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { study } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Choose a company at which to work.\\n *\\n * @param ns The Netscript API.\\n * @return A string representing the name of a company.\\n */\\nfunction choose_company(ns) {\\n    let company = \\\"\\\";\\n    switch (ns.getPlayer().city) {\\n        case \\\"Aevum\\\":\\n            company = \\\"ECorp\\\";\\n            break;\\n        case \\\"Chongqing\\\":\\n            company = \\\"KuaiGong International\\\";\\n            break;\\n        case \\\"Ishima\\\":\\n            company = \\\"Nova Medical\\\";\\n            break;\\n        case \\\"New Tokyo\\\":\\n            company = \\\"Global Pharmaceuticals\\\";\\n            break;\\n        case \\\"Sector-12\\\":\\n            company = \\\"MegaCorp\\\";\\n            break;\\n        case \\\"Volhaven\\\":\\n            company = \\\"NWO\\\";\\n            break;\\n        default:\\n            company = \\\"\\\";\\n            break;\\n    }\\n    assert(company !== \\\"\\\");\\n    return company;\\n}\\n\\n/**\\n * Choose the field of work.  Either \\\"Business\\\" or \\\"Software\\\".\\n *\\n * @param ns The Netscript API.\\n * @return The field of work.  Either \\\"Business\\\" or \\\"Software\\\".\\n */\\nexport function choose_field(ns) {\\n    const charisma_lvl = work_hack_lvl;\\n    if (ns.getPlayer().skills.charisma < charisma_lvl) {\\n        return job_area.SOFTWARE;\\n    }\\n    return job_area.BUSINESS;\\n}\\n\\n/**\\n * Work for a company to raise our Charisma to a given amount.\\n *\\n * @param ns The Netscript API.\\n * @param hack_lvl The minimum amount of Hack we must have.\\n * @param threshold Continue working until our Charisma is at this level or\\n *     higher.  Assume to be a positive integer.\\n */\\nexport async function raise_charisma(ns, hack_lvl, threshold) {\\n    // Sanity checks.\\n    const player = new Player(ns);\\n    if (player.charisma() >= threshold) {\\n        return;\\n    }\\n    assert(threshold > 0);\\n    // Ensure we have the minimum Hack stat.\\n    if (player.hacking_skill() < hack_lvl) {\\n        await study(ns, hack_lvl);\\n    }\\n    assert(player.hacking_skill() >= hack_lvl);\\n    // Work for a company as a software engineer until we have accumulated the\\n    // given amount of Charisma level.\\n    const company = choose_company(ns);\\n    ns.singularity.goToLocation(company); // Raise Intelligence XP.\\n    ns.singularity.applyToCompany(company, job_area.SOFTWARE);\\n    ns.singularity.workForCompany(company, bool.FOCUS);\\n    while (player.charisma() < threshold) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        const success = ns.singularity.applyToCompany(\\n            company,\\n            job_area.SOFTWARE\\n        );\\n        // We have a promotion.  Work in the new job.\\n        if (success) {\\n            ns.singularity.workForCompany(company, bool.FOCUS);\\n        }\\n    }\\n    ns.singularity.stopAction();\\n    ns.singularity.quitJob(company);\\n}\\n\\n/**\\n * Work at a company and rise to the position of Chief Financial Officer.  We\\n * do not quit the company after the function ends.\\n *\\n * @param ns The Netscript API.\\n * @param company We want to work for this company.\\n */\\nexport async function rise_to_cfo(ns, company) {\\n    // Ensure we have the minimum Hack and Charisma stats.\\n    const player = new Player(ns);\\n    const charisma_lvl = work_hack_lvl;\\n    assert(player.hacking_skill() >= work_hack_lvl);\\n    assert(player.charisma() >= charisma_lvl);\\n    // Work for the company in a business position.  Once in a while, apply for\\n    // a promotion until we reach the position of Chief Financial Officer.\\n    ns.singularity.goToLocation(company); // Raise Intelligence XP.\\n    ns.singularity.applyToCompany(company, job_area.BUSINESS);\\n    ns.singularity.workForCompany(company, bool.FOCUS);\\n    for (;;) {\\n        if (\\n            player.job(company) === job_title.CFO\\n            || player.job(company) === job_title.CEO\\n        ) {\\n            break;\\n        }\\n        await ns.sleep(wait_t.DEFAULT);\\n        const success = ns.singularity.applyToCompany(\\n            company,\\n            job_area.BUSINESS\\n        );\\n        // We have a promotion.  Work in the new job.\\n        if (success) {\\n            ns.singularity.workForCompany(company, bool.FOCUS);\\n        }\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Work to boost our income.  Stop working when we have accumulated a given\\n * amount of money.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Continue working as long as our money is less than this\\n *     threshold.\\n */\\nexport async function work(ns, threshold) {\\n    assert(threshold > 0);\\n    if (ns.getServerMoneyAvailable(home) >= threshold) {\\n        return;\\n    }\\n    // Ensure we have the minimum Hack stat.\\n    if (ns.getHackingLevel() < work_hack_lvl) {\\n        await study(ns, work_hack_lvl);\\n    }\\n    assert(ns.getHackingLevel() >= work_hack_lvl);\\n    // Work for a company until our money is at least the given threshold.\\n    // Every once in a while, apply for a promotion to earn more money per\\n    // second.  By default, we work a business job.  However, if our Charisma\\n    // level is low, work a software job instead to raise our Charisma.\\n    const company = choose_company(ns);\\n    ns.singularity.goToLocation(company); // Increase Intelligence XP.\\n    let field = choose_field(ns);\\n    ns.singularity.applyToCompany(company, field);\\n    ns.singularity.workForCompany(company, bool.FOCUS);\\n    log(ns, `Work for ${company} in ${field}`);\\n    while (ns.getServerMoneyAvailable(home) < threshold) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        field = choose_field(ns);\\n        const success = ns.singularity.applyToCompany(company, field);\\n        // We have a promotion.  Start working in the new job.\\n        if (success) {\\n            ns.singularity.workForCompany(company, bool.FOCUS);\\n            log(ns, `Work for ${company} in ${field}`);\\n        }\\n    }\\n    ns.singularity.stopAction();\\n    ns.singularity.quitJob(company);\\n}\\n\\n/**\\n * Work for a company.  Stop working when we have accumulated a given amount\\n * of reputation points.\\n *\\n * @param ns The Netscript API.\\n * @param company We want to work for this company.\\n * @param rep Work for the company until we have at least this amount of\\n *     reputation points.\\n */\\nexport async function work_for_company(ns, company, rep) {\\n    assert(rep > 0);\\n    ns.singularity.goToLocation(company); // Raise Intelligence XP.\\n    // Ensure we have the minimum Hack stat.\\n    if (ns.getHackingLevel() < work_hack_lvl) {\\n        await study(ns, work_hack_lvl);\\n    }\\n    assert(ns.getHackingLevel() >= work_hack_lvl);\\n    // Work for the company until we have accumulated the given amount of\\n    // reputation points.  Occasionally apply for a promotion to earn even\\n    // more reputation points per second.\\n    let field = choose_field(ns);\\n    ns.singularity.applyToCompany(company, field);\\n    ns.singularity.workForCompany(company, bool.FOCUS);\\n    log(ns, `Work for ${company} in ${field}`);\\n    while (ns.singularity.getCompanyRep(company) < rep) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        field = choose_field(ns);\\n        const success = ns.singularity.applyToCompany(company, field);\\n        // We have a promotion.  Work in the new job.\\n        if (success) {\\n            ns.singularity.workForCompany(company, bool.FOCUS);\\n            log(ns, `Work for ${company} in ${field}`);\\n        }\\n    }\\n    ns.singularity.stopAction();\\n    ns.singularity.quitJob(company);\\n}\\n\",\"filename\":\"/quack/lib/singularity/work.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":292.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { cc_t } from \\\"/quack/lib/constant/sleeve.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * A class to manage various aspects of sleeves.\\n */\\nexport class Sleeve {\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n\\n    /**\\n     * Construct a sleeve object.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#ns = ns;\\n    }\\n\\n    /**\\n     * The Agility stat of a sleeve.\\n     *\\n     * @param idx The index of a sleeve.\\n     * @return The Agility stat of the sleeve having the given index.\\n     */\\n    agility(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return this.#ns.sleeve.getSleeve(idx).skills.agility;\\n    }\\n\\n    /**\\n     * Indices of all sleeves.\\n     *\\n     * @return An array of all sleeve indices.\\n     */\\n    all() {\\n        return MyArray.sequence(this.#ns.sleeve.getNumSleeves());\\n    }\\n\\n    /**\\n     * Purchase an Augmentation for a sleeve.\\n     *\\n     * @param idx The index of a sleeve.\\n     * @param aug Purchase this Augmentation for the sleeve.\\n     * @return True if the given Augmentation was successfully purchased and\\n     *     installed on the sleeve; false otherwise.\\n     */\\n    buy_augment(idx, aug) {\\n        assert(this.#is_valid_index([idx]));\\n        if (this.is_in_shock(idx)) {\\n            return bool.NOT_PURCHASED;\\n        }\\n        return this.#ns.sleeve.purchaseSleeveAug(idx, aug);\\n    }\\n\\n    /**\\n     * The cheapest available Augmentation that a sleeve can purchase.\\n     *\\n     * @param idx The index of a sleeve.\\n     * @return An array [name, cost] as follows.  An empty array if no\\n     *     Augmentations are available for purchase.\\n     *     (1) name := A string representing the name of the cheapest\\n     *         Augmentation that the given sleeve can purchase at the moment.\\n     *     (2) cost := The cost of the cheapest Augmentation.\\n     */\\n    cheapest_augment(idx) {\\n        // Sanity checks.\\n        assert(this.#is_valid_index([idx]));\\n        const aug = this.#ns.sleeve.getSleevePurchasableAugs(idx);\\n        if (aug.length === 0) {\\n            return [];\\n        }\\n        // Find the cheapest Augmentation.\\n        let name = \\\"\\\";\\n        let cost = Infinity;\\n        aug.forEach((a) => {\\n            if (a.cost < cost) {\\n                cost = a.cost;\\n                name = a.name;\\n            }\\n        });\\n        assert(name !== \\\"\\\");\\n        assert(cost < Infinity);\\n        return [name, cost];\\n    }\\n\\n    /**\\n     * The Defense stat of a sleeve.\\n     *\\n     * @param idx The index of a sleeve.\\n     * @return The Defense stat of the sleeve having the given index.\\n     */\\n    defense(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return this.#ns.sleeve.getSleeve(idx).skills.defense;\\n    }\\n\\n    /**\\n     * The Dexterity stat of a sleeve.\\n     *\\n     * @param idx The index of a sleeve.\\n     * @return The Dexterity stat of the sleeve having the given index.\\n     */\\n    dexterity(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return this.#ns.sleeve.getSleeve(idx).skills.dexterity;\\n    }\\n\\n    /**\\n     * Whether to graduate sleeves from training stats by mugging people.\\n     *\\n     * @param s An array of sleeve indices.  We want to graduate these sleeves.\\n     * @return True if each sleeve in the given array can graduate;\\n     *     false otherwise or the array is empty.\\n     */\\n    graduate_mug(s) {\\n        if (s.length === 0) {\\n            return bool.NOT;\\n        }\\n        assert(this.#is_valid_index(s));\\n        for (const i of s) {\\n            if (!this.has_mug_threshold(i)) {\\n                return bool.NOT;\\n            }\\n        }\\n        return bool.GRADUATE;\\n    }\\n\\n    /**\\n     * Whether to graduate sleeves from training stats by shoplift.\\n     *\\n     * @param s An array of sleeve indices.  We want to graduate these sleeves.\\n     * @return True if each sleeve in the given array can graduate;\\n     *     false otherwise or the array is empty.\\n     */\\n    graduate_shoplift(s) {\\n        if (s.length === 0) {\\n            return bool.NOT;\\n        }\\n        assert(this.#is_valid_index(s));\\n        for (const i of s) {\\n            if (!this.has_shoplift_threshold(i)) {\\n                return bool.NOT;\\n            }\\n        }\\n        return bool.GRADUATE;\\n    }\\n\\n    /**\\n     * Whether the combat stats of a sleeve are at least the threshold for\\n     * mugging people.\\n     *\\n     * @param idx A sleeve index.\\n     * @return True if the combat stats of a sleeve are each at least the\\n     *     threshold for mugging people; false otherwise.\\n     */\\n    has_mug_threshold(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return (\\n            this.agility(idx) >= cc_t.MUG\\n            && this.defense(idx) >= cc_t.MUG\\n            && this.dexterity(idx) >= cc_t.MUG\\n            && this.strength(idx) >= cc_t.MUG\\n        );\\n    }\\n\\n    /**\\n     * Whether the Dexterity and Agility stats of a sleeve are at least the\\n     * threshold for shoplift.\\n     *\\n     * @param idx A sleeve index.\\n     * @return True if the Dexterity and Agility stats of a sleeve are each\\n     *     at least the threshold for shoplift; false otherwise.\\n     */\\n    has_shoplift_threshold(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return (\\n            this.agility(idx) >= cc_t.SHOP && this.dexterity(idx) >= cc_t.SHOP\\n        );\\n    }\\n\\n    /**\\n     * Assign sleeves to commit homicide.\\n     *\\n     * @param s An array of sleeve indices.\\n     */\\n    homicide(s) {\\n        if (s.length === 0) {\\n            return;\\n        }\\n        assert(this.#is_valid_index(s));\\n        s.forEach((i) => this.#ns.sleeve.setToCommitCrime(i, crimes.KILL));\\n    }\\n\\n    /**\\n     * Whether a sleeve is in shock.  A sleeve is in shock if its shock value is\\n     * greater than 0.\\n     *\\n     * @param idx The index of a sleeve.  Must be a non-negative integer.\\n     * @return True if the sleeve with the given index has a shock value greater\\n     *     than 0; false otherwise.\\n     */\\n    is_in_shock(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return this.#ns.sleeve.getSleeve(idx).shock > cc_t.MIN_SHOCK;\\n    }\\n\\n    /**\\n     * Whether a sleeve is fully synchronized with the player's consciousness.\\n     *\\n     * @param idx The index of a sleeve.  Must be a non-negative integer.\\n     * @return True if the sleeve having the given index is fully synchronized\\n     *     with the player; false otherwise.\\n     */\\n    is_in_sync(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return this.#ns.sleeve.getSleeve(idx).sync >= cc_t.MAX_SYNC;\\n    }\\n\\n    /**\\n     * Whether an array contains valid sleeve indices.\\n     *\\n     * @param s An array of sleeve indices.\\n     * @return True if the array has all valid sleeve indices; false otherwise.\\n     */\\n    #is_valid_index(s) {\\n        const min = 0;\\n        const max = this.#ns.sleeve.getNumSleeves();\\n        assert(s.length > 0);\\n        for (const i of s) {\\n            if (i < min || i >= max) {\\n                return bool.INVALID;\\n            }\\n        }\\n        return bool.VALID;\\n    }\\n\\n    /**\\n     * Assign sleeves to mug people.\\n     *\\n     * @param s An array of sleeve indices.\\n     */\\n    mug(s) {\\n        if (s.length === 0) {\\n            return;\\n        }\\n        assert(this.#is_valid_index(s));\\n        s.forEach((i) => this.#ns.sleeve.setToCommitCrime(i, crimes.MUG));\\n    }\\n\\n    /**\\n     * Assign sleeves to shoplift.\\n     *\\n     * @param s An array of sleeve indices.\\n     */\\n    shoplift(s) {\\n        if (s.length === 0) {\\n            return;\\n        }\\n        assert(this.#is_valid_index(s));\\n        s.forEach((i) => this.#ns.sleeve.setToCommitCrime(i, crimes.SHOP));\\n    }\\n\\n    /**\\n     * The Strength stat of a sleeve.\\n     *\\n     * @param idx The index of a sleeve.\\n     * @return The Strength stat of the sleeve having the given index.\\n     */\\n    strength(idx) {\\n        assert(this.#is_valid_index([idx]));\\n        return this.#ns.sleeve.getSleeve(idx).skills.strength;\\n    }\\n\\n    /**\\n     * Assign sleeves to shock recovery.  Only assign those sleeves whose shock\\n     * values are greater than 0.\\n     */\\n    shock_recovery() {\\n        this.all()\\n            .filter((i) => this.is_in_shock(i))\\n            .forEach((j) => this.#ns.sleeve.setToShockRecovery(j));\\n    }\\n\\n    /**\\n     * Assign sleeves to synchronize with the consciousness of the player.  Only\\n     * assign those sleeves whose consciousness is not yet fully synchronized.\\n     */\\n    synchronize() {\\n        this.all()\\n            .filter((i) => !this.is_in_sync(i))\\n            .forEach((j) => this.#ns.sleeve.setToSynchronize(j));\\n    }\\n}\\n\",\"filename\":\"/quack/lib/sleeve/cc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":29.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getSleeve\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { cc_t } from \\\"/quack/lib/constant/sleeve.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n// Utility functions for managing sleeves.  Use one or more of these utility\\n// functions to help lower the RAM cost of our scripts.  Importing one utility\\n// function does not incur as much RAM cost as importing the Sleeve class.\\n\\n/**\\n * The index of every sleeve.\\n *\\n * @param ns The Netscript API.\\n * @return An array of sleeve indices.\\n */\\nexport function all_sleeves(ns) {\\n    return MyArray.sequence(ns.sleeve.getNumSleeves());\\n}\\n\\n/**\\n * Whether the combat stats of sleeves are at least a given threshold.\\n *\\n * @param ns The Netscript API.\\n * @return True if the combat stats of each sleeve are each at least cc_t.MUG;\\n *     false otherwise.\\n */\\nexport function has_mug_threshold(ns) {\\n    const all_cc = all_sleeves(ns);\\n    assert(is_valid_index(ns, all_cc));\\n    for (const i of all_cc) {\\n        const stat = ns.sleeve.getSleeve(i).skills;\\n        if (\\n            stat.agility < cc_t.MUG\\n            || stat.defense < cc_t.MUG\\n            || stat.dexterity < cc_t.MUG\\n            || stat.strength < cc_t.MUG\\n        ) {\\n            return bool.NOT;\\n        }\\n    }\\n    return bool.HAS;\\n}\\n\\n/**\\n * Whether the Dexterity and Agility stats of sleeves are at least a given\\n * threshold.\\n *\\n * @param ns The Netscript API.\\n * @return True if the Dexterity and Agility stats of each sleeve are each\\n *     at least cc_t.SHOP; false otherwise.\\n */\\nexport function has_shoplift_threshold(ns) {\\n    const all_cc = all_sleeves(ns);\\n    assert(is_valid_index(ns, all_cc));\\n    for (const i of all_cc) {\\n        const stat = ns.sleeve.getSleeve(i).skills;\\n        if (stat.agility < cc_t.SHOP || stat.dexterity < cc_t.SHOP) {\\n            return bool.NOT;\\n        }\\n    }\\n    return bool.HAS;\\n}\\n\\n/**\\n * Whether an array contains valid sleeve indices.\\n *\\n * @param ns The Netscript API.\\n * @param s An array of sleeve indices.\\n * @return True if the array has all valid sleeve indices; false otherwise.\\n */\\nfunction is_valid_index(ns, s) {\\n    const min = 0;\\n    const max = ns.sleeve.getNumSleeves();\\n    assert(s.length > 0);\\n    for (const i of s) {\\n        if (i < min || i >= max) {\\n            return bool.INVALID;\\n        }\\n    }\\n    return bool.VALID;\\n}\\n\",\"filename\":\"/quack/lib/sleeve/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleeve\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n// Helper functions relating to Source-Files.\\n\\n/**\\n * Whether we have access to the Artificial Intelligence (AI) API.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to the AI API; false otherwise.\\n */\\nexport function has_ai_api(ns) {\\n    try {\\n        // This is the only function we are rewarded with upon entering or\\n        // destroying BN5.1.\\n        ns.getBitNodeMultipliers();\\n        return bool.HAS;\\n    } catch {\\n        return bool.NOT;\\n    }\\n}\\n\\n/**\\n * Whether we have access to the Corporation API.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to the Corporation API; false otherwise.\\n */\\nexport function has_corporation_api(ns) {\\n    // Are we in BitNode-3: Corporatocracy?\\n    if (bitnode.Corporatocracy === ns.getPlayer().bitNodeN) {\\n        return bool.HAS;\\n    }\\n    // Use the Singularity API to help us find out.\\n    if (has_singularity_api(ns)) {\\n        for (const sf of ns.singularity.getOwnedSourceFiles()) {\\n            if (sf.n === bitnode.Corporatocracy) {\\n                return bool.HAS;\\n            }\\n        }\\n    }\\n    return bool.NOT;\\n}\\n\\n/**\\n * Whether we have access to the Gang API.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to the Gang API; false otherwise.\\n */\\nexport function has_gang_api(ns) {\\n    // Are we in BitNode-2: Rise of the Underworld?\\n    const bn_name = \\\"Rise of the Underworld\\\";\\n    if (bitnode[bn_name] === ns.getPlayer().bitNodeN) {\\n        return bool.HAS;\\n    }\\n    // Use the Singularity API to help us find out.\\n    if (has_singularity_api(ns)) {\\n        for (const sf of ns.singularity.getOwnedSourceFiles()) {\\n            if (sf.n === bitnode[bn_name]) {\\n                return bool.HAS;\\n            }\\n        }\\n    }\\n    return bool.NOT;\\n}\\n\\n/**\\n * Whether we have access to the Hacknet server API.  We have access to Hacknet\\n * servers and the relevant API provided that:\\n *\\n * (1) We are in BitNode-9: Hacktocracy; or\\n * (2) We have destroyed at least BN9.1.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to Hacknet servers and the relevant API;\\n *     false otherwise.\\n */\\nexport function has_hacknet_server_api(ns) {\\n    if (bitnode.Hacktocracy === ns.getPlayer().bitNodeN) {\\n        return bool.HAS;\\n    }\\n    // Use the Singularity API to help us find out.\\n    if (has_singularity_api(ns)) {\\n        for (const sf of ns.singularity.getOwnedSourceFiles()) {\\n            if (sf.n === bitnode.Hacktocracy) {\\n                return bool.HAS;\\n            }\\n        }\\n    }\\n    return bool.NOT;\\n}\\n\\n/**\\n * Whether we have access to the Singularity API.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to the Singularity API; false otherwise.\\n */\\nexport function has_singularity_api(ns) {\\n    try {\\n        // This function from the Singularity API has the lowest RAM cost, at\\n        // 0.1GB.\\n        ns.singularity.isFocused();\\n        return bool.HAS;\\n    } catch {\\n        return bool.NOT;\\n    }\\n}\\n\\n/**\\n * Whether we have access to the Sleeve API.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to the Sleeve API; false otherwise.\\n */\\nexport function has_sleeve_api(ns) {\\n    // Are we in BitNode 10: Digital Carbon?\\n    const bn_name = \\\"Digital Carbon\\\";\\n    if (bitnode[bn_name] === ns.getPlayer().bitNodeN) {\\n        return bool.HAS;\\n    }\\n    // Use the Singularity API to help us find out.\\n    if (has_singularity_api(ns)) {\\n        for (const sf of ns.singularity.getOwnedSourceFiles()) {\\n            if (sf.n === bitnode[bn_name]) {\\n                return bool.HAS;\\n            }\\n        }\\n    }\\n    return bool.NOT;\\n}\\n\\n/**\\n * The level of a Source-File.\\n *\\n * @param ns The Netscript API.\\n * @param n The Source-File number.\\n * @return The level of the Source-File having the given number.\\n */\\nexport function sf_level(ns, n) {\\n    assert(n >= bitnode[\\\"Source Genesis\\\"]);\\n    assert(n <= bitnode[\\\"They're lunatics\\\"]);\\n    for (const sf of ns.singularity.getOwnedSourceFiles()) {\\n        if (sf.n === n) {\\n            return sf.lvl;\\n        }\\n    }\\n}\\n\",\"filename\":\"/quack/lib/source.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":87.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Import only constants into this file.\\n// Miscellaneous helper functions.\\n\\nimport { all_programs, program } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { factions } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { darkweb, script } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home, server } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { wse } from \\\"/quack/lib/constant/wse.js\\\";\\n\\n/**\\n * A function for assertion.\\n *\\n * @param cond Assert that this condition is true.\\n * @return Throw an assertion error if the given condition is false.\\n */\\nexport function assert(cond) {\\n    if (!cond) {\\n        throw new Error(\\\"Assertion failed.\\\");\\n    }\\n}\\n\\n/**\\n * Whether we can run a script on a given server.\\n *\\n * @param ns The Netscript API.\\n * @param s A script to run.  Assumed to exist on our home server as well\\n *     as the target host.\\n * @param host The target host.\\n * @return True if the given target server can run the script; false otherwise.\\n */\\nexport function can_run_script(ns, s, host) {\\n    return num_threads(ns, s, host) > 0;\\n}\\n\\n/**\\n * Determine the best server to hack.  The definition of \\\"best\\\" is subjective.\\n * However, at the moment the \\\"best\\\" server is the one that requires the\\n * highest hacking skill.\\n *\\n * @param ns The Netscript API.\\n * @param candidate Choose from among the servers in this array.\\n * @return The best server to hack.\\n */\\nexport function choose_best_server(ns, candidate) {\\n    assert(candidate.length > 0);\\n    const hack_skill = (s) => ns.getServer(s).requiredHackingSkill;\\n    const better_server = (s, t) => (hack_skill(s) < hack_skill(t) ? t : s);\\n    return candidate.reduce(better_server);\\n}\\n\\n/**\\n * Determine a bunch of servers in the game world to hack.  A target server is\\n * chosen based on these criteria:\\n *\\n * (1) We meet the hacking skill requirement of the server.\\n * (2) We can open all ports required to gain root access to the server.\\n *\\n * @param ns The Netscript API.\\n * @param candidate Use this array to search for targets to hack.\\n * @return An array of target servers.\\n */\\nexport function choose_targets(ns, candidate) {\\n    // Sanity check.\\n    assert(candidate.length > 0);\\n    // How many ports can we open?\\n    const port_opener = program.filter((p) => ns.fileExists(p, home));\\n    const nport = port_opener.length;\\n    // Find a bunch of target servers to hack.\\n    const required_hack = (s) => ns.getServer(s).requiredHackingSkill;\\n    const can_nuke = (s) => nport >= ns.getServer(s).numOpenPortsRequired;\\n    return candidate\\n        .filter((s) => ns.getHackingLevel() >= required_hack(s))\\n        .filter((t) => can_nuke(t));\\n}\\n\\n/**\\n * Remove any files created by other scripts.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function cleanup(ns) {\\n    const junk = [server.HRAM, server.SHARE, wse.STOP_BUY];\\n    junk.forEach((f) => ns.rm(f, home));\\n}\\n\\n/**\\n * Determine which servers in the game world have been compromised.  We\\n * exclude all purchased servers.  A server in the game world is said to be\\n * compromised provided that:\\n *\\n * (1) We have root access to the server.\\n * (2) Our hack script is currently running on the server.\\n *\\n * @param ns The Netscript API.\\n * @param s A hack script.  We want to check whether a server is running\\n *     this script.\\n * @param candidate An array of world servers to check.\\n * @return An array of servers that have been compromised.\\n */\\nexport function compromised_servers(ns, s, candidate) {\\n    assert(candidate.length > 0);\\n    return filter_pserv(ns, candidate)\\n        .filter((serv) => ns.hasRootAccess(serv))\\n        .filter((host) => ns.scriptRunning(s, host));\\n}\\n\\n/**\\n * Execute a script on the home server and using 1 thread.\\n *\\n * @param ns The Netscript API.\\n * @param s A string representing the name of the script to run.\\n * @return The PID of the running script.\\n */\\nexport function exec(ns, s) {\\n    const nthread = 1;\\n    return ns.exec(s, home, nthread);\\n}\\n\\n/**\\n * Remove bankrupt servers from a given array of servers.  A server is bankrupt\\n * if the maximum amount of money it can hold is zero.\\n *\\n * @param ns The Netscript API.\\n * @param candidate An array of servers to filter.\\n * @return An array of servers, each of which is not bankrupt.\\n */\\nexport function filter_bankrupt_servers(ns, candidate) {\\n    assert(candidate.length > 0);\\n    return candidate.filter((s) => !is_bankrupt(ns, s));\\n}\\n\\n/**\\n * Exclude the purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @param serv An array of server names.\\n * @return An array of servers, but minus the purchased servers.\\n */\\nexport function filter_pserv(ns, serv) {\\n    const is_home = (s) => s === home;\\n    const not_purchased = (s) => !ns.getServer(s).purchasedByPlayer;\\n    const not_pserv = (s) => is_home(s) || not_purchased(s);\\n    return serv.filter(not_pserv);\\n}\\n\\n/**\\n * Attempt to gain root access to a given server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have root access to the given server; false otherwise.\\n */\\nexport function gain_root_access(ns, host) {\\n    if (has_root_access(ns, host)) {\\n        return true;\\n    }\\n    // Try to open all required ports and nuke the server.\\n    try {\\n        ns.brutessh(host);\\n    } catch {}\\n    try {\\n        ns.ftpcrack(host);\\n    } catch {}\\n    try {\\n        ns.httpworm(host);\\n    } catch {}\\n    try {\\n        ns.relaysmtp(host);\\n    } catch {}\\n    try {\\n        ns.sqlinject(host);\\n    } catch {}\\n    try {\\n        ns.nuke(host);\\n        return true;\\n    } catch {\\n        return false;\\n    }\\n}\\n\\n/**\\n * Whether we have all port opener programs.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have all port opener programs; false otherwise.\\n */\\nexport function has_all_popen(ns) {\\n    return (\\n        has_program(ns, darkweb.program.brutessh.NAME)\\n        && has_program(ns, darkweb.program.ftpcrack.NAME)\\n        && has_program(ns, darkweb.program.relaysmtp.NAME)\\n        && has_program(ns, darkweb.program.httpworm.NAME)\\n        && has_program(ns, darkweb.program.sqlinject.NAME)\\n    );\\n}\\n\\n/**\\n * Whether we have a particular program.\\n *\\n * @param ns The Netscript API.\\n * @param prog Do we have this program?\\n * @return True if we have the given program; false otherwise.\\n */\\nexport function has_program(ns, prog) {\\n    return ns.fileExists(prog, home);\\n}\\n\\n/**\\n * Whether we have the minimum Hack stat required by a server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if our Hack stat meets the required hacking level of the given\\n *     server; false otherwise.\\n */\\nexport function has_required_hack(ns, host) {\\n    return ns.getHackingLevel() >= ns.getServerRequiredHackingLevel(host);\\n}\\n\\n/**\\n * Whether we have root access to a server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have have root access to the given server;\\n *     false otherwise.\\n */\\nexport function has_root_access(ns, host) {\\n    return ns.getServer(host).hasAdminRights;\\n}\\n\\n/**\\n * Tell the script \\\"hram.js\\\" to resume whatever it was doing.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function hram_resume(ns) {\\n    if (ns.fileExists(server.SHARE, home)) {\\n        ns.rm(server.SHARE, home);\\n    }\\n}\\n\\n/**\\n * Suspend the script \\\"hram.js\\\" to free up some RAM on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function hram_suspend(ns) {\\n    if (!ns.fileExists(server.SHARE, home)) {\\n        const data = \\\"Share home server.\\\";\\n        ns.write(server.SHARE, data, io.WRITE);\\n    }\\n    const target = ns.read(server.HRAM).trim();\\n    if (target === \\\"\\\") {\\n        while (ns.isRunning(script, home)) {\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n    } else {\\n        while (ns.isRunning(script, home, target)) {\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n    }\\n}\\n\\n/**\\n * Let our sleeves commit crimes to raise money.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function init_sleeves(ns) {\\n    const pid = exec(ns, \\\"/quack/sleeve/money.js\\\");\\n    while (ns.isRunning(pid)) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n}\\n\\n/**\\n * Whether a server is bankrupt.  A server is bankrupt if the maximum amount\\n * of money it can hold is zero.\\n *\\n * @param ns The Netscript API.\\n * @param s Test this server for bankruptcy.\\n * @return True if the server is bankrupt; false otherwise.\\n */\\nexport function is_bankrupt(ns, s) {\\n    return ns.getServer(s).moneyMax === 0;\\n}\\n\\n/**\\n * Whether a variable is boolean.\\n *\\n * @param x We want to determine whether this is a boolean.\\n * @return True if the given parameter is a boolean; false otherwise.\\n */\\nexport const is_boolean = (x) => typeof x === \\\"boolean\\\";\\n\\n/**\\n * Whether a given string represents a valid city in the game world.\\n *\\n * @param c A city name, represented as a string.  Cannot be an empty string.\\n * @return True if the given string represents a city in the game world;\\n *     false otherwise.\\n */\\nexport function is_valid_city(c) {\\n    assert(c.length > 0);\\n    const city = new Set(Object.keys(cities));\\n    return city.has(c);\\n}\\n\\n/**\\n * Whether the given name represents a valid faction.\\n *\\n * @param fac A string representing the name of a faction.\\n * @return True if the given name represents a valid faction;\\n *     false otherwise.\\n */\\nexport function is_valid_faction(fac) {\\n    assert(fac.length > 0);\\n    const faction = new Set(factions.all);\\n    return faction.has(fac);\\n}\\n\\n/**\\n * Whether the given name represents a valid program.\\n *\\n * @param name A string representing the name of a program.\\n * @return True if the given name refers to a valid program;\\n *     false otherwise.\\n */\\nexport function is_valid_program(name) {\\n    assert(name.length > 0);\\n    const prog = all_programs();\\n    return prog.has(name);\\n}\\n\\n/**\\n * Gain root access to as many world servers as we can.\\n *\\n * @param ns The Netscript API.\\n * @param candidate An array of server hostnames.  We want to nuke each of these\\n *     servers.\\n * @return An array of hostnames of servers.  We have root access to each\\n *     server.\\n */\\nexport function nuke_servers(ns, candidate) {\\n    return Array.from(candidate).filter((host) => gain_root_access(ns, host));\\n}\\n\\n/**\\n * The maximum number of threads that can be used to run our script on a given\\n * server.\\n *\\n * @param ns The Netscript API.\\n * @param s A script.  Assumed to be located on home server.\\n * @param host Hostname of a world server.\\n * @return The maximum number of threads to run our script on the given server.\\n */\\nexport function num_threads(ns, s, host) {\\n    const script_ram = ns.getScriptRam(s, home);\\n    const { maxRam, ramUsed } = ns.getServer(host);\\n    const server_ram = maxRam - ramUsed;\\n    if (server_ram < 1) {\\n        return 0;\\n    }\\n    return Math.floor(server_ram / script_ram);\\n}\\n\\n/**\\n * A server that has the greatest hack desirability score.\\n *\\n * @param ns The Netscript API.\\n * @param candidate Choose from among this array of hostnames.\\n * @return Hostname of the server to target.\\n */\\nexport function server_of_max_weight(ns, candidate) {\\n    const desirable_server = (s, t) => (weight(ns, s) < weight(ns, t) ? t : s);\\n    return nuke_servers(ns, candidate).reduce(desirable_server);\\n}\\n\\n/**\\n * A hackish way to implement shell scripting in Bitburner.  Emulate terminal\\n * input.\\n *\\n * @param cmd Run this command from the terminal.\\n */\\nexport function shell(cmd) {\\n    // Template code from the official documentation of Bitburner:\\n    //\\n    // https://bitburner.readthedocs.io/en/latest/netscript/advancedfunctions/inject_html.html\\n    const input = globalThis[\\\"document\\\"].getElementById(\\\"terminal-input\\\"); // eslint-disable-line\\n    input.value = cmd;\\n    const handler = Object.keys(input)[1];\\n    input[handler].onChange({\\n        target: input,\\n    });\\n    input[handler].onKeyDown({\\n        key: \\\"Enter\\\",\\n        preventDefault: () => null,\\n    });\\n}\\n\\n/**\\n * Convert a time amount from milliseconds to the format hh:mm:ss.\\n *\\n * @param t An amount of time in milliseconds.\\n * @return The same but a string in the format hh:mm:ss.\\n */\\nexport function time_hms(t) {\\n    const date = new Date(0);\\n    date.setSeconds(to_second(t));\\n    const start_idx = 11;\\n    const end_idx = 19;\\n    return date.toISOString().substring(start_idx, end_idx);\\n}\\n\\n/**\\n * Convert a given amount of time in milliseconds to minutes.\\n *\\n * @param t An amount of time in milliseconds.\\n * @return The same amount of time but given in minutes.\\n */\\nexport function to_minute(t) {\\n    assert(t >= 0);\\n    return t / wait_t.MINUTE;\\n}\\n\\n/**\\n * Convert a given amount of time in milliseconds to seconds.\\n *\\n * @param t An amount of time in milliseconds.\\n * @return The same amount of time but given in seconds.\\n */\\nexport function to_second(t) {\\n    assert(t >= 0);\\n    return t / wait_t.SECOND;\\n}\\n\\n/**\\n * Tell the trade bot to resume its transactions.  It can now buy and sell\\n * shares of stocks.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function trade_bot_resume(ns) {\\n    if (ns.fileExists(wse.STOP_BUY, home)) {\\n        ns.rm(wse.STOP_BUY, home);\\n    }\\n}\\n\\n/**\\n * Tell the trade bot to stop buying shares of stocks.  We do not want to spend\\n * any more money on buying shares.  However, the trade bot can sell shares.\\n * The idea is to cash in on the shares we have.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function trade_bot_stop_buy(ns) {\\n    const fname = wse.STOP_BUY;\\n    const data = \\\"Trade bot stop buy.\\\";\\n    await ns.write(fname, data, io.WRITE);\\n}\\n\\n/**\\n * The weight, or hack desirability, of a server.  Higher weight is better.\\n *\\n * @param ns The Netscript API.\\n * @param host The hostname of a server.\\n * @return A non-negative number representing the hack desirability of the given\\n *     server.\\n */\\nexport function weight(ns, host) {\\n    const serv = ns.getServer(host);\\n    const threshold = ns.getHackingLevel() / 2;\\n    if (\\n        host === home\\n        || serv.purchasedByPlayer\\n        || !serv.hasAdminRights\\n        || serv.requiredHackingSkill > threshold\\n    ) {\\n        return 0;\\n    }\\n    assert(serv.minDifficulty > 0);\\n    return serv.moneyMax / serv.minDifficulty;\\n}\\n\",\"filename\":\"/quack/lib/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport {\\n    home, home_t, server, server_t,\\n} from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport {\\n    assert,\\n    compromised_servers,\\n    filter_bankrupt_servers,\\n    filter_pserv,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether a server is nuked.\\n *\\n * @param ns The Netscript API.\\n * @param s The hostname of a world server.\\n * @return True if we have nuked the given server; false otherwise.\\n */\\nfunction is_nuked(ns, s) {\\n    const serv = new Server(ns, s);\\n    serv.gain_root_access();\\n    return serv.has_root_access();\\n}\\n\\n/**\\n * The low-end servers to target.  We exclude bankrupt servers and purchased\\n * servers.  A server is said to be bankrupt if the maximum amount of money it\\n * can hold is zero.\\n *\\n * @param ns The Netscript API.\\n * @return An array of hostnames of low-end servers.  This array is never empty.\\n */\\nfunction low_end(ns) {\\n    // Sort the servers in ascending order of hack difficulty,\\n    // i.e. security level.\\n    let lowend = [];\\n    const candidate = filter_bankrupt_servers(\\n        ns,\\n        filter_pserv(ns, network(ns))\\n    ).filter((s) => s !== server.ONION);\\n    candidate.forEach((s) => {\\n        const security_lvl = ns.getServer(s).hackDifficulty;\\n        lowend.push([security_lvl, s]);\\n    });\\n    lowend = MyArray.sort_ascending_tuple(lowend);\\n    // Choose how many low-end servers to target.\\n    const home_ram = ns.getServer(home).maxRam;\\n    let ntarget = 0;\\n    if (home_ram >= 3 * home_t.RAM_HIGH) {\\n        ntarget = server_t.lowend.HIGH;\\n    } else if (home_ram > home_t.RAM_HIGH) {\\n        ntarget = server_t.lowend.MID;\\n    } else {\\n        assert(home_ram <= home_t.RAM_HIGH);\\n        ntarget = server_t.lowend.LOW;\\n    }\\n    // Get the hostnames of low-end servers to target.\\n    lowend = lowend.slice(0, ntarget).map((a) => a[1]);\\n    assert(lowend.length > 0);\\n    return lowend;\\n}\\n\\n/**\\n * Try to gain root access to a bunch of servers in the game world.  We exclude\\n * purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return An array of newly nuked servers.  We gained root access to these\\n *     servers during this update.\\n */\\nfunction nuke_servers(ns) {\\n    // An array of servers that were successfully nuked during this update.\\n    const nuked = filter_pserv(ns, network(ns))\\n        .filter((s) => !skip_server(ns, s))\\n        .filter((t) => is_nuked(ns, t));\\n    if (nuked.length > 0) {\\n        log(ns, `Compromised server(s): ${nuked.join(\\\", \\\")}`);\\n    }\\n    return nuked;\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Whether we should skip the server.  A server might be skipped over for\\n * various reasons.\\n *\\n * @param ns The Netscript API.\\n * @param s Should we skip this server?\\n * @return True if we are to skip over the given server; false otherwise.\\n */\\nfunction skip_server(ns, s) {\\n    const serv = new Server(ns, s);\\n    const player = new Player(ns);\\n    if (\\n        serv.num_ports_required() > player.num_ports()\\n        || serv.is_running_script(player.script())\\n        || serv.num_threads(player.script()) < 1\\n        || player.hacking_skill() < serv.hacking_skill()\\n    ) {\\n        return bool.SKIP;\\n    }\\n    return bool.NO_SKIP;\\n}\\n\\n/**\\n * Search for world servers and direct them to hack low-end servers.  We exclude\\n * purchased servers.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction update(ns) {\\n    // A list of servers that have been successfully nuked.\\n    const player = new Player(ns);\\n    const compromised = compromised_servers(ns, player.script(), network(ns));\\n    // Gain root access to new servers in the game world.  Exclude all purchased\\n    // servers.\\n    const new_nuked = nuke_servers(ns);\\n    if (new_nuked.length < 1) {\\n        return;\\n    }\\n    // Direct all nuked servers to target a small number of low-end servers.\\n    // First, kill all scripts on the compromised servers.  Then redirect the\\n    // compromised and newly nuked servers to target some low-end servers.\\n    compromised.forEach((s) => ns.killall(s));\\n    const lowend = low_end(ns);\\n    let n = 0;\\n    compromised.concat(new_nuked).forEach((s) => {\\n        const serv = new Server(ns, s);\\n        const i = n % lowend.length;\\n        serv.deploy(lowend[i]);\\n        log(ns, `Redirect ${s} to hack low-end server: ${lowend[i]}`);\\n        n++;\\n    });\\n}\\n\\n/**\\n * Use each server in the game world to hack low-end servers.  We exclude\\n * purchased servers.  A server is low-end if its Hack stat requirement is low,\\n * possibly less than 10 Hack requirement.  Early in a BitNode when our stats\\n * and money are low, we need a good source of passive income.  Hacking low-end\\n * servers provides a good source of income.  We do not target all low-end\\n * servers, only a small number of these.\\n *\\n * Usage: run quack/low-end.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Continuously look for world servers to hack low-end servers.\\n    log(ns, \\\"Hacking low-end servers\\\");\\n    for (;;) {\\n        update(ns);\\n        await ns.sleep(wait_t.MINUTE);\\n    }\\n}\\n\",\"filename\":\"/quack/low-end.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":11.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { program as popen } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { base, colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { network, shortest_path } from \\\"/quack/lib/network.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Insert forks.  Each fork indicates a child node.\\n *\\n * @param matrix The ASCII art of the network of world servers.\\n * @return The same matrix, but forks are inserted where necessary.\\n */\\nfunction add_fork(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // A shallow copy so we don't modify the parameter directly.  We still\\n    // modify it indirectly.\\n    const mat = Array.from(matrix);\\n    // Start from the second row onward because the first row is for the home\\n    // server.\\n    for (let i = 1; i < mat.length; i++) {\\n        const j = mat[i].length - 1;\\n        assert(leaf() === mat[i][j]);\\n        assert(branch() === mat[i][j - 1]);\\n        mat[i][j - 1] = fork();\\n    }\\n    return mat;\\n}\\n\\n/**\\n * Replace each leaf with the corresponding server name.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @param map A translation from coordinates in the grid to server name.\\n * @return The same matrix, but with server names added.\\n */\\nfunction add_server_name(ns, matrix, map) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    assert(map.size > 0);\\n    // A shallow copy so we don't modify the parameter directly.  We still\\n    // modify it indirectly.\\n    const mat = Array.from(matrix);\\n    // Add the server names.\\n    for (const [coord, server] of map) {\\n        const [i, j] = coord\\n            .split(delimiter())\\n            .map((k) => parseInt(k, base.DECIMAL));\\n        mat[i][j] = decorate(ns, server);\\n    }\\n    return mat;\\n}\\n\\n/**\\n * Insert T junctions into the ASCII art.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @return The same matrix, but with T junctions inserted.\\n */\\nfunction add_tee_junction(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // A shallow copy so we don't modify the parameter directly.  We still\\n    // modify it indirectly.\\n    const mat = Array.from(matrix);\\n    // Start from the second row and work our way downward.\\n    for (let i = 1; i < mat.length; i++) {\\n        const j = mat[i].length - 1;\\n        assert(leaf() === mat[i][j]);\\n        assert(fork() === mat[i][j - 1]);\\n        if (fork() === mat[i - 1][j - 1]) {\\n            mat[i - 1][j - 1] = tee();\\n        }\\n        if (i < mat.length - 2) {\\n            if (branch() === mat[i + 1][j - 1]) {\\n                mat[i][j - 1] = tee();\\n            }\\n        }\\n    }\\n    return mat;\\n}\\n\\n/**\\n * All shortest paths from our home server to each server in the game world.\\n *\\n * @param ns The Netscript API.\\n * @return An array of shortest paths from the home server to each server in\\n *     the game world.  Each element is a string formatted as\\n *\\n *     home,serv1,serv2,serv3,...,servk\\n *\\n *     which shows a shortest path from \\\"home\\\" to the server \\\"servk\\\".  The\\n *     elements are sorted in lexicographic order.\\n */\\nfunction all_shortest_paths(ns) {\\n    const delim = delimiter();\\n    // prettier-ignore\\n    const path = network(ns).map(\\n        (destination) => shortest_path(ns, home, destination).join(delim)\\n    );\\n    return path.sort();\\n}\\n\\n/**\\n * Tidy up the ASCII art representation of the network of world servers.  We\\n * do various clean-ups such as removing dead branches and redundant (or\\n * unnecessary) branches.\\n *\\n * @param grid An ASCII art representation of the network of world servers.\\n *     This should be the output of the function to_ascii_art().\\n * @param map A translation from coordinates in the grid to server name.\\n * @return A string representation of the ASCII art.\\n */\\nfunction beautify(ns, grid, map) {\\n    assert(grid.length > 0);\\n    assert(grid[0].length > 0);\\n    assert(map.size > 0);\\n    let matrix = Array.from(grid);\\n    // Remove dead branches in the visualization.  A branch is said to be dead\\n    // if it does not lead to a server.\\n    for (let i = 0; i < matrix.length - 1; i++) {\\n        const diff = matrix[i].length - matrix[i + 1].length;\\n        if (diff < 3) {\\n            continue;\\n        }\\n        matrix = prune_branch(matrix, i);\\n    }\\n    // Remove dead branches from the last row.\\n    matrix = prune_branch(matrix, matrix.length - 1);\\n    // Some final touches.\\n    matrix = add_fork(matrix);\\n    matrix = prune_sibling_branch(matrix);\\n    matrix = add_tee_junction(matrix);\\n    matrix = add_server_name(ns, matrix, map);\\n    return to_string(matrix);\\n}\\n\\n/**\\n * Internal representation for a branch.  Each branch represents an alternate\\n * path that may lead to other servers.\\n */\\nfunction branch() {\\n    return \\\"│  \\\";\\n}\\n\\n/**\\n * Add various decorations to a server name.\\n *\\n * @param ns The Netscript API.\\n * @param server We want to add various decorations to this server name.\\n * @return The same server name, but with added decoration.\\n */\\nfunction decorate(ns, server) {\\n    // We do not need any other decoration for the home server, apart from\\n    // adding a colour.\\n    if (home === server) {\\n        return colour.GREEN + server + colour.RESET;\\n    }\\n    // Add some more decorations to other servers.\\n    const serv = ns.getServer(server);\\n    const player = ns.getPlayer();\\n    const hack_lvl = player.skills.hacking;\\n    const required_hack_lvl = serv.requiredHackingSkill;\\n    const nhack = `(${required_hack_lvl})`;\\n    const nport = `[${serv.numOpenPortsRequired}]`;\\n    // Do we have root access on the server?\\n    if (serv.hasAdminRights) {\\n        const s = `${server} ${nhack}${nport}`;\\n        return colour.GREEN + s + colour.RESET;\\n    }\\n    // Do we have the minimum required Hack stat?\\n    let s = `${server} ${nhack}`;\\n    if (hack_lvl < required_hack_lvl) {\\n        s = colour.RED + s + colour.RESET;\\n    } else {\\n        s = colour.DARK_GREEN + s + colour.RESET;\\n    }\\n    // Can we open all ports on the server?\\n    if (num_ports(ns) < serv.numOpenPortsRequired) {\\n        s += colour.RED + nport + colour.RESET;\\n    } else {\\n        s += colour.DARK_GREEN + nport + colour.RESET;\\n    }\\n    return s;\\n}\\n\\n/**\\n * The character used to delimit two servers in a path.\\n */\\nfunction delimiter() {\\n    return \\\",\\\";\\n}\\n\\n/**\\n * Print the tree structure of the network of world servers.\\n *\\n * @param ns The Netscript API.\\n * @param path An array of shortest paths from the home server to each server\\n *     in the game world.  This array should be the output of the function\\n *     all_shortest_paths().\\n */\\nfunction display_tree(ns, path) {\\n    assert(path.length > 0);\\n    // Internal representation of the tree structure.  Visualize this\\n    // representation as a matrix or grid.  Each row represents a shortest path.\\n    const delim = delimiter();\\n    const root = [[home]];\\n    const tree = root.concat(path.map((p) => p.split(delim)));\\n    // Convert internal representation to ASCII art.\\n    const [grid, map] = to_ascii_art(tree);\\n    const art = beautify(ns, grid, map);\\n    ns.tprint(art);\\n}\\n\\n/**\\n * Internal representation of a fork.  A fork is immediately followed by a leaf.\\n */\\nfunction fork() {\\n    return \\\"└╴\\\";\\n}\\n\\n/**\\n * Internal representation for a leaf, i.e. a destination server.\\n */\\nfunction leaf() {\\n    return \\\"+\\\";\\n}\\n\\n/**\\n * Determine the number of ports a player can currently open on servers in\\n * the game world.  This depends on whether the player has the necessary\\n * hacking programs on the home server.\\n *\\n * @param ns The Netscript API.\\n * @return How many ports we can open on a world server.\\n */\\nfunction num_ports(ns) {\\n    let program = Array.from(popen);\\n    program = program.filter((p) => ns.fileExists(p, home));\\n    return program.length;\\n}\\n\\n/**\\n * Internal representation for a whitespace.\\n */\\nfunction placeholder() {\\n    return \\\".\\\";\\n}\\n\\n/**\\n * Remove a dead branch.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @param r Start the pruning from this row upward.\\n * @return The same matrix, but with dead branches removed.\\n */\\nfunction prune_branch(matrix, r) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    assert(r >= 0);\\n    // A shallow copy so we don't modify the parameter directly.  Still modify\\n    // it indirectly.\\n    const mat = Array.from(matrix);\\n    let col = mat[r].length - 3;\\n    const maxidx = mat.length - 1;\\n    while (col >= 0) {\\n        if (maxidx !== r && leaf() === mat[r + 1][col]) {\\n            return mat;\\n        }\\n        let row = Math.floor(r);\\n        while (row > 0) {\\n            if (leaf() === mat[row][col + 1]) {\\n                break;\\n            }\\n            mat[row][col] = placeholder();\\n            row--;\\n        }\\n        col--;\\n    }\\n    return mat;\\n}\\n\\n/**\\n * Prune branches that connect two siblings.  We do not need such branches.\\n * We can work out which servers are siblings by following the branch lines\\n * that connect two forks.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @return The same matrix, but with sibling branches removed.\\n */\\nfunction prune_sibling_branch(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // A shallow copy so we don't modify the parameter directly.  We still\\n    // modify it indirectly.\\n    const mat = Array.from(matrix);\\n    // Start from the second row onward.\\n    for (let i = 1; i < mat.length; i++) {\\n        // Top row is shorter than bottom row.\\n        if (mat[i - 1].length < mat[i].length) {\\n            continue;\\n        }\\n        // There is a leaf immediately above the current leaf.\\n        const j = mat[i].length - 1;\\n        if (leaf() === mat[i - 1][j]) {\\n            continue;\\n        }\\n        // Start pruning from this row and work upward.\\n        let row = i - 1;\\n        while (row > 0) {\\n            if (fork() === mat[row][j]) {\\n                break;\\n            }\\n            assert(branch() === mat[row][j]);\\n            mat[row][j] = placeholder();\\n            row--;\\n        }\\n    }\\n    return mat;\\n}\\n\\n/**\\n * A T junction.\\n */\\nfunction tee() {\\n    return \\\"├╴\\\";\\n}\\n\\n/**\\n * Translate the internal representation of the network of servers into ASCII\\n * art.\\n *\\n * @param tree A matrix containing the internal representation of the network\\n *     of servers.\\n * @return An array [grid, map] as follows.\\n *\\n *     grid := The internal representation as ASCII art.\\n *     map := Converts a pair of coordinates in grid to a server name.\\n */\\nfunction to_ascii_art(tree) {\\n    assert(tree.length > 0);\\n    assert(tree[0].length > 0);\\n    // Start from the second row.  The first row has only the home server.\\n    const grid = []; // ASCII art.\\n    const map = new Map(); // Coordinates to server name.\\n    assert(tree[0].length === 1);\\n    assert(home === tree[0][0]);\\n    grid.push([leaf()]);\\n    const delim = delimiter();\\n    map.set(`0${delim}0`, home);\\n    for (let i = 1; i < tree.length; i++) {\\n        const previous = tree[i - 1];\\n        const current = tree[i];\\n        const row = [];\\n        // The first element is always the home server.\\n        assert(home === current[0]);\\n        for (let j = 0; j < current.length; j++) {\\n            // A leaf, i.e. the destination server in a shortest path.\\n            if (j >= previous.length || previous[j] !== current[j]) {\\n                row.push(leaf());\\n                const coord = i + delim + j;\\n                map.set(coord, current[j]);\\n                continue;\\n            }\\n            // A branch.\\n            assert(previous[j] === current[j]);\\n            row.push(branch());\\n        }\\n        grid.push(row);\\n    }\\n    return [grid, map];\\n}\\n\\n/**\\n * Convert the matrix representation of the ASCII art into a string.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @return A string representation of the ASCII art.\\n */\\nfunction to_string(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // A shallow copy so we don't modify the parameter directly.  We still\\n    // modify it indirectly.\\n    const mat = Array.from(matrix);\\n    // Substitute a place holder with a whitespace.\\n    const whitespace = \\\"   \\\";\\n    for (let i = 0; i < mat.length; i++) {\\n        for (let j = 0; j < mat[i].length; j++) {\\n            if (placeholder() === mat[i][j]) {\\n                mat[i][j] = whitespace;\\n            }\\n        }\\n    }\\n    // Entries in the matrix as a string.\\n    let art = io.NEWLINE;\\n    for (const row of mat) {\\n        art += row.join(\\\"\\\") + io.NEWLINE;\\n    }\\n    return art;\\n}\\n\\n/**\\n * A tree structure of the servers in the game world.  If our home server is\\n * called \\\"home\\\", we might have the network map:\\n *\\n * home\\n * ├╴servA (1)[0]\\n * │  ├╴servD (15)[2]\\n * │  ├╴servE (100)[2]\\n * │  │  └╴servG (302)[3]\\n * │  └╴servG (256)[2]\\n * ├╴servB (101)[1]\\n * └╴servC (150)[2]\\n *\\n * The above network map tells us various information about the servers in the\\n * game world, apart from how these servers are structured relative to each\\n * other.  For example, the line \\\"serverName (n)[k]\\\" tells us the name of a\\n * server (i.e. serverName), the minimum Hack stat we must have in order to\\n * hack this server (i.e. n), and the number of ports that must be opened on\\n * the server (i.e. k) so we can nuke the server.  The server servA requires us\\n * to have a minimum of 1 Hack and we do not need to open any ports on the\\n * server.  As we always start with 1 Hack, we can immediately nuke servA and\\n * gain root access on that server.  On the other hand, servG requires a\\n * minimum of 302 Hack and we must open 3 ports on the server.\\n *\\n * How do we reach a particular server?  To reach servG, we start from our\\n * home server and connect to servA.  From there, we connect to servE and\\n * finally connect to servG.  The network map printed by the script shows a\\n * shortest path from the home server to each server in the game world.  There\\n * might be more than one shortest path from home to a particular server.  The\\n * script chooses to print only one of these shortest paths.\\n *\\n * When printed to the terminal, various colours are used to signify the status\\n * of each server, as explained below.\\n *\\n * 1. The whole line \\\"serverName (n)[k]\\\" is coloured green.  We have nuked\\n *    serverName and now have root access on the server.\\n * 2. The whole line \\\"serverName (n)[k]\\\" is coloured dark green.  We have\\n *    enough Hack stat to meet the minimum hacking skill requirement and we can\\n *    open all ports on the server.  However, we do not have root access on the\\n *    server because the server is yet to be nuked.\\n * 3. The whole line \\\"serverName (n)[k]\\\" is coloured red.  Our Hack stat is\\n *    less than the required minimum hacking skill and we cannot open all ports\\n *    on the server.\\n * 4. The part \\\"serverName (n)\\\" is coloured dark green whereas \\\"[k]\\\" is\\n *    coloured red.  We meet the minimum Hack stat required by the server, but\\n *    we cannot open all ports on the server.\\n * 5. The part \\\"serverName (n)\\\" is coloured red whereas \\\"[k]\\\" is coloured dark\\n *    green.  Our Hack stat is less than the minimum hacking skill required by\\n *    the server, but we can open all ports on the server.\\n *\\n * This script does not implement the functionalities of https://nmap.org.\\n * However, it serves the same purpose as the script\\n *\\n * https://github.com/alainbryden/bitburner-scripts/blob/main/scan.js\\n *\\n * We do not include purchased servers.  The script accepts a command line\\n * argument, i.e. the hostname of the server for which we want a status report.\\n * Without a command line argument, the script prints a map of the whole\\n * network of world servers.\\n *\\n * Usage: run quack/nmap.js [hostname]\\n * Example: run quack/nmap.js\\n * Example: run quack/nmap.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Sanity check.\\n    if (ns.args.length > 1) {\\n        let msg = \\\"Usage: run quack/nmap.js [hostname]\\\\n\\\\n\\\";\\n        msg += \\\"hostname -- (optional) Hostname of target server.\\\";\\n        ns.tprint(msg);\\n        return;\\n    }\\n    // Print the status of a server.\\n    if (ns.args.length === 1) {\\n        const host = ns.args[0];\\n        const server = new Set(network(ns));\\n        if (!server.has(host)) {\\n            ns.tprint(`Server not found: ${host}`);\\n            return;\\n        }\\n        ns.tprint(decorate(ns, host));\\n        return;\\n    }\\n    // A network map with status of each server.\\n    const path = all_shortest_paths(ns);\\n    display_tree(ns, path);\\n}\\n\",\"filename\":\"/quack/nmap.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport {\\n    assert,\\n    choose_targets,\\n    filter_bankrupt_servers,\\n    server_of_max_weight,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Restart all scripts on a purchased server.  This is useful in the case where\\n * all scripts running on a purchased server have been killed.  We start running\\n * those scripts again.  This script chooses the \\\"best\\\" servers to hack.\\n *\\n * Usage: run quack/restart-server.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Cycle through our purchased servers to see whether to restart our\\n    // hack script.\\n    const player = new Player(ns);\\n    let target = [];\\n    player.pserv().forEach((s) => {\\n        // Determine the target servers to hack.  There are always at least 2\\n        // targets because at least 2 servers in the game world require only\\n        // 1 Hack stat and zero opened ports.\\n        // Assume that each target is not bankrupt.\\n        if (target.length < 1) {\\n            target = filter_bankrupt_servers(\\n                ns,\\n                choose_targets(ns, network(ns))\\n            );\\n            assert(target.length > 0);\\n        }\\n        const server = new Server(ns, s);\\n        if (!server.is_running_script(player.script())) {\\n            // Choose the best target server that is not bankrupt.  Run our\\n            // hack script against this target server.\\n            const t = server_of_max_weight(ns, target);\\n            target = target.filter((r) => r !== t);\\n            const target_server = new Server(ns, t);\\n            assert(target_server.gain_root_access());\\n            assert(server.deploy(target_server.hostname()));\\n        }\\n    });\\n}\\n\",\"filename\":\"/quack/restart-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":10.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/**\\n * Share our home server with a faction.  Doing so would increase our\\n * reputation gains within that faction.  Run this script using as high a number\\n * of threads as possible to increase our reputation gains even further.\\n *\\n * Usage: run quack/share.js -t [numThread]\\n * Example: run quack/share.js -t 42\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    for (;;) {\\n        await ns.share();\\n    }\\n}\\n\",\"filename\":\"/quack/share.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes, crimes_t } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Commit some other crime to earn some income.  We also want to lower our\\n * karma so that we can create a gang at some later time.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Continue committing crimes as long as our money is less\\n *     than this amount.\\n */\\nasync function commit_other_crime(ns, threshold) {\\n    assert(threshold > 0);\\n    log(\\n        ns,\\n        `Commit homicide to raise money to ${ns.nFormat(threshold, \\\"$0,0.00a\\\")}`\\n    );\\n    ns.singularity.commitCrime(crimes.KILL, bool.FOCUS);\\n    while (ns.getServerMoneyAvailable(home) < threshold) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Whether our combat stats are at least a given threshold.\\n *\\n * @param ns The Netscript API.\\n * @return True if our combat stats are each at least crimes_t.MUG;\\n *     false otherwise.\\n */\\nfunction has_mug_threshold(ns) {\\n    const stat = ns.getPlayer().skills;\\n    return (\\n        stat.agility >= crimes_t.MUG\\n        && stat.defense >= crimes_t.MUG\\n        && stat.dexterity >= crimes_t.MUG\\n        && stat.strength >= crimes_t.MUG\\n    );\\n}\\n\\n/**\\n * Whether our Dexterity and Agility stats are at least a given threshold.\\n *\\n * @param ns The Netscript API.\\n * @return True if our Dexterity and Agility stats are each at least\\n *   crimes_t.SHOP; false otherwise.\\n */\\nfunction has_shoplift_threshold(ns) {\\n    const stat = ns.getPlayer().skills;\\n    return stat.agility >= crimes_t.SHOP && stat.dexterity >= crimes_t.SHOP;\\n}\\n\\n/**\\n * Mug someone a few times to raise all our combat stats, i.e. Strength,\\n * Defense, Dexterity, Agility.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function mug_someone(ns) {\\n    log(ns, \\\"Mug someone to raise money and combat stats\\\");\\n    const stat = ns.singularity.getCrimeStats(crimes.MUG);\\n    const time = crimes_t.n * stat.time;\\n    ns.singularity.commitCrime(crimes.MUG, bool.FOCUS);\\n    if (!has_mug_threshold(ns)) {\\n        await ns.sleep(time);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Shoplift a few times to raise our Dexterity and Agility stats.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function shoplift(ns) {\\n    log(ns, \\\"Shoplift to raise money, and Dexterity and Agility stats\\\");\\n    const stat = ns.singularity.getCrimeStats(crimes.SHOP);\\n    const time = crimes_t.n * stat.time;\\n    ns.singularity.commitCrime(crimes.SHOP, bool.FOCUS);\\n    if (!has_shoplift_threshold(ns)) {\\n        await ns.sleep(time);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Commit various crimes to supplement our income.  Early in the game when our\\n * funds are limited, crimes can be a source of income to help us\\n * purchase/upgrade our Hacknet farm or purchase various servers with small\\n * amounts of RAM.  Committing crimes is also the best way to lower our karma.\\n * If we have already destroyed at least BN2.1, then we can form a gang in\\n * other BitNodes.  However, in BitNodes other than BN2.x we must decrease our\\n * karma to -54,000 or lower as a pre-requisite for creating a gang.  This\\n * constant is taken from the file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/Gang/data/Constants.ts\\n *\\n * The script accepts a command line argument:\\n *\\n * (1) threshold := As long as our income is less than this threshold, continue\\n *     to commit crimes to raise our income.\\n *\\n * Assume that our home server has 32GB RAM.  Try to keep the RAM cost of this\\n * script as low as possible.  Do not add anything to the script unless\\n * absolutely necessary.\\n *\\n * Usage: run singularity/crime.js [threshold]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Sanity checks.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    const threshold = Math.floor(ns.args[0]);\\n    assert(threshold > 0);\\n    // Commit crimes as long as our funds is less than the given threshold.\\n    await shoplift(ns);\\n    await mug_someone(ns);\\n    await commit_other_crime(ns, threshold);\\n}\\n\",\"filename\":\"/quack/singularity/crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":178.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getCrimeStats\",\"cost\":80}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { augment } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { server } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { corp_cleanup } from \\\"/quack/lib/corporation/util.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { join_all_factions } from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { connect_to } from \\\"/quack/lib/singularity/network.js\\\";\\nimport { assert, cleanup } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Find and destroy the w0r1d_d43m0n server.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function destroy(ns) {\\n    log(ns, `Searching for target server: ${server.WD}`);\\n    const serv = new Server(ns, server.WD);\\n    const player = new Player(ns);\\n    while (player.hacking_skill() < serv.hacking_skill()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    while (!serv.has_root_access()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        serv.gain_root_access();\\n    }\\n    assert(player.hacking_skill() >= serv.hacking_skill());\\n    assert(serv.has_root_access());\\n    // First, try to raise our Intelligence stat.\\n    join_all_factions(ns);\\n    // Now hack the target server.\\n    cleanup(ns);\\n    corp_cleanup(ns);\\n    connect_to(ns, player.home(), serv.hostname());\\n    await ns.singularity.installBackdoor();\\n}\\n\\n/**\\n * Destroy the w0r1d_d43m0n server.\\n *\\n * Usage: run singularity/daemon.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const augmentation = ns.singularity.getOwnedAugmentations(\\n        bool.NOT_PURCHASED\\n    );\\n    if (!augmentation.includes(augment.TRP)) {\\n        return;\\n    }\\n    await destroy(ns);\\n}\\n\",\"filename\":\"/quack/singularity/daemon.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"corporation.getCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getDivision\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOffice\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.research\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUnlockUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.unlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.purchaseWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.createCorporation\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.makeProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.discontinueProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setProductMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA1\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setMaterialMarketTA2\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.setSmartSupply\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandCity\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.expandIndustry\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.goPublic\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasResearched\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hasUnlockUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireEmployee\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getHireAdVertCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.hireAdVert\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.issueDividends\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevel\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeLevelCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.levelUpgrade\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.buyMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellMaterial\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.sellProduct\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getResearchCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getOfficeSizeUpgradeCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeOfficeSize\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getUpgradeWarehouseCost\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.upgradeWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"corporation.getWarehouse\",\"cost\":1024},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { work_hack_lvl } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { purchase_augment } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { commit_crime } from \\\"/quack/lib/singularity/crime.js\\\";\\nimport {\\n    join_faction,\\n    work_for_faction,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { visit_city } from \\\"/quack/lib/singularity/network.js\\\";\\nimport { work } from \\\"/quack/lib/singularity/work.js\\\";\\nimport { assert, exec, is_valid_city } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Join a city faction.  The requirements for receiving an invitation usually\\n * follow this pattern:\\n *\\n * (1) Must be located in a particular city.\\n * (2) Have at least a certain amount of money.\\n *\\n * Here are the requirements for each city faction:\\n *\\n * (1) Aevum: must be in Aevum; have at least $40m.\\n * (2) Chongqing: must be in Chongqing; have at least $20m.\\n * (3) Ishima: must be in Ishima; have at least $30m.\\n * (4) New Tokyo: must be in New Tokyo; have at least $20m.\\n * (5) Sector-12: must be in Sector-12; have at least $15m.\\n * (6) Volhaven: must be in Volhaven; have at least $50m.\\n *\\n * @param ns The Netscript API.\\n * @param city We must be located in this city.  This is also the faction name.\\n */\\nasync function city_faction(ns, city) {\\n    assert(is_valid_city(city));\\n    await visit_city(ns, city);\\n    // Boost our income.\\n    const fac = city;\\n    const player = new Player(ns);\\n    if (player.money() < faction_req[fac].money) {\\n        if (player.hacking_skill() < work_hack_lvl) {\\n            await commit_crime(ns, faction_req[fac].money);\\n        } else {\\n            await work(ns, faction_req[fac].money);\\n        }\\n    }\\n    // Join the faction and purchase all of its Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Various sanity checks of a parameter.\\n *\\n * @param fac Sanity check this parameter.\\n */\\nfunction sanity_check(fac) {\\n    assert(\\n        fac === \\\"Aevum\\\"\\n            || fac === \\\"Chongqing\\\"\\n            || fac === \\\"Ishima\\\"\\n            || fac === \\\"New Tokyo\\\"\\n            || fac === \\\"Sector-12\\\"\\n            || fac === \\\"Volhaven\\\"\\n    );\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Join a city faction.  The city factions are: Aevum, Chongqing, Ishima,\\n * New Tokyo, Sector-12, Volhaven.  This script accepts a command line\\n * argument, i.e. the name of a faction.\\n *\\n * Usage: run singularity/faction-city.js [factionName]\\n * Example: run singularity/faction-city.js Sector-12\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Join the appropriate faction.\\n    const faction = ns.args[0];\\n    sanity_check(faction);\\n    await city_faction(ns, faction);\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/home.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/faction-city.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":964.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { work_hack_lvl } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport { purchase_augment } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { lower_karma } from \\\"/quack/lib/singularity/crime.js\\\";\\nimport {\\n    join_faction,\\n    raise_combat_stats,\\n    raise_hack,\\n    work_for_faction,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { visit_city } from \\\"/quack/lib/singularity/network.js\\\";\\nimport {\\n    raise_charisma,\\n    rise_to_cfo,\\n    work,\\n} from \\\"/quack/lib/singularity/work.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Various sanity checks of a parameter.\\n *\\n * @param fac Sanity check this parameter.\\n */\\nfunction sanity_check(fac) {\\n    assert(\\n        fac === \\\"Silhouette\\\"\\n            || fac === \\\"Slum Snakes\\\"\\n            || fac === \\\"The Syndicate\\\"\\n            || fac === \\\"Speakers for the Dead\\\"\\n            || fac === \\\"Tetrads\\\"\\n            || fac === \\\"The Dark Army\\\"\\n    );\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Join the Silhouette criminal organization.  The requirements for receiving\\n * an invitation:\\n *\\n * (1) Must be a CTO, CFO, or CEO of a company.  An easy way to meet this\\n *     requirement is to work our way up within a company.  Choose MegaCorp in\\n *     Sector-12.  Have at least 250 Hack.  Work a software job to raise our\\n *     Charisma to at least 250.  Then apply for a business job.  Work the job\\n *     and after a while apply for a promotion.  Rinse and repeat until we\\n *     reach the level of CFO.  The promotion chain at MegaCorp is: Business\\n *     Intern, Business Manager, Operations Manager, Chief Financial Officer,\\n *     Chief Executive Officer.  We stop at CFO of MegaCorp because we do not\\n *     want to spend any more time on becoming CEO of the company.\\n * (2) Have at least $15m.\\n * (3) Karma at -22 or lower.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function silhouette(ns) {\\n    // Relocate to raise Intelligence XP.\\n    await visit_city(ns, \\\"Sector-12\\\");\\n    const company = \\\"MegaCorp\\\";\\n    // Rise to a top position at a company.\\n    const charisma_lvl = work_hack_lvl;\\n    await raise_charisma(ns, work_hack_lvl, charisma_lvl);\\n    await rise_to_cfo(ns, company);\\n    // Lower karma and raise our money.\\n    const fac = \\\"Silhouette\\\";\\n    const nkill = 0;\\n    await lower_karma(ns, faction_req[fac].karma, crimes.SHOP, nkill);\\n    await work(ns, faction_req[fac].money);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the criminal organization Slum Snakes.  The requirements for receiving\\n * an invitation:\\n *\\n * (1) Each combat stat must be at least 30.  By now we should already have\\n *     joined and purchased all Augmentations from megacorporation factions.\\n *     To raise our combat stats, we simply re-join one of these factions and\\n *     carry out field work.\\n * (2) Karma at or lower than -9.\\n * (3) Have at least $1m.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function slum_snakes(ns) {\\n    // Lower karma, raise combat stats, and raise money.\\n    const fac = \\\"Slum Snakes\\\";\\n    const nkill = 0;\\n    await lower_karma(ns, faction_req[fac].karma, crimes.SHOP, nkill);\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    await work(ns, faction_req[fac].money);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.FIELD);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the criminal organization Speakers for the Dead.  The requirements for\\n * receiving an invitation:\\n *\\n * (1) At least 100 Hack.\\n * (2) Each combat stat must be at least 300.\\n * (3) Must have killed at least 30 people.\\n * (4) Karma is at -45 or lower.\\n * (5) Not working for CIA or NSA.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function speakers_for_the_dead(ns) {\\n    // Lower karma, raise combat stats, and raise Hack stat.\\n    const fac = \\\"Speakers for the Dead\\\";\\n    await lower_karma(\\n        ns,\\n        faction_req[fac].karma,\\n        crimes.KILL,\\n        faction_req[fac].kill\\n    );\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    await raise_hack(ns, faction_req[fac].hack);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    // Perform Hacking Contracts so we can benefit from the extra reputation\\n    // gain when we share our home server with the faction.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the criminal organization Tetrads.  The requirements for receiving an\\n * invitation:\\n *\\n * (1) Must be located in Chongqing, New Tokyo, or Ishima.\\n * (2) Each combat stat must be at least 75.\\n * (3) Karma is at -18 or lower.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function tetrads(ns) {\\n    const fac = \\\"Tetrads\\\";\\n    // Lower karma and raise combat stats.\\n    const nkill = 0;\\n    await lower_karma(ns, faction_req[fac].karma, crimes.SHOP, nkill);\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await visit_city(ns, faction_req[fac].city);\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.FIELD);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the criminal organization The Dark Army.  The requirements for\\n * receiving an invitation:\\n *\\n * (1) At least 300 Hack.\\n * (2) Each combat stat must be at least 300.\\n * (3) Must be located in Chongqing.\\n * (4) Must have killed at least 5 people.\\n * (5) Karma at -45 or lower.\\n * (6) Not working for CIA or NSA.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function the_dark_army(ns) {\\n    const fac = \\\"The Dark Army\\\";\\n    // Raise our Hack and combat stats, and lower our karma.\\n    await raise_hack(ns, faction_req[fac].hack);\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    await lower_karma(\\n        ns,\\n        faction_req[fac].karma,\\n        crimes.KILL,\\n        faction_req[fac].kill\\n    );\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await visit_city(ns, faction_req[fac].city);\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.FIELD);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the criminal organization The Syndicate.  The requirements for\\n * receiving an invitation:\\n *\\n * (1) At least 200 Hack.\\n * (2) Each combat stat must be at least 200.\\n * (3) Must be located in Aevum or Sector-12.\\n * (4) Have at least $10m.\\n * (5) Karma at -90 or lower.\\n * (6) Not working for CIA or NSA.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function the_syndicate(ns) {\\n    const fac = \\\"The Syndicate\\\";\\n    // Raise our Hack and combat stats, lower our karma, and raise our income.\\n    await raise_hack(ns, faction_req[fac].hack);\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    const nkill = 0;\\n    await lower_karma(ns, faction_req[fac].karma, crimes.KILL, nkill);\\n    await work(ns, faction_req[fac].money);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    // Perform Hacking Contracts so we can benefit from the extra reputation\\n    // gain when we share our home server with the faction.\\n    await visit_city(ns, faction_req[fac].city);\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join a criminal organization.  The criminal organizations are: Silhouette,\\n * Slum Snakes, The Syndicate, Speakers for the Dead, Tetrads, The Dark Army.\\n * This script accepts a command line argument, i.e. the name of a faction.\\n *\\n * Usage: run singularity/faction-crime.js [factionName]\\n * Example: run singularity/faction-crime.js Silhouette\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Join the appropriate faction.\\n    const faction = ns.args[0];\\n    sanity_check(faction);\\n    ns.singularity.goToLocation(\\\"The Slums\\\"); // Increase Intelligence XP.\\n    switch (faction) {\\n        case \\\"Silhouette\\\":\\n            await silhouette(ns);\\n            break;\\n        case \\\"Slum Snakes\\\":\\n            await slum_snakes(ns);\\n            break;\\n        case \\\"The Syndicate\\\":\\n            await the_syndicate(ns);\\n            break;\\n        case \\\"Speakers for the Dead\\\":\\n            await speakers_for_the_dead(ns);\\n            break;\\n        case \\\"Tetrads\\\":\\n            await tetrads(ns);\\n            break;\\n        case \\\"The Dark Army\\\":\\n            await the_dark_army(ns);\\n            break;\\n        default:\\n            break;\\n    }\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/home.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/faction-crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { work_hack_lvl } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { purchase_augment } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { commit_crime } from \\\"/quack/lib/singularity/crime.js\\\";\\nimport {\\n    join_faction,\\n    work_for_faction,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport {\\n    install_backdoor,\\n    visit_city,\\n} from \\\"/quack/lib/singularity/network.js\\\";\\nimport { raise_hack } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { work } from \\\"/quack/lib/singularity/work.js\\\";\\nimport { assert, exec, has_required_hack } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Join the CyberSec faction.  The requirement for receiving an invitation is\\n * to install a backdoor on the CSEC server.  The requirement can be broken up\\n * into the following mini-requirements:\\n *\\n * (1) Have at least the hacking skill required by the target server.  This is\\n *     usually a low-level server, typically requiring a hacking skill between\\n *     50 and 60.\\n * (2) Gain root access on the target server.  As this is a low-level server,\\n *     it requires between 1 and 2 ports to be opened before we can nuke the\\n *     server.  We need some time to acquire the port opener programs.\\n * (3) Manually install a backdoor on the target server.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function cyberSec(ns) {\\n    await visit_city(ns, \\\"Sector-12\\\");\\n    // Ensure we have the required Hack stat.\\n    const fac = \\\"CyberSec\\\";\\n    const server = new Server(ns, faction_req[fac].backdoor);\\n    if (!has_required_hack(ns, server.hostname())) {\\n        await raise_hack(ns, server.hacking_skill());\\n    }\\n    assert(has_required_hack(ns, server.hostname()));\\n    // Ensure we have root access on the target server.\\n    while (!server.has_root_access()) {\\n        server.gain_root_access();\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    assert(server.has_root_access());\\n    // Install backdoor, then join the faction.\\n    await install_backdoor(ns, server.hostname());\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the early game faction Netburners.  Requirements to receive an\\n * invitation:\\n *\\n * (1) Be anywhere in the game world.  Stay put where we started,\\n *     i.e. Sector-12.\\n * (2) At least 80 Hack.\\n * (3) A total Hacknet Level of 100.  This means that all of our Hacknet nodes\\n *     have a collective Level of 100.\\n * (4) A total Hacknet RAM of 8GB.  All of our Hacknet nodes have a collective\\n *     RAM of 8GB.\\n * (5) A total Hacknet Cores of 4.  All of our Hacknet nodes collectively have\\n *     at least 4 Cores.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function netburners(ns) {\\n    await visit_city(ns, \\\"Sector-12\\\");\\n    // Ensure we have at least the required Hack stat.\\n    const fac = \\\"Netburners\\\";\\n    const player = new Player(ns);\\n    const required_lvl = faction_req[fac].hack;\\n    if (player.hacking_skill() < required_lvl) {\\n        await raise_hack(ns, required_lvl);\\n    }\\n    assert(player.hacking_skill() >= required_lvl);\\n    // Join the faction, provided we are currently not a member.\\n    const joined_faction = player.faction();\\n    if (!joined_faction.includes(fac)) {\\n        // Upgrading our Hacknet farm requires a huge amount of money.  Commit\\n        // crimes, or work at a company, to boost our income.  Continue to\\n        // commit crimes (or working) as long as we have not yet received an\\n        // invitation from the Netburners faction.\\n        const factor = 1.01;\\n        let threshold = factor * player.money();\\n        let invite = ns.singularity.checkFactionInvitations();\\n        while (!invite.includes(fac)) {\\n            if (player.hacking_skill() < work_hack_lvl) {\\n                await commit_crime(ns, threshold);\\n            } else {\\n                await work(ns, threshold);\\n            }\\n            await ns.sleep(wait_t.SECOND);\\n            threshold = factor * player.money();\\n            invite = ns.singularity.checkFactionInvitations();\\n        }\\n        ns.singularity.joinFaction(fac);\\n    }\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Various sanity checks of a parameter.\\n *\\n * @param fac Sanity check this parameter.\\n */\\nfunction sanity_check(fac) {\\n    assert(fac === \\\"CyberSec\\\" || fac === \\\"Netburners\\\" || fac === \\\"Tian Di Hui\\\");\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Join the early game faction Tian Di Hui.  Requirements for receiving an\\n * invitation:\\n *\\n * (1) Have at least $1m.\\n * (2) At least 50 Hack.\\n * (3) Located in Chongqing, New Tokyo, or Ishima.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function tian_di_hui(ns) {\\n    // Ensure we have at least the required Hack stat.\\n    const fac = \\\"Tian Di Hui\\\";\\n    const player = new Player(ns);\\n    const required_lvl = faction_req[fac].hack;\\n    if (player.hacking_skill() < required_lvl) {\\n        await raise_hack(ns, required_lvl);\\n    }\\n    assert(player.hacking_skill() >= required_lvl);\\n    // Travel to Ishima and wait for our income to be at least $1m.\\n    await visit_city(ns, faction_req[fac].city);\\n    if (player.money() < faction_req[fac].money) {\\n        if (player.hacking_skill() < work_hack_lvl) {\\n            await commit_crime(ns, faction_req[fac].money);\\n        } else {\\n            await work(ns, faction_req[fac].money);\\n        }\\n    }\\n    // Join the faction and purchase all of its Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join an early-game faction.  The early-game factions are: CyberSec,\\n * Netburners, Tian Di Hui.  This script accepts a command line argument,\\n * i.e. the name of a faction.\\n *\\n * Usage: run singularity/faction-early.js [factionName]\\n * Example: run singularity/faction-early.js CyberSec\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Join the appropriate faction.\\n    const faction = ns.args[0];\\n    sanity_check(faction);\\n    switch (faction) {\\n        case \\\"CyberSec\\\":\\n            await cyberSec(ns);\\n            break;\\n        case \\\"Netburners\\\":\\n            await netburners(ns);\\n            break;\\n        case \\\"Tian Di Hui\\\":\\n            await tian_di_hui(ns);\\n            break;\\n        default:\\n            break;\\n    }\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/home.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/faction-early.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport {\\n    owned_augment,\\n    purchase_augment,\\n} from \\\"/quack/lib/singularity/augment.js\\\";\\nimport {\\n    join_faction,\\n    raise_combat_stats,\\n    raise_hack,\\n    work_for_faction,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { work } from \\\"/quack/lib/singularity/work.js\\\";\\nimport { has_ai_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Join the endgame faction Daedalus.  The requirements for receiving an\\n * invitation:\\n *\\n * (1) Must have installed at least a certain number of Augmentations.  This\\n *     number varies.  It can be accessed via the getBitNodeMultipliers()\\n *     function, under the DaedalusAugsRequirement property.  The function is\\n *     available after the destruction of \\\"BitNode-5: Artificial Intelligence\\\".\\n * (2) Have at least $100b.\\n * (3) Either of the following:\\n *     (a) At least 2,500 Hack; or\\n *     (b) Each combat stat must be at least 1,500.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function daedalus(ns) {\\n    // Ensure we have already installed a minimum number of Augmentations.\\n    const augment = owned_augment(ns);\\n    let min_augment = 30;\\n    if (has_ai_api(ns)) {\\n        min_augment = ns.getBitNodeMultipliers().DaedalusAugsRequirement;\\n    }\\n    assert(augment.size >= min_augment);\\n    // Raise our money and Hack stat.\\n    const fac = \\\"Daedalus\\\";\\n    await work(ns, faction_req[fac].money);\\n    await raise_hack(ns, faction_req[fac].hack);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join the endgame faction Illuminati.  The requirements for receiving an\\n * invitation:\\n *\\n * (1) Must have installed at least 30 Augmentations.\\n * (2) Have at least $150b.\\n * (3) At least 1,500 Hack.\\n * (4) Each combat stat must be at least 1,200.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function illuminati(ns) {\\n    // Ensure we have already installed at least 30 Augmentations.\\n    const augment = owned_augment(ns);\\n    assert(augment.size >= 30);\\n    // Raise our money, Hack stat, and combat stats.\\n    const fac = \\\"Illuminati\\\";\\n    await work(ns, faction_req[fac].money);\\n    await raise_hack(ns, faction_req[fac].hack);\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Various sanity checks of a parameter.\\n *\\n * @param fac Sanity check this parameter.\\n */\\nfunction sanity_check(fac) {\\n    assert(\\n        fac === \\\"Daedalus\\\" || fac === \\\"Illuminati\\\" || fac === \\\"The Covenant\\\"\\n    );\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Join the endgame faction The Covenant.  The requirements for receiving an\\n * invitation:\\n *\\n * (1) Must have installed at least 20 Augmentations.\\n * (2) Have at least $75b.\\n * (3) At least 850 Hack.\\n * (4) Each combat stat must be at least 850.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function the_covenant(ns) {\\n    // Ensure we have already installed at least 20 Augmentations.\\n    const augment = owned_augment(ns);\\n    assert(augment.size >= 20);\\n    // Raise our money, Hack stat, and combat stats.\\n    const fac = \\\"The Covenant\\\";\\n    await work(ns, faction_req[fac].money);\\n    await raise_hack(ns, faction_req[fac].hack);\\n    await raise_combat_stats(ns, faction_req[fac].combat);\\n    // Join the faction, earn reputation points, and purchase all Augmentations.\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Join an endgame faction.  The endgame factions are: Daedalus, Illuminati,\\n * The Covenant.  This script accepts a command line argument, i.e. the name\\n * of a faction.\\n *\\n * Usage: run singularity/faction-end.js [factionName]\\n * Example: run singularity/faction-end.js Daedalus\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Join the appropriate faction.\\n    const faction = ns.args[0];\\n    sanity_check(faction);\\n    switch (faction) {\\n        case \\\"Daedalus\\\":\\n            await daedalus(ns);\\n            break;\\n        case \\\"Illuminati\\\":\\n            await illuminati(ns);\\n            break;\\n        case \\\"The Covenant\\\":\\n            await the_covenant(ns);\\n            break;\\n        default:\\n            break;\\n    }\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/home.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/faction-end.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { faction_req } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { purchase_augment } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport {\\n    join_faction,\\n    raise_hack,\\n    work_for_faction,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport {\\n    install_backdoor,\\n    visit_city,\\n} from \\\"/quack/lib/singularity/network.js\\\";\\nimport { raise_hack_until } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { assert, exec, has_required_hack } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Join a hacking group.  The requirement for receiving an invitation is to\\n * install a backdoor on a target server.  The requirement can be broken up\\n * into the following mini-requirements:\\n *\\n * (1) Have at least the hacking skill required by the target server.  This is\\n *     usually a mid-level server, typically requiring a hacking skill of\\n *     several 100s.\\n * (2) Gain root access on the target server.  As this is a mid-level server,\\n *     it requires between 2 to 4 ports to be opened before we can nuke the\\n *     server.  We need some time to acquire at most 4 port opener programs.\\n * (3) Manually install a backdoor on the target server.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to join this hacking group.\\n */\\nasync function hacking_group(ns, fac) {\\n    // If possible, we want to perform Hacking Contracts for this faction in\\n    // order to raise our Hack stat.\\n    const target_fac = \\\"Sector-12\\\";\\n    await visit_city(ns, target_fac);\\n    // Ensure we have the required Hack stat.\\n    const server = new Server(ns, faction_req[fac].backdoor);\\n    if (!has_required_hack(ns, server.hostname())) {\\n        await raise_hack_until(ns, server.hacking_skill(), target_fac);\\n    }\\n    if (!has_required_hack(ns, server.hostname())) {\\n        await raise_hack(ns, server.hacking_skill());\\n    }\\n    assert(has_required_hack(ns, server.hostname()));\\n    // Ensure we have root access on the target server.\\n    while (!server.has_root_access()) {\\n        server.gain_root_access();\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    assert(server.has_root_access());\\n    // Install backdoor, then join the faction.\\n    await install_backdoor(ns, server.hostname());\\n    await join_faction(ns, fac);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    ns.print(`Buy Augmentations from ${fac}`);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Various sanity checks of a parameter.\\n *\\n * @param fac Sanity check this parameter.\\n */\\nfunction sanity_check(fac) {\\n    assert(\\n        fac === \\\"BitRunners\\\" || fac === \\\"NiteSec\\\" || fac === \\\"The Black Hand\\\"\\n    );\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.donateToFaction\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Join a hacking group.  The hacking groups are: BitRunners, NiteSec,\\n * The Black Hand.  This script accepts a command line argument, i.e. the name\\n * of a faction.\\n *\\n * Usage: run singularity/faction-hack.js [factionName]\\n * Example: run singularity/faction-hack.js BitRunners\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Join the appropriate faction.\\n    const faction = ns.args[0];\\n    sanity_check(faction);\\n    await hacking_group(ns, faction);\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/home.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/faction-hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { faction_req, faction_t } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { job_area } from \\\"/quack/lib/constant/work.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { purchase_augment } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport {\\n    join_faction,\\n    work_for_faction,\\n} from \\\"/quack/lib/singularity/faction.js\\\";\\nimport {\\n    install_backdoor,\\n    visit_city,\\n} from \\\"/quack/lib/singularity/network.js\\\";\\nimport { raise_hack } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { choose_field, work_for_company } from \\\"/quack/lib/singularity/work.js\\\";\\nimport { assert, exec, has_required_hack } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Install a backdoor on a megacorporation server.  Since version 2.0 of the\\n * game, we must have at least 400k reputation with a megacorporation as a\\n * pre-requisite for receiving an invitation from the corresponding faction.\\n * Installing a backdoor on the company server would reduce the reputation\\n * requirement to 300k.\\n *\\n * @param ns The Netscript API.\\n * @param fac The name of a megacorporation faction.\\n */\\nasync function install_backdoor_on_server(ns, fac) {\\n    // Ensure we have the required Hack stat.\\n    const server = new Server(ns, faction_req[fac].backdoor);\\n    if (!has_required_hack(ns, server.hostname())) {\\n        await raise_hack(ns, server.hacking_skill());\\n    }\\n    assert(has_required_hack(ns, server.hostname()));\\n    // Ensure we have root access on the target server.\\n    while (!server.has_root_access()) {\\n        server.gain_root_access();\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    assert(server.has_root_access());\\n    await install_backdoor(ns, server.hostname());\\n}\\n\\n/**\\n * Join a megacorporation faction.  The requirements for receiving an\\n * invitation are:\\n *\\n * (1) Travel to a particular city where a megacorporation is located.\\n * (2) Work for the megacorporation to earn a given amount of reputation points.\\n * (3) Continue working for the company until we have received an invitation.\\n *     Even if we satisfy the above 2 requirements, we would not receive an\\n *     invitation if we are not currently an employee of the company.\\n *\\n * The exception is Fulcrum Technologies.  In addition to the above two\\n * requirements, this megacorporation also requires us to install a backdoor on\\n * the fulcrumassets server.  The invitation is sent from Fulcrum Secret\\n * Technologies, not Fulcrum Technologies.\\n *\\n * @param ns The Netscript API.\\n * @param company We want to work for this company and raise our reputation\\n *     within the company.\\n * @param fac Our aim is to join this faction.\\n * @param rep Must earn at least this amount of reputation points within the\\n *     company.\\n */\\nasync function megacorporation(ns, company, fac, rep) {\\n    // Relocate to raise Intelligence XP.\\n    await visit_city(ns, faction_req[fac].city);\\n    ns.singularity.goToLocation(company);\\n    // Work for the company to earn the required reputation points.  Must\\n    // continue working for the company until we receive an invitation from\\n    // the company faction.\\n    await work_for_company(ns, company, rep);\\n    ns.singularity.applyToCompany(company, choose_field(ns));\\n    ns.singularity.workForCompany(company, bool.FOCUS);\\n    // Join the faction, earn reputation points, and purchase all\\n    // Augmentations.  Ensure we remain an employee of the company.  Wait until\\n    // we have joined the company faction, then quit our job at the company.\\n    await join_faction(ns, fac);\\n    ns.singularity.quitJob(company);\\n    await work_for_faction(ns, fac, job_area.HACK);\\n    await purchase_augment(\\n        ns,\\n        fac,\\n        bool.STOP_TRADE,\\n        bool.BUY_NFG,\\n        bool.RAISE_MONEY\\n    );\\n}\\n\\n/**\\n * Various sanity checks of a parameter.\\n *\\n * @param fac Sanity check this parameter.\\n */\\nfunction sanity_check(fac) {\\n    assert(\\n        fac === \\\"Bachman & Associates\\\"\\n            || fac === \\\"Blade Industries\\\"\\n            || fac === \\\"Clarke Incorporated\\\"\\n            || fac === \\\"ECorp\\\"\\n            || fac === \\\"Four Sigma\\\"\\n            || fac === \\\"Fulcrum Secret Technologies\\\"\\n            || fac === \\\"KuaiGong International\\\"\\n            || fac === \\\"MegaCorp\\\"\\n            || fac === \\\"NWO\\\"\\n            || fac === \\\"OmniTek Incorporated\\\"\\n    );\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Join a megacorporation faction.  The megacorporation factions are:\\n * Bachman & Associates, Blade Industries, Clarke Incorporated, ECorp,\\n * Four Sigma, Fulcrum Secret Technologies, KuaiGong International, MegaCorp,\\n * NWO, OmniTek Incorporated.  This script accepts a command line argument,\\n * i.e. the name of a faction.\\n *\\n * Usage: run singularity/faction-megacorporation.js [factionName]\\n * Example: run singularity/faction-megacorporation.js MegaCorp\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    // Join the appropriate faction.\\n    const faction = ns.args[0];\\n    sanity_check(faction);\\n    // Since version 2.0, we need at least 400k company reputation to join the\\n    // corresponding company faction.  See\\n    //\\n    // https://github.com/danielyxie/bitburner/blob/dev/doc/source/changelog.rst\\n    //\\n    // However, the reputation requirement is reduced to 300k if we have\\n    // installed a backdoor on the corresponding company server.\\n    await install_backdoor_on_server(ns, faction);\\n    let company = faction;\\n    if (faction === \\\"Fulcrum Secret Technologies\\\") {\\n        company = \\\"Fulcrum Technologies\\\";\\n    }\\n    assert(company.length > 0);\\n    assert(faction.length > 0);\\n    await megacorporation(ns, company, faction, faction_t.CORP_REP);\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/home.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/faction-megacorp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1024,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.applyToCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForCompany\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.quitJob\",\"cost\":48},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.installBackdoor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.getCompanyRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.workForFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.donateToFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrereq\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"misc\",\"name\":\"Max Ram Cap\",\"cost\":1024}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { factions } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { owned_augment } from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { assert, is_valid_faction } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Choose a faction to join and join that faction.  Work for the faction to\\n * earn enough reputation points to allow us to purchase all Augmentations from\\n * the faction.  We typically choose a faction for these reasons:\\n *\\n * (1) We have not yet joined the faction.\\n * (2) We have not yet purchased and installed all Augmentations from the\\n *     faction.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction choose_faction(ns) {\\n    // Determine which faction to join next.  First, consider factions on our\\n    // fast track.  These factions have Augmentations to boost our reputation\\n    // multiplier as well as allowing us to start with various port opener\\n    // programs.\\n    let faction = \\\"\\\";\\n    for (const f of Object.keys(factions.fast_track)) {\\n        if (join_next(ns, f)) {\\n            faction = f;\\n            break;\\n        }\\n    }\\n    // In case we have already joined each faction on the fast track list,\\n    // consider the remaining factions.\\n    if (faction === \\\"\\\") {\\n        for (const f of factions.all) {\\n            if (join_next(ns, f)) {\\n                faction = f;\\n                break;\\n            }\\n        }\\n    }\\n    if (faction === \\\"\\\") {\\n        return;\\n    }\\n    // Join a faction.\\n    assert(faction.length > 0);\\n    let script = \\\"\\\";\\n    switch (faction) {\\n        case \\\"Aevum\\\":\\n            script = \\\"/quack/singularity/faction-city.js\\\";\\n            break;\\n        case \\\"Bachman & Associates\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"BitRunners\\\":\\n            script = \\\"/quack/singularity/faction-hack.js\\\";\\n            break;\\n        case \\\"Blade Industries\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"Chongqing\\\":\\n            script = \\\"/quack/singularity/faction-city.js\\\";\\n            break;\\n        case \\\"Clarke Incorporated\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"CyberSec\\\":\\n            script = \\\"/quack/singularity/faction-early.js\\\";\\n            break;\\n        case \\\"Daedalus\\\":\\n            script = \\\"/quack/singularity/faction-end.js\\\";\\n            break;\\n        case \\\"ECorp\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"Four Sigma\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"Fulcrum Secret Technologies\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"Illuminati\\\":\\n            script = \\\"/quack/singularity/faction-end.js\\\";\\n            break;\\n        case \\\"Ishima\\\":\\n            script = \\\"/quack/singularity/faction-city.js\\\";\\n            break;\\n        case \\\"KuaiGong International\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"MegaCorp\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"Netburners\\\":\\n            script = \\\"/quack/singularity/faction-early.js\\\";\\n            break;\\n        case \\\"New Tokyo\\\":\\n            script = \\\"/quack/singularity/faction-city.js\\\";\\n            break;\\n        case \\\"NiteSec\\\":\\n            script = \\\"/quack/singularity/faction-hack.js\\\";\\n            break;\\n        case \\\"NWO\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"OmniTek Incorporated\\\":\\n            script = \\\"/quack/singularity/faction-megacorp.js\\\";\\n            break;\\n        case \\\"Sector-12\\\":\\n            script = \\\"/quack/singularity/faction-city.js\\\";\\n            break;\\n        case \\\"Silhouette\\\":\\n            script = \\\"/quack/singularity/faction-crime.js\\\";\\n            break;\\n        case \\\"Slum Snakes\\\":\\n            script = \\\"/quack/singularity/faction-crime.js\\\";\\n            break;\\n        case \\\"Speakers for the Dead\\\":\\n            script = \\\"/quack/singularity/faction-crime.js\\\";\\n            break;\\n        case \\\"Tetrads\\\":\\n            script = \\\"/quack/singularity/faction-crime.js\\\";\\n            break;\\n        case \\\"The Black Hand\\\":\\n            script = \\\"/quack/singularity/faction-hack.js\\\";\\n            break;\\n        case \\\"The Covenant\\\":\\n            script = \\\"/quack/singularity/faction-end.js\\\";\\n            break;\\n        case \\\"The Dark Army\\\":\\n            script = \\\"/quack/singularity/faction-crime.js\\\";\\n            break;\\n        case \\\"The Syndicate\\\":\\n            script = \\\"/quack/singularity/faction-crime.js\\\";\\n            break;\\n        case \\\"Tian Di Hui\\\":\\n            script = \\\"/quack/singularity/faction-early.js\\\";\\n            break;\\n        case \\\"Volhaven\\\":\\n            script = \\\"/quack/singularity/faction-city.js\\\";\\n            break;\\n        default:\\n            break;\\n    }\\n    assert(script !== \\\"\\\");\\n    const nthread = 1;\\n    ns.exec(script, home, nthread, faction);\\n}\\n\\n/**\\n * Whether to join a given faction.  We exclude the faction within which we\\n * created a gang.\\n *\\n * @param ns The Netscript API.\\n * @param fac The name of the faction to consider.\\n * @return True if the given faction should be joined next; false otherwise.\\n */\\nfunction join_next(ns, fac) {\\n    assert(is_valid_faction(fac));\\n    // We have a gang within the given faction.  Must be in a gang in order to\\n    // get information about our gang.\\n    if (ns.gang.inGang() && ns.gang.getGangInformation().faction === fac) {\\n        return bool.NO_JOIN;\\n    }\\n    if (\\n        bitnode.Hacktocracy === ns.getPlayer().bitNodeN\\n        && fac === \\\"Netburners\\\"\\n    ) {\\n        return bool.NO_JOIN;\\n    }\\n    // See whether we have all Augmentations from the given faction.\\n    const owned_aug = owned_augment(ns);\\n    for (const aug of ns.singularity.getAugmentationsFromFaction(fac)) {\\n        if (!owned_aug.has(aug)) {\\n            return bool.JOIN;\\n        }\\n    }\\n    return bool.NO_JOIN;\\n}\\n\\n/**\\n * WARNING: This script requires a huge amount of RAM because it uses many\\n * functions from the Singularity API.  To reduce the RAM cost of this script,\\n * destroy BN4.2 and BN4.3.\\n *\\n * Join a faction and purchase all of its Augmentations.\\n *\\n * Usage: run singularity/faction.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Try to free up some RAM on home server so we can run some scripts.\\n    // await hram_suspend(ns);\\n    choose_faction(ns);\\n    // hram_resume(ns);\\n}\\n\",\"filename\":\"/quack/singularity/faction.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":168.95,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, home_t } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { choose_hardware_company } from \\\"/quack/lib/singularity/util.js\\\";\\nimport {\\n    assert,\\n    exec,\\n    trade_bot_resume,\\n    trade_bot_stop_buy,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Determine which to upgrade on the home server: Cores or RAM.  If the script\\n * \\\"share.js\\\" is running, this means that we are sharing our home server with a\\n * faction.  In this case, we only need to upgrade our RAM in order to run\\n * \\\"share.js\\\" using more threads.\\n *\\n * @param ns The Netscript API.\\n * @return A string having exactly one of the following values.\\n *     (1) \\\"Cores\\\" := Upgrade the Cores on the home server.\\n *     (2) \\\"RAM\\\" := Upgrade the RAM on the home server.\\n *     (3) \\\"\\\" := The empty string, meaning do not upgrade anything on the home\\n *         server.\\n */\\nfunction choose_upgrade(ns) {\\n    // Do not upgrade anything.\\n    if (is_at_limits(ns)) {\\n        return \\\"\\\";\\n    }\\n    // Is the script \\\"share.js\\\" running on our home server?\\n    const server = new Server(ns, home);\\n    const script = \\\"/quack/share.js\\\";\\n    assert(ns.fileExists(script, home));\\n    if (server.is_running_script(script)) {\\n        return \\\"RAM\\\";\\n    }\\n    // Upgrade the Cores.\\n    const core_cost = Math.ceil(ns.singularity.getUpgradeHomeCoresCost());\\n    const ram_cost = Math.ceil(ns.singularity.getUpgradeHomeRamCost());\\n    if (core_cost < ram_cost) {\\n        if (server.cores() < home_t.CORE) {\\n            return \\\"Cores\\\";\\n        }\\n    }\\n    // Upgrade the RAM.\\n    assert(ram_cost <= core_cost || server.cores() === home_t.CORE);\\n    assert(server.ram_max() < home_t.RAM);\\n    return \\\"RAM\\\";\\n}\\n\\n/**\\n * Whether the Cores and RAM on the home server are at the artificial limits.\\n * Even though the Cores or RAM, or both, are at maximum, this does not\\n * necessarily mean we cannot purchase more Cores or RAM for the home server.\\n *\\n * @param ns The Netscript API.\\n * @return true if both Cores and RAM are at maximum; false otherwise.\\n */\\nfunction is_at_limits(ns) {\\n    const server = new Server(ns, home);\\n    if (server.cores() >= home_t.CORE && server.ram_max() >= home_t.RAM) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Upgrade the Cores or RAM on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function upgrade(ns) {\\n    // Relocate to increase Intelligence XP.\\n    const shop = await choose_hardware_company(ns);\\n    ns.singularity.goToLocation(shop);\\n    // Suppose our home server already has the greatest number of Cores and\\n    // RAM.  This does not necessarily mean we cannot purchase any more Cores\\n    // or RAM for the server.  We place artificial limits on the Cores and RAM\\n    // to avoid having to wait too long to accumulate sufficient funds.\\n    // Initially, we are willing to wait to upgrade the Cores or RAM up to and\\n    // including the given limits.  After the limits on Cores and RAM are\\n    // reached, we do not want to wait to accumulate money for upgrading Cores\\n    // or RAM.  We simply upgrade if our current funds allow.\\n    if (is_at_limits(ns)) {\\n        if (ns.singularity.upgradeHomeCores()) {\\n            log(ns, \\\"Upgrade home Cores\\\");\\n        }\\n        if (ns.singularity.upgradeHomeRam()) {\\n            log(ns, \\\"Upgrade home RAM\\\");\\n        }\\n        return;\\n    }\\n    // Wait to accumulate funds to purchase upgrades.\\n    const attribute = choose_upgrade(ns);\\n    assert(attribute !== \\\"\\\");\\n    if (attribute === \\\"Cores\\\") {\\n        await upgrade_cores(ns);\\n        return;\\n    }\\n    assert(attribute === \\\"RAM\\\");\\n    await upgrade_ram(ns);\\n}\\n\\n/**\\n * Upgrade the Cores on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function upgrade_cores(ns) {\\n    log(ns, \\\"Upgrade home Cores\\\");\\n    const success = ns.singularity.upgradeHomeCores();\\n    // We are willing to wait some time for our funds to increase.  After the\\n    // waiting period is over, try to upgrade the Cores again.  If we are still\\n    // unsuccessful at the second attempt, then move on.\\n    if (!success) {\\n        await ns.sleep(wait_t.MINUTE);\\n        ns.singularity.upgradeHomeCores();\\n    }\\n}\\n\\n/**\\n * Upgrade the RAM on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function upgrade_ram(ns) {\\n    log(ns, \\\"Upgrade home RAM\\\");\\n    const success = ns.singularity.upgradeHomeRam();\\n    // We are willing to wait some time for our funds to increase.  After the\\n    // waiting period is over, try to upgrade the RAM again.  If we are still\\n    // unsuccessful at the second attempt, then move on.\\n    if (!success) {\\n        await ns.sleep(wait_t.MINUTE);\\n        ns.singularity.upgradeHomeRam();\\n    }\\n}\\n\\n/**\\n * Upgrade the Cores and RAM on our home server.\\n *\\n * Usage: run singularity/home.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Less verbose log.\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n\\n    await trade_bot_stop_buy(ns);\\n    await upgrade(ns);\\n    trade_bot_resume(ns);\\n    // The next script in the load chain.\\n    exec(ns, \\\"/quack/chain/install.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/home.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":265.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeCoresCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeCores\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":48},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.travelToCity\",\"cost\":32},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { cheapest_program } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { exclusive_aug, augment } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { wse } from \\\"/quack/lib/constant/wse.js\\\";\\nimport { Gangster } from \\\"/quack/lib/gang/gangster.js\\\";\\nimport { reassign_soft_reset } from \\\"/quack/lib/gang/util.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { join_all_factions } from \\\"/quack/lib/singularity/faction.js\\\";\\nimport { has_ai_api } from \\\"/quack/lib/source.js\\\";\\nimport {\\n    assert,\\n    cleanup,\\n    trade_bot_resume,\\n    trade_bot_stop_buy,\\n} from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Purchase Augmentations that are exclusive to various factions.  If we have\\n * a gang within a faction, the faction allows us to purchase Augmentations\\n * that are exclusive to other factions.  Exploit this feature to speed up our\\n * progression through all factions.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction buy_exclusive_augmentations(ns) {\\n    if (!ns.gang.inGang()) {\\n        return;\\n    }\\n    // The faction within which we created our gang.\\n    const gang_faction = ns.gang.getGangInformation().faction;\\n    // Attempt to purchase the exclusive Augmentations.\\n    const player = new Player(ns);\\n    const installed = new Set(installed_augmentations(ns));\\n    for (const faction of Object.keys(exclusive_aug)) {\\n        for (const aug of exclusive_aug[faction]) {\\n            if (installed.has(aug) || aug === augment.TRP) {\\n                continue;\\n            }\\n            const fac_rep = ns.singularity.getFactionRep(gang_faction);\\n            const aug_rep = ns.singularity.getAugmentationRepReq(aug);\\n            if (fac_rep < aug_rep) {\\n                continue;\\n            }\\n            const cost = ns.singularity.getAugmentationPrice(aug);\\n            if (player.money() < cost) {\\n                continue;\\n            }\\n            ns.singularity.purchaseAugmentation(gang_faction, aug);\\n        }\\n    }\\n}\\n\\n/**\\n * Use our gang faction to purchase any other Augmentations we can.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction buy_other_augmentations(ns) {\\n    if (!ns.gang.inGang()) {\\n        return;\\n    }\\n    // Sets of Augmentations to exclude.\\n    const installed = new Set(installed_augmentations(ns));\\n    let exclusive = [];\\n    for (const fac of Object.keys(exclusive_aug)) {\\n        exclusive = exclusive.concat(exclusive_aug[fac]);\\n    }\\n    exclusive = exclusive.filter((a) => a !== augment.TRP);\\n    exclusive = exclusive.concat(purchased_augmentations(ns));\\n    exclusive = new Set(exclusive);\\n    // Buy other Augmentations available from our gang faction.\\n    const { faction } = ns.gang.getGangInformation();\\n    const player = new Player(ns);\\n    const aug = ns.singularity\\n        .getAugmentationsFromFaction(faction)\\n        .filter((a) => a !== augment.TRP);\\n    for (const a of aug) {\\n        if (installed.has(a) || exclusive.has(a)) {\\n            continue;\\n        }\\n        const fac_rep = ns.singularity.getFactionRep(faction);\\n        const aug_rep = ns.singularity.getAugmentationRepReq(a);\\n        if (fac_rep < aug_rep) {\\n            continue;\\n        }\\n        const cost = ns.singularity.getAugmentationPrice(a);\\n        if (player.money() < cost) {\\n            continue;\\n        }\\n        assert(ns.singularity.purchaseAugmentation(faction, a));\\n    }\\n}\\n\\n/**\\n * Purchase programs via the dark web as many times as possible.  At this\\n * stage, we do not need any more programs to help us with our hacking and\\n * faction work.  We buy the programs over and over again to help raise our\\n * Intelligence XP.\\n */\\nasync function buy_programs(ns) {\\n    const player = new Player(ns);\\n    assert(player.has_tor());\\n    // Try to buy at most this many times to prevent the script from hanging.\\n    // If our income rises faster than our spending on programs, then it is\\n    // possible for this function to hang and buys indefinitely.\\n    const maxtry = 1000;\\n    const p = cheapest_program.NAME;\\n    const cost = cheapest_program.COST;\\n    ns.rm(p, player.home());\\n    for (let i = 0; i < maxtry; i++) {\\n        for (let j = 0; j < maxtry; j++) {\\n            if (player.money() < cost) {\\n                return;\\n            }\\n            ns.singularity.purchaseProgram(p);\\n            assert(ns.rm(p, player.home()));\\n        }\\n        await ns.sleep(wait_t.MILLISECOND);\\n    }\\n}\\n\\n/**\\n * Whether we have Augmentations that are purchased and yet to be installed.\\n *\\n * @param ns The Netscript API.\\n * @return true if we have Augmentations that are yet to be installed;\\n *     false otherwise.\\n */\\nfunction has_augmentations(ns) {\\n    const aug = purchased_augmentations(ns);\\n    return aug.length > 0;\\n}\\n\\n/**\\n * Install all purchased Augmentations.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction install(ns) {\\n    assert(has_augmentations(ns));\\n    log(ns, \\\"Install Augmentations and soft reset\\\");\\n    ns.singularity.installAugmentations(\\\"/quack/go.js\\\");\\n}\\n\\n/**\\n * An array of Augmentations we have purchased and installed.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction installed_augmentations(ns) {\\n    return ns.singularity.getOwnedAugmentations(bool.NOT_PURCHASED);\\n}\\n\\n/**\\n * An array of Augmentations we have purchased, but not yet installed.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction purchased_augmentations(ns) {\\n    const purchased_aug = ns.singularity.getOwnedAugmentations(bool.PURCHASED);\\n    const installed_aug = installed_augmentations(ns);\\n    return purchased_aug.filter((a) => !installed_aug.includes(a));\\n}\\n\\n/**\\n * Prepare our gang for the soft reset.  After the soft reset, there would be a\\n * period of time during which our gang script would not run.  Set our gang to\\n * be in a neutral state during this waiting period.  At minimum, during the\\n * waiting period our gang should be doing the following:\\n *\\n * (1) Have some members engage in vigilante justice to decrease the penalty.\\n * (2) If a member is currently in training, set them to mug random people.\\n * (3) Disengage from territory warfare.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction set_neutral_gang(ns) {\\n    if (!ns.gang.inGang()) {\\n        log(ns, \\\"No access to Gang API\\\", colour.RED);\\n        return;\\n    }\\n    log(ns, \\\"Prepare gang for soft reset\\\");\\n    // First, kill our gang script.\\n    const script = \\\"/quack/gang/crime.js\\\";\\n    const { faction } = ns.gang.getGangInformation();\\n    const player = new Player(ns);\\n    if (ns.isRunning(script, player.home(), faction)) {\\n        assert(ns.kill(script, player.home(), faction));\\n    }\\n    // Assign vigilantes.\\n    reassign_soft_reset(ns);\\n    // Put anyone in combat training to mug people.\\n    const gangster = new Gangster(ns);\\n    const newbie = ns.gang\\n        .getMemberNames()\\n        .filter((s) => gangster.is_training(s));\\n    gangster.mug(newbie);\\n    // Finally, disengage from turf warfare so members would not be killed\\n    // while we cannot run the script that manages our gang.\\n    ns.gang.setTerritoryWarfare(bool.DISABLE);\\n}\\n\\n/**\\n * Install all purchased Augmentations and run our bootstrap script.\\n *\\n * Usage: run singularity/install.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Tell the trade bot to stop buying shares.  Wait a while for it to sell\\n    // some shares.\\n    trade_bot_stop_buy(ns);\\n    const time = 3 * wse.TICK;\\n    log(\\n        ns,\\n        `Wait ${time / wait_t.SECOND} seconds to sell shares of stocks (if any)`\\n    );\\n    await ns.sleep(time);\\n    // Raise some Intelligence XP.\\n    if (has_ai_api(ns)) {\\n        log(ns, \\\"Raise Intelligence XP\\\");\\n        join_all_factions(ns);\\n        buy_exclusive_augmentations(ns);\\n        buy_other_augmentations(ns);\\n        await buy_programs(ns);\\n    } else {\\n        log(ns, \\\"No access to Artificial Intelligence API\\\", colour.RED);\\n    }\\n    trade_bot_resume(ns);\\n    // Set our gang to a state where it at least is working to lower the\\n    // penalty.\\n    set_neutral_gang(ns);\\n    // Install all Augmentations and soft reset.\\n    cleanup(ns);\\n    install(ns);\\n}\\n\",\"filename\":\"/quack/singularity/install.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":585.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.getGangInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getFactionRep\",\"cost\":16},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationRepReq\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationPrice\",\"cost\":40},{\"type\":\"fn\",\"name\":\"singularity.purchaseAugmentation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getAugmentationsFromFaction\",\"cost\":80},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.installAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.getOwnedAugmentations\",\"cost\":80},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"gang.getMemberNames\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.setTerritoryWarfare\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getMemberInformation\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getAscensionResult\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.ascendMember\",\"cost\":4},{\"type\":\"fn\",\"name\":\"gang.setMemberTask\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.getEquipmentCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"gang.purchaseEquipment\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"gang.canRecruitMember\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.recruitMember\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"singularity.joinFaction\",\"cost\":48},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { buy_schedule, cheapest_program } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Money } from \\\"/quack/lib/money.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { has_ai_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Passively farm Intelligence XP.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function farm_intelligence(ns) {\\n    log(ns, \\\"Passively farm for Intelligence XP\\\");\\n    // The minimum amount of money we should have in order to purchase one of\\n    // the cheapest programs.\\n    const m = new Money();\\n    const min_money = 10 * m.million();\\n    // Must delete the program if we have it.  After purchasing a program,\\n    // delete it again.\\n    const player = new Player(ns);\\n    const p = cheapest_program.NAME;\\n    ns.rm(p, player.home());\\n    for (;;) {\\n        if (player.money() < min_money) {\\n            await ns.sleep(2 * wait_t.MINUTE);\\n            continue;\\n        }\\n        const [k, time] = purchase_schedule(ns);\\n        for (let i = 0; i < k; i++) {\\n            assert(ns.singularity.purchaseProgram(p));\\n            assert(ns.rm(p, player.home()));\\n        }\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * The purchase schedule, which tells us how many programs to buy and the\\n * amount of time to sleep between successive purchases.  Both the number of\\n * programs to buy and the sleep interval vary, depending on the amount of\\n * money we have.  The higher is our money, the lower is the sleep interval and\\n * the more programs we buy.\\n *\\n * @param ns The Netscript API.\\n * @return An array [k, t] as follows:\\n *\\n *     (1) k := How many programs to purchase.  We buy this many programs in\\n *         one go, then sleep.\\n *     (2) t := The interval in milliseconds between successive purchases.\\n *         We buy a bunch of programs, then sleep for this interval.\\n */\\nfunction purchase_schedule(ns) {\\n    // Low on funds.  Use a pre-defined purchasing schedule.\\n    const funds = ns.getServerMoneyAvailable(home);\\n    if (funds < buy_schedule.DYNAMIC_TAU) {\\n        for (let i = 0; i < buy_schedule.money.length; i++) {\\n            if (funds >= buy_schedule.money[i]) {\\n                return [buy_schedule.howmany[i], buy_schedule.time[i]];\\n            }\\n        }\\n        // Should never reach here.\\n        assert(false);\\n    }\\n    // We are filthy rich.  Use a dynamic purchasing schedule.  We limit the\\n    // batch size to prevent the script from slowing down the UI.\\n    let howmany = Math.floor(funds / buy_schedule.DIVISOR);\\n    howmany = Math.min(howmany, buy_schedule.MAX_BATCH_SIZE);\\n    return [howmany, wait_t.MILLISECOND];\\n}\\n\\n/**\\n * Passively farm Intelligence XP.  This script should be run in the background\\n * if our home RAM is high enough.  Every once in a while, it does an action\\n * that adds to our Intelligence XP.  The action should not require us to\\n * focus.  At the moment, the action we want to perform periodically is\\n * purchase one of the cheapest programs via the dark web.\\n *\\n * Usage: run singularity/int-farm.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    if (!has_ai_api(ns)) {\\n        log(ns, \\\"No access to Artificial Intelligence API\\\", colour.RED);\\n        return;\\n    }\\n    // Suppress various log messages.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\n    const player = new Player(ns);\\n    while (!player.has_tor()) {\\n        ns.singularity.purchaseTor();\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    await farm_intelligence(ns);\\n}\\n\",\"filename\":\"/quack/singularity/int-farm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":73.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":793,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"singularity.purchaseProgram\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.purchaseTor\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getBitNodeMultipliers\",\"cost\":4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, home_t } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Money } from \\\"/quack/lib/money.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Choose the threshold amount of money to raise.\\n *\\n * @param ns The Netscript API.\\n * @return The amount of money to raise.\\n */\\nfunction choose_threshold(ns) {\\n    // If our server is not high-end, then the threshold is the cost of\\n    // upgrading the RAM.\\n    if (ns.getServer(home).maxRam < home_t.RAM_HIGH) {\\n        return Math.ceil(ns.singularity.getUpgradeHomeRamCost());\\n    }\\n    // The default threshold.\\n    const m = new Money();\\n    return 5 * m.million();\\n}\\n\\n/**\\n * Commit various crimes to raise money.\\n *\\n * @param ns The Netscript API.\\n * @param threshold Continue to commit crimes until our money is at least this\\n *     amount.\\n */\\nasync function commit_crimes(ns, threshold) {\\n    assert(threshold > 0);\\n    log(ns, \\\"Commit crimes to raise money and lower karma\\\");\\n    const script = \\\"/quack/singularity/crime.js\\\";\\n    const nthread = 1;\\n    ns.exec(script, home, nthread, threshold);\\n    // Wait for the crime script to end.\\n    while (ns.scriptRunning(script, home)) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n}\\n\\n/**\\n * Whether to upgrade the RAM of our home server.\\n *\\n * @param ns The Netscript API.\\n * @return True if we need to upgrade the RAM of our home server;\\n *     false otherwise.\\n */\\nfunction is_upgrade_home_ram(ns) {\\n    const home_ram = ns.getServer(home).maxRam;\\n    return home_ram < home_t.RAM_HIGH;\\n}\\n\\n/**\\n * Run the next script in the load chain.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction load_chain(ns) {\\n    exec(ns, \\\"/quack/chain/misc.js\\\");\\n}\\n\\n/**\\n * Commit crimes to raise some money as well earn negative karma.  Assume that\\n * our home server has 32GB RAM.  Try to keep the RAM cost of this script as\\n * low as possible.  Do not add anything to the script unless absolutely\\n * necessary.\\n *\\n * Usage: run singularity/money.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Suppress various log messages.\\n    ns.disableLog(\\\"sleep\\\");\\n    // Commit crime to raise some money.\\n    const player_money = ns.getServerMoneyAvailable(home);\\n    const threshold = choose_threshold(ns);\\n    if (player_money > threshold && !is_upgrade_home_ram(ns)) {\\n        load_chain(ns);\\n        return;\\n    }\\n    await commit_crimes(ns, threshold);\\n    // If our home server is not high-end, upgrade the RAM on the home server.\\n    if (is_upgrade_home_ram(ns)) {\\n        log(ns, \\\"Raise money to upgrade home RAM\\\");\\n        // Upgrade the RAM on the home server.\\n        const cost = ns.singularity.getUpgradeHomeRamCost();\\n        let success = ns.singularity.upgradeHomeRam();\\n        while (!success) {\\n            await commit_crimes(ns, cost);\\n            success = ns.singularity.upgradeHomeRam();\\n        }\\n        // Reboot to take advantage of the newly upgraded home server.\\n        const nthread = 1;\\n        ns.exec(\\\"/quack/kill-script.js\\\", home, nthread, \\\"world\\\");\\n        exec(ns, \\\"/quack/kill-server.js\\\");\\n        exec(ns, \\\"/quack/go.js\\\");\\n        return;\\n    }\\n    load_chain(ns);\\n}\\n\",\"filename\":\"/quack/singularity/money.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":78,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"singularity.getUpgradeHomeRamCost\",\"cost\":24},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.upgradeHomeRam\",\"cost\":48}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { exec, has_all_popen } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Commit crime to raise money for purchasing port opener programs.  Stop as\\n * soon as we have bought all port opener programs.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function commit_crime(ns) {\\n    log(ns, `Commit crime to raise money: ${crimes.KILL}`);\\n    ns.singularity.commitCrime(crimes.KILL, bool.FOCUS);\\n    while (!has_all_popen(ns)) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"singularity.applyToCompany\\\");\\n    ns.disableLog(\\\"singularity.workForCompany\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Purchase various programs from the dark web.\\n *\\n * Usage: run singularity/program.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    await commit_crime(ns);\\n    exec(ns, \\\"/quack/chain/faction.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/program.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":99.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { all_programs } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { home, home_t } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { study } from \\\"/quack/lib/singularity/study.js\\\";\\nimport { assert, exec } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * If our home server is less than a mid-sized server, then run a script to\\n * manage our farm of Hacknet nodes as well as another script to compromise\\n * world servers.  Let each script run for a while, then kill it.  The reason is\\n * that it is likely we do not have enough RAM on our home server to allow\\n * multiple scripts to run in the background.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function bootstrap(ns) {\\n    if (ns.getServer(home).maxRam < home_t.RAM_MID) {\\n        // const script = [\\\"low-end.js\\\", \\\"hnet-farm.js\\\"];\\n        const script = [];\\n        for (const s of script) {\\n            assert(!ns.isRunning(s, home));\\n            exec(ns, s);\\n            await ns.sleep(wait_t.DEFAULT);\\n            ns.kill(s, home);\\n        }\\n    }\\n}\\n\\n/**\\n * Create a program.\\n *\\n * @param ns The Netscript API.\\n * @param program A string representing the name of the program we want to\\n *     create.\\n */\\nasync function create_program(ns, program) {\\n    // Sanity checks.\\n    assert(program.length > 0);\\n    assert(is_valid_program(program));\\n    // Do we already have the program?  We can have a program without meeting\\n    // the Hack stat requirement to create the program.  A number of\\n    // Augmentations allow us to start with various programs after a soft reset.\\n    if (has_program(ns, program)) {\\n        return;\\n    }\\n    // Ensure we meet the Hack stat requirement for creating the program.\\n    const threshold = hack_requirement(program);\\n    assert(threshold > 0);\\n    assert(ns.getHackingLevel() >= threshold);\\n    // Work on creating the program.\\n    assert(ns.singularity.createProgram(program, bool.FOCUS));\\n    while (ns.singularity.isBusy()) {\\n        assert(!has_program(ns, program));\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    assert(has_program(ns, program));\\n}\\n\\n/**\\n * The Hack stat requirement for creating a program.\\n *\\n * @param program We want the Hack stat requirement for this program.\\n * @return The Hack stat required to create the given program.\\n */\\nfunction hack_requirement(program) {\\n    const prog = all_programs();\\n    return prog.get(program);\\n}\\n\\n/**\\n * Whether we have the given program on our home server.\\n *\\n * @param ns The Netscript API.\\n * @param program A string representing the name of a program.\\n * @return true if we already have the given program;\\n *     false otherwise.\\n */\\nfunction has_program(ns, program) {\\n    assert(is_valid_program(program));\\n    return ns.fileExists(program, home);\\n}\\n\\n/**\\n * Whether the given name is a valid program.\\n *\\n * @param name A string representing the name of a program.\\n * @return true if the given name is a valid program;\\n *     false otherwise.\\n */\\nfunction is_valid_program(name) {\\n    assert(name.length > 0);\\n    const program = all_programs();\\n    return program.has(name);\\n}\\n\\n/**\\n * Raise our Hack stat enough to allow us to create various programs.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function study_and_create(ns) {\\n    const program = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\"];\\n    for (const p of program) {\\n        log(ns, `Raise Hack to create program ${p}`);\\n        await study(ns, hack_requirement(p));\\n        await bootstrap(ns);\\n        log(ns, `Create program ${p}`);\\n        await create_program(ns, p);\\n        await bootstrap(ns);\\n    }\\n}\\n\\n/**\\n * Study to raise our Hack stat so we can create various programs.\\n *\\n * Usage: run singularity/study.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n\\n    await study_and_create(ns);\\n    // The next segment in the load chain.\\n    exec(ns, \\\"/quack/chain/money.js\\\");\\n}\\n\",\"filename\":\"/quack/singularity/study.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":222.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"singularity.createProgram\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isBusy\",\"cost\":8},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"singularity.goToLocation\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.universityCourse\",\"cost\":32},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { cc_t } from \\\"/quack/lib/constant/sleeve.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { has_sleeve_api } from \\\"/quack/lib/source.js\\\";\\nimport { Sleeve } from \\\"/quack/lib/sleeve/cc.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Purchase Augmentations and install them on our sleeves.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction buy_augmentation(ns) {\\n    const player = new Player(ns);\\n    const sleeve = new Sleeve(ns);\\n    sleeve.all().forEach((i) => {\\n        const aug = sleeve.cheapest_augment(i);\\n        if (aug.length === 0) {\\n            return;\\n        }\\n        const [name, cost] = aug;\\n        if (player.money() > cc_t.COST_MULT * cost) {\\n            sleeve.buy_augment(i, name);\\n        }\\n    });\\n}\\n\\n/**\\n * Assign sleeves to commit a specific crime.  There are two reasons why we do\\n * this:\\n *\\n * (1) Raise some money.  This is especially important early in a BitNode when\\n *     our stats and money are low.  It is likely that we need to raise money to\\n *     upgrade the RAM of our home server, thus allowing us to run multiple\\n *     scripts at the same time.\\n * (2) Lower our karma.  In a BitNode other than BitNode-2: Rise of the\\n *     Underworld, our karma must be at -54,000 or lower to meet one of the\\n *     requirements for creating a gang.\\n *\\n * @param ns The Netscript API.\\n * @param crime Assign sleeves to commit this crime.\\n * @param tau Commit the given crime for this amount of time (in milliseconds).\\n *     Must be non-negative integer.\\n */\\nasync function commit_crime(ns, crime, tau) {\\n    assert(tau >= 0);\\n    const sleeve = new Sleeve(ns);\\n    const in_shock = (x) => sleeve.is_in_shock(x);\\n    const not_in_sync = (x) => !sleeve.is_in_sync(x);\\n    if (sleeve.all().some(in_shock) || sleeve.all().some(not_in_sync)) {\\n        log(ns, crime);\\n    }\\n    sleeve.all().forEach((i) => ns.sleeve.setToCommitCrime(i, crime));\\n    await ns.sleep(tau);\\n}\\n\\n/**\\n * Retrain the combat stats of our sleeves.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function retrain(ns) {\\n    // Train Dexterity and Agility by shoplift.\\n    const sleeve = new Sleeve(ns);\\n    let trainee = sleeve.all().filter((i) => !sleeve.has_shoplift_threshold(i));\\n    if (trainee.length > 0) {\\n        sleeve.shoplift(trainee);\\n        while (!sleeve.graduate_shoplift(trainee)) {\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n    }\\n    // Train combat stats by mugging people.\\n    trainee = sleeve.all().filter((i) => !sleeve.has_mug_threshold(i));\\n    if (trainee.length > 0) {\\n        sleeve.mug(trainee);\\n        while (!sleeve.graduate_mug(trainee)) {\\n            await ns.sleep(wait_t.SECOND);\\n        }\\n    }\\n    sleeve.homicide(sleeve.all());\\n}\\n\\n/**\\n * Assign sleeves to shock recovery.\\n *\\n * @param ns The Netscript API.\\n * @param tau Be in shock recovery for this amount of time (in milliseconds).\\n *     Must be a positive integer.\\n */\\nasync function shock_therapy(ns, tau) {\\n    assert(tau > 0);\\n    const sleeve = new Sleeve(ns);\\n    const to_therapy = sleeve.all().filter((s) => sleeve.is_in_shock(s));\\n    if (to_therapy.length > 0) {\\n        log(ns, \\\"Shock recovery\\\");\\n        sleeve.shock_recovery();\\n        await ns.sleep(tau);\\n    }\\n}\\n\\n/**\\n * Assign sleeves to synchronize with the consciousness of the player.\\n *\\n * @param ns The Netscript API.\\n * @param tau Synchronize for this amount of time (in milliseconds).  Must be a\\n *     positive integer.\\n */\\nasync function synchronize(ns, tau) {\\n    assert(tau > 0);\\n    const sleeve = new Sleeve(ns);\\n    const to_sync = sleeve.all().filter((s) => !sleeve.is_in_sync(s));\\n    if (to_sync.length > 0) {\\n        log(ns, \\\"Synchronize\\\");\\n        sleeve.synchronize();\\n        await ns.sleep(tau);\\n    }\\n}\\n\\n/**\\n * Manage our sleeves via an update loop.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function update(ns) {\\n    buy_augmentation(ns);\\n    await retrain(ns);\\n    await commit_crime(ns, crimes.KILL, 10 * wait_t.MINUTE);\\n    await synchronize(ns, wait_t.MINUTE);\\n    await shock_therapy(ns, 2 * wait_t.MINUTE);\\n}\\n\\n/**\\n * Manage our sleeves.\\n *\\n * Usage: run sleeve/cc.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Less verbose log.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Sanity check.\\n    if (!has_sleeve_api(ns)) {\\n        log(ns, \\\"No access to Sleeve API\\\", colour.RED);\\n        return;\\n    }\\n    // The update loop.\\n    for (;;) {\\n        await update(ns);\\n    }\\n}\\n\",\"filename\":\"/quack/sleeve/cc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":114.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"sleeve.getSleeve\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.purchaseSleeveAug\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleevePurchasableAugs\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToShockRecovery\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { has_sleeve_api } from \\\"/quack/lib/source.js\\\";\\nimport {\\n    all_sleeves,\\n    has_mug_threshold,\\n    has_shoplift_threshold,\\n} from \\\"/quack/lib/sleeve/util.js\\\";\\n\\n/**\\n * Assign sleeves to commit a specific crime.  There are two reasons why we do\\n * this:\\n *\\n * (1) Raise some money.  This is especially important early in a BitNode when\\n *     our stats and money are low.  It is likely that we need to raise money to\\n *     upgrade the RAM of our home server, thus allowing us to run multiple\\n *     scripts at the same time.\\n * (2) Lower our karma.  In a BitNode other than BitNode-2: Rise of the\\n *     Underworld, our karma must be at -54,000 or lower to meet one of the\\n *     requirements for creating a gang.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function commit_crimes(ns) {\\n    // Shoplift.\\n    log(ns, crimes.SHOP);\\n    all_sleeves(ns).forEach((i) => ns.sleeve.setToCommitCrime(i, crimes.SHOP));\\n    while (!has_shoplift_threshold(ns)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    // Mugging people.\\n    log(ns, crimes.MUG);\\n    all_sleeves(ns).forEach((i) => ns.sleeve.setToCommitCrime(i, crimes.MUG));\\n    while (!has_mug_threshold(ns)) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    // Homicide.\\n    log(ns, crimes.KILL);\\n    all_sleeves(ns).forEach((i) => ns.sleeve.setToCommitCrime(i, crimes.KILL));\\n}\\n\\n/**\\n * Assign sleeves to commit crimes as a means of earning some money in the early\\n * stages of a BitNode.\\n *\\n * Usage: run sleeve/money.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    ns.disableLog(\\\"sleep\\\");\\n    if (!has_sleeve_api(ns)) {\\n        log(ns, \\\"No access to Sleeve API\\\", colour.RED);\\n        return;\\n    }\\n    log(ns, \\\"Sleeves commit crimes to raise money\\\");\\n    await commit_crimes(ns);\\n}\\n\",\"filename\":\"/quack/sleeve/money.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":95.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.getSleeve\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { colour } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { course } from \\\"/quack/lib/constant/study.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { all_sleeves } from \\\"/quack/lib/sleeve/util.js\\\";\\nimport { has_sleeve_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Determine the university at which a sleeve should study.\\n *\\n * @param ns The Netscript API.\\n * @param i The index of a sleeve.  Must be a non-negative integer.\\n * @return A string representing the name of the university where a sleeve\\n *     should study.  An empty string if a sleeve is located in a city that does\\n *     not have a university.\\n */\\nfunction choose_university(ns, i) {\\n    assert(i >= 0);\\n    const { city } = ns.sleeve.getInformation(i);\\n    const { uni } = cities[city];\\n    return uni ?? \\\"\\\";\\n}\\n\\n/**\\n * Assign sleeves to study at a university.\\n *\\n * Usage: run sleeve/study.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Sanity check.\\n    if (!has_sleeve_api(ns)) {\\n        log(ns, \\\"No access to Sleeve API\\\", colour.RED);\\n        return;\\n    }\\n    // Study at a university.\\n    log(ns, course.CS);\\n    all_sleeves(ns).forEach((i) => {\\n        const uni = choose_university(ns, i);\\n        assert(uni !== \\\"\\\");\\n        ns.sleeve.setToUniversityCourse(i, uni, course.CS);\\n    });\\n}\\n\",\"filename\":\"/quack/sleeve/study.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":91.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"sleeve.setToUniversityCourse\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Commit a crime for a given amount of time.\\n *\\n * @param ns The Netscript API.\\n * @param crime A string representing the name of a crime.  We want to commit\\n *     this crime.\\n * @param howlong The amount of time in milliseconds.  We want to commit the\\n *     given crime for this amount of time.\\n */\\nasync function commit_crime(ns, crime, howlong) {\\n    // Sanity checks.\\n    assert(is_valid_crime(crime));\\n    assert(howlong > 0);\\n    // Commit the given crime.\\n    const end_time = Date.now() + howlong;\\n    ns.singularity.commitCrime(crime, bool.FOCUS);\\n    while (Date.now() < end_time) {\\n        await ns.sleep(wait_t.MILLISECOND);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * The gain in each stat.\\n *\\n * @param start An object following the format of the function player_stat().\\n *     Values of various stats before some action.\\n * @param end An object following the format of the function player_stat().\\n *     Values of various stats after some action.\\n * @param d The denominator.  Each gained stat is divided by this number to\\n *     result in an average.  For example, if d represents the number of\\n *     minutes, then the result means the gain per minute.\\n * @return An object following the format of the function player_stat().\\n *     Gained values of various stats.\\n */\\nfunction gained_stats(start, end, d) {\\n    const denom = Math.floor(d);\\n    assert(denom > 0);\\n    return {\\n        agility: (end.agility - start.agility) / denom,\\n        charisma: (end.charisma - start.charisma) / denom,\\n        defense: (end.defense - start.defense) / denom,\\n        dexterity: (end.dexterity - start.dexterity) / denom,\\n        hack: (end.hack - start.hack) / denom,\\n        int: (end.int - start.int) / denom,\\n        karma: (end.karma - start.karma) / denom,\\n        money: (end.money - start.money) / denom,\\n        strength: (end.strength - start.strength) / denom,\\n    };\\n}\\n\\n/**\\n * Whether the given crime is valid.\\n *\\n * @param crime A string representing the name of a crime.\\n * @return true if the given crime is valid; false otherwise.\\n */\\nfunction is_valid_crime(crime) {\\n    return Object.values(crimes).includes(crime);\\n}\\n\\n/**\\n * The player's karma.  This is an Easter egg, buried in the source code of the\\n * game.  Refer to this file:\\n *\\n * https://github.com/bitburner-official/bitburner-src/blob/dev/src/NetscriptFunctions/Extra.ts\\n *\\n * @param ns The Netscript API.\\n */\\nfunction karma(ns) {\\n    return ns.heart.break();\\n}\\n\\n/**\\n * Various stats of the player.\\n *\\n * @param ns The Netscript API.\\n * @return An object as follows:\\n *\\n *     {\\n *         agility: // The player's agility.\\n *         charisma: // The player's charisma.\\n *         defense: // The player's defense.\\n *         dexterity: // The player's dexterity.\\n *         hack: // The player's hacking skill.\\n *         int: // The player's intelligence.\\n *         karma: // The player's karma.\\n *         money: // The player's money.\\n *         strength: // The player's strength.\\n *     }\\n */\\nfunction player_stat(ns) {\\n    return {\\n        agility: ns.getPlayer().exp.agility,\\n        charisma: ns.getPlayer().exp.charisma,\\n        defense: ns.getPlayer().exp.defense,\\n        dexterity: ns.getPlayer().exp.dexterity,\\n        hack: ns.getPlayer().exp.hacking,\\n        int: ns.getPlayer().exp.intelligence,\\n        karma: karma(ns),\\n        money: ns.getPlayer().money,\\n        strength: ns.getPlayer().exp.strength,\\n    };\\n}\\n\\n/**\\n * Information on how to use this script.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction usage(ns) {\\n    const msg = \\\"Usage: run quack/test/crime/crime-int.js [crime]\\\\n\\\\n\\\"\\n        + \\\"crime -- (string) The name of a crime.\\\";\\n    ns.tprint(msg);\\n}\\n\\n/**\\n * Commit a crime for a period of time, currently default to 24 hours.  Then\\n * calculate the amount of negative karma earned per minute as well as other\\n * stat gains, including Intelligence.  This script accepts a command line\\n * argument.\\n *\\n * Usage: run quack/test/crime/crime-int.js [crime]\\n * Example: run quack/test/crime/crime-int.js \\\"shoplift\\\"\\n */\\nexport async function main(ns) {\\n    // Sanity check.\\n    if (ns.args.length !== 1) {\\n        usage(ns);\\n        return;\\n    }\\n    // Commit the given crime and calculate the stat gain per minute.\\n    const crime = ns.args[0];\\n    const start = player_stat(ns);\\n    const minute = 60;\\n    const n = 24;\\n    const howlong = n * wait_t.HOUR;\\n    await commit_crime(ns, crime, howlong);\\n    const end = player_stat(ns);\\n    const denom = n * minute;\\n    const gain = gained_stats(start, end, denom);\\n    ns.tprint(`Crime: ${crime}`);\\n    ns.tprint(`Duration: ${n} hours`);\\n    ns.tprint(\\\"Stat gain per minute.\\\");\\n    ns.tprint(`Agility: ${gain.agility}`);\\n    ns.tprint(`Charisma: ${gain.charisma}`);\\n    ns.tprint(`Defense: ${gain.defense}`);\\n    ns.tprint(`Dexterity: ${gain.dexterity}`);\\n    ns.tprint(`Hack: ${gain.hack}`);\\n    ns.tprint(`Intelligence: ${gain.int}`);\\n    ns.tprint(`Karma: ${gain.karma}`);\\n    ns.tprint(`Money: ${gain.money}`);\\n    ns.tprint(`Strength: ${gain.strength}`);\\n}\\n\",\"filename\":\"/quack/test/crime/crime-int.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":98.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Commit a crime for a given amount of time.\\n *\\n * @param ns The Netscript API.\\n * @param crime A string representing the name of a crime.  We want to commit\\n *     this crime.\\n * @param howlong The amount of time in milliseconds.  We want to commit the\\n *     given crime for this amount of time.\\n */\\nasync function commit_crime(ns, crime, howlong) {\\n    // Sanity checks.\\n    assert(is_valid_crime(crime));\\n    assert(howlong > 0);\\n    // Commit the given crime.\\n    const end_time = Date.now() + howlong;\\n    ns.singularity.commitCrime(crime, bool.FOCUS);\\n    while (Date.now() < end_time) {\\n        await ns.sleep(wait_t.MILLISECOND);\\n    }\\n    ns.singularity.stopAction();\\n}\\n\\n/**\\n * The gain in each stat.\\n *\\n * @param start An object following the format of the function player_stat().\\n *     Values of various stats before some action.\\n * @param end An object following the format of the function player_stat().\\n *     Values of various stats after some action.\\n * @param d The denominator.  Each gained stat is divided by this number to\\n *     result in an average.  For example, if d represents the number of\\n *     minutes, then the result means the gain per minute.\\n * @return An object following the format of the function player_stat().\\n *     Gained values of various stats.\\n */\\nfunction gained_stats(start, end, d) {\\n    const denom = Math.floor(d);\\n    assert(denom > 0);\\n    return {\\n        agility: (end.agility - start.agility) / denom,\\n        charisma: (end.charisma - start.charisma) / denom,\\n        defense: (end.defense - start.defense) / denom,\\n        dexterity: (end.dexterity - start.dexterity) / denom,\\n        hack: (end.hack - start.hack) / denom,\\n        karma: (end.karma - start.karma) / denom,\\n        money: (end.money - start.money) / denom,\\n        strength: (end.strength - start.strength) / denom,\\n    };\\n}\\n\\n/**\\n * Whether the given crime is valid.\\n *\\n * @param crime A string representing the name of a crime.\\n * @return true if the given crime is valid; false otherwise.\\n */\\nfunction is_valid_crime(crime) {\\n    return Object.values(crimes).includes(crime);\\n}\\n\\n/**\\n * The player's karma.  This is an Easter egg, buried in the source code of the\\n * game.  Refer to this file:\\n *\\n * https://github.com/danielyxie/bitburner/blob/dev/src/NetscriptFunctions/Extra.ts\\n *\\n * @param ns The Netscript API.\\n */\\nfunction karma(ns) {\\n    return ns.heart.break();\\n}\\n\\n/**\\n * Various stats of the player.\\n *\\n * @param ns The Netscript API.\\n * @return An object as follows:\\n *\\n *     {\\n *         agility: // The player's agility.\\n *         charisma: // The player's charisma.\\n *         defense: // The player's defense.\\n *         dexterity: // The player's dexterity.\\n *         hack: // The player's hacking skill.\\n *         karma: // The player's karma.\\n *         money: // The player's money.\\n *         strength: // The player's strength.\\n *     }\\n */\\nfunction player_stat(ns) {\\n    return {\\n        agility: ns.getPlayer().exp.agility,\\n        charisma: ns.getPlayer().exp.charisma,\\n        defense: ns.getPlayer().exp.defense,\\n        dexterity: ns.getPlayer().exp.dexterity,\\n        hack: ns.getPlayer().exp.hacking,\\n        karma: karma(ns),\\n        money: ns.getPlayer().money,\\n        strength: ns.getPlayer().exp.strength,\\n    };\\n}\\n\\n/**\\n * Information on how to use this script.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction usage(ns) {\\n    const msg = \\\"Usage: run quack/test/crime/crime.js [crime]\\\\n\\\\n\\\"\\n        + \\\"crime -- (string) The name of a crime.\\\";\\n    ns.tprint(msg);\\n}\\n\\n/**\\n * Commit a crime for a period of time, currently default to 24 hours.  Then\\n * calculate the amount of negative karma earned per minute as well as other\\n * stat gains.  This script accepts a command line argument.\\n *\\n * Usage: run quack/test/crime/crime.js [crime]\\n * Example: run quack/test/crime/crime.js \\\"shoplift\\\"\\n */\\nexport async function main(ns) {\\n    // Sanity check.\\n    if (ns.args.length !== 1) {\\n        usage(ns);\\n        return;\\n    }\\n    // Commit the given crime and calculate the stat gain per minute.\\n    const crime = ns.args[0];\\n    const start = player_stat(ns);\\n    const minute = 60;\\n    const n = 24;\\n    const howlong = n * wait_t.HOUR;\\n    await commit_crime(ns, crime, howlong);\\n    const end = player_stat(ns);\\n    const denom = n * minute;\\n    const gain = gained_stats(start, end, denom);\\n    ns.tprint(`Crime: ${crime}`);\\n    ns.tprint(`Duration: ${n} hours`);\\n    ns.tprint(\\\"Stat gain per minute.\\\");\\n    ns.tprint(`Agility: ${gain.agility}`);\\n    ns.tprint(`Charisma: ${gain.charisma}`);\\n    ns.tprint(`Defense: ${gain.defense}`);\\n    ns.tprint(`Dexterity: ${gain.dexterity}`);\\n    ns.tprint(`Hack: ${gain.hack}`);\\n    ns.tprint(`Karma: ${gain.karma}`);\\n    ns.tprint(`Money: ${gain.money}`);\\n    ns.tprint(`Strength: ${gain.strength}`);\\n}\\n\",\"filename\":\"/quack/test/crime/crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":98.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { hgw } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home, server } from \\\"/quack/lib/constant/server.js\\\";\\nimport {\\n    assemble_botnet,\\n    hgw_action,\\n    prep_gw,\\n    prep_wg,\\n} from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack money from this server.\\n * @param frac The fraction of money to steal.\\n */\\nasync function hack(ns, host, frac) {\\n    const max = 100e6;\\n    const money_init = ns.getServerMoneyAvailable(home);\\n    const money_raised = () => ns.getServerMoneyAvailable(home) - money_init;\\n    const has_enough_money = () => money_raised() >= max;\\n    while (!has_enough_money()) {\\n        await prep_server(ns, host);\\n        const botnet = assemble_botnet(ns, host, frac);\\n        await hgw_action(ns, host, botnet, hgw.action.HACK);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Prep a target server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of the server to prep.\\n */\\nasync function prep_server(ns, host) {\\n    switch (host) {\\n        case server.FOOD:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.JOES:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.NOODLES:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.PHANTASY:\\n            await prep_wg(ns, host);\\n            break;\\n        case server.SIGMA:\\n            await prep_gw(ns, host);\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Use a sequential batcher to determine how long it takes to raise $100m.  The\\n * batcher pools the resources of world servers to hack a common target. This\\n * script accepts the following command line arguments:\\n *\\n * (1) serverName := Hostname of server to hack.\\n * (2) fraction := The fraction of money to steal from the target server.\\n *\\n * Usage: run quack/test/hgw/100million.js [serverName] [fraction]\\n * Example: run quack/test/hgw/100million.js joesguns 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [target, fr] = ns.args;\\n    const frac = parseFloat(fr);\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    assert(frac > 0 && frac <= 1);\\n\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n\\n    // HGW actions.\\n    await hack(ns, target, frac);\\n\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/100million.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, server } from \\\"/quack/lib/constant/server.js\\\";\\nimport {\\n    assemble_botnet, hgw_hack, prep_gw, prep_wg,\\n} from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack money from this server.\\n * @param frac The fraction of money to steal.\\n */\\nasync function hack(ns, host, frac) {\\n    const max = 1e9;\\n    const money_init = ns.getServerMoneyAvailable(home);\\n    const money_raised = () => ns.getServerMoneyAvailable(home) - money_init;\\n    const has_enough_money = () => money_raised() >= max;\\n    while (!has_enough_money()) {\\n        await prep_server(ns, host);\\n        const botnet = assemble_botnet(ns, host, frac);\\n        await hgw_hack(ns, host, botnet);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Prep a target server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of the server to prep.\\n */\\nasync function prep_server(ns, host) {\\n    switch (host) {\\n        case server.FOOD:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.JOES:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.PHANTASY:\\n            await prep_wg(ns, host);\\n            break;\\n        case server.SIGMA:\\n            await prep_gw(ns, host);\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Use a sequential batcher to determine how long it takes to raise $1b.  The\\n * batcher pools the resources of world servers to hack a common target. This\\n * script accepts two command line arguments:\\n *\\n * (1) serverName := Hostname of server to hack.\\n * (2) fraction := The fraction of money to steal from the target server.\\n *\\n * Usage: run quack/test/hgw/billion.js [serverName] [fraction]\\n * Example: run quack/test/hgw/billion.js joesguns 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [target, fr] = ns.args;\\n    const frac = parseFloat(fr);\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    assert(frac > 0 && frac <= 1);\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n    // HGW actions.\\n    await hack(ns, target, frac);\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/billion.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":813,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assemble_botnet, hgw_hack, prep_mwg } from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n * @param percent The percentage of money to steal.\\n */\\nasync function hack(ns, host, percent) {\\n    const threshold = darkweb.program.brutessh.COST + darkweb.tor.COST;\\n    const enough_money = () => ns.getServerMoneyAvailable(home) >= threshold;\\n    while (!enough_money()) {\\n        await prep_mwg(ns, host);\\n        const botnet = assemble_botnet(ns, host, percent);\\n        await hgw_hack(ns, host, botnet);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Use a proto-batcher to determine how long it takes to raise enough money to\\n * purchase both the TOR router as well as the BruteSSH.exe program.\\n *\\n * Each of the hack, grow, and weaken functions is separated into its own\\n * script.  When we need a particular HGW action, we launch the appropriate\\n * script against a target server.  We pool the resources of all world servers,\\n * excluding our home server and purchased servers.  This script accepts a\\n * command line argument, i.e. the percentage of money to steal from a server.\\n *\\n * Usage: run quack/test/hgw/brutessh.js [moneyPercent]\\n * Example: run quack/test/hgw/brutessh.js 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = \\\"n00dles\\\";\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    const percent = parseFloat(ns.args[0]);\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n    // HGW actions.\\n    await hack(ns, target, percent);\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/brutessh.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":815,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assemble_botnet, hgw_hack, prep_mwg } from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n * @param frac The fraction of money to steal.\\n */\\nasync function hack(ns, host, frac) {\\n    const threshold = darkweb.program.ftpcrack.COST + darkweb.tor.COST;\\n    const enough_money = () => ns.getServerMoneyAvailable(home) >= threshold;\\n    while (!enough_money()) {\\n        await prep_mwg(ns, host);\\n        const botnet = assemble_botnet(ns, host, frac);\\n        await hgw_hack(ns, host, botnet);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Use a proto-batcher to determine how long it takes to raise enough money to\\n * purchase both the TOR router as well as the FTPCrack.exe program.\\n *\\n * Each of the hack, grow, and weaken functions is separated into its own\\n * script.  When we need a particular HGW action, we launch the appropriate\\n * script against a target server.  We pool the resources of all world servers,\\n * excluding our home server and purchased servers.  This script accepts two\\n * command line arguments:\\n *\\n * (1) targetServer := Hostname of server to target.\\n * (2) moneyFraction := The fraction of money to steal from the given target\\n *     server.\\n *\\n * Usage: run quack/test/hgw/ftpcrack.js [targetServer] [moneyFraction]\\n * Example: run quack/test/hgw/ftpcrack.js n00dles 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [target, frac] = ns.args;\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    const pfrac = () => parseFloat(frac);\\n    assert(pfrac() > 0 && pfrac() <= 1);\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n    // HGW actions.\\n    await hack(ns, target, pfrac());\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/ftpcrack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assemble_botnet, hgw_hack, prep_gw } from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack money from this server.\\n * @param frac The fraction of money to steal.\\n */\\nasync function hack(ns, host, frac) {\\n    const cost = darkweb.program.httpworm.COST + darkweb.program.sqlinject.COST;\\n    const money_init = ns.getServerMoneyAvailable(home);\\n    const money_raised = () => ns.getServerMoneyAvailable(home) - money_init;\\n    const has_enough_money = () => money_raised() >= cost;\\n    while (!has_enough_money()) {\\n        await prep_gw(ns, host);\\n        const botnet = assemble_botnet(ns, host, frac);\\n        await hgw_hack(ns, host, botnet);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Use a proto-batcher to determine how long it takes to raise enough money to\\n * purchase both HTTPWorm.exe and SQLInject.exe.  This script accepts one\\n * command line argument:\\n *\\n * (1) fraction := The fraction of money to steal from joesguns.\\n *\\n * Usage: run quack/test/hgw/joesguns.js [fraction]\\n * Example: run quack/test/hgw/joesguns.js 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = \\\"joesguns\\\";\\n    const frac = parseFloat(ns.args[0]);\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    assert(frac > 0 && frac <= 1);\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n    // HGW actions.\\n    await hack(ns, target, frac);\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/joesguns.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":819,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { nuke_servers } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Deploy our hack script to a nuked server.  Use the server to hack the given\\n * target.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server where we will run our hacking script.\\n *     Assumed to have root access to this server.\\n * @param target Use our hack script to hack this target server.\\n */\\nfunction deploy(ns, host, target) {\\n    const serv = new Server(ns, host);\\n    serv.deploy(target);\\n}\\n\\n/**\\n * Disable various messages in the script log.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Search for world servers to nuke.  Direct each compromised server to target a\\n * common server.  We exclude purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @param target Hostname of the server to target.\\n */\\nfunction update(ns, target) {\\n    nuke_servers(ns, network(ns)).forEach((host) => deploy(ns, host, target));\\n}\\n\\n/**\\n * Naive strategy, where we hack/grow/weaken in a loop.  Use each server in the\\n * game world to hack a common target.  Exclude purchased servers.  This script\\n * accepts a command line argument:\\n *\\n * (1) target := Hostname of the server to target.\\n *\\n * Usage: run quack/test/hgw/naive.js [target]\\n * Example: run quack/test/hgw/naive.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    shush(ns);\\n    for (;;) {\\n        update(ns, target);\\n        await ns.sleep(wait_t.MINUTE);\\n    }\\n}\\n\",\"filename\":\"/quack/test/hgw/naive.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":821,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { nuke_servers } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously try to nuke world servers.\\n *\\n * Usage: run quack/test/hgw/nuke.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    for (;;) {\\n        nuke_servers(ns, network(ns));\\n        await ns.sleep(wait_t.MINUTE);\\n    }\\n}\\n\",\"filename\":\"/quack/test/hgw/nuke.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":823,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { PservHGW } from \\\"/quack/lib/pbatch.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a target server.  Steal a certain percentage of the\\n * server's money, then weaken/grow the server until it is at minimum security\\n * level and maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of the purchased server to use.\\n * @param target Hack this world server.\\n * @param frac The fraction of money to steal.  Must be positive and at\\n *     most 1.\\n */\\nasync function hack(ns, host, target, frac) {\\n    const batcher = new PservHGW(ns, host);\\n    batcher.scp_scripts();\\n    for (;;) {\\n        await batcher.prep_gw(target);\\n        await batcher.hgw_hack(target, frac);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Various sanity checks.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of the purchased server to use.\\n * @param target Hostname of the server to target.\\n * @param frac The fraction of money to steal.  Must be positive and at\\n *     most 1.\\n */\\nfunction sanity_checks(ns, host, target, frac) {\\n    assert(host !== \\\"\\\");\\n    assert(target !== \\\"\\\");\\n    assert(frac > 0 && frac <= 1);\\n    assert(ns.getServerMaxMoney(target) > 0);\\n}\\n\\n/**\\n * A proto-batcher for purchased servers.  Each of the hack, grow, and weaken\\n * functions is separated into its own script.  When we need a particular HGW\\n * action, we launch the appropriate script against a target server.  The script\\n * accepts the following command line arguments.\\n *\\n * (1) host := Hostname of the purchased server to use.\\n * (2) target := Hostname of the server to target.\\n * (3) frac := The fraction of money to steal.\\n *\\n * Usage: run quack/test/hgw/pbatch.js [host] [target] [frac]\\n * Example: run quack/test/hgw/pbatch.js pserv n00dles 0.5\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [host, target, frac] = ns.args;\\n    const fr = parseFloat(frac);\\n    sanity_checks(ns, host, target, fr);\\n    await hack(ns, host, target, fr);\\n}\\n\",\"filename\":\"/quack/test/hgw/pbatch.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":825,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { hgw } from \\\"/quack/lib/constant/misc.js\\\";\\nimport {\\n    prep_gw, prep_mgw, prep_mwg, prep_wg,\\n} from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, is_bankrupt, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Prepare a server for hacking.  Our objective is to get a server to maximum\\n * money and minimum security.  The target server should not be bankrupt, i.e.\\n * must be able to hold some positive amount of money.\\n *\\n * @param ns The Netscript API.\\n * @param strategy Use this strategy to prepare the server.  Supported\\n *     strategies are:\\n *     (1) \\\"wg\\\" := Weaken first, followed by grow.  Perform this in a loop.  The\\n *         loop is repeated until the target\\n *         server is at minimum security and maximum money.\\n *     (2) \\\"gw\\\" := Same as the pervious strategy, but we grow first followed by\\n *         weaken.\\n *     (3) \\\"mwg\\\" := Weaken a server to minimum security first.  Then apply\\n *         strategy (2).\\n *     (4) \\\"mgw\\\" := Grow a server to maximum money first.  Then repeatedly\\n *         weaken the server.\\n * @param host Prepare this server for hacking.\\n * @return An object as follows:\\n *     (1) time := The amount of time (in milliseconds) required for the target\\n *         server to be prepped.\\n *     (2) hack := The amount of Hack XP we gained from the prepping.\\n */\\nasync function prep(ns, strategy, host) {\\n    switch (strategy) {\\n        case hgw.strategy.GW:\\n            return prep_grow_weaken(ns, host);\\n        case hgw.strategy.MGW:\\n            return prep_max_grow_weaken(ns, host);\\n        case hgw.strategy.MWG:\\n            return prep_min_weaken_grow(ns, host);\\n        case hgw.strategy.WG:\\n            return prep_weaken_grow(ns, host);\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Prepare a server for hacking.  We use the following strategy.\\n *\\n * (1) Grow\\n * (2) Weaken\\n *\\n * Apply the above strategy in a loop.  Repeat until the target server has\\n * minimum security and maximum money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n * @return An object as follows:\\n *     (1) time := The amount of time (in milliseconds) required for the target\\n *         server to be prepped.\\n *     (2) hack_xp := The amount of Hack XP we gained from the prepping.\\n *     (3) hack_stat := The number of Hack levels gained.\\n */\\nasync function prep_grow_weaken(ns, host) {\\n    const time_before = Date.now();\\n    const hack_xp_before = ns.getPlayer().exp.hacking;\\n    const hack_before = ns.getPlayer().skills.hacking;\\n    await prep_gw(ns, host);\\n    return {\\n        time: Date.now() - time_before,\\n        hack_xp: ns.getPlayer().exp.hacking - hack_xp_before,\\n        hack_stat: ns.getPlayer().skills.hacking - hack_before,\\n    };\\n}\\n\\n/**\\n * Prepare a server for hacking.  Grow a server to maximum money, then weaken\\n * the server to minimum security level.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n * @return An object as follows:\\n *     (1) time := The amount of time (in milliseconds) required for the target\\n *         server to be prepped.\\n *     (2) hack_xp := The amount of Hack XP we gained from the prepping.\\n *     (3) hack_stat := The number of Hack levels gained.\\n */\\nasync function prep_max_grow_weaken(ns, host) {\\n    const time_before = Date.now();\\n    const hack_xp_before = ns.getPlayer().exp.hacking;\\n    const hack_before = ns.getPlayer().skills.hacking;\\n    await prep_mgw(ns, host);\\n    return {\\n        time: Date.now() - time_before,\\n        hack_xp: ns.getPlayer().exp.hacking - hack_xp_before,\\n        hack_stat: ns.getPlayer().skills.hacking - hack_before,\\n    };\\n}\\n\\n/**\\n * Prepare a server for hacking.  Weaken a server to its minimum security level,\\n * then apply the strategy gw.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n * @return An object as follows:\\n *     (1) time := The amount of time (in milliseconds) required for the target\\n *         server to be prepped.\\n *     (2) hack_xp := The amount of Hack XP we gained from the prepping.\\n *     (3) hack_stat := The number of Hack levels gained.\\n */\\nasync function prep_min_weaken_grow(ns, host) {\\n    const time_before = Date.now();\\n    const hack_xp_before = ns.getPlayer().exp.hacking;\\n    const hack_before = ns.getPlayer().skills.hacking;\\n    await prep_mwg(ns, host);\\n    return {\\n        time: Date.now() - time_before,\\n        hack_xp: ns.getPlayer().exp.hacking - hack_xp_before,\\n        hack_stat: ns.getPlayer().skills.hacking - hack_before,\\n    };\\n}\\n\\n/**\\n * Prepare a server for hacking.  We use the following strategy.\\n *\\n * (1) Weaken\\n * (2) Grow\\n *\\n * Apply the above strategy in a loop.  Repeat until the target server has\\n * minimum security and maximum money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n * @return An object as follows:\\n *     (1) time := The amount of time (in milliseconds) required for the target\\n *         server to be prepped.\\n *     (2) hack_xp := The amount of Hack XP we gained from the prepping.\\n *     (3) hack_stat := The number of Hack levels gained.\\n */\\nasync function prep_weaken_grow(ns, host) {\\n    const time_before = Date.now();\\n    const hack_xp_before = ns.getPlayer().exp.hacking;\\n    const hack_before = ns.getPlayer().skills.hacking;\\n    await prep_wg(ns, host);\\n    return {\\n        time: Date.now() - time_before,\\n        hack_xp: ns.getPlayer().exp.hacking - hack_xp_before,\\n        hack_stat: ns.getPlayer().skills.hacking - hack_before,\\n    };\\n}\\n\\n/**\\n * Testing strategies for preparing a server for minimum security and maximum\\n * money.  Below is a description of each strategy:\\n *\\n * (1) \\\"wg\\\" := Weaken first, followed by grow.  Perform this in a loop.  The\\n *     loop is repeated until the target server is at minimum security and\\n *     maximum money.\\n * (2) \\\"gw\\\" := Same as the pervious strategy, but we grow first followed by\\n *     weaken.\\n * (3) \\\"mwg\\\" := Weaken a server to minimum security first.  Then apply strategy\\n *     (2).\\n * (4) \\\"mgw\\\" := Grow a server to maximum money first.  Then repeatedly weaken\\n *     the server.\\n *\\n * Pass one of the above strings as an argument to this script.  The script also\\n * accepts the hostname of the server to target.\\n *\\n * (1) strategy := One of the above HGW strategies.\\n * (2) targetServer := Hostname of server to target.\\n *\\n * Usage: run quack/test/hgw/prep.js [strategy] [targetServer]\\n * Example: run quack/test/hgw/prep.js wg n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [strategy, target] = ns.args;\\n    assert(!is_bankrupt(ns, target));\\n    let { time, hack_xp, hack_stat } = await prep(ns, strategy, target);\\n    const second = to_second(time);\\n    let rate = hack_xp / second;\\n    const duration = ns.nFormat(second, \\\"00:00:00\\\");\\n    time = `time = ${duration}`;\\n    hack_stat = `Hack stat = ${hack_stat}`;\\n    hack_xp = `Hack XP = ${hack_xp}`;\\n    rate = `XP/s = ${rate}`;\\n    const data = `${time}, ${hack_stat}, ${hack_xp}, ${rate}`;\\n    log(ns, `${target}: ${strategy}: ${data}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/prep.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/** ***********************************************************************\\n * Global data.\\n *********************************************************************** */\\n\\n/**\\n * Various constants related to the dark web.\\n */\\nconst darkweb = {\\n    /**\\n     * Constants related to various programs that can be purchased via the dark\\n     * web.\\n     */\\n    program: {\\n        brutessh: \\\"BruteSSH.exe\\\",\\n        ftpcrack: \\\"FTPCrack.exe\\\",\\n        httpworm: \\\"HTTPWorm.exe\\\",\\n        relaysmtp: \\\"relaySMTP.exe\\\",\\n        sqlinject: \\\"SQLInject.exe\\\",\\n    },\\n};\\n\\n/**\\n * Various constants in the model of hack/grow/weaken (HGW).\\n */\\nconst hgw = {\\n    /**\\n     * Various actions in the HGW model.\\n     */\\n    action: {\\n        GROW: \\\"grow\\\",\\n        HACK: \\\"hack\\\",\\n        WEAKEN: \\\"weaken\\\",\\n    },\\n    /**\\n     * Various scripts in the HGW model.\\n     */\\n    script: {\\n        /**\\n         * The grow script.  Use this script to grow money on a server.\\n         */\\n        GROW: \\\"/quack/hgw/grow.js\\\",\\n        /**\\n         * The hack script.  Use this script to hack a server.\\n         */\\n        HACK: \\\"/quack/hgw/hack.js\\\",\\n        /**\\n         * The weaken script.  Use this script to lower the security of a\\n         * server.\\n         */\\n        WEAKEN: \\\"/quack/hgw/weaken.js\\\",\\n    },\\n};\\n\\n/**\\n * Various constants related to a server.\\n */\\nconst server = {\\n    /**\\n     * Our home server.\\n     */\\n    HOME: \\\"home\\\",\\n    /**\\n     * The server joesguns.\\n     */\\n    JOES: \\\"joesguns\\\",\\n    /**\\n     * The server n00dles.\\n     */\\n    NOODLES: \\\"n00dles\\\",\\n    /**\\n     * The server phantasy.\\n     */\\n    PHANTASY: \\\"phantasy\\\",\\n};\\n\\n/** ***********************************************************************\\n * Utility functions.\\n *********************************************************************** */\\n\\n/**\\n * Choose the servers from our botnet to use for hacking.  The servers are\\n * chosen such that the total number of threads they offer allow us to steal a\\n * certain percentage of a target's money.  Essentially, the problem is this.\\n * We know we need n threads to steal a fraction of a target's money.  Choose\\n * servers from among our botnet that would allow us to hack using n threads or\\n * thereabout.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n * @param frac The fraction of money to steal.  Must be between 0 and 1.\\n * @param is_prep Are we prepping a world server?\\n * @return An array of objects {host, thread} as follows:\\n *\\n *     (1) host := Hostname of a server where we are to run our hack script.\\n *     (2) thread := The number of threads to use on the given server.\\n *\\n *     If is_prep is true, then return an array of hostnames of world servers.\\n */\\nfunction assemble_botnet(ns, host, frac, is_prep) {\\n    if (is_prep) {\\n        return nuke_servers(ns);\\n    }\\n    const s = hgw.script.HACK;\\n    const nthread = (serv) => num_threads(ns, s, serv);\\n    const descending = (a, b) => nthread(b) - nthread(a);\\n    const has_ram_to_run_script = (serv) => can_run_script(ns, s, serv);\\n    const money = target_money(ns, host, frac);\\n    const max_threads = ns.hackAnalyzeThreads(host, money);\\n    const botnet = [];\\n    let n = 0;\\n    nuke_servers(ns)\\n        .filter(has_ram_to_run_script)\\n        .sort(descending)\\n        .forEach((serv) => {\\n            if (n >= max_threads) {\\n                return;\\n            }\\n            const k = threads_to_use(ns, serv, n, max_threads);\\n            botnet.push({ host: serv, thread: k });\\n            n += k;\\n            assert(n <= max_threads);\\n        });\\n    assert(botnet.length > 0);\\n    return botnet;\\n}\\n\\n/**\\n * A function for assertion.\\n *\\n * @param cond Assert that this condition is true.\\n * @return Throw an assertion error if the given condition is false.\\n */\\nfunction assert(cond) {\\n    if (!cond) {\\n        throw new Error(\\\"Assertion failed.\\\");\\n    }\\n}\\n\\n/**\\n * Whether we can run a script on a given server.\\n *\\n * @param ns The Netscript API.\\n * @param s A script to run.  Assumed to exist on our home server as well\\n *     as the target host.\\n * @param host The target host.\\n * @return True if the given target server can run the script; false otherwise.\\n */\\nfunction can_run_script(ns, s, host) {\\n    return num_threads(ns, s, host) > 0;\\n}\\n\\n/**\\n * Determine the fraction of money to steal from a prepped server.\\n *\\n * @param ns The Netscript API.\\n * @param target Hostname of the server to hack.\\n * @return The fraction of money to steal from the target server.\\n */\\nfunction choose_fraction(ns, target) {\\n    switch (target) {\\n        case server.NOODLES:\\n            return fraction_noodles(ns);\\n        case server.JOES:\\n            return fraction_joesguns(ns);\\n        case server.PHANTASY:\\n            return fraction_phantasy(ns);\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Exclude the purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @param serv An array of hostnames.\\n * @return An array of hostnames, but minus the purchased servers.\\n */\\nfunction filter_pserv(ns, serv) {\\n    const is_home = (s) => s === server.HOME;\\n    const not_purchased = (s) => !ns.getServer(s).purchasedByPlayer;\\n    const not_pserv = (s) => is_home(s) || not_purchased(s);\\n    return serv.filter(not_pserv);\\n}\\n\\n/**\\n * The fraction of money to steal from joesguns.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction fraction_joesguns(ns) {\\n    assert(\\n        has_program(ns, darkweb.program.brutessh)\\n            && has_program(ns, darkweb.program.ftpcrack)\\n    );\\n    return 0.6;\\n}\\n\\n/**\\n * The fraction of money to steal from n00dles.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction fraction_noodles(ns) {\\n    if (\\n        !has_program(ns, darkweb.program.brutessh)\\n        && !has_program(ns, darkweb.program.ftpcrack)\\n    ) {\\n        return 0.5;\\n    }\\n    if (has_all_popen(ns)) {\\n        return 1;\\n    }\\n    if (\\n        has_program(ns, darkweb.program.brutessh)\\n        || has_program(ns, darkweb.program.ftpcrack)\\n    ) {\\n        return 0.7;\\n    }\\n}\\n\\n/**\\n * The fraction of money to steal from phantasy.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction fraction_phantasy(ns) {\\n    assert(has_all_popen(ns));\\n    return 1;\\n}\\n\\n/**\\n * Attempt to gain root access to a given server.  After gaining root access, we\\n * copy our HGW scripts over to the server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have root access to the given server; false otherwise.\\n */\\nfunction gain_admin_access(ns, host) {\\n    if (gain_root_access(ns, host)) {\\n        const file = [hgw.script.GROW, hgw.script.HACK, hgw.script.WEAKEN];\\n        ns.scp(file, host, server.HOME);\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Attempt to gain root access to a given server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have root access to the given server; false otherwise.\\n */\\nfunction gain_root_access(ns, host) {\\n    if (has_root_access(ns, host)) {\\n        return true;\\n    }\\n    // Try to open all required ports and nuke the server.\\n    try {\\n        ns.brutessh(host);\\n    } catch {}\\n    try {\\n        ns.ftpcrack(host);\\n    } catch {}\\n    try {\\n        ns.httpworm(host);\\n    } catch {}\\n    try {\\n        ns.relaysmtp(host);\\n    } catch {}\\n    try {\\n        ns.sqlinject(host);\\n    } catch {}\\n    try {\\n        ns.nuke(host);\\n        return true;\\n    } catch {\\n        return false;\\n    }\\n}\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n */\\nasync function hack(ns, host) {\\n    const not_prep = false;\\n    const frac = choose_fraction(ns, host);\\n    for (;;) {\\n        await prep_server(ns, host);\\n        const botnet = assemble_botnet(ns, host, frac, not_prep);\\n        await hgw_action(ns, host, botnet, hgw.action.HACK);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Whether we have all port opener programs.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have all port opener programs; false otherwise.\\n */\\nfunction has_all_popen(ns) {\\n    return (\\n        has_program(ns, darkweb.program.brutessh)\\n        && has_program(ns, darkweb.program.ftpcrack)\\n        && has_program(ns, darkweb.program.relaysmtp)\\n        && has_program(ns, darkweb.program.httpworm)\\n        && has_program(ns, darkweb.program.sqlinject)\\n    );\\n}\\n\\n/**\\n * Whether a server's money is at its maximum.\\n *\\n * @param ns The Netscript API.\\n * @param host The hostname of a server.\\n * @return True if the amount of money on the given server is at its maximum;\\n *     false otherwise.\\n */\\nfunction has_max_money(ns, host) {\\n    const { moneyAvailable, moneyMax } = ns.getServer(host);\\n    return moneyAvailable >= moneyMax;\\n}\\n\\n/**\\n * Whether a server's security level is at its minimum.\\n *\\n * @param ns The Netscript API.\\n * @param host The hostname of a server.\\n * @return True if the security level of the given server is at its minimum;\\n *     false otherwise.\\n */\\nfunction has_min_security(ns, host) {\\n    const { hackDifficulty, minDifficulty } = ns.getServer(host);\\n    return hackDifficulty <= minDifficulty;\\n}\\n\\n/**\\n * Whether we have a particular program.\\n *\\n * @param ns The Netscript API.\\n * @param prog Do we have this program?\\n * @return True if we have the given program; false otherwise.\\n */\\nfunction has_program(ns, prog) {\\n    return ns.fileExists(prog, server.HOME);\\n}\\n\\n/**\\n * Whether we have root access to a server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have have root access to the given server;\\n *     false otherwise.\\n */\\nfunction has_root_access(ns, host) {\\n    return ns.getServer(host).hasAdminRights;\\n}\\n\\n/**\\n * Perform an HGW action against a target server.\\n *\\n * @param ns The Netscript API.\\n * @param host Perform an HGW action against this server.  Cannot be our home\\n *     server.\\n * @param botnet An array of world servers to which we have root access.  Use\\n *     these servers to perform an HGW action against the given target.  Cannot\\n *     be empty array.\\n * @param action The action we want to perform against the given target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"weaken\\\" := Weaken the security level of the target server.\\n */\\nasync function hgw_action(ns, host, botnet, action) {\\n    assert(host !== \\\"\\\");\\n    assert(host !== server.HOME);\\n    assert(botnet.length > 0);\\n\\n    const time = hgw_wait_time(ns, host, action);\\n    const s = hgw_script(action);\\n    let has_ram_to_run_script = (serv) => can_run_script(ns, s, serv);\\n    const nthread = (serv) => num_threads(ns, s, serv);\\n    let run_script = (serv) => ns.exec(s, serv, nthread(serv), host);\\n    if (action === hgw.action.HACK) {\\n        has_ram_to_run_script = (obj) => can_run_script(ns, s, obj.host);\\n        run_script = (obj) => ns.exec(s, obj.host, obj.thread, host);\\n    }\\n    const pid = botnet.filter(has_ram_to_run_script).map(run_script);\\n    if (pid.length === 0) {\\n        return;\\n    }\\n    await ns.sleep(time);\\n    const second = 1000;\\n    while (!is_action_done(ns, pid)) {\\n        await ns.sleep(second);\\n    }\\n}\\n\\n/**\\n * The HGW script to use for a given HGW action.\\n *\\n * @param action The action we want to perform against a target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Steal money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n * @return The HGW script corresponding to the given action.\\n */\\nfunction hgw_script(action) {\\n    switch (action) {\\n        case hgw.action.GROW:\\n            return hgw.script.GROW;\\n        case hgw.action.HACK:\\n            return hgw.script.HACK;\\n        case hgw.action.WEAKEN:\\n            return hgw.script.WEAKEN;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * The amount of time in milliseconds we must wait for an HGW action to\\n * complete.\\n *\\n * @param ns The Netscript API.\\n * @param host Perform an HGW action against this server.\\n * @param action The action we want to perform against the given target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Steal money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n * @return The amount of time required for the given action to complete on the\\n *     target server.\\n */\\nfunction hgw_wait_time(ns, host, action) {\\n    switch (action) {\\n        case hgw.action.GROW:\\n            return ns.getGrowTime(host);\\n        case hgw.action.HACK:\\n            return ns.getHackTime(host);\\n        case hgw.action.WEAKEN:\\n            return ns.getWeakenTime(host);\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Whether an HGW action is completed.\\n *\\n * @param ns The Netscript API.\\n * @param pid An array of PIDs.\\n * @return True if all processes having the given PIDs are done;\\n *     false otherwise.\\n */\\nfunction is_action_done(ns, pid) {\\n    assert(pid.length > 0);\\n    const is_done = (i) => !ns.isRunning(i);\\n    return pid.every(is_done);\\n}\\n\\n/**\\n * Scan the network of servers in the game world.  Each server must be\\n * reachable from our home server.  We do not include purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return An array of servers that can be reached from home.  Purchased\\n *     servers are excluded.\\n */\\nfunction network(ns) {\\n    const q = [server.HOME];\\n    const visit = new Set([server.HOME]);\\n    while (q.length > 0) {\\n        const u = q.shift();\\n        ns.scan(u)\\n            .filter((v) => !visit.has(v))\\n            .forEach((x) => {\\n                visit.add(x);\\n                q.push(x);\\n            });\\n    }\\n    visit.delete(server.HOME);\\n    return filter_pserv(ns, [...visit]);\\n}\\n\\n/**\\n * Gain root access to as many world servers as we can.\\n *\\n * @param ns The Netscript API.\\n * @return An array of hostnames of servers.  We have root access to each\\n *     server.\\n */\\nfunction nuke_servers(ns) {\\n    return network(ns).filter((host) => gain_admin_access(ns, host));\\n}\\n\\n/**\\n * The maximum number of threads that can be used to run our script on a given\\n * server.\\n *\\n * @param ns The Netscript API.\\n * @param s A script.  Assumed to be located on home server.\\n * @param host Hostname of a world server.\\n * @return The maximum number of threads to run our script on the given server.\\n */\\nfunction num_threads(ns, s, host) {\\n    const script_ram = ns.getScriptRam(s, server.HOME);\\n    const { maxRam, ramUsed } = ns.getServer(host);\\n    const server_ram = maxRam - ramUsed;\\n    if (server_ram < 1) {\\n        return 0;\\n    }\\n    return Math.floor(server_ram / script_ram);\\n}\\n\\n/**\\n * Prepare a server for hacking.  We use the following strategy.\\n *\\n * (1) Grow\\n * (2) Weaken\\n *\\n * Apply the above strategy in a loop.  Repeat until the target server has\\n * minimum security level and maximum money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nasync function prep_gw(ns, host) {\\n    const is_prep = true;\\n    for (;;) {\\n        const botnet = assemble_botnet(ns, host, 0, is_prep);\\n        if (!has_max_money(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.GROW);\\n        }\\n        if (!has_min_security(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.WEAKEN);\\n        }\\n        if (has_min_security(ns, host) && has_max_money(ns, host)) {\\n            return;\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * Prep a server.  Weaken the server to its minimum security level and grow the\\n * server to its maximum amount of money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nasync function prep_server(ns, host) {\\n    switch (host) {\\n        case server.NOODLES:\\n        case server.JOES:\\n            await prep_gw(ns, host);\\n            break;\\n        case server.PHANTASY:\\n            await prep_wg(ns, host);\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Prepare a server for hacking.  We use the following strategy.\\n *\\n * (1) Weaken\\n * (2) Grow\\n *\\n * Apply the above strategy in a loop.  Repeat until the target server has\\n * minimum security and maximum money.\\n *\\n * @param ns The Netscript API.\\n * @param host Prep this server.\\n */\\nasync function prep_wg(ns, host) {\\n    const is_prep = true;\\n    for (;;) {\\n        const botnet = assemble_botnet(ns, host, 0, is_prep);\\n        if (!has_min_security(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.WEAKEN);\\n        }\\n        if (!has_max_money(ns, host)) {\\n            await hgw_action(ns, host, botnet, hgw.action.GROW);\\n        }\\n        if (has_min_security(ns, host) && has_max_money(ns, host)) {\\n            return;\\n        }\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * The amount of money to steal from a server.  We should refrain from emptying\\n * a server of all of its money.  Instead, our objective should be to steal a\\n * fraction of a server's money.\\n *\\n * @param ns The Netscript API.\\n * @param host Steal money from this server.\\n * @param frac The fraction of money to steal.\\n * @return The amount of money to steal from the given server.\\n */\\nfunction target_money(ns, host, frac) {\\n    return Math.floor(frac * ns.getServer(host).moneyMax);\\n}\\n\\n/**\\n * The number of threads to use on a given server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a server.\\n * @param current The current total number of threads.\\n * @param max The overall maximum number of threads we should use.\\n * @return The number of threads to use on the given server to run our hack\\n *     script.\\n */\\nfunction threads_to_use(ns, host, current, max) {\\n    assert(current >= 0);\\n    assert(max > 0);\\n    const k = num_threads(ns, hgw.script.HACK, host);\\n    if (current + k <= max) {\\n        return k;\\n    }\\n    assert(current + k > max);\\n    const j = max - current;\\n    assert(j > 0 && j < k);\\n    assert(current + j <= max);\\n    return j;\\n}\\n\\n/**\\n * Use a sequential batcher to hack a common target.  Each of the hack, grow,\\n * and weaken functions is separated into its own script.  When we need a\\n * particular HGW action, we launch the appropriate script against a target\\n * server.  We pool the resources of all world servers, excluding our home\\n * server and purchased servers.  This script accepts a command line argument:\\n *\\n * (1) target := Hostname of server to target.\\n *\\n * Usage: run quack/test/hgw/proto.js [target]\\n * Example: run quack/test/hgw/proto.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    for (;;) {\\n        await hack(ns, target);\\n        await ns.sleep(0);\\n    }\\n}\\n\",\"filename\":\"/quack/test/hgw/proto.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.65,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":829,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Use a sequential batcher to hack a common server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of the purchased server to use.\\n * @param target Hack this server.\\n * @param frac The fraction of money to steal from the target server.\\n * @param amount Hack the target server for this total amount of money.\\n */\\nasync function hack(ns, host, target, frac, amount) {\\n    const target_money = money(ns) + amount;\\n    const script = \\\"/quack/test/hgw/pbatch.js\\\";\\n    const nthread = 1;\\n    const pid = ns.exec(script, home, nthread, host, target, frac);\\n    while (money(ns) < target_money) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    ns.kill(pid);\\n    ns.exec(\\\"/quack/kill-script.js\\\", home, nthread, \\\"world\\\");\\n}\\n\\n/**\\n * The player's current amount of money.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction money(ns) {\\n    return ns.getServerMoneyAvailable(home);\\n}\\n\\n/**\\n * Various sanity checks.\\n *\\n * @param ns The Netscript API.\\n * @param psram The amount of RAM for a purchased server.\\n * @param target Hostname of the server to target.\\n * @param frac The fraction of money to steal from the target server.\\n * @param amount The target amount of money to steal.\\n */\\nfunction sanity_checks(ns, psram, target, frac, amount) {\\n    const valid_ram = [\\n        32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536,\\n        131072, 262144, 524288,\\n    ];\\n    assert(valid_ram.includes(psram));\\n    assert(target !== \\\"\\\");\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    assert(frac > 0 && frac <= 1);\\n    assert(amount > 0);\\n}\\n\\n/**\\n * Suppress various log messages.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Use a sequential batcher on a purchased server to target a world server. This\\n * script accepts the following command line arguments:\\n *\\n * (1) ram := The amount of RAM for a purchased server.  Accepted values are:\\n *\\n *     * 32 := A purchased server having 32GB RAM.\\n *     * 64 := A purchased server having 64GB RAM.\\n *     * 128 := A purchased server having 128GB RAM.\\n *     * 256 := A purchased server having 256GB RAM.\\n *     * 512 := A purchased server having 512GB RAM.\\n *     * 1024 := A purchased server having 1024GB RAM.\\n *     * 2048 := A purchased server having 2048GB RAM.\\n *     * 4096 := A purchased server having 4096GB RAM.\\n *     * 8192 := A purchased server having 8192GB RAM.\\n *     * 16384 := A purchased server having 16384GB RAM.\\n *     * 32768 := A purchased server having 32768GB RAM.\\n *     * 65536 := A purchased server having 65536GB RAM.\\n *     * 131072 := A purchased server having 131072GB RAM.\\n *     * 262144 := A purchased server having 262144GB RAM.\\n *     * 524288 := A purchased server having 524288GB RAM.\\n *\\n * (2) target := Hostname of the server to target.\\n * (3) frac := The fraction of money to steal from the target server.\\n * (4) amount := The target amount of money to steal.\\n *\\n * Usage: run quack/test/hgw/pserv.js [ram] [target] [frac] [amount]\\n * Example: run quack/test/hgw/pserv.js 128 n00dles 0.5 10e6\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [ram, target, frac, amount] = ns.args;\\n    const psram = parseInt(ram, base.DECIMAL);\\n    const fr = parseFloat(frac);\\n    const target_money = parseInt(amount, base.DECIMAL);\\n    sanity_checks(ns, psram, target, fr, target_money);\\n    shush(ns);\\n\\n    // Purchase a server having the given amount of RAM.\\n    const cost = ns.getPurchasedServerCost(psram);\\n    assert(cost <= money(ns));\\n    const host = ns.purchaseServer(\\\"pserv\\\", psram);\\n\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n\\n    // Gather data.\\n    await hack(ns, host, target, fr, target_money);\\n\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const xp_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    const money_rate = amount / time;\\n    const stat = `${hack_stat}, ${hack_xp}, ${xp_rate}, ${money_rate}`;\\n    log(ns, `${host}: ${time_fmt}, ${stat}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/pserv.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":831,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/** ***********************************************************************\\n * Global data.\\n *********************************************************************** */\\n\\n/**\\n * Various constants in the model of hack/grow/weaken (HGW).\\n */\\nconst hgw = {\\n    /**\\n     * Various actions in the HGW model.\\n     */\\n    action: {\\n        GROW: \\\"grow\\\",\\n        HACK: \\\"hack\\\",\\n        WEAKEN: \\\"weaken\\\",\\n    },\\n    /**\\n     * Various scripts in the HGW model.\\n     */\\n    script: {\\n        /**\\n         * The grow script.  Use this script to grow money on a server.\\n         */\\n        GROW: \\\"/quack/hgw/grow.js\\\",\\n        /**\\n         * The hack script.  Use this script to hack a server.\\n         */\\n        HACK: \\\"/quack/hgw/hack.js\\\",\\n        /**\\n         * The weaken script.  Use this script to lower the security of a\\n         * server.\\n         */\\n        WEAKEN: \\\"/quack/hgw/weaken.js\\\",\\n    },\\n};\\n\\n/**\\n * Various constants related to a server.\\n */\\nconst server = {\\n    /**\\n     * Our home server.\\n     */\\n    HOME: \\\"home\\\",\\n    /**\\n     * The server joesguns.\\n     */\\n    JOES: \\\"joesguns\\\",\\n    /**\\n     * The server n00dles.\\n     */\\n    NOODLES: \\\"n00dles\\\",\\n    /**\\n     * The server phantasy.\\n     */\\n    PHANTASY: \\\"phantasy\\\",\\n};\\n\\n/** ***********************************************************************\\n * Utility functions.\\n *********************************************************************** */\\n\\n/**\\n * A function for assertion.\\n *\\n * @param cond Assert that this condition is true.\\n * @return Throw an assertion error if the given condition is false.\\n */\\nfunction assert(cond) {\\n    if (!cond) {\\n        throw new Error(\\\"Assertion failed.\\\");\\n    }\\n}\\n\\n/**\\n * Whether we can run a script on a given server.\\n *\\n * @param ns The Netscript API.\\n * @param s A script to run.  Assumed to exist on our home server as well\\n *     as the target host.\\n * @param host The target host.\\n * @return True if the given target server can run the script; false otherwise.\\n */\\nfunction can_run_script(ns, s, host) {\\n    return num_threads(ns, s, host) > 0;\\n}\\n\\n/**\\n * Exclude the purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @param serv An array of hostnames.\\n * @return An array of hostnames, but minus the purchased servers.\\n */\\nfunction filter_pserv(ns, serv) {\\n    const is_home = (s) => s === server.HOME;\\n    const not_purchased = (s) => !ns.getServer(s).purchasedByPlayer;\\n    const not_pserv = (s) => is_home(s) || not_purchased(s);\\n    return serv.filter(not_pserv);\\n}\\n\\n/**\\n * Attempt to gain root access to a given server.  After gaining root access, we\\n * copy our HGW scripts over to the server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have root access to the given server; false otherwise.\\n */\\nfunction gain_admin_access(ns, host) {\\n    if (gain_root_access(ns, host)) {\\n        const file = [hgw.script.GROW, hgw.script.HACK, hgw.script.WEAKEN];\\n        ns.scp(file, host, server.HOME);\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Attempt to gain root access to a given server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have root access to the given server; false otherwise.\\n */\\nfunction gain_root_access(ns, host) {\\n    if (has_root_access(ns, host)) {\\n        return true;\\n    }\\n    // Try to open all required ports and nuke the server.\\n    try {\\n        ns.brutessh(host);\\n    } catch {}\\n    try {\\n        ns.ftpcrack(host);\\n    } catch {}\\n    try {\\n        ns.httpworm(host);\\n    } catch {}\\n    try {\\n        ns.relaysmtp(host);\\n    } catch {}\\n    try {\\n        ns.sqlinject(host);\\n    } catch {}\\n    try {\\n        ns.nuke(host);\\n        return true;\\n    } catch {\\n        return false;\\n    }\\n}\\n\\n/**\\n * Continuously hack a server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n */\\nasync function hack(ns, host) {\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(host) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(host) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const money = () => ns.getServerMoneyAvailable(host);\\n    for (;;) {\\n        if (ns.getServerSecurityLevel(host) > security_threshold) {\\n            await hgw_action(ns, host, hgw.action.WEAKEN);\\n        } else if (money() < money_threshold) {\\n            await hgw_action(ns, host, hgw.action.GROW);\\n        } else {\\n            await hgw_action(ns, host, hgw.action.HACK);\\n        }\\n    }\\n}\\n\\n/**\\n * Whether we have root access to a server.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server.\\n * @return True if we have have root access to the given server;\\n *     false otherwise.\\n */\\nfunction has_root_access(ns, host) {\\n    return ns.getServer(host).hasAdminRights;\\n}\\n\\n/**\\n * Perform an HGW action against a target server.\\n *\\n * @param ns The Netscript API.\\n * @param host Perform an HGW action against this server.  Cannot be our home\\n *     server.\\n * @param action The action we want to perform against the given target server.\\n *     Supported actions are:\\n *     (1) \\\"hack\\\" := Hack a server.\\n *     (2) \\\"grow\\\" := Grow money on the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n */\\nasync function hgw_action(ns, host, action) {\\n    assert(host !== \\\"\\\");\\n    assert(host !== server.HOME);\\n\\n    const botnet = nuke_servers(ns);\\n    const time = hgw_wait_time(ns, host, action);\\n    const s = hgw_script(action);\\n    const has_ram_to_run_script = (serv) => can_run_script(ns, s, serv);\\n    const nthread = (serv) => num_threads(ns, s, serv);\\n    const run_script = (serv) => ns.exec(s, serv, nthread(serv), host);\\n    const pid = botnet.filter(has_ram_to_run_script).map(run_script);\\n    if (pid.length === 0) {\\n        return;\\n    }\\n    await ns.sleep(time);\\n    const second = 1000;\\n    while (!is_action_done(ns, pid)) {\\n        await ns.sleep(second);\\n    }\\n}\\n\\n/**\\n * The HGW script to use for a given HGW action.\\n *\\n * @param action The action we want to perform against a target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Steal money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n * @return The HGW script corresponding to the given action.\\n */\\nfunction hgw_script(action) {\\n    switch (action) {\\n        case hgw.action.GROW:\\n            return hgw.script.GROW;\\n        case hgw.action.HACK:\\n            return hgw.script.HACK;\\n        case hgw.action.WEAKEN:\\n            return hgw.script.WEAKEN;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * The amount of time in milliseconds we must wait for an HGW action to\\n * complete.\\n *\\n * @param ns The Netscript API.\\n * @param host Perform an HGW action against this server.\\n * @param action The action we want to perform against the given target server.\\n *     Supported actions are:\\n *     (1) \\\"grow\\\" := Grow money on the target server.\\n *     (2) \\\"hack\\\" := Steal money from the target server.\\n *     (3) \\\"weaken\\\" := Weaken the security level of the target server.\\n * @return The amount of time required for the given action to complete on the\\n *     target server.\\n */\\nfunction hgw_wait_time(ns, host, action) {\\n    switch (action) {\\n        case hgw.action.GROW:\\n            return ns.getGrowTime(host);\\n        case hgw.action.HACK:\\n            return ns.getHackTime(host);\\n        case hgw.action.WEAKEN:\\n            return ns.getWeakenTime(host);\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Whether an HGW action is completed.\\n *\\n * @param ns The Netscript API.\\n * @param pid An array of PIDs.\\n * @return True if all processes having the given PIDs are done;\\n *     false otherwise.\\n */\\nfunction is_action_done(ns, pid) {\\n    assert(pid.length > 0);\\n    const is_done = (i) => !ns.isRunning(i);\\n    return pid.every(is_done);\\n}\\n\\n/**\\n * Scan the network of servers in the game world.  Each server must be\\n * reachable from our home server.  We do not include purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return An array of servers that can be reached from home.  Purchased\\n *     servers are excluded.\\n */\\nfunction network(ns) {\\n    const q = [server.HOME];\\n    const visit = new Set([server.HOME]);\\n    while (q.length > 0) {\\n        const u = q.shift();\\n        ns.scan(u)\\n            .filter((v) => !visit.has(v))\\n            .forEach((x) => {\\n                visit.add(x);\\n                q.push(x);\\n            });\\n    }\\n    visit.delete(server.HOME);\\n    return filter_pserv(ns, [...visit]);\\n}\\n\\n/**\\n * Gain root access to as many world servers as we can.\\n *\\n * @param ns The Netscript API.\\n * @return An array of hostnames of servers.  We have root access to each\\n *     server.\\n */\\nfunction nuke_servers(ns) {\\n    return network(ns).filter((host) => gain_admin_access(ns, host));\\n}\\n\\n/**\\n * The maximum number of threads that can be used to run our script on a given\\n * server.\\n *\\n * @param ns The Netscript API.\\n * @param s A script.  Assumed to be located on home server.\\n * @param host Hostname of a world server.\\n * @return The maximum number of threads to run our script on the given server.\\n */\\nfunction num_threads(ns, s, host) {\\n    const script_ram = ns.getScriptRam(s, server.HOME);\\n    const { maxRam, ramUsed } = ns.getServer(host);\\n    const server_ram = maxRam - ramUsed;\\n    if (server_ram < 1) {\\n        return 0;\\n    }\\n    return Math.floor(server_ram / script_ram);\\n}\\n\\n/**\\n * The smart strategy.  Same as the naive strategy, but each of the\\n * hack/grow/weaken functions is separated into its own script.  This script\\n * accepts a command line argument:\\n *\\n * (1) target := Hostname of server to target.\\n *\\n * Usage: run quack/test/hgw/smart.js [target]\\n * Example: run quack/test/hgw/smart.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    await hack(ns, target);\\n}\\n\",\"filename\":\"/quack/test/hgw/smart.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":833,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assemble_botnet, hgw_hack, prep_gw } from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, has_program, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The server to target, depending on which program we want to buy.\\n *\\n * @param ns The Netscript API.\\n * @param prog We want to purchase this program.\\n * @return Hostname of the server to target.\\n */\\nfunction choose_target(ns, prog) {\\n    let host = \\\"\\\";\\n    switch (prog) {\\n        case \\\"ssh\\\":\\n            host = \\\"n00dles\\\";\\n            break;\\n        case \\\"ftp\\\":\\n            assert(has_program(ns, \\\"BruteSSH.exe\\\"));\\n            host = \\\"n00dles\\\";\\n            break;\\n        case \\\"smtp\\\":\\n            assert(has_program(ns, \\\"BruteSSH.exe\\\"));\\n            assert(has_program(ns, \\\"FTPCrack.exe\\\"));\\n            host = \\\"joesguns\\\";\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n    assert(host !== \\\"\\\");\\n    return host;\\n}\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param frac The fraction of money to steal.  Only relevant when we raise\\n *     money to buy relaySMTP.exe.\\n * @param prog Raise enough money to buy this program.\\n */\\nasync function hack(ns, frac, prog) {\\n    const fraction = money_fraction(ns, frac, prog);\\n    const cost = total_cost(ns, prog);\\n    const host = choose_target(ns, prog);\\n    const has_enough_money = () => ns.getServerMoneyAvailable(home) >= cost;\\n    while (!has_enough_money()) {\\n        await prep_gw(ns, host);\\n        const botnet = assemble_botnet(ns, host, fraction);\\n        await hgw_hack(ns, host, botnet);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * The fraction of money to steal from a server.\\n *\\n * @param ns The Netscript API.\\n * @param frac The default fraction of money to steal.\\n * @param prog Buy this program.\\n * @return The true frction of money to steal, depending on which program we\\n *     want to purchase.\\n */\\nfunction money_fraction(ns, frac, prog) {\\n    let fraction = 0;\\n    switch (prog) {\\n        case \\\"ssh\\\":\\n            fraction = 0.7;\\n            break;\\n        case \\\"ftp\\\":\\n            assert(has_program(ns, \\\"BruteSSH.exe\\\"));\\n            fraction = 0.7;\\n            break;\\n        case \\\"smtp\\\":\\n            assert(has_program(ns, \\\"BruteSSH.exe\\\"));\\n            assert(has_program(ns, \\\"FTPCrack.exe\\\"));\\n            fraction = frac;\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n    assert(fraction > 0);\\n    return fraction;\\n}\\n\\n/**\\n * The total cost of purchasing a program via the dark web.\\n *\\n * @param ns The Netscript API.\\n * @param prog Raise enough money to buy this program.\\n * @return The cost of buying the given program.\\n */\\nfunction total_cost(ns, prog) {\\n    let cost = 0;\\n    switch (prog) {\\n        case \\\"ssh\\\":\\n            cost = darkweb.program.brutessh.COST + darkweb.tor.COST;\\n            break;\\n        case \\\"ftp\\\":\\n            assert(has_program(ns, \\\"BruteSSH.exe\\\"));\\n            cost = darkweb.program.ftpcrack.COST;\\n            break;\\n        case \\\"smtp\\\":\\n            assert(has_program(ns, \\\"BruteSSH.exe\\\"));\\n            assert(has_program(ns, \\\"FTPCrack.exe\\\"));\\n            cost = darkweb.program.relaysmtp.COST;\\n            break;\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n    assert(cost > 0);\\n    return cost;\\n}\\n\\n/**\\n * Use a proto-batcher to determine how long it takes to raise enough money to\\n * purchase the TOR router as well as these programs:\\n *\\n * (1) BruteSSH.exe\\n * (2) FTPCrack.exe\\n * (3) relaySMTP.exe\\n *\\n * Each of the hack, grow, and weaken functions is separated into its own\\n * script.  When we need a particular HGW action, we launch the appropriate\\n * script against a target server.  We pool the resources of all world servers,\\n * excluding our home server and purchased servers.  This script accepts 2\\n * command line arguments:\\n *\\n * (1) program := The program to buy.\\n *     ssh := BruteSSH.exe\\n *     ftp := FTPCrack.exe\\n *     smtp := relaySMTP.exe\\n * (2) moneyFraction := The fraction of money to steal from a server.\\n *\\n * Usage: run quack/test/hgw/smtp.js [program] [moneyFraction]\\n * Example: run quack/test/hgw/smtp.js ssh 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [prog, fr] = ns.args;\\n    const fraction = parseFloat(fr);\\n    assert(fraction > 0 && fraction <= 1);\\n    const target = choose_target(ns, prog);\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n    // HGW actions.\\n    await hack(ns, fraction, prog);\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/smtp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":835,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { darkweb } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assemble_botnet, hgw_hack, prep_mwg } from \\\"/quack/lib/hgw.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Continuously hack a server.  Steal a certain percentage of the server's\\n * money, then weaken/grow the server until it is at minimum security level and\\n * maximum money.  Rinse and repeat.\\n *\\n * @param ns The Netscript API.\\n * @param host Hack this server.\\n * @param percent The percentage of money to steal.\\n * @param prog Raise enough money to buy this program.\\n */\\nasync function hack(ns, host, percent, prog) {\\n    const threshold = total_cost(prog);\\n    assert(threshold > 0);\\n    const enough_money = () => ns.getServerMoneyAvailable(home) >= threshold;\\n    while (!enough_money()) {\\n        await prep_mwg(ns, host);\\n        const botnet = assemble_botnet(ns, host, percent);\\n        await hgw_hack(ns, host, botnet);\\n        await ns.sleep(0);\\n    }\\n}\\n\\n/**\\n * The total cost of purchasing a program via the dark web.\\n *\\n * @param prog Raise enough money to buy this program.\\n * @return The cost of buying the given program.  Return 0 if the program is\\n *     unknown.\\n */\\nfunction total_cost(prog) {\\n    if (prog === \\\"ssh\\\") {\\n        return darkweb.program.brutessh.COST + darkweb.tor.COST;\\n    }\\n    if (prog === \\\"ftp\\\") {\\n        return darkweb.program.ftpcrack.COST;\\n    }\\n    return 0;\\n}\\n\\n/**\\n * Use a proto-batcher to determine how long it takes to raise enough money to\\n * purchase both the TOR router as well as the BruteSSH.exe program.  Then raise\\n * enough money to buy the FTPCrack.exe program.\\n *\\n * Each of the hack, grow, and weaken functions is separated into its own\\n * script.  When we need a particular HGW action, we launch the appropriate\\n * script against a target server.  We pool the resources of all world servers,\\n * excluding our home server and purchased servers.  This script accepts 2\\n * command line arguments:\\n *\\n * (1) The program to buy.\\n *     ssh := The BruteSSH.exe program.\\n *     ftp := The FTPCrack.exe program.\\n * (2) The percentage of money to steal from a server.\\n *\\n * Usage: run quack/test/hgw/sshftp.js [program] [moneyPercent]\\n * Example: run quack/test/hgw/sshftp.js ssh 0.2\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const target = \\\"n00dles\\\";\\n    const [prog, pc] = ns.args;\\n    assert(ns.getServerMaxMoney(target) > 0);\\n    const percent = parseFloat(pc);\\n    assert(percent > 0 && percent <= 1);\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n    // HGW actions.\\n    await hack(ns, target, percent, prog);\\n    // Data after hacking.\\n    time = to_second(Date.now() - time);\\n    const time_fmt = ns.nFormat(time, \\\"00:00:00\\\");\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const hack_rate = hack_xp / time;\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    log(ns, `${target}: ${time_fmt}, ${hack_stat}, ${hack_xp}, ${hack_rate}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/sshftp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.15,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hackAnalyzeThreads\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getGrowTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getWeakenTime\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { assert, time_hms, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Use either the naive or proto strategy to hack a common server.\\n *\\n * @param ns The Netscript API.\\n * @param strat The strategy to use.  Either \\\"naive\\\" or \\\"proto\\\".\\n * @param host Hack this server.\\n * @param amount Hack the target server for this amount of money.\\n */\\nasync function hack(ns, strat, host, amount) {\\n    assert(host !== \\\"\\\");\\n    assert(amount > 0);\\n    const target_money = money(ns) + amount;\\n    const script = worker_script(strat);\\n    const nthread = 1;\\n    const pid = ns.exec(script, home, nthread, host);\\n    while (money(ns) < target_money) {\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    ns.kill(pid);\\n    ns.exec(\\\"/quack/kill-script.js\\\", home, nthread, \\\"world\\\");\\n}\\n\\n/**\\n * The player's current amount of money.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction money(ns) {\\n    return ns.getServerMoneyAvailable(home);\\n}\\n\\n/**\\n * The script to use depending on the hacking strategy.\\n *\\n * @param strat The strategy to use.  Either \\\"naive\\\", \\\"proto\\\", or \\\"smart\\\".\\n * @return The script corresponding to the given strategy.\\n */\\nfunction worker_script(strat) {\\n    switch (strat) {\\n        case \\\"naive\\\":\\n            return \\\"/quack/test/hgw/naive.js\\\";\\n        case \\\"proto\\\":\\n            return \\\"/quack/test/hgw/proto.js\\\";\\n        case \\\"smart\\\":\\n            return \\\"/quack/test/hgw/smart.js\\\";\\n        default:\\n            // Should never reach here.\\n            assert(false);\\n    }\\n}\\n\\n/**\\n * Compare effectiveness of the following hacking strategies:\\n *\\n * (1) Use all available world servers to target a common server. Run hack,\\n *     grow, weaken in a loop.  This is the naive strategy.\\n * (2) Same as the naive strategy, but each of the hack/grow/weaken functions is\\n *     separated into its own script.  This is the smart strategy.\\n * (3) Use a sequential batcher to pool resources of all available world servers\\n *     to target a common server.  This is the proto strategy.\\n *\\n * The script accepts the following command line arguments:\\n *\\n * (1) strategy := The strategy to use.  Either \\\"naive\\\", \\\"proto\\\", or \\\"smart\\\".\\n * (2) host := Hostname of the target server.\\n * (3) amount := The amount of money we want to raise.\\n *\\n * Usage: run quack/test/hgw/world.js [strategy] [host] [amount]\\n * Example: run quack/test/hgw/world.js naive n00dles 10e6\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const [strat, host, amount] = ns.args;\\n    assert(strat === \\\"naive\\\" || strat === \\\"proto\\\" || strat === \\\"smart\\\");\\n    assert(ns.getServerMaxMoney(host) > 0);\\n    const max_money = parseInt(amount, base.DECIMAL);\\n    assert(max_money > 0);\\n\\n    // Data prior to hacking.\\n    let time = Date.now();\\n    let hack_xp = ns.getPlayer().exp.hacking;\\n    let hack_stat = ns.getPlayer().skills.hacking;\\n\\n    // Gather data.\\n    await hack(ns, strat, host, max_money);\\n\\n    // Data after hacking.\\n    const rate = (amt, ms) => amt / to_second(ms);\\n    time = Date.now() - time;\\n    const time_fmt = time_hms(time);\\n    hack_xp = ns.getPlayer().exp.hacking - hack_xp;\\n    const xp_rate = rate(hack_xp, time);\\n    hack_stat = ns.getPlayer().skills.hacking - hack_stat;\\n    const money_rate = rate(max_money, time);\\n    const stat = `${hack_stat}, ${hack_xp}, ${xp_rate}, ${money_rate}`;\\n    log(ns, `${host}: ${time_fmt}, ${stat}`);\\n}\\n\",\"filename\":\"/quack/test/hgw/world.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence, intelligence_gain } from \\\"/quack/intelligence/util.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { augment } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport {\\n    choose_augment,\\n    has_augment,\\n    prerequisites,\\n} from \\\"/quack/lib/singularity/augment.js\\\";\\nimport { assert, is_valid_faction } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Augmentations we still need to purchase from a faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to purchase all Augmentations from this faction.\\n * @return An array of Augmentation names.  We do not yet have these\\n *     Augmentations.  This array never includes the NeuroFlux Governor\\n *     Augmentation.  Cannot be an empty array.\\n */\\nfunction augmentations_to_buy(ns, fac) {\\n    // All Augmentations we have not yet purchased from the given faction.\\n    // Exclude the NeuroFlux Governor.\\n    const owned_aug = new Set(\\n        ns.singularity.getOwnedAugmentations(bool.PURCHASED)\\n    );\\n    let fac_aug = ns.singularity.getAugmentationsFromFaction(fac);\\n    fac_aug = fac_aug.filter((a) => !owned_aug.has(a));\\n    if (fac_aug.includes(augment.NFG)) {\\n        fac_aug = fac_aug.filter((a) => a !== augment.NFG);\\n    }\\n    assert(fac_aug.length > 0);\\n    return fac_aug;\\n}\\n\\n/**\\n * Purchase all Augmentations from a faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac We want to buy all Augmentations from this faction.\\n */\\nasync function purchase_augmentations(ns, fac) {\\n    let augmentation = augmentations_to_buy(ns, fac);\\n    assert(augmentation.length > 0);\\n    // Below is our purchasing strategy.\\n    //\\n    // (1) Purchase the most expensive Augmentation first.\\n    // (2) If an Augmentation has a pre-requisite that we have not yet bought,\\n    //     purchase the pre-requisite first.\\n    // (3) Leave the NeuroFlux Governor Augmentation to last.\\n    while (augmentation.length > 0) {\\n        // Choose the most expensive Augmentation.\\n        const aug = choose_augment(ns, augmentation);\\n        if (has_augment(ns, aug)) {\\n            augmentation = augmentation.filter((a) => a !== aug);\\n            continue;\\n        }\\n        // If the most expensive Augmentation has no pre-requisites or we have\\n        // already purchased all of its pre-requisites, then purchase the\\n        // Augmentation.\\n        let prereq = prerequisites(ns, aug);\\n        if (prereq.length === 0) {\\n            await purchase_aug(ns, aug, fac);\\n            augmentation = augmentation.filter((a) => a !== aug);\\n            continue;\\n        }\\n        // If the Augmentation has one or more pre-requisites we have not yet\\n        // purchased, then first purchase the pre-requisites.\\n        while (prereq.length > 0) {\\n            const pre = choose_augment(ns, prereq);\\n            await purchase_aug(ns, pre, fac);\\n            prereq = prereq.filter((a) => a !== pre);\\n        }\\n        await purchase_aug(ns, aug, fac);\\n        augmentation = augmentation.filter((a) => a !== aug);\\n    }\\n    // Level up the NeuroFlux Governor Augmentation as high as our funds allows.\\n    let cost = Math.ceil(ns.singularity.getAugmentationPrice(augment.NFG));\\n    let nfg_rep = Math.ceil(ns.singularity.getAugmentationRepReq(augment.NFG));\\n    let fac_rep = Math.floor(ns.singularity.getFactionRep(fac));\\n    let money = ns.getServerMoneyAvailable(home);\\n    while (cost <= money && nfg_rep <= fac_rep) {\\n        const before = intelligence(ns);\\n        assert(ns.singularity.purchaseAugmentation(fac, augment.NFG));\\n        const after = intelligence(ns);\\n        const action = `Purchase Augmentation ${augment.NFG} from ${fac}`;\\n        intelligence_gain(ns, before, after, action);\\n        cost = Math.ceil(ns.singularity.getAugmentationPrice(augment.NFG));\\n        nfg_rep = Math.ceil(ns.singularity.getAugmentationRepReq(augment.NFG));\\n        fac_rep = Math.floor(ns.singularity.getFactionRep(fac));\\n        money = ns.getServerMoneyAvailable(home);\\n    }\\n}\\n\\n/**\\n * Purchase an Augmentation.\\n *\\n * @param ns The Netscript API.\\n * @param aug We want to purchase this Augmentation.\\n * @param fac We want to purchase the given Augmentation from this faction.\\n */\\nasync function purchase_aug(ns, aug, fac) {\\n    // Purchase any pre-requisites first.\\n    let prereq = prerequisites(ns, aug);\\n    while (prereq.length > 0) {\\n        const pre = choose_augment(ns, prereq);\\n        await purchase_aug(ns, pre, fac);\\n        prereq = prereq.filter((a) => a !== pre);\\n    }\\n    // Having purchased all pre-requisites of an Augmentation, now purchase\\n    // the Augmentation.\\n    let success = false;\\n    const cost = Math.ceil(ns.singularity.getAugmentationPrice(aug));\\n    const before = intelligence(ns);\\n    if (has_augment(ns, aug)) {\\n        return;\\n    }\\n    while (!success) {\\n        assert(!has_augment(ns, aug));\\n        if (ns.getServerMoneyAvailable(home) < cost) {\\n            await ns.sleep(wait_t.DEFAULT);\\n        }\\n        success = ns.singularity.purchaseAugmentation(fac, aug);\\n    }\\n    const after = intelligence(ns);\\n    const action = `Purchase Augmentation ${aug} from ${fac}`;\\n    intelligence_gain(ns, before, after, action);\\n    assert(has_augment(ns, aug));\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from purchasing\\n * Augmentations.  This script accepts a command line argument.\\n *\\n * Usage: run quack/intelligence/augmentation-buy.js [factionName]\\n * Example: run quack/intelligence/augmentation-buy.js Sector-12\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const faction = ns.args[0];\\n    assert(is_valid_faction(faction));\\n    await purchase_augmentations(ns, faction);\\n}\\n\",\"filename\":\"/quack/test/intelligence/augment-buy.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":841}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { intelligence } from \\\"/quack/intelligence/util.js\\\";\\n\\n/**\\n * Install a bunch of Augmentations.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function install_augmentations(ns) {\\n    const before = intelligence(ns);\\n    const file = \\\"/quack/intelligence/value.txt\\\";\\n    await ns.write(file, before, io.WRITE);\\n    const script = \\\"/quack/intelligence/augmentation-post-install.js\\\";\\n    ns.singularity.installAugmentations(script);\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from installing\\n * Augmentations.  This script shows the amount of Intelligence XP prior to\\n * the installation.  We must call another script to determine the Intelligence\\n * XP gain after the installation.\\n *\\n * Usage: run quack/intelligence/augmentation-install.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    await install_augmentations(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/augment-install.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":843}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence, intelligence_gain } from \\\"/quack/intelligence/util.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\n\\n/**\\n * Determine the amount of Intelligence XP gained from installing\\n * Augmentations.\\n *\\n * Usage: run intelligence/augmentation-post-install.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const file = \\\"/quack/intelligence/value.txt\\\";\\n    const before = parseFloat(ns.read(file));\\n    const after = intelligence(ns);\\n    const action = \\\"Install Augmentations\\\";\\n    intelligence_gain(ns, before, after, action);\\n    ns.rm(file, home);\\n}\\n\",\"filename\":\"/quack/test/intelligence/augment-post-install.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":845}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    intelligence,\\n    intelligence_gain_per_minute,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { greatest_chance } from \\\"/quack/lib/singularity/crime.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Commit a crime for one hour.\\n *\\n * @param ns The Netscript API.\\n * @param c We want to commit this crime.\\n */\\nasync function commit_crime(ns, c) {\\n    assert(c.length > 0);\\n    const before = intelligence(ns);\\n    const n = 60;\\n    ns.singularity.commitCrime(c, bool.FOCUS);\\n    await ns.sleep(wait_t.HOUR);\\n    ns.singularity.stopAction();\\n    const after = intelligence(ns);\\n    const action = `Commit crime: ${c}`;\\n    intelligence_gain_per_minute(ns, before, after, action, n);\\n}\\n\\n/**\\n * Commit various crimes.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function commit_all_crimes(ns) {\\n    let crime = Array.from(Object.values(crimes));\\n    while (crime.length > 0) {\\n        const c = greatest_chance(ns, crime)[0];\\n        await commit_crime(ns, c);\\n        crime = crime.filter((a) => a !== c);\\n    }\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from crime.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    await commit_all_crimes(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/crime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":847}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence } from \\\"/quack/intelligence/util.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { io } from \\\"/quack/lib/constant/io.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { connect_to } from \\\"/quack/lib/singularity/network.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Find and destroy the w0r1d_d43m0n server.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function destroy(ns) {\\n    const server = new Server(ns, \\\"w0r1d_d43m0n\\\");\\n    const player = new Player(ns);\\n    while (player.hacking_skill() < server.hacking_skill()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    while (!server.has_root_access()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n        server.gain_root_access();\\n    }\\n    assert(player.hacking_skill() >= server.hacking_skill());\\n    assert(server.has_root_access());\\n    // Now hack the target server.\\n    connect_to(ns, player.home(), server.hostname());\\n    const before = intelligence(ns);\\n    const file = \\\"/quack/intelligence/value-daemon.txt\\\";\\n    await ns.write(file, before, io.WRITE);\\n    await ns.singularity.installBackdoor();\\n}\\n\\n/**\\n * Destroy the w0r1d_d43m0n server.\\n *\\n * Usage: run quack/singularity/daemon.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const augment = ns.singularity.getOwnedAugmentations(bool.NOT_PURCHASED);\\n    assert(augment.includes(\\\"The Red Pill\\\"));\\n    await destroy(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/daemon.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":849}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    has_invitation,\\n    intelligence,\\n    intelligence_gain,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { factions } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The amount of Intelligence XP gained from joining a faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac The name of the faction we want to join.\\n */\\nfunction join_factions(ns) {\\n    for (const fac of factions.all) {\\n        if (has_invitation(ns, fac)) {\\n            const before = intelligence(ns);\\n            assert(ns.singularity.joinFaction(fac));\\n            const after = intelligence(ns);\\n            const action = `Join faction: ${fac}`;\\n            intelligence_gain(ns, before, after, action);\\n        }\\n    }\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from joining a faction.  We\\n * join all factions for which we have outstanding invitations.\\n *\\n * Usage: run quack/intelligence/faction-join-all.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    join_factions(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/faction-join-all.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":851}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    has_invitation,\\n    intelligence,\\n    intelligence_gain,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { factions } from \\\"/quack/lib/constant/faction.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Whether the given name represents a valid faction.\\n *\\n * @param fac A string representing the name of a faction.\\n * @return true if the given name represents a valid faction;\\n *     false otherwise.\\n */\\nfunction is_valid_faction(fac) {\\n    assert(fac.length > 0);\\n    const faction = new Set(factions.all);\\n    return faction.has(fac);\\n}\\n\\n/**\\n * The amount of Intelligence XP gained from joining a faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac The name of the faction we want to join.\\n */\\nfunction join_faction(ns, fac) {\\n    assert(is_valid_faction(fac));\\n    if (!has_invitation(ns, fac)) {\\n        return;\\n    }\\n    const before = intelligence(ns);\\n    assert(ns.singularity.joinFaction(fac));\\n    const after = intelligence(ns);\\n    const action = `Join faction: ${fac}`;\\n    intelligence_gain(ns, before, after, action);\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from joining a faction.\\n * This script takes a command line argument.\\n *\\n * Usage: run quack/intelligence/faction-join.js [factionName]\\n * Example: run quack/intelligence/faction-join.js Sector-12\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const faction = ns.args[0];\\n    join_faction(ns, faction);\\n}\\n\",\"filename\":\"/quack/test/intelligence/faction-join.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":853}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence, intelligence_gain } from \\\"/quack/intelligence/util.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Upgrade the number of Cores on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction upgrade_core(ns) {\\n    const player = new Player(ns);\\n    if (player.money() < ns.singularity.getUpgradeHomeCoresCost()) {\\n        return;\\n    }\\n    const server = new Server(ns, home);\\n    const cores_before = server.cores();\\n    const before = intelligence(ns);\\n    assert(ns.singularity.upgradeHomeCores());\\n    const cores_after = server.cores();\\n    const after = intelligence(ns);\\n    const action = `Upgrade home Cores: ${cores_before} -> ${cores_after}`;\\n    intelligence_gain(ns, before, after, action);\\n}\\n\\n/**\\n * Upgrade the amount of RAM on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction upgrade_ram(ns) {\\n    const player = new Player(ns);\\n    if (player.money() < ns.singularity.getUpgradeHomeRamCost()) {\\n        return;\\n    }\\n    const server = new Server(ns, home);\\n    const ram_before = server.ram_max();\\n    const before = intelligence(ns);\\n    assert(ns.singularity.upgradeHomeRam());\\n    const ram_after = server.ram_max();\\n    const after = intelligence(ns);\\n    const action = `Upgrade home RAM: ${ram_before} -> ${ram_after}`;\\n    intelligence_gain(ns, before, after, action);\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from upgrading the Cores and\\n * RAM on the home server.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    upgrade_ram(ns);\\n    upgrade_core(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/home.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":855}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence } from \\\"/quack/intelligence/util.js\\\";\\n\\n/**\\n * The current Intelligence XP of the player.\\n */\\nexport async function main(ns) {\\n    ns.tprint(intelligence(ns));\\n}\\n\",\"filename\":\"/quack/test/intelligence/int.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":857}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    has_program,\\n    intelligence,\\n    intelligence_gain,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * All programs that can be created.  These programs can also be purchased via\\n * the dark web.  We exclude Formulas.exe because we permanently unlocked that\\n * program after destroying BitNode 5.\\n */\\nfunction all_programs() {\\n    // A map where the key/value pair is as follows:\\n    //\\n    // key := The name of a program.\\n    // value := The minimum Hack stat at which we are able to create the\\n    //     program.  This value is specific to the current save file.\\n    const program = new Map([\\n        [\\\"BruteSSH.exe\\\", 1],\\n        [\\\"FTPCrack.exe\\\", 24],\\n        [\\\"HTTPWorm.exe\\\", 424],\\n        [\\\"relaySMTP.exe\\\", 174],\\n        [\\\"SQLInject.exe\\\", 674],\\n        [\\\"DeepscanV1.exe\\\", 1],\\n        [\\\"DeepscanV2.exe\\\", 324],\\n        [\\\"ServerProfiler.exe\\\", 1],\\n        [\\\"AutoLink.exe\\\", 1],\\n    ]);\\n    return program;\\n}\\n\\n/**\\n * Whether we can create a given program.\\n *\\n * @param ns The Netscript API.\\n * @param program A string representing the name of the program we want to\\n *     create.\\n * @return true if we meet the requirement to create the given program;\\n *     false otherwise.\\n */\\nfunction can_create(ns, program) {\\n    const prog = all_programs();\\n    const threshold = prog.get(program);\\n    assert(threshold > 0);\\n    return ns.getHackingLevel() >= threshold;\\n}\\n\\n/**\\n * Create a program.\\n *\\n * @param ns The Netscript API.\\n * @param program A string representing the name of the program we want to\\n *     create.\\n */\\nasync function create_program(ns, program) {\\n    // Work on creating the program.\\n    const before = intelligence(ns);\\n    assert(ns.singularity.createProgram(program, bool.FOCUS));\\n    while (ns.singularity.isBusy()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    assert(has_program(ns, program));\\n    const after = intelligence(ns);\\n    const action = `Create program: ${program}`;\\n    intelligence_gain(ns, before, after, action);\\n}\\n\\n/**\\n * Whether a given string represents a valid program.\\n *\\n * @param prog A string representing a program name.\\n * @return true if the given string represents a valid program;\\n *     false otherwise.\\n */\\nfunction is_valid_program(prog) {\\n    assert(prog.length > 0);\\n    const program = all_programs();\\n    return program.has(prog);\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from creating various\\n * programs.  This script accepts a command line argument, i.e. the name\\n * of the program to create.\\n *\\n * Usage: run quack/intelligence/program.js [programName]\\n * Example: run quack/intelligence/program.js BruteSSH.exe\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const prog = ns.args[0];\\n    assert(is_valid_program(prog));\\n    if (has_program(ns, prog)) {\\n        return;\\n    }\\n    assert(can_create(ns, prog));\\n    await create_program(ns, prog);\\n}\\n\",\"filename\":\"/quack/test/intelligence/program.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":859}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    intelligence,\\n    intelligence_gain_per_minute,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { random_integer } from \\\"/quack/lib/random.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * An array of all locations in Sector-12.\\n */\\nfunction all_locations() {\\n    const location = [\\n        \\\"Alpha Enterprises\\\",\\n        \\\"Blade Industries\\\",\\n        \\\"Central Intelligence Agency\\\",\\n        \\\"Carmichael Security\\\",\\n        \\\"Sector-12 City Hall\\\",\\n        \\\"DeltaOne\\\",\\n        \\\"FoodNStuff\\\",\\n        \\\"Four Sigma\\\",\\n        \\\"Icarus Microsystems\\\",\\n        \\\"Iron Gym\\\",\\n        \\\"Joe's Guns\\\",\\n        \\\"MegaCorp\\\",\\n        \\\"National Security Agency\\\",\\n        \\\"Powerhouse Gym\\\",\\n        \\\"Rothman University\\\",\\n        \\\"Universal Energy\\\",\\n    ];\\n    return location;\\n}\\n\\n/**\\n * Choose a new location to go to.\\n *\\n * @param loc We are currently at this location.\\n * @return A new location.\\n */\\nfunction choose_location(loc) {\\n    assert(loc.length > 0);\\n    const location = all_locations();\\n    const low = 0;\\n    const high = location.length - 1;\\n    let i = random_integer(low, high);\\n    let new_loc = location[i];\\n    while (loc === new_loc) {\\n        i = random_integer(low, high);\\n        new_loc = location[i];\\n    }\\n    assert(loc !== new_loc);\\n    return new_loc;\\n}\\n\\n/**\\n * Determine the amount of Intelligence XP gained from relocating to a\\n * different place.  We only relocate within Sector-12.\\n *\\n * Usage: quack/intelligence/relocate.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Relocate to a different place.  Constantly do so within one hour.  The\\n    // execution time is one hour, given in terms of milliseconds.\\n    const end = Date.now() + wait_t.HOUR;\\n    const before = intelligence(ns);\\n    let loc = \\\"FoodNStuff\\\";\\n    while (Date.now() < end) {\\n        assert(ns.singularity.goToLocation(loc));\\n        loc = choose_location(loc);\\n        await ns.sleep(wait_t.SECOND);\\n    }\\n    const after = intelligence(ns);\\n    const action = \\\"Relocate within Sector-12\\\";\\n    const n = 60; // Minutes in one hour.\\n    intelligence_gain_per_minute(ns, before, after, action, n);\\n}\\n\",\"filename\":\"/quack/test/intelligence/relocate.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":861}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    intelligence,\\n    intelligence_gain_per_minute,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { cities } from \\\"/quack/lib/constant/location.js\\\";\\nimport { course } from \\\"/quack/lib/constant/study.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Study various university courses for an hour each and calculate the\\n * amount of Intelligence gained per minute.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function study(ns) {\\n    const n = 60;\\n    const { uni } = cities[ns.getPlayer().city];\\n    ns.tprint(`Study at ${uni}`);\\n    for (const c of Object.values(course)) {\\n        const action = `Course: ${c}`;\\n        const before = intelligence(ns);\\n        assert(ns.singularity.universityCourse(uni, c, bool.FOCUS));\\n        await ns.sleep(wait_t.HOUR);\\n        ns.singularity.stopAction();\\n        const after = intelligence(ns);\\n        intelligence_gain_per_minute(ns, before, after, action, n);\\n    }\\n}\\n\\n/**\\n * Obtain Intelligence XP by studying at a university.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    await study(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/study.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":863}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    has_program,\\n    intelligence,\\n    intelligence_gain,\\n} from \\\"/quack/intelligence/util.js\\\";\\nimport { all_programs } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Use the dark web to purchase various programs.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction purchase_programs(ns) {\\n    const player = new Player(ns);\\n    for (const p of all_programs().keys()) {\\n        // We already have the program.\\n        if (has_program(ns, p)) {\\n            continue;\\n        }\\n        // We do not have enough money to buy the program.\\n        const cost = ns.singularity.getDarkwebProgramCost(p);\\n        if (player.money() < cost) {\\n            continue;\\n        }\\n        // Purchase the program.\\n        const before = intelligence(ns);\\n        assert(ns.singularity.purchaseProgram(p));\\n        const after = intelligence(ns);\\n        const action = `Purchase ${p} via dark web`;\\n        intelligence_gain(ns, before, after, action);\\n    }\\n}\\n\\n/**\\n * Obtain Intelligence XP by purchasing programs through the dark web.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    purchase_programs(ns);\\n}\\n\",\"filename\":\"/quack/test/intelligence/tor-program.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":865}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence, intelligence_gain } from \\\"/quack/intelligence/util.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Obtain Intelligence XP by purchasing the TOR router.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const before = intelligence(ns);\\n    assert(ns.singularity.purchaseTor());\\n    const after = intelligence(ns);\\n    const action = \\\"Purchase the TOR router\\\";\\n    intelligence_gain(ns, before, after, action);\\n}\\n\",\"filename\":\"/quack/test/intelligence/tor.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":867}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { intelligence, intelligence_gain } from \\\"/quack/intelligence/util.js\\\";\\nimport { assert, is_valid_city } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Determine the amount of Intelligence XP gained from travelling to a\\n * different city.  This script accepts a command line argument.\\n *\\n * Usage: quack/intelligence/travel.js [city]\\n * Example: quack/intelligence/travel.js Chongqing\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const city = ns.args[0];\\n    assert(is_valid_city(city));\\n    const before = intelligence(ns);\\n    assert(ns.singularity.travelToCity(city));\\n    const after = intelligence(ns);\\n    const action = `Travel to ${city}`;\\n    intelligence_gain(ns, before, after, action);\\n}\\n\",\"filename\":\"/quack/test/intelligence/travel.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":869}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { all_programs } from \\\"/quack/lib/constant/exe.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n// Miscellaneous utility functions.\\n\\n/**\\n * Whether we have an invitation to join a given faction.\\n *\\n * @param ns The Netscript API.\\n * @param fac The name of the faction we want to join.\\n * @return true if we have an invitation to join the given faction;\\n *     false otherwise.\\n */\\nexport function has_invitation(ns, fac) {\\n    const invite = ns.singularity.checkFactionInvitations();\\n    return invite.includes(fac);\\n}\\n\\n/**\\n * Whether we have the given program on our home server.\\n *\\n * @param ns The Netscript API.\\n * @param program A string representing the name of a program.\\n * @return true if we already have the given program;\\n *     false otherwise.\\n */\\nexport function has_program(ns, program) {\\n    assert(is_valid_program(program));\\n    return ns.fileExists(program, home);\\n}\\n\\n/**\\n * The amount of Intelligence XP the player has.\\n *\\n * @param ns The Netscript API.\\n */\\nexport function intelligence(ns) {\\n    return ns.getPlayer().exp.intelligence;\\n}\\n\\n/**\\n * Print the gain in Intelligence XP.\\n *\\n * @param ns The Netscript API.\\n * @param before The amount of Intelligence XP before a certain action.\\n * @param after The amount of Intelligence XP after performing a certain\\n *     action.\\n * @param action The action whose performance might possibly result in a gain\\n *     in Intelligence XP.\\n */\\nexport function intelligence_gain(ns, before, after, action) {\\n    assert(before >= 0);\\n    assert(after >= 0);\\n    assert(action.length > 0);\\n    const gain = after - before;\\n    ns.tprint(action);\\n    ns.tprint(`Intelligence before: ${before}`);\\n    ns.tprint(`Intelligence after: ${after}`);\\n    ns.tprint(`Intelligence gain: ${gain}`);\\n    ns.tprint(\\\"\\\");\\n}\\n\\n/**\\n * Print the gain in Intelligence XP per minute.\\n *\\n * @param ns The Netscript API.\\n * @param before The amount of Intelligence XP before a certain action.\\n * @param after The amount of Intelligence XP after performing a certain\\n *     action.\\n * @param action The action whose performance might possibly result in a gain\\n *     in Intelligence XP.\\n * @param minute Divide the Intelligence XP gain by this many minutes.\\n */\\nexport function intelligence_gain_per_minute(\\n    ns,\\n    before,\\n    after,\\n    action,\\n    minute\\n) {\\n    assert(before >= 0);\\n    assert(after >= 0);\\n    assert(action.length > 0);\\n    assert(minute > 0);\\n    const gain = after - before;\\n    const gpm = gain / minute;\\n    ns.tprint(action);\\n    ns.tprint(`Intelligence before: ${before}`);\\n    ns.tprint(`Intelligence after: ${after}`);\\n    ns.tprint(`Intelligence gain: ${gain}`);\\n    ns.tprint(`Intelligence gain per minute: ${gpm}`);\\n    ns.tprint(\\\"\\\");\\n}\\n\\n/**\\n * Whether the given name is a valid program.\\n *\\n * @param name A string representing the name of a program.\\n * @return true if the given name is a valid program;\\n *     false otherwise.\\n */\\nexport function is_valid_program(name) {\\n    assert(name.length > 0);\\n    const program = all_programs();\\n    return program.has(name);\\n}\\n\",\"filename\":\"/quack/test/intelligence/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":50.2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.checkFactionInvitations\",\"cost\":48},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/quack/lib/array.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { crimes } from \\\"/quack/lib/constant/crime.js\\\";\\nimport { gang_t } from \\\"/quack/lib/constant/gang.js\\\";\\nimport { base } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { cc_t } from \\\"/quack/lib/constant/sleeve.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { has_sleeve_api } from \\\"/quack/lib/source.js\\\";\\nimport { assert, to_minute, to_second } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * The gain in each stat.\\n *\\n * @param start An object following the format of the function player_stat().\\n *     Values of various stats before some action.\\n * @param end An object following the format of the function player_stat().\\n *     Values of various stats after some action.\\n * @param d The denominator.  Each gained stat is divided by this number to\\n *     result in an average.  For example, if d represents the number of\\n *     minutes, then the result means the gain per minute.\\n * @return An object following the format of the function player_stat().\\n *     Gained values of various stats.\\n */\\nfunction gained_stats(start, end, d) {\\n    const denom = Math.floor(d);\\n    assert(denom > 0);\\n    return {\\n        agility: (end.agility - start.agility) / denom,\\n        defense: (end.defense - start.defense) / denom,\\n        dexterity: (end.dexterity - start.dexterity) / denom,\\n        karma: (end.karma - start.karma) / denom,\\n        money: (end.money - start.money) / denom,\\n        strength: (end.strength - start.strength) / denom,\\n    };\\n}\\n\\n/**\\n * The player's current karma value.\\n *\\n * @param ns The Netscript API.\\n * @return Our current karma.\\n */\\nfunction karma(ns) {\\n    return ns.heart.break();\\n}\\n\\n/**\\n * Commit homicide to lower karma.\\n *\\n * @param ns The Netscript API.\\n * @param nsleeve The number of sleeves to use.\\n */\\nasync function lower_karma(ns, nsleeve) {\\n    const time = 500 * wait_t.MILLISECOND;\\n    ns.singularity.commitCrime(crimes.KILL, bool.FOCUS);\\n    sleeves_commit_crimes(ns, nsleeve);\\n    while (karma(ns) > gang_t.KARMA) {\\n        await ns.sleep(time);\\n    }\\n    ns.singularity.stopAction();\\n    sleeves_idle(ns, nsleeve);\\n}\\n\\n/**\\n * Various stat XP of the player.\\n *\\n * @param ns The Netscript API.\\n * @return An object as follows:\\n *     {\\n *         agility: // The player's agility XP.\\n *         defense: // The player's defense XP.\\n *         dexterity: // The player's dexterity XP.\\n *         karma: // The player's karma.\\n *         money: // The player's money.\\n *         strength: // The player's strength XP.\\n *     }\\n */\\nfunction player_stat(ns) {\\n    return {\\n        agility: ns.getPlayer().exp.agility,\\n        defense: ns.getPlayer().exp.defense,\\n        dexterity: ns.getPlayer().exp.dexterity,\\n        karma: karma(ns),\\n        money: ns.getPlayer().money,\\n        strength: ns.getPlayer().exp.strength,\\n    };\\n}\\n\\n/**\\n * Various sanity checks on the number of sleeves to use.\\n *\\n * @param ns The Netscript API.\\n * @param nsleeve The number of sleeves to use.\\n */\\nfunction sanity_check(ns, nsleeve) {\\n    assert(nsleeve >= 0 && nsleeve <= cc_t.MAX_SLEEVE);\\n    if (nsleeve === 0) {\\n        assert(!has_sleeve_api(ns));\\n    } else {\\n        assert(has_sleeve_api(ns));\\n        assert(nsleeve === ns.sleeve.getNumSleeves());\\n    }\\n}\\n\\n/**\\n * Assign all sleeves to commit homicide.\\n *\\n * @param ns The Netscript API.\\n * @param nsleeve The number of sleeves to use.\\n */\\nfunction sleeves_commit_crimes(ns, nsleeve) {\\n    if (nsleeve === 0) {\\n        return;\\n    }\\n    const homicide = (idx) => ns.sleeve.setToCommitCrime(idx, crimes.KILL);\\n    MyArray.sequence(nsleeve).forEach(homicide);\\n}\\n\\n/**\\n * Assign all sleeves to the idle state.\\n *\\n * @param ns The Netscript API.\\n * @param nsleeve The number of sleeves to use.\\n */\\nfunction sleeves_idle(ns, nsleeve) {\\n    if (nsleeve === 0) {\\n        return;\\n    }\\n    const idle = (idx) => ns.sleeve.setToSynchronize(idx);\\n    MyArray.sequence(nsleeve).forEach(idle);\\n}\\n\\n/**\\n * How long does it take to lower karma to -54,000?  Lower karma without using\\n * sleeves.  This script accepts a command line argument:\\n *\\n * (1) nSleeve := The number of sleeves to use.  We can use at most 8 sleeves.\\n *\\n * Usage: run quack/test/karma/go.js [nSleeve]\\n * Example: run quack/test/karma/go.js 3\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Sanity checks.\\n    assert(ns.args.length > 0);\\n    const nsleeve = parseInt(ns.args[0], base.DECIMAL);\\n    sanity_check(ns, nsleeve);\\n    // Data before commiting crime.\\n    const start = player_stat(ns);\\n    const time_start = Date.now();\\n    // Commit crime.\\n    await lower_karma(ns, nsleeve);\\n    // Data after committing crime.\\n    const duration = Date.now() - time_start;\\n    const time_fmt = ns.nFormat(to_second(duration), \\\"00:00:00\\\");\\n    const end = player_stat(ns);\\n    const gain = gained_stats(start, end, to_minute(duration));\\n    ns.tprint(`Crime: ${crimes.KILL}`);\\n    ns.tprint(`Duration: ${time_fmt}`);\\n    ns.tprint(\\\"Stat gain per minute.\\\");\\n    ns.tprint(`Agility: ${gain.agility}`);\\n    ns.tprint(`Defense: ${gain.defense}`);\\n    ns.tprint(`Dexterity: ${gain.dexterity}`);\\n    ns.tprint(`Karma: ${gain.karma}`);\\n    ns.tprint(`Money: ${gain.money}`);\\n    ns.tprint(`Strength: ${gain.strength}`);\\n}\\n\",\"filename\":\"/quack/test/karma/go.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":191.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"singularity.commitCrime\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.stopAction\",\"cost\":16},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"sleeve.getNumSleeves\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToCommitCrime\",\"cost\":4},{\"type\":\"fn\",\"name\":\"sleeve.setToSynchronize\",\"cost\":4},{\"type\":\"fn\",\"name\":\"singularity.getOwnedSourceFiles\",\"cost\":80},{\"type\":\"fn\",\"name\":\"singularity.isFocused\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { bitnode } from \\\"/quack/lib/constant/bn.js\\\";\\nimport { bool } from \\\"/quack/lib/constant/bool.js\\\";\\nimport { money_reserve } from \\\"/quack/lib/constant/misc.js\\\";\\nimport { pserv } from \\\"/quack/lib/constant/pserv.js\\\";\\nimport { home } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { forecast, wse } from \\\"/quack/lib/constant/wse.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { Player } from \\\"/quack/lib/player.js\\\";\\nimport { assert } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Wait until we have all prerequisites before we do anything related to the\\n * dark web.  For now, we wait until the following conditions are met:\\n *\\n * (1) We have all port opener programs.\\n * (2) Have at least a certain amount of money.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function await_prerequisites(ns) {\\n    // Must acquire all port opener programs.\\n    const player = new Player(ns);\\n    while (!player.has_all_port_openers()) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    // Our farm of purchased servers must meet certain minimum requirements.\\n    if (player.bitnode() !== bitnode.Hacktocracy) {\\n        while (!has_minimum_pserv(ns)) {\\n            await ns.sleep(wait_t.DEFAULT);\\n        }\\n    }\\n    // Wait until we have a large amount of money before trading on the Stock\\n    // Market.  Gambling on the Stock Market requires huge wealth.\\n    while (!meet_money_threshold(ns)) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n}\\n\\n/**\\n * Purchase shares of a stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk We want to purchase shares of this stock.\\n */\\nfunction buy_stock(ns, stk) {\\n    // Do we skip buying shares of this stock?\\n    if (skip_stock(ns, stk)) {\\n        return;\\n    }\\n    // Purchase shares of a stock.\\n    const nshare = num_shares(ns, stk);\\n    assert(nshare > 0);\\n    ns.stock.buyStock(stk, nshare);\\n}\\n\\n/**\\n * Whether we have access to Stock Market data and APIs.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have access to all Stock Market data and APIs;\\n *     false otherwise.\\n */\\nfunction has_api_access(ns) {\\n    if (!ns.stock.purchaseWseAccount()) {\\n        return bool.NOT;\\n    }\\n    if (!ns.stock.purchaseTixApi()) {\\n        return bool.NOT;\\n    }\\n    if (!ns.stock.purchase4SMarketData()) {\\n        return bool.NOT;\\n    }\\n    if (!ns.stock.purchase4SMarketDataTixApi()) {\\n        return bool.NOT;\\n    }\\n    return bool.HAS;\\n}\\n\\n/**\\n * Whether we have sufficient funds for purchasing stocks.  This function\\n * takes into account the minimum amount of money that should be held in\\n * reserve whenever we trade on the Stock Market.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have enough money to buy stocks; false otherwise.\\n */\\nfunction has_funds(ns) {\\n    const player = new Player(ns);\\n    return player.money() > wse.RESERVE_MULT * money_reserve;\\n}\\n\\n/**\\n * Whether we have a minimum running farm of purchased servers.  To meet this\\n * condition, our farm must satisfy the following:\\n *\\n * (1) Each purchased server in the farm must have at least 16,384GB RAM.\\n * (2) Our farm must have the maximum number of purchased server.\\n *\\n * @param ns The Netscript API.\\n * @return True if we have a minimum running purchased server farm;\\n *     false otherwise.\\n */\\nfunction has_minimum_pserv(ns) {\\n    // Do we have the maximum number of purchased servers?\\n    const player = new Player(ns);\\n    if (player.pserv().length < ns.getPurchasedServerLimit()) {\\n        return bool.NOT;\\n    }\\n    // Does each purchased server have at least the given amount of RAM?\\n    const server = ns.getServer(pserv.PREFIX);\\n    assert(server.purchasedByPlayer);\\n    if (server.maxRam < pserv.HIGH_RAM) {\\n        return bool.NOT;\\n    }\\n    return bool.HAS;\\n}\\n\\n/**\\n * Whether it is profitable to sell all shares of a given stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk Is there any profit in selling all shares of this stock?\\n * @return True if we can make a profit by selling all our shares of this\\n *     stock; false otherwise.\\n */\\nfunction is_profitable(ns, stk) {\\n    const position = ns.stock.getPosition(stk);\\n    const nlong = position[0];\\n    // Assume we have at least 1 share of the stock.\\n    assert(nlong > 0);\\n    return ns.stock.getSaleGain(stk, nlong, \\\"Long\\\") > 0;\\n}\\n\\n/**\\n * Whether we meet the money threshold.  Must have at least a certain amount\\n * of money before we start dabbling on the Stock Market.\\n *\\n * @param ns The Netscript API.\\n * @return True if our funds is at least the money threshold; false otherwise.\\n */\\nfunction meet_money_threshold(ns) {\\n    const player = new Player(ns);\\n    return player.money() >= money_reserve;\\n}\\n\\n/**\\n * How many shares of a stock we can purchase.\\n *\\n * @param ns The Netscript API.\\n * @param stk We want to buy shares of this stock.\\n * @return The number of shares of this stock that we can buy.  Must be at\\n *     least zero.  If 0, then we can't buy any shares of the given stock.\\n */\\nfunction num_shares(ns, stk) {\\n    // We don't have enough money to buy stocks.\\n    if (!has_funds(ns)) {\\n        return 0;\\n    }\\n    // Our funds is less than the spending threshold.\\n    const player = new Player(ns);\\n    const funds = player.money() - money_reserve;\\n    if (funds < wse.SPEND_T) {\\n        return 0;\\n    }\\n    // The maximum number of shares of the stock we can buy.  This takes into\\n    // account the number of shares we already own.\\n    const position = ns.stock.getPosition(stk);\\n    const nlong = position[0];\\n    const max_share = ns.stock.getMaxShares(stk) - nlong;\\n    if (max_share < 1) {\\n        return 0;\\n    }\\n    // Calculate how many shares of the stock we can buy.\\n    const price = ns.stock.getAskPrice(stk);\\n    const nshare = Math.floor(funds / price);\\n    return Math.min(nshare, max_share);\\n}\\n\\n/**\\n * Purchase access to Stock Market data and APIs.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function purchase_api_access(ns) {\\n    while (!has_api_access(ns)) {\\n        await ns.sleep(wait_t.DEFAULT);\\n    }\\n    log(ns, \\\"Purchased access to Stock Market data and APIs\\\");\\n}\\n\\n/**\\n * Sell shares of a stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk We want to sell shares of this stock.\\n */\\nfunction sell_stock(ns, stk) {\\n    const position = ns.stock.getPosition(stk);\\n    const nlong = position[0];\\n    // Skip the stock if we don't have any shares of the stock.\\n    if (nlong < 1) {\\n        return;\\n    }\\n    // Sell all shares of the stock if the forecast is below the threshold.\\n    if (ns.stock.getForecast(stk) < forecast.SELL && is_profitable(ns, stk)) {\\n        ns.stock.sellStock(stk, nlong);\\n    }\\n}\\n\\n/**\\n * Whether to skip the purchase of shares.  There are various reasons why we\\n * might want to skip the buying of shares, even though we have sufficient\\n * funds.  One reason is that we want to sell our shares to raise a huge amount\\n * of money for various purposes.\\n *\\n * @param ns The Netscript API.\\n * @return True if the trade bot should skip buying shares during this tick;\\n *     false otherwise.\\n */\\nfunction skip_buy(ns) {\\n    return ns.fileExists(wse.STOP_BUY, home);\\n}\\n\\n/**\\n * Whether to skip buying shares of a stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk Do we want to skip over this stock?\\n * @return True if we are to skip this stock; false otherwise.\\n */\\nfunction skip_stock(ns, stk) {\\n    if (\\n        ns.stock.getForecast(stk) < forecast.BUY\\n        || ns.stock.getVolatility(stk) > forecast.VOLATILITY\\n        || num_shares(ns, stk) < 1\\n    ) {\\n        return bool.SKIP;\\n    }\\n    return bool.NO_SKIP;\\n}\\n\\n/**\\n * Automate our trading on the World Stock Exchange.  This is our trade bot.\\n *\\n * Usage: run quack/trade-bot.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    // Prepare to trade.\\n    await await_prerequisites(ns);\\n    await purchase_api_access(ns);\\n    // Continuously trade on the Stock Market.\\n    log(ns, \\\"Trading on the Stock Market\\\");\\n    const player = new Player(ns);\\n    for (;;) {\\n        // Iterate over each stock.  Decide whether to buy or sell.\\n        for (const stk of ns.stock.getSymbols()) {\\n            sell_stock(ns, stk);\\n            if (\\n                player.bitnode() !== bitnode.Hacktocracy\\n                && !has_minimum_pserv(ns)\\n            ) {\\n                continue;\\n            }\\n            if (skip_buy(ns)) {\\n                continue;\\n            }\\n            buy_stock(ns, stk);\\n        }\\n        await ns.sleep(wse.TICK);\\n    }\\n}\\n\",\"filename\":\"/quack/trade-bot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":36.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.buyStock\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellStock\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasTorRouter\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022--2023 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { server } from \\\"/quack/lib/constant/server.js\\\";\\nimport { wait_t } from \\\"/quack/lib/constant/time.js\\\";\\nimport { log } from \\\"/quack/lib/io.js\\\";\\nimport { network } from \\\"/quack/lib/network.js\\\";\\nimport { Server } from \\\"/quack/lib/server.js\\\";\\nimport { nuke_servers } from \\\"/quack/lib/util.js\\\";\\n\\n/**\\n * Deploy our hack script to a nuked server.  Use the server to hack the given\\n * target.\\n *\\n * @param ns The Netscript API.\\n * @param host Hostname of a world server where we will run our hacking script.\\n *     Assumed to have root access to this server.\\n * @param target Use our hack script to hack this target server.\\n */\\nfunction deploy(ns, host, target) {\\n    const serv = new Server(ns, host);\\n    serv.deploy(target);\\n}\\n\\n/**\\n * Disable various messages in the script log.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction shush(ns) {\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n}\\n\\n/**\\n * Search for world servers to nuke.  Direct each compromised server to target a\\n * common server.  We exclude purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @param target Hostname of the server to target.\\n */\\nasync function update(ns, target) {\\n    nuke_servers(ns, network(ns)).forEach((host) => deploy(ns, host, target));\\n}\\n\\n/**\\n * The naive hacking algorithm.  We pool the resources of world servers into a\\n * botnet.  Use the botnet to hack a common target.  We exclude purchased\\n * servers.\\n *\\n * This script relies on the basic hacking script.  It is not an implementation\\n * of a proto-batcher nor a sequential batcher.  The script accepts a command\\n * line argument:\\n *\\n * (1) target := Hostname of the server to target.  If not provided, then target\\n *     n00dles by default.\\n *\\n * By default we should target n00dles because the naive algorithm\\n * (against n00dles) can generate money quicker than a sequential\\n * batcher.  Data here\\n *\\n * https://github.com/quacksouls/bitburner/blob/main/data/hgw/world.md\\n *\\n * Usage: run quack/world.js [target]\\n * Example: run quack/world.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    shush(ns);\\n    const target = ns.args.length > 0 ? ns.args[0] : server.NOODLES;\\n    // Continuously look for world servers to nuke.\\n    log(ns, \\\"Searching for world servers to nuke and hack\\\");\\n    for (;;) {\\n        await update(ns, target);\\n        await ns.sleep(5 * wait_t.MINUTE);\\n    }\\n}\\n\",\"filename\":\"/quack/world.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"68.4.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":39905464924,\"moneyMax\":997636623100,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1389,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"60.6.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57195912746,\"moneyMax\":1429897818650,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1272,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"14.3.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":28111969523,\"moneyMax\":702799238075,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1007,\"serverGrowth\":63}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"57.6.9.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":21295195799,\"moneyMax\":532379894975,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1030,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"27.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38995982690,\"moneyMax\":974899567250,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":993,\"serverGrowth\":91}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"15.5.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":20243803121,\"moneyMax\":506095078025,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":968,\"serverGrowth\":68}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"99.8.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":13860707290,\"moneyMax\":346517682250,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":981,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"32.9.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":23843101446,\"moneyMax\":596077536150,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1036,\"serverGrowth\":88}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"16.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":26764523477,\"moneyMax\":669113086925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":955,\"serverGrowth\":95}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"38.3.8.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1491289085,\"moneyMax\":37282227125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1242,\"serverGrowth\":85}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"32.8.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1292,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"81.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1032386432,\"moneyMax\":25809660800,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1038,\"serverGrowth\":84}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"9.5.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":868254429,\"moneyMax\":21706360725,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":948,\"serverGrowth\":71}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"97.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":769622204,\"moneyMax\":19240555100,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":60}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"45.6.5.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":578129808,\"moneyMax\":14453245200,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":804,\"serverGrowth\":76}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"99.4.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":758593673,\"moneyMax\":18964841825,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":821,\"serverGrowth\":65}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"21.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":966964309,\"moneyMax\":24174107725,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":885,\"serverGrowth\":95}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"33.8.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1117823938,\"moneyMax\":27945598450,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":803,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"10.7.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":898947872,\"moneyMax\":22473696800,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":829,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"2.1.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":631536019,\"moneyMax\":15788400475,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":814,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"96.6.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":848415133,\"moneyMax\":21210378325,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":907,\"serverGrowth\":80}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"80.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":826727380,\"moneyMax\":20668184500,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":835,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"26.1.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1043002886,\"moneyMax\":26075072150,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":893,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"51.6.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":922048599,\"moneyMax\":23051214975,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":914,\"serverGrowth\":62}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"77.4.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":1018590210,\"moneyMax\":25464755250,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":793,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"24.1.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":923000423,\"moneyMax\":23075010575,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":803,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"74.2.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":732925430,\"moneyMax\":18323135750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":807,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"52.0.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1661453716,\"moneyMax\":41536342900,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":866,\"serverGrowth\":59}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"93.1.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1646863465,\"moneyMax\":41171586625,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":773,\"serverGrowth\":89}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"4.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1144160596,\"moneyMax\":28604014900,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":831,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"13.0.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1339660130,\"moneyMax\":33491503250,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":841,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"22.0.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1003053869,\"moneyMax\":25076346725,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":775,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"34.3.9.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":792581690,\"moneyMax\":19814542250,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":688,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"63.7.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":619187188,\"moneyMax\":15479679700,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":483,\"serverGrowth\":45}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"40.3.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":623188656,\"moneyMax\":15579716400,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":528,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"90.8.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":389299215,\"moneyMax\":9732480375,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":434,\"serverGrowth\":38}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"32.6.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":224906803,\"moneyMax\":5622670075,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":377,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"83.7.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":1042670696,\"moneyMax\":26066767400,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":769,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"7.1.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":204129043,\"moneyMax\":5103226075,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":433,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"6.0.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"computek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":430063572,\"moneyMax\":10751589300,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":606,\"serverGrowth\":67}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"87.3.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":446943496,\"moneyMax\":11173587400,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":442,\"serverGrowth\":47}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"29.6.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":176067502,\"moneyMax\":4401687550,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":323,\"serverGrowth\":46}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"50.9.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":234835485,\"moneyMax\":5870887125,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":364,\"serverGrowth\":56}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"17.0.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":395,\"serverGrowth\":56}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"37.9.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":74377547,\"moneyMax\":1859438675,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":292,\"serverGrowth\":63}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"15.7.7.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5c62ebf0-28e3-4252-859f-12303c1a9297\",\"moduleSequenceNumber\":1852}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.2080000000000002,\"minDifficulty\":1,\"moneyAvailable\":1465386,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"34.0.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8b485680-7900-400c-a65a-0ce172867451\",\"moduleSequenceNumber\":1853}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"42.8.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f55ba6f1-8f4d-4453-ba4a-f28781e4118c\",\"moduleSequenceNumber\":1854}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"21.9.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c920d81c-e1b7-41a8-a5aa-3880ec335a7e\",\"moduleSequenceNumber\":1855}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"32.0.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ab4770e1-1921-46f4-9890-3f0a97f9c6f9\",\"moduleSequenceNumber\":1860}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"56.7.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f2d056df-611a-4b82-b604-4f18b14d91eb\",\"moduleSequenceNumber\":1859}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"83.9.7.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7465de67-1491-4eec-8c9b-adbd8dbbec48\",\"moduleSequenceNumber\":1863}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"65.7.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"71.0.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ce05308a-bac1-4026-bd19-8b288cda08fd\",\"moduleSequenceNumber\":1856}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"10.5.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4ef147bf-23f0-4cb6-9792-01f1ed3d2c35\",\"moduleSequenceNumber\":1857}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"43.5.2.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"26.5.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a249b5d7-9764-45d0-8fbb-cfd3cf174699\",\"moduleSequenceNumber\":1861}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"21.5.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"computek\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":69105296,\"moneyMax\":1727632400,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":210,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"69.6.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":46929103,\"moneyMax\":1173227575,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":233,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"74.2.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4b82d8a1-d764-494d-8f8a-827cf1ddf590\",\"moduleSequenceNumber\":1858}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"94.1.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":476,\"serverGrowth\":40}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"51.7.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":981,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"94.8.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":740,\"serverGrowth\":44}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"77.0.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":537,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"80.2.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":343,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"1.2.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":211,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"18.2.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":546,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.5.3.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// NOTE: Keep this script as independent and small as possible so that its RAM\\n// requirement is as low as possible.  Avoid importing anything into this\\n// script.\\n\\n/**\\n * NOTE: Assume that we have root access on the target server.\\n *\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our Hack XP,\\n    // although we would not receive any money.  Set the money threshold at 75%\\n    // of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const opt = { stock: true }; // Affects the Stock Market.\\n    for (;;) {\\n        const money = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            await ns.weaken(target, opt);\\n        } else if (money < money_threshold) {\\n            await ns.grow(target, opt);\\n        } else {\\n            await ns.hack(target, opt);\\n        }\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///ccb51703-6c0b-48be-9b35-041ea3848e6b\",\"moduleSequenceNumber\":1862}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"56.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"71.5.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"95.2.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":42.715,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"30","AllGangsSave":"","LastExportBonus":"1677089550804","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}