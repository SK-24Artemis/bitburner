{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":0,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.16,\"hacking_speed\":1.16,\"hacking_money\":1.16,\"hacking_grow\":1.16,\"hacking\":1.16,\"hacking_exp\":1.16,\"strength\":1.16,\"strength_exp\":1.16,\"defense\":1.16,\"defense_exp\":1.16,\"dexterity\":1.16,\"dexterity_exp\":1.16,\"agility\":1.16,\"agility_exp\":1.16,\"charisma\":1.16,\"charisma_exp\":1.16,\"hacknet_node_money\":1.16,\"hacknet_node_purchase_cost\":0.84,\"hacknet_node_ram_cost\":0.84,\"hacknet_node_core_cost\":0.84,\"hacknet_node_level_cost\":0.84,\"company_rep\":1.16,\"faction_rep\":1.16,\"work_money\":1.16,\"crime_success\":1.16,\"crime_money\":1.16,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":1022,\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1662296695227,\"lastSave\":1662296425827,\"totalPlaytime\":535548600,\"playtimeSinceLastAug\":137800,\"playtimeSinceLastBitnode\":137800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":0,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":0,\"work\":0,\"servers\":0,\"other\":0,\"augmentations\":0}},\"scriptProdSinceLastAug\":0,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1661761388993},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1661761881624},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1661762183236},{\"ID\":\"WORKOUT\",\"unlockedOn\":1661762303207},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1661765120590},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1661770690149},{\"ID\":\"TOR\",\"unlockedOn\":1661780463188},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1661781121094},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1661781180988},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1661785440704},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1661818557143},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1661819946917},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1661848004107},{\"ID\":\"TRAVEL\",\"unlockedOn\":1661863303135},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1661922964325},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1661922964349},{\"ID\":\"4S\",\"unlockedOn\":1661922964351},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1661923116721},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1661923621337},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1662029814503},{\"ID\":\"DONATION\",\"unlockedOn\":1662080416604},{\"ID\":\"NITESEC\",\"unlockedOn\":1662127206582},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1662155663262},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1662164489662},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1662208804869},{\"ID\":\"SF1.1\",\"unlockedOn\":1662296637383}],\"terminalCommandHistory\":[\"connect nova-med\",\"connect titan-labs\",\"connect helios\",\"connect kuai-gong\",\"connect b-and-a\",\"connect megacorp\",\"backdoor\",\"run go.js\",\"clear\",\"buy -l\",\"buy HTTPWorm.exe\",\"buy SQLInject.exe\",\"clear\",\"buy -l\",\"clear\",\"run go.js\",\"ls\",\"wget https://raw.githubusercontent.com/quacksouls/bitburner/main/pull.js pull.js\",\"run pull.js 06\",\"clear\",\"run nmap.js\",\"run shortest-path.js w0r1d_d43m0n\",\"connect foodnstuff\",\"connect zer0\",\"connect phantasy\",\"connect computek\",\"connect catalyst\",\"connect lexo-corp\",\"connect aerocorp\",\"connect omnia\",\"connect defcomm\",\"connect nova-med\",\"connect microdyne\",\"connect stormtech\",\"connect .\",\"connect blade\",\"connect The-Cave\",\"connect w0r1d_d43m0n\",\"buy -l\",\"buy HTTPWorm.exe\",\"buy SQLInject.exe\",\"clear\",\"buy -l\",\"run BruteSSH.exe\",\"run FTPCrack.exe\",\"run relaySMTP.exe\",\"run HTTPWorm.exe\",\"run SQLInject.exe\",\"run NUKE.exe\",\"backdoor\"],\"focus\":false,\"currentWork\":null,\"identifier\":\"a6ea82f80ca8d\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"47.5.8.7\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport { pserv_prefix } from \\\"/lib/constant.js\\\";\\nimport { network } from \\\"/lib/network.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { PurchasedServer } from \\\"/lib/pserv.js\\\";\\nimport { Server } from \\\"/lib/server.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport {\\n    assert, choose_best_server, choose_targets, filter_bankrupt_servers,\\n    is_bankrupt\\n} from \\\"/lib/util.js\\\";\\n\\n/**\\n * Buy servers, each having as high an amount of RAM as we can afford.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function buy_servers(ns) {\\n    // The amount of RAM for each purchased server.  If 0, we try to purchase\\n    // servers where the amount of RAM allows us to run our hack script using\\n    // 2 threads.\\n    const pserv = new PurchasedServer(ns);\\n    const default_ram = pserv.default_ram();\\n    // By default, we want to purchase minserv servers.  As for the remaining\\n    // servers that make up the number to reach the maximum number of purchased\\n    // servers, we wait until we have enough money to purchase each of them.\\n    // Set minserv to a small number so we can bootstrap a source of passive\\n    // income and Hack points\\n    const minserv = 13;\\n    let ram = pserv_ram(ns, minserv);\\n    if (ram <= default_ram) {\\n        // Try to purchase servers, each with the default amount of ram.\\n        await stage_one(ns);\\n        return;\\n    }\\n    // Here we assume we already have purchased servers, each with the default\\n    // amount of RAM.  Now try to purchase servers, each with a higher amount\\n    // of RAM than the default amount.  We wait to accumulate enough money to\\n    // purchase the maximum number of servers.\\n    const maxserv = pserv.limit();\\n    ram = pserv_ram(ns, maxserv);\\n    if (ram <= default_ram) {\\n        return;\\n    }\\n    assert(ram > default_ram);\\n    await next_stage(ns, ram);\\n}\\n\\n/**\\n * Whether we have the maximum number of purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return true if we already have the maximum number of purchased servers;\\n *     false otherwise.\\n */\\nfunction has_max_pserv(ns) {\\n    const player = new Player(ns);\\n    const pserv = new PurchasedServer(ns);\\n    if (player.pserv().length < pserv.limit()) {\\n        return false;\\n    }\\n    return true;\\n}\\n\\n/**\\n * Purchase servers that have more than the default amount of RAM.  Call this\\n * function multiple times with different arguments to upgrade our purchased\\n * servers to higher RAM.\\n *\\n * @param ns The Netscript API.\\n * @param ram The amount of RAM for each purchased server.\\n */\\nasync function next_stage(ns, ram) {\\n    const pserv = new PurchasedServer(ns);\\n    assert(pserv.is_valid_ram(ram));\\n    // If we have zero purchased servers, then buy servers with the given\\n    // amount of RAM.\\n    const player = new Player(ns);\\n    const current_pserv = player.pserv();\\n    const msg = \\\"Buy servers with RAM: \\\" + ram;\\n    if (current_pserv.length < 1) {\\n        ns.print(msg);\\n        await update(ns, ram);\\n        return;\\n    }\\n    // Assume we have at least 1 purchased server.\\n    assert(current_pserv.length > 0);\\n    const server = new Server(ns, current_pserv[0]);\\n    if (server.ram_max() < ram) {\\n        // If each purchased server has less than the given amount of RAM, then\\n        // delete the servers and purchase servers with the given amount of RAM.\\n        ns.print(msg);\\n        pserv.kill_all();\\n        await update(ns, ram);\\n    } else if (server.ram_max() == ram) {\\n        // The current purchased servers have the same amount of RAM as our\\n        // target RAM.  Continue purchasing more servers with the current\\n        // amount of RAM.\\n        ns.print(msg);\\n        await update(ns, ram);\\n    } else {\\n        // Each current purchased server has more RAM than the given amount of\\n        // RAM.\\n        assert(ram < server.ram_max());\\n        return;\\n    }\\n}\\n\\n/**\\n * The possible amount of RAM for each purchased server.\\n *\\n * @param ns The Netscript API.\\n * @param minserv The minimum number of servers to buy.  Must be a positive\\n *     integer.\\n * @return The amount of RAM for each purchased server.  Return 0 if we cannot\\n *     afford the given number of purchased servers.\\n */\\nfunction pserv_ram(ns, minserv) {\\n    assert(minserv > 0);\\n    // The possible amount of RAM for a purchased server.  We want the lowest\\n    // value to be the default amount of RAM.\\n    const pserv = new PurchasedServer(ns);\\n    const default_ram = pserv.default_ram();\\n    let ram = [default_ram];\\n    for (const r of pserv.valid_ram()) {\\n        if (r > default_ram) {\\n            ram.push(r);\\n        }\\n    }\\n    // Sort the array of RAM in descending order.\\n    const array = new MyArray();\\n    ram = array.sort_descending(ram);\\n    // Let's see whether we can purchase servers, each having the given amount\\n    // of RAM.  Start with the highest amount of RAM.  See if we can buy at\\n    // least minserv servers, each with the given amount of RAM.  If not, then\\n    // decrease the amount of RAM and repeat the above process.\\n    const player = new Player(ns);\\n    let psram = 0;\\n    for (const r of ram) {\\n        const cost = minserv * pserv.cost(r);\\n        if (cost > player.money()) {\\n            continue;\\n        }\\n        psram = r;\\n        break;\\n    }\\n    return psram;\\n}\\n\\n/**\\n * Obtain a new batch of target servers to hack.  Exclude bankrupt servers.\\n *\\n * @param ns The Netscript API.\\n * @param target An array of current targets.\\n * @return A possibly new array of more targets to hack.\\n */\\nfunction renew_targets(ns, target) {\\n    if (target.length < 1) {\\n        target = filter_bankrupt_servers(ns, choose_targets(ns, network(ns)));\\n        assert(target.length > 0);\\n    }\\n    return target;\\n}\\n\\n/**\\n * This is the early stage, where it is assumed we are starting the game or\\n * have just installed a bunch of Augmentations.  Each purchased server should\\n * have a small amount of RAM, enough to run our hacking script using at least\\n * 2 threads.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function stage_one(ns) {\\n    // Do we already have the maximum number of purchased servers?\\n    const pserv = new PurchasedServer(ns);\\n    const default_ram = pserv.default_ram();\\n    if (has_max_pserv(ns)) {\\n        const msg = \\\"RAM: \\\" + default_ram + \\\".  Already has max pserv.\\\";\\n        ns.print(msg);\\n        return;\\n    }\\n    // If we have zero purchased servers, then start with purchased servers\\n    // that have the default amount of RAM.\\n    const player = new Player(ns);\\n    const current_pserv = player.pserv();\\n    const msg = \\\"Buy servers with default RAM: \\\" + default_ram;\\n    if (current_pserv.length < 1) {\\n        ns.print(msg);\\n        await update(ns, default_ram);\\n        return;\\n    }\\n    // Assume we have at least 1 purchased server.\\n    assert(current_pserv.length > 0);\\n    assert(current_pserv.length < pserv.limit());\\n    const server = new Server(ns, current_pserv[0]);\\n    // Skip the stage if a current purchased server has more than the default\\n    // amount of RAM.\\n    if (default_ram < server.ram_max()) {\\n        return;\\n    }\\n    assert(server.ram_max() == default_ram);\\n    ns.print(msg);\\n    await update(ns, default_ram);\\n}\\n\\n/**\\n * Purchase the maximum number of servers and run our hack script on those\\n * servers.  The function chooses the \\\"best\\\" targets to hack.\\n *\\n * @param ns The Netscript API.\\n * @param ram The amount of RAM for each purchased server.  Must be a positive\\n *     integer and a power of 2.\\n */\\nasync function update(ns, ram) {\\n    // The amount of RAM must be a power of 2.  RAM is assumed to be in GB.\\n    const pserv = new PurchasedServer(ns);\\n    const server_ram = Math.floor(ram);\\n    assert(pserv.is_valid_ram(server_ram));\\n    // Continuously try to purchase a new server until we have reached the\\n    // maximum number of servers we can buy.\\n    const player = new Player(ns);\\n    let i = player.pserv().length;\\n    let target = new Array();\\n    const t = new Time();\\n    const time = 5 * t.second();\\n    while (i < pserv.limit()) {\\n        // Do we have enough money to buy a new server?\\n        if (player.money() > pserv.cost(server_ram)) {\\n            // Purchase a new server.\\n            const hostname = pserv.purchase(pserv_prefix, server_ram);\\n            const server = new Server(ns, hostname);\\n            // Choose the best target server.\\n            target = renew_targets(ns, target);\\n            const s = choose_best_server(ns, target);\\n            assert(!is_bankrupt(ns, s));\\n            const target_server = new Server(ns, s);\\n            target = target.filter(s => s != target_server.hostname());\\n            // Run our hack script on the purchased server.\\n            assert(await target_server.gain_root_access());\\n            assert(await server.deploy(target_server.hostname()));\\n            i++;\\n        }\\n        // Sleep for a while.\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * Continuously try to purchase servers and use those to hack world servers.\\n * If our funds are sufficient, try to upgrade to servers with higher amounts\\n * of RAM.\\n *\\n * Usage: run buy-server.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Continuously try to purchase servers.\\n    const t = new Time();\\n    const time = t.minute();\\n    while (true) {\\n        await buy_servers(ns);\\n        await ns.sleep(time);\\n    }\\n}\\n\",\"filename\":\"buy-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/ef3f1888-29f6-41ec-bf2f-55b67291e82d\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f3c76775-42fd-457a-bd3a-d714aaca48a3\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/296e61fb-787f-46e1-bc8d-6d5d971adbed\",\"moduleSequenceNumber\":9902},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/49f78c68-6402-44a5-8c66-a17883ab2c75\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/2555cae0-f3b4-45ab-b7b2-412d141c358d\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/9697f98c-4b9d-490d-a42d-2c0e65151114\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/server.js\",\"url\":\"blob:https://danielyxie.github.io/4178e73a-0704-4eb3-b434-83e6b0347ee3\",\"moduleSequenceNumber\":9901},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/5793edbb-ef11-46f2-827f-ed673d76c25f\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/d5d35e8d-6727-4170-a731-c96fcedb25d5\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a64dff10-de51-4638-bde7-a60d58a13624\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/pserv.js\",\"url\":\"blob:https://danielyxie.github.io/97f8a844-bce2-4e97-bce7-66d85b4af177\",\"moduleSequenceNumber\":9900},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/91993026-9952-4427-9718-1ad518b52931\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/eb6b250f-fb2f-400b-b754-20860f0a5696\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/ae6e6095-85e4-4bdc-9b16-30b41c414cf6\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/92fe8d64-9b53-444c-82c5-c7ac52156564\",\"moduleSequenceNumber\":9899},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/4ddf54cf-c5ff-4d47-a291-0fc4e125f0c6\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/187f4bc3-5a8c-444c-bcae-2dd922f4a457\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/9bdd4bd0-0e0b-4c88-9236-b1e5d98daf4d\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/cad67da1-aa36-48d2-8d2f-dbac70b77c83\",\"moduleSequenceNumber\":9898},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/47653cf5-7b4b-48d9-852d-d1cdef0f275e\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c1008729-a3ca-4209-811e-8a2a936afeef\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/79e91b51-e8fe-4636-8ca8-76420b9cc174\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/cca4e544-469e-423e-9b3f-6708c8ba1c61\",\"moduleSequenceNumber\":9894},{\"filename\":\"buy-server.js\",\"url\":\"blob:https://danielyxie.github.io/60bbfe95-bfb2-4922-a4d6-78e3c2dc008f\",\"moduleSequenceNumber\":9938}],\"dependents\":[],\"ramUsage\":15.5,\"server\":\"home\",\"moduleSequenceNumber\":10326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\nimport { network } from \\\"/lib/network.js\\\";\\n\\n/**\\n * Find coding contracts on world servers.  This script essentially searches\\n * the network of world servers to find coding contracts.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const server = network(ns);\\n    server.push(home);\\n    for (const host of server) {\\n        const file = ns.ls(host, \\\".cct\\\");\\n        if (file.length < 1) {\\n            continue;\\n        }\\n        // Print the name of the coding contract, together with its type.\\n        for (const cct of file) {\\n            const type = ns.codingcontract.getContractType(cct, host);\\n            ns.tprint(host + \\\": \\\" + cct + \\\", \\\" + type);\\n        }\\n    }\\n}\\n\",\"filename\":\"find-cct.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/86e21ec7-892e-490a-bd8c-fbad5c12fd21\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/2384953a-3796-4bda-ba02-a363258b3778\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/be2f50cf-1a41-439b-b704-b1b7b113cf4a\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/31fe1a65-12fe-4db3-a656-983a69bcfa9c\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/12bd05ca-8f3e-4e5e-9cd2-f471ce486a3e\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/2cf865a6-3975-412e-871d-e206dd095e02\",\"moduleSequenceNumber\":366},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/dc003304-c032-441b-bdee-c8692d997817\",\"moduleSequenceNumber\":365},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/6ebb41da-3391-401c-802c-106d54a98a27\",\"moduleSequenceNumber\":363},{\"filename\":\"find-cct.js\",\"url\":\"blob:https://danielyxie.github.io/32bec70c-9b65-4190-8f72-d35ab5d5d3d2\",\"moduleSequenceNumber\":818}],\"dependents\":[],\"ramUsage\":9.25,\"server\":\"home\",\"moduleSequenceNumber\":10327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\n\\n/**\\n * This function should be run immediately after the soft reset of installing a\\n * bunch of Augmentations.  Our purpose is to gain some money and Hack\\n * experience points early on when our stats are low.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reboot(ns) {\\n    const nthread = 1;\\n    const script = [\\n        \\\"low-end.js\\\", \\\"world-server.js\\\", \\\"hnet-farm.js\\\",\\n        \\\"buy-server.js\\\", \\\"trade-bot.js\\\", \\\"/cct/solver.js\\\"\\n    ];\\n    for (const s of script) {\\n        ns.exec(s, home, nthread);\\n    }\\n}\\n\\n/**\\n * NOTE: Assume our home server to have at least 512GB RAM.\\n *\\n * Restart our source of income and Hack experience points.  This script is\\n * useful whenever we have installed a bunch of Augmentations and we want to\\n * automatically restart scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself.\\n *\\n * Usage: run go-high.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    reboot(ns);\\n}\\n\",\"filename\":\"go-high.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b009507b-d06c-4fdc-b585-97a0fa38412b\",\"moduleSequenceNumber\":9896},{\"filename\":\"go-high.js\",\"url\":\"blob:https://danielyxie.github.io/65b6bc3a-4247-45ed-9b6a-d1d17ede6fb3\",\"moduleSequenceNumber\":9934}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":10328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * This function should be run immediately after the soft reset of installing a\\n * bunch of Augmentations or after visiting a new BitNode.  Our purpose is to\\n * gain some money and Hack experience points early on when our stats are low.\\n * We assume our home server has a small amount of RAM, possibly less than\\n * 64GB RAM.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function reboot(ns) {\\n    // Execute a script, let it run for a while, kill the script, and run\\n    // another script.  Assume we do not have enough RAM to let multiple\\n    // scripts running at the same time.\\n    const nthread = 1;\\n    const target = \\\"world-server.js\\\";\\n    const script = [\\\"hnet-farm.js\\\", target];\\n    const t = new Time();\\n    const time = 10 * t.second();\\n    for (const s of script) {\\n        ns.exec(s, home, nthread);\\n        await ns.sleep(time);\\n        if (target != s) {\\n            assert(ns.kill(s, home));\\n        }\\n    }\\n}\\n\\n/**\\n * NOTE: This script assumes our home server has a small amount of RAM,\\n * possibly less than 64GB RAM.\\n *\\n * Restart our source of income and Hack experience points.  This script is\\n * useful whenever we have installed a bunch of Augmentations and we want to\\n * automatically restart scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself.\\n *\\n * Usage: run go-low.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    await reboot(ns);\\n}\\n\",\"filename\":\"go-low.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a81e9a7f-3b29-4e86-bfd0-c4d6102e39fd\",\"moduleSequenceNumber\":85},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/0ef24ae2-c869-43ad-a343-976ed840d79c\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/7c392b5c-8491-4452-ae6d-504341c11d10\",\"moduleSequenceNumber\":117},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/3c71ca00-0d1b-4e64-8cf4-adcc5e088bae\",\"moduleSequenceNumber\":85},{\"filename\":\"go-low.js\",\"url\":\"blob:https://danielyxie.github.io/aeb56959-7b0b-4ba3-b0fb-a5b712b3e5bf\",\"moduleSequenceNumber\":441}],\"dependents\":[],\"ramUsage\":3.4,\"server\":\"home\",\"moduleSequenceNumber\":10329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\n\\n/**\\n * This function should be run immediately after the soft reset of installing a\\n * bunch of Augmentations.  Our purpose is to gain some money and Hack\\n * experience points early on when our stats are low.  We assume our home\\n * server has a small amount of RAM, possibly at least 256GB RAM.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction reboot(ns) {\\n    const nthread = 1;\\n    const script = [\\n        \\\"hnet-farm.js\\\", \\\"world-server.js\\\", \\\"buy-server.js\\\", \\\"/cct/solver.js\\\"\\n    ];\\n    for (const s of script) {\\n        ns.exec(s, home, nthread);\\n    }\\n}\\n\\n/**\\n * NOTE: Assume our home server has at least 128GB RAM.\\n *\\n * Restart our source of income and Hack experience points.  This script is\\n * useful whenever we have installed a bunch of Augmentations and we want to\\n * automatically restart scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself.\\n *\\n * Usage: run go-mid.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    reboot(ns);\\n}\\n\",\"filename\":\"go-mid.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":10330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Restart our source of income and Hack experience points.  This script is\\n * useful whenever we have installed a bunch of Augmentations and we want to\\n * automatically restart scripts to:\\n *\\n * (1) Purchase Hacknet nodes and manage our farm of nodes.\\n * (2) Buy servers and use each purchased server to hack a target server in the\\n *     game world.\\n * (3) Gain root access to servers in the game world (excluding purchased\\n *     servers) and use each server to hack itself.\\n *\\n * Usage: run go.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Run some or all utility scripts, depending on the amount of RAM on our\\n    // home server.\\n    const mid_ram = 128;\\n    const high_ram = 512;\\n    const server = ns.getServer(home);\\n    const nthread = 1;\\n    let script = \\\"\\\";\\n    if (server.maxRam >= high_ram) {\\n        script = \\\"go-high.js\\\";\\n    } else if (server.maxRam >= mid_ram) {\\n        script = \\\"go-mid.js\\\";\\n    } else {\\n        assert(server.maxRam < mid_ram);\\n        script = \\\"go-low.js\\\";\\n    }\\n    assert(\\\"\\\" != script);\\n    ns.exec(script, home, nthread);\\n}\\n\",\"filename\":\"go.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a0f7651e-b022-4f7a-ad75-8e27fbe68727\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/362e790b-390c-42bc-b595-5d9b23360010\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/27539975-1247-4460-8b64-b67149d3a938\",\"moduleSequenceNumber\":9896},{\"filename\":\"go.js\",\"url\":\"blob:https://danielyxie.github.io/4b41c721-7f47-4da0-a480-b4d052f95b67\",\"moduleSequenceNumber\":9933}],\"dependents\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":10331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Keep this script as independent as possible so that its RAM requirement is\\n// as low as possible.  Avoid importing anything into this script.\\n\\n/**\\n * Try to gain root access on a server.\\n *\\n * @param ns The Netscript API.\\n * @param server We want root access on this server.\\n * @return true if we have root access on this server;\\n *     false if root access cannot be obtained.\\n */\\nasync function gain_root_access(ns, server) {\\n    // Do we already have root access on this server?\\n    if (ns.hasRootAccess(server)) {\\n        return true;\\n    }\\n    // Try to open all required ports and nuke the server.\\n    try { await ns.brutessh(server); } catch { }\\n    try { await ns.ftpcrack(server); } catch { }\\n    try { await ns.httpworm(server); } catch { }\\n    try { await ns.relaysmtp(server); } catch { }\\n    try { await ns.sqlinject(server); } catch { }\\n    try {\\n        await ns.nuke(server);\\n        return true;\\n    } catch {\\n        return false;\\n    }\\n}\\n\\n/**\\n * Hack a server and steal its money.  We weaken the server's security as\\n * necessary, grow the server in case the amount of money on the server is\\n * below our threshold, and hack the server when all conditions are met.  We\\n * want one command line argument, i.e. the name of the server to hack.\\n *\\n * Usage: run hack.js [targetServer]\\n * Example: run hack.js n00dles\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The target server, i.e. the server to hack.\\n    const target = ns.args[0];\\n    // Ensure we have root access on the target server.\\n    if (!ns.hasRootAccess(target)) {\\n        try {\\n            await gain_root_access(ns, target);\\n        } catch {\\n            const error_msg = \\\"Can't gain root access to \\\" + target;\\n            ns.tprint(error_msg);\\n            ns.exit();\\n        }\\n    }\\n    // How much money a server should have before we hack it.  Even if the\\n    // server is bankrupt, successfully hacking it would increase our hacking\\n    // experience points, although we would not receive any money.\\n    // Set the money threshold at 75% of the server's maximum money.\\n    const money_threshold = Math.floor(ns.getServerMaxMoney(target) * 0.75);\\n    // The threshold for the server's security level.  If the target's\\n    // security level is higher than the threshold, weaken the target\\n    // before doing anything else.\\n    const security_threshold = ns.getServerMinSecurityLevel(target) + 5;\\n    // Continuously hack/grow/weaken the target server.\\n    const time = 1;  // One millisecond.\\n    while (true) {\\n        const money_available = ns.getServerMoneyAvailable(target);\\n        if (ns.getServerSecurityLevel(target) > security_threshold) {\\n            // If the server's security level is above our threshold, weaken it.\\n            await ns.weaken(target);\\n        } else if (money_available < money_threshold) {\\n            // If the server's money is less than our threshold, grow it.\\n            await ns.grow(target);\\n        } else {\\n            // Otherwise, hack it.\\n            await ns.hack(target);\\n        }\\n        await ns.sleep(time);\\n    }\\n}\\n\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:https://danielyxie.github.io/aa0e9a1f-7900-443f-abc8-97ae2e149fce\",\"moduleSequenceNumber\":10301}],\"dependents\":[],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":10332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport { Money } from \\\"/lib/money.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * All nodes in our Hacknet farm.\\n *\\n * @param ns The Netscript API.\\n * @return An array of node IDs.  An empty array if we have zero nodes.\\n */\\nfunction hacknet_nodes(ns) {\\n    const nNode = ns.hacknet.numNodes();\\n    if (nNode < 1) {\\n        return [];\\n    }\\n    const array = new MyArray();\\n    return array.sequence(nNode);\\n}\\n\\n/**\\n * Whether each node in our Hacknet farm is fully upgraded.\\n *\\n * @param ns The Netscript API.\\n * @return true if each node in our Hacknet farm is fully upgraded;\\n *     false otherwise.\\n */\\nfunction is_fully_upgraded(ns) {\\n    const farm = hacknet_nodes(ns);\\n    const MAXED_OUT = true;\\n    const NOT_MAXED_OUT = !MAXED_OUT;\\n    // These constants are taken from the source file\\n    // https://github.com/danielyxie/bitburner/blob/dev/src/Hacknet/data/Constants.ts\\n    const max_core = 16;\\n    const max_level = 200;\\n    const max_ram = 64;\\n    // Iterate through each node of our Hacknet farm.\\n    for (const node of farm) {\\n        const stat = ns.hacknet.getNodeStats(node);\\n        if (stat.cores < max_core) {\\n            return NOT_MAXED_OUT;\\n        }\\n        if (stat.level < max_level) {\\n            return NOT_MAXED_OUT;\\n        }\\n        if (stat.ram < max_ram) {\\n            return NOT_MAXED_OUT;\\n        }\\n        // Sanity checks to ensure the node is fully upgraded.\\n        const howmany = 1;\\n        assert(!isFinite(ns.hacknet.getCoreUpgradeCost(node, howmany)));\\n        assert(!isFinite(ns.hacknet.getLevelUpgradeCost(node, howmany)));\\n        assert(!isFinite(ns.hacknet.getRamUpgradeCost(node, howmany)));\\n    }\\n    return MAXED_OUT;\\n}\\n\\n/**\\n * Assume we have millions or even billions of dollars.  Add more nodes to\\n * our Hacknet farm and fully upgrade each node.\\n *\\n * @param ns The Netscript API.\\n * @param n Increase the number of nodes to this number.  Must be a positive\\n *     whole number.\\n * @param money The money threshold.  We must have at least this much money\\n *     in order to purchase more nodes for the Hacknet farm and fully upgrade\\n *     the newly expanded farm.\\n */\\nasync function next_stage(ns, n, money) {\\n    // Sanity checks.\\n    const nNode = Math.floor(n);\\n    assert(nNode > 0);\\n    assert(money > 0);\\n    // Wait until we have reached the money threshold.\\n    const player = new Player(ns);\\n    const time = update_interval();\\n    while (player.money() < money) {\\n        await ns.sleep(time);\\n    }\\n    // Add more nodes to our farm and fully upgrade each node.\\n    await setup_farm(ns, nNode);\\n    while (!is_fully_upgraded(ns)) {\\n        update(ns, nNode);\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * Setup our farm of Hacknet nodes.  We leave each node at Level 1, 1GB RAM,\\n * and 1 Core.  Our objective is to setup a farm of n Hacknet nodes, each node\\n * at base stat.\\n *\\n * @param ns The Netscript API.\\n * @param n How many Hacknet nodes in our farm.  Must be a positive integer.\\n */\\nasync function setup_farm(ns, n) {\\n    const nNode = Math.floor(n);\\n    assert(nNode > 0);\\n    assert(nNode < ns.hacknet.maxNumNodes());\\n    const player = new Player(ns);\\n    const time = update_interval();\\n    // We already have a farm of n or more Hacknet nodes.\\n    if (ns.hacknet.numNodes() >= nNode) {\\n        return;\\n    }\\n    // Purchase Hacknet nodes for our farm.\\n    for (let i = ns.hacknet.numNodes(); i < nNode; i++) {\\n        // Wait until we have sufficient funds to purchase another Hacknet node.\\n        while (player.money() < ns.hacknet.getPurchaseNodeCost()) {\\n            await ns.sleep(time);\\n        }\\n        // Purchase a new Hacknet node.\\n        const id = ns.hacknet.purchaseNode();\\n        assert(-1 != id);\\n    }\\n    assert(ns.hacknet.numNodes() == nNode);\\n}\\n\\n/**\\n * In this stage, we want to have a small number of nodes in our farm.\\n * Fully upgrade all nodes.  Assume we call this function when our\\n * funds are limited, say at most $1m.\\n *\\n * @param ns The Netscript API.\\n * @param n How many nodes in our Hacknet.  Must be a positive whole number.\\n *     At most 3.\\n */\\nasync function stage_one(ns, n) {\\n    const nNode = Math.floor(n);\\n    assert(nNode > 0);\\n    assert(nNode <= 3);\\n    const time = update_interval();\\n    // Bootstrap our farm in case we have zero nodes.\\n    await setup_farm(ns, nNode);\\n    // Fully upgrade each node.\\n    while (!is_fully_upgraded(ns)) {\\n        update(ns);\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * Upgrade the stats of each Hacknet node by one point.  Assume we have\\n * at least one node.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction update(ns) {\\n    const farm = hacknet_nodes(ns);\\n    assert(farm.length > 0);\\n    upgrade_level(ns, farm);\\n    upgrade_core(ns, farm);\\n    upgrade_ram(ns, farm);\\n}\\n\\n/**\\n * The interval between successive updates.\\n */\\nfunction update_interval() {\\n    const t = new Time();\\n    return t.minute();\\n}\\n\\n/**\\n * Upgrade the Core of each Hacknet node in our farm.  Our objective is to\\n * upgrade the Core of each node by one point.  Call this function multiple\\n * times to max out the number of Cores.\\n *\\n * @param ns The Netscript API.\\n * @param farm An array of IDs of all Hacknet nodes in our farm.\\n */\\nfunction upgrade_core(ns, farm) {\\n    assert(farm.length > 0);\\n    const player = new Player(ns);\\n    const howmany = 1;  // Upgrade this many Cores at a time.\\n    // Add another Core to each Hacknet node.\\n    for (const node of farm) {\\n        // The number of Cores of a node is at maximum if the cost of upgrading\\n        // to another Core is Infinity.\\n        if (isFinite(ns.hacknet.getCoreUpgradeCost(node, howmany))) {\\n            const cost = ns.hacknet.getCoreUpgradeCost(node, howmany);\\n            if (player.money() < cost) {\\n                continue;\\n            }\\n            assert(ns.hacknet.upgradeCore(node, howmany));\\n        }\\n    }\\n}\\n\\n/**\\n * Upgrade the Level of each Hacknet node in our farm.  Our objective is to\\n * upgrade the Level of each node by one point.\\n *\\n * @param ns The Netscript API.\\n * @param farm An array of IDs of all Hacknet nodes in our farm.\\n */\\nfunction upgrade_level(ns, farm) {\\n    assert(farm.length > 0);\\n    const player = new Player(ns);\\n    const level = 1;  // Upgrade this many Levels at a time.\\n    // Add another Level to each Hacknet node.\\n    for (const node of farm) {\\n        // The Level of a node is at maximum if the cost of upgrading\\n        // to another Level is Infinity.\\n        if (isFinite(ns.hacknet.getLevelUpgradeCost(node, level))) {\\n            const cost = ns.hacknet.getLevelUpgradeCost(node, level);\\n            if (player.money() < cost) {\\n                continue;\\n            }\\n            assert(ns.hacknet.upgradeLevel(node, level));\\n        }\\n    }\\n}\\n\\n/**\\n * Upgrade the RAM of each Hacknet node in our farm.\\n *\\n * @param ns The Netscript API.\\n * @param farm An array of IDs of all Hacknet nodes in our farm.\\n */\\nfunction upgrade_ram(ns, farm) {\\n    assert(farm.length > 0);\\n    const player = new Player(ns);\\n    const howmany = 1;  // Upgrade the RAM this many times.\\n    // Add another 1GB RAM to each Hacknet node.\\n    for (const node of farm) {\\n        // The amount of RAM of a node is at maximum if the cost of upgrading\\n        // the RAM is Infinity.\\n        if (isFinite(ns.hacknet.getRamUpgradeCost(node, howmany))) {\\n            const cost = ns.hacknet.getRamUpgradeCost(node, howmany);\\n            if (player.money() < cost) {\\n                continue;\\n            }\\n            assert(ns.hacknet.upgradeRam(node, howmany));\\n        }\\n    }\\n}\\n\\n/**\\n * Purchase and manage a farm of Hacknet nodes.\\n *\\n * Usage: run hnet-farm.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Various money thresholds.\\n    const m = new Money();\\n    const threshold = [\\n        10 * m.million(), 100 * m.million(), m.billion(), 100 * m.billion(),\\n        m.trillion()\\n    ];\\n    const node = [6, 12, 24, 30, 33];\\n    // Bootstrap our farm of Hacknet nodes.\\n    await stage_one(ns, 3);\\n    // Add increasingly more nodes to the farm.\\n    let i = 0;\\n    const t = new Time();\\n    const time = 10 * t.minute();\\n    for (const mon of threshold) {\\n        await next_stage(ns, node[i], mon);\\n        i++;\\n        await ns.sleep(time);\\n    }\\n}\\n\",\"filename\":\"hnet-farm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a5f6df05-240d-48ce-bd13-3b4412b92ce7\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/7baafee1-5d58-44bc-931e-c6e920df7ccb\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/608b5ff6-e719-4671-837f-d174b37339bf\",\"moduleSequenceNumber\":9902},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/3889a1f5-18b1-4bfc-88c2-ac3e16e7ed32\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/ed97b4da-db4c-45aa-95e7-404ec9308772\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/caae5fb5-3fc0-425b-b3d9-41f12619da09\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/fcb1407d-758a-40fc-b88f-72959b505e05\",\"moduleSequenceNumber\":9899},{\"filename\":\"/lib/money.js\",\"url\":\"blob:https://danielyxie.github.io/33a80130-7a1b-4608-b85f-647ebe39e88e\",\"moduleSequenceNumber\":9897},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/fb288e90-b3cc-4f79-839d-d3ecd9aa23b6\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/d92722c5-77dd-412c-a2a7-4aa5c0eb4976\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/a2067e22-86ae-4f24-bd07-8ea5beba074b\",\"moduleSequenceNumber\":9894},{\"filename\":\"hnet-farm.js\",\"url\":\"blob:https://danielyxie.github.io/1a5aeac4-5d87-4b3a-8730-5169e0204690\",\"moduleSequenceNumber\":9937}],\"dependents\":[],\"ramUsage\":8.1,\"server\":\"home\",\"moduleSequenceNumber\":10333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { Player } from \\\"/lib/player.js\\\";\\n\\n/**\\n * The player's karma.\\n *\\n * Usage: run karma.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const player = new Player(ns);\\n    ns.tprint(\\\"Karma: \\\" + player.karma());\\n}\\n\",\"filename\":\"karma.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":10334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { network } from \\\"/lib/network.js\\\";\\n\\n/**\\n * Kill all scripts on world or purchased servers.  Must provide one of the\\n * following at the command line:\\n *\\n * (1) pserv := Kill all scripts on all purchased servers.\\n * (2) world := Kill all scripts on all world servers where we have root access.\\n *\\n * Usage: run kill-script.js [pserv | world]\\n * Example: run kill-script.js pserv\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const error_msg = \\\"Must provide one command line argument: pserv | world\\\";\\n    // Must provide a command line argument to this script.\\n    if (ns.args.length < 1) {\\n        ns.tprint(error_msg);\\n        ns.exit();\\n    }\\n    const stype = ns.args[0];\\n    const player = new Player(ns);\\n    if (\\\"pserv\\\" == stype) {\\n        // Kill all scripts on purchased servers.\\n        for (const server of player.pserv()) {\\n            ns.killall(server);\\n        }\\n    } else if (\\\"world\\\" == stype) {\\n        // Kill all scripts on world servers where we have root access.\\n        let server = network(ns);\\n        server = server.filter(s => ns.hasRootAccess(s));\\n        for (const s of server) {\\n            ns.killall(s);\\n        }\\n    } else {\\n        ns.tprint(error_msg);\\n        ns.exit();\\n    }\\n}\\n\",\"filename\":\"kill-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/8e57634e-86c1-478c-bcf5-3423055b0c1c\",\"moduleSequenceNumber\":8571},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/56238a1a-d973-405c-afa0-9f3cff2ff7a4\",\"moduleSequenceNumber\":8578},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a55c11bd-3471-4959-9339-3800aef90300\",\"moduleSequenceNumber\":8571},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/f156cc58-8d8d-4112-9235-523cdea7173c\",\"moduleSequenceNumber\":8573},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/e03856c0-6650-4a70-96b8-d6d96282866b\",\"moduleSequenceNumber\":8571},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/566d8fa0-0e67-49a3-be00-e8c29b8f0269\",\"moduleSequenceNumber\":8578},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/9a0a6f41-c8ec-45fa-bd97-42161741690d\",\"moduleSequenceNumber\":8571},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/cfd25c27-994b-436f-922e-3848ec2b808d\",\"moduleSequenceNumber\":8574},{\"filename\":\"kill-script.js\",\"url\":\"blob:https://danielyxie.github.io/95cc1f2b-8107-4085-bb18-17bd68296b65\",\"moduleSequenceNumber\":8628}],\"dependents\":[],\"ramUsage\":4.85,\"server\":\"home\",\"moduleSequenceNumber\":10335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { Player } from \\\"/lib/player.js\\\";\\n\\n/**\\n * Delete all purchased servers.  This would also kill all scripts running\\n * on each purchased server.\\n *\\n * Usage: run kill-server.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const player = new Player(ns);\\n    for (const server of player.pserv()) {\\n        ns.killall(server);\\n        ns.deleteServer(server);\\n    }\\n}\\n\",\"filename\":\"kill-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c06849ff-bcdb-4218-8fda-1b7b74d15272\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/8469ab44-c752-4383-8069-42d508c08650\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/508f9791-1cec-4741-800d-85f24e0bb5b7\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/fe4d0cb7-63dc-4baf-b35d-cc04ad189c88\",\"moduleSequenceNumber\":366},{\"filename\":\"kill-server.js\",\"url\":\"blob:https://danielyxie.github.io/cb9d2456-51b7-43cc-a585-fbf28f4fff92\",\"moduleSequenceNumber\":2630}],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":10336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { network } from \\\"/lib/network.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { Server } from \\\"/lib/server.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport { assert, filter_pserv } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Whether there are new low-end servers we can now hack.\\n *\\n * @param current_ln An array of low-end servers that we are now hacking.\\n * @param new_ln An array of low-end servers, possibly including new\\n *     low-end servers that we can now hack.\\n * @return true if we can now hack more low-end servers; false otherwise.\\n */\\nfunction has_new_low_end(current_ln, new_ln) {\\n    assert(current_ln.length >= 0);\\n    assert(new_ln.length >= 0);\\n    assert(current_ln.length <= new_ln.length);\\n    const NEW = true;     // Have new low-end servers to hack.\\n    const NO_NEW = !NEW;  // No new low-end servers to hack.\\n    // We have new low-end servers.\\n    if (current_ln.length < new_ln.length) {\\n        return NEW;\\n    }\\n    // If the two arrays are of equal length, ensure that both\\n    // have the same low-end servers.\\n    assert(current_ln.length == new_ln.length);\\n    if (0 == current_ln.length) {\\n        return NO_NEW;\\n    }\\n    const new_set = new Set(new_ln);\\n    for (const s of current_ln) {\\n        assert(new_set.has(s));\\n    }\\n    return NO_NEW;\\n}\\n\\n/**\\n * Choose servers in the game world that are low-end.  A server is low-end if\\n * it does not have enough RAM to run our hack script even using one thread.\\n *\\n * A bankrupt server can be low-end if it lacks the required amount of RAM to\\n * run our hack script using one thread.  Although we would not obtain any money\\n * from hacking a low-end bankrupt server, we would still obtain some hacking\\n * points.\\n *\\n * @param ns The Netscript API.\\n * @return An array of low-end servers.\\n */\\nfunction low_end_servers(ns) {\\n    const server = filter_pserv(ns, network(ns));\\n    const player = new Player(ns);\\n    const lowend = new Array();\\n    for (const s of server) {\\n        if (skip_server(ns, s)) {\\n            continue;\\n        }\\n        const serv = new Server(ns, s);\\n        const nthread = serv.num_threads(player.script());\\n        if (nthread < 1) {\\n            lowend.push(s);\\n        }\\n    }\\n    return lowend;\\n}\\n\\n/**\\n * Whether to skip a server.  A server is skipped if it is not a low-end server.\\n * We exclude these servers:\\n *\\n * (1) Purchased servers.\\n * (2) A world server whose hacking skill requirement is higher than our Hack\\n *     stat.\\n * (3) A world server for which we cannot open all ports.\\n * (4) A world server that is currently running our hacking script.\\n *\\n * @param ns The Netscript API.\\n * @param server Do we skip this server?\\n * @return true if the given server should be skipped; false otherwise.\\n */\\nfunction skip_server(ns, server) {\\n    const SKIP = true;\\n    const NO_SKIP = !SKIP;\\n    const player = new Player(ns);\\n    const serv = new Server(ns, server);\\n    // Skip a server if its hacking skill requirement is higher\\n    // than our Hack stat.\\n    if (player.hacking_skill() < serv.hacking_skill()) {\\n        return SKIP;\\n    }\\n    // Skip a server if it is running our hack script.\\n    if (serv.is_running_script(player.script())) {\\n        return SKIP;\\n    }\\n    // Skip a server if we cannot open all of its ports.\\n    if (player.num_ports() < serv.num_ports_required()) {\\n        return SKIP;\\n    }\\n    return NO_SKIP;\\n}\\n\\n/**\\n * Use our home server to hack any new low-end servers that we can now\\n * compromise.\\n *\\n * @param ns The Netscript API.\\n * @param lowend An array of low-end servers.\\n * @return An array of low-end servers, possibly updated to include new low-end\\n *     servers that have been hacked during this update.\\n */\\nfunction update(ns, lowend) {\\n    assert(lowend.length >= 0);\\n    const player = new Player(ns);\\n    const target = low_end_servers(ns);\\n    // Hack the new low-end servers.\\n    if (has_new_low_end(lowend, target)) {\\n        // First, kill all instances of the hack script.\\n        for (const server of lowend) {\\n            ns.kill(player.script(), player.home(), server);\\n        }\\n        // Next, hack all low-end servers we can now visit, including those\\n        // newly found.\\n        const home = new Server(ns, player.home());\\n        let nthread = home.threads_per_instance(player.script(), target.length);\\n        if (nthread < 1) {\\n            nthread = 1;\\n        }\\n        for (const server of target) {\\n            ns.exec(player.script(), player.home(), nthread, server);\\n        }\\n    }\\n    return target;\\n}\\n\\n/**\\n * Hack various low-end servers found in the game world, excluding purchased\\n * servers.  A world server is said to be low-end if it does not have enough\\n * RAM to run our hack script on the server.  We use our home server to hack\\n * low-end servers.  The script figures out how many threads to use to hack a\\n * low-end server.\\n *\\n * Usage: run low-end.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // We want a less verbose log.\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // First, kill all instances of the hack script that are running on our\\n    // home server against a low-end server.  We do this because after\\n    // reloading the game, the value of the variable \\\"target\\\" is lost.\\n    // Treat it like we are running this script for the first time.\\n    const player = new Player(ns);\\n    for (const server of low_end_servers(ns)) {\\n        await ns.kill(player.script(), player.home(), server);\\n    }\\n    // Continuously search for low-end servers to hack.\\n    const t = new Time();\\n    const time = t.minute();\\n    let target = new Array();\\n    while (true) {\\n        target = update(ns, target);\\n        ns.print(\\\"Low-end servers: \\\" + target.join(\\\", \\\"));\\n        await ns.sleep(time);\\n    }\\n}\\n\",\"filename\":\"low-end.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a4b32f0e-fb36-46e9-a3f1-322d041e9ce0\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/44e9e068-9d56-4ed9-9c8b-964aa48c4be3\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/fcedd324-0ed8-4128-9d60-c230f2d3844f\",\"moduleSequenceNumber\":9902},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/bcf31267-898f-4559-92c0-7d93b691e04e\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/cb3e92ad-42e7-4639-bbd1-ca5b22f725a6\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/12c6e71d-1411-4a4b-af00-ab5cd89ef22d\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/server.js\",\"url\":\"blob:https://danielyxie.github.io/2932fce9-396c-473d-8cff-c1272fd9c32a\",\"moduleSequenceNumber\":9901},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/fce1c6b5-c308-4fe7-8cb7-0245f7651bc4\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/00310ed6-83d7-45f0-b258-4868b9e66387\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/172e17bd-2dfa-42de-8b93-402ae18e9c44\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/bf7e7d56-0cf9-4ba2-8669-d5004f846800\",\"moduleSequenceNumber\":9899},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/e2bc7f63-d6f4-4a40-a06f-5301af06d345\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/ef881164-2518-4dc3-ab0d-a0a9fcfdd335\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/09345994-8d88-4836-b440-59ea2dc735d3\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/ed97b7db-7639-45c2-8075-f474476c1a1c\",\"moduleSequenceNumber\":9898},{\"filename\":\"low-end.js\",\"url\":\"blob:https://danielyxie.github.io/438d2756-d524-471d-896f-34f9dd993e27\",\"moduleSequenceNumber\":9935}],\"dependents\":[],\"ramUsage\":10.7,\"server\":\"home\",\"moduleSequenceNumber\":10337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { network } from \\\"/lib/network.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { Server } from \\\"/lib/server.js\\\";\\nimport {\\n    assert, choose_best_server, choose_targets, filter_bankrupt_servers\\n} from \\\"/lib/util.js\\\";\\n\\n/**\\n * Restart all scripts on a purchased server.  This is useful in the case where\\n * all scripts running on a purchased server have been killed.  We start running\\n * those scripts again.  This script chooses the \\\"best\\\" servers to hack.\\n *\\n * Usage: run restart-server.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Cycle through our purchased servers to see whether to restart our\\n    // hack script.\\n    const player = new Player(ns);\\n    let target = new Array();\\n    for (const s of player.pserv()) {\\n        // Determine the target servers to hack.  There are always at least 2\\n        // targets because at least 2 servers in the game world require only\\n        // 1 Hack stat and zero opened ports.\\n        // Assume that each target is not bankrupt.\\n        if (target.length < 1) {\\n            target = filter_bankrupt_servers(\\n                ns, choose_targets(ns, network(ns))\\n            );\\n            assert(target.length > 0);\\n        }\\n        const server = new Server(ns, s);\\n        if (!server.is_running_script(player.script())) {\\n            // Choose the best target server that is not bankrupt.  Run our\\n            // hack script against this target server.\\n            const t = choose_best_server(ns, target);\\n            target = target.filter(s => s != t);\\n            const target_server = new Server(ns, t);\\n            assert(await target_server.gain_root_access());\\n            assert(await server.deploy(target_server.hostname()));\\n        }\\n    }\\n}\\n\",\"filename\":\"restart-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/e89b6799-b931-4f7a-9def-80aec8c76162\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/86fa1106-7b34-4210-bb10-3de9e0fdf782\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/28e457d8-594d-41da-bc78-4107de5cd114\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/cae33196-d263-4194-a7ea-6077e49547ad\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2942cf79-4361-4ab0-a050-a1b73d5e53a7\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/server.js\",\"url\":\"blob:https://danielyxie.github.io/93655fd7-c3da-42a0-befd-f7ede760cc74\",\"moduleSequenceNumber\":368},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/f9aaebd2-b923-4915-92c4-b52d326cb962\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f80c16b9-c2df-4d1a-bf30-826eabcb30ae\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/61b15dd1-35a3-4bda-97a5-e0eb9528f397\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/6a9ae327-e8de-4856-ae42-9de7105f16fa\",\"moduleSequenceNumber\":366},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/ed4b9731-9afe-4181-8a9f-2080c526f327\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/048c06f5-1ff7-47a6-a3bb-e54cc6b19c1c\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/ac8ba38e-b33c-403d-a09a-a4f6aff88b54\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/aa108778-2f75-43ab-8223-3017ee80109a\",\"moduleSequenceNumber\":370},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a0ec3a6a-031d-4011-b3bb-947e4e31e351\",\"moduleSequenceNumber\":363},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/355a8be3-04f3-4d81-a75d-741d79ebbe4d\",\"moduleSequenceNumber\":366},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/2e14abd5-e178-4db7-b1af-f0044ccedc16\",\"moduleSequenceNumber\":365},{\"filename\":\"restart-server.js\",\"url\":\"blob:https://danielyxie.github.io/76867479-4f8d-4cdf-a994-05a4514be99c\",\"moduleSequenceNumber\":3048}],\"dependents\":[],\"ramUsage\":10.2,\"server\":\"home\",\"moduleSequenceNumber\":10338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\nimport { network, shortest_path } from \\\"/lib/network.js\\\";\\n\\n/**\\n * Determine a shortest path from our home server to a target server.\\n * Must provide the target server from the command line.\\n *\\n * Usage: run shortest-path.js [targetServer]\\n * Example: run shortest-path.js run4theh111z\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Must provide a command line argument.\\n    const error_msg = \\\"Must provide the name of the target server.\\\";\\n    if (ns.args.length < 1) {\\n        ns.tprint(error_msg);\\n        ns.exit();\\n    }\\n    // Not a server in the game world.  Exclude purchased servers.\\n    const target = ns.args[0];\\n    const server = new Set(network(ns));\\n    if (!server.has(target)) {\\n        ns.tprint(\\\"Server not found: \\\" + target);\\n        return;\\n    }\\n    // Find shortest path.\\n    const path = shortest_path(ns, home, target);\\n    if (path.length < 1) {\\n        ns.tprint(\\\"Target server must be reachable from \\\" + home + \\\".\\\");\\n        ns.exit();\\n    }\\n    ns.tprint(path.join(\\\" -> \\\"));\\n}\\n\",\"filename\":\"shortest-path.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2ff40c18-9195-43a9-9ee9-ac76fc69486c\",\"moduleSequenceNumber\":10132},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/ef1b2780-9762-4f41-9eba-d30d96eba398\",\"moduleSequenceNumber\":10146},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/60a83ea4-9168-467d-bf7b-e9b63637ee15\",\"moduleSequenceNumber\":10132},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/2430c632-8fb6-4128-ad9b-82f81924f649\",\"moduleSequenceNumber\":10136},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/480153d5-a4bb-4661-9d3f-3e256c5d3607\",\"moduleSequenceNumber\":10132},{\"filename\":\"shortest-path.js\",\"url\":\"blob:https://danielyxie.github.io/054f36d3-f90e-45a3-a39d-82b9c2bd3be8\",\"moduleSequenceNumber\":10154}],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":10339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { pserv_prefix } from \\\"/lib/constant.js\\\";\\nimport { Money } from \\\"/lib/money.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Wait until we have all prerequisites before we do anything related to the\\n * dark web.  For now, we wait until the following conditions are met:\\n *\\n * (1) We have all port opener programs.\\n * (2) Have at least a certain amount of money.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function await_prerequisites(ns) {\\n    // Must acquire all port opener programs.\\n    const t = new Time();\\n    const time = 10 * t.second();\\n    const player = new Player(ns);\\n    while (!player.has_all_port_openers()) {\\n        await ns.sleep(time);\\n    }\\n    // Our farm of purchased servers must meet certain minimum requirements.\\n    while (!has_minimum_pserv(ns)) {\\n        await ns.sleep(time);\\n    }\\n    // Wait until we have a large amount of money before trading on the Stock\\n    // Market.  Gambling on the Stock Market requires huge wealth.\\n    while (!meet_money_threshold(ns)) {\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * Purchase shares of a stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk We want to purchase shares of this stock.\\n */\\nfunction buy_stock(ns, stk) {\\n    // Do we skip buying shares of this stock?\\n    if (skip_stock(ns, stk)) {\\n        return;\\n    }\\n    // Purchase shares of a stock.\\n    const nshare = num_shares(ns, stk);\\n    assert(nshare > 0);\\n    ns.stock.buyStock(stk, nshare);\\n}\\n\\n/**\\n * Whether we have access to Stock Market data and APIs.\\n *\\n * @param ns The Netscript API.\\n * @return true if we have access to all Stock Market data and APIs;\\n *     false otherwise.\\n */\\nfunction has_api_access(ns) {\\n    const HAS_ACCESS = true;\\n    const NO_ACCESS = !HAS_ACCESS;\\n    let success = ns.stock.purchaseWseAccount();\\n    if (!success) {\\n        return NO_ACCESS;\\n    }\\n    success = ns.stock.purchaseTixApi();\\n    if (!success) {\\n        return NO_ACCESS;\\n    }\\n    success = ns.stock.purchase4SMarketData();\\n    if (!success) {\\n        return NO_ACCESS;\\n    }\\n    success = ns.stock.purchase4SMarketDataTixApi();\\n    if (!success) {\\n        return NO_ACCESS;\\n    }\\n    return HAS_ACCESS;\\n}\\n\\n/**\\n * Whether we have sufficient funds for puchasing stocks.  This function\\n * takes into account the minimum amount of money that should be held in\\n * reserve whenever we trade on the Stock Market.\\n *\\n * @param ns The Netscript API.\\n * @return true if we have enough money to buy stocks; false otherwise.\\n */\\nfunction has_funds(ns) {\\n    const player = new Player(ns);\\n    const multiplier = 1.1;\\n    if (player.money() <= multiplier * money_reserve()) {\\n        return false;\\n    }\\n    return true;\\n}\\n\\n/**\\n * Whether we have a minimum running farm of purchased servers.  To meet this\\n * condition, our farm must satisfy the following:\\n *\\n * (1) Each purchased server in the farm must have at least 16,384GB RAM.\\n * (2) Our farm must have the maximum number of purchased server.\\n *\\n * @param ns The Netscript API.\\n * @return true if we have a minimum running purchased server farm;\\n *     false otherwise.\\n */\\nfunction has_minimum_pserv(ns) {\\n    const HAS = true;\\n    const NOT = !HAS;\\n    // Do we have the maximum number of purchased servers?\\n    const player = new Player(ns);\\n    const pserv_limit = ns.getPurchasedServerLimit();\\n    if (player.pserv().length < pserv_limit) {\\n        return NOT;\\n    }\\n    // Does each purchased server have at least 16,384GB RAM?\\n    const min_ram = 16384;\\n    const server = ns.getServer(pserv_prefix);\\n    assert(server.purchasedByPlayer);\\n    if (server.maxRam < min_ram) {\\n        return NOT;\\n    }\\n    return HAS;\\n}\\n\\n/**\\n * Whether it is profitable to sell all shares of a given stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk Is there any profit in selling all shares of this stock?\\n * @return true if we can make a profit by selling all our shares of this\\n *     stock; false otherwise.\\n */\\nfunction is_profitable(ns, stk) {\\n    const position = ns.stock.getPosition(stk);\\n    const nlong = position[0];\\n    // Assume we have at least 1 share of the stock.\\n    assert(nlong > 0);\\n    if (ns.stock.getSaleGain(stk, nlong, \\\"Long\\\") > 0) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Whether we meet the money threshold.  Must have at least a certain amount\\n * of money before we start dabbling on the Stock Market.\\n *\\n * @param ns The Netscript API.\\n * @return true if our funds is at least the money threshold; false otherwise.\\n */\\nfunction meet_money_threshold(ns) {\\n    const player = new Player(ns);\\n    if (player.money() < money_reserve()) {\\n        return false;\\n    }\\n    return true;\\n}\\n\\n/**\\n * The minimum amount of money we should always have in reserve.  Whenever we\\n * trade on the Stock Market, we don't want to spend all our money on buying\\n * stocks.  Have at least some money lying around for various purposes, e.g.\\n * purchase/upgrade servers and purchase/upgrade Hacknet nodes.\\n *\\n * @return The minimum amount of money to be held in reserve.\\n */\\nfunction money_reserve() {\\n    const m = new Money();\\n    return 50 * m.million();\\n}\\n\\n/**\\n * How many shares of a stock we can purchase.\\n *\\n * @param ns The Netscript API.\\n * @param stk We want to buy shares of this stock.\\n * @return The number of shares of this stock that we can buy.  Must be at\\n *     least zero.  If 0, then we can't buy any shares of the given stock.\\n */\\nfunction num_shares(ns, stk) {\\n    // We don't have enough money to buy stocks.\\n    if (!has_funds(ns)) {\\n        return 0;\\n    }\\n    // The minimum amount of money we are willing to spend to purchase shares\\n    // of a stock.  If the amount is less than the spending threshold, then do\\n    // not purchase any shares.\\n    const player = new Player(ns);\\n    const m = new Money();\\n    const spend_threshold = 5 * m.million();\\n    const funds = player.money() - money_reserve();\\n    if (funds < spend_threshold) {\\n        return 0;\\n    }\\n    // The maximum number of shares of the stock we can buy.  This takes into\\n    // account the number of shares we already own.\\n    const position = ns.stock.getPosition(stk);\\n    const nlong = position[0];\\n    const max_share = ns.stock.getMaxShares(stk) - nlong;\\n    if (max_share < 1) {\\n        return 0;\\n    }\\n    // Calculate how many shares of the stock we can buy.\\n    const price = ns.stock.getAskPrice(stk);\\n    const nshare = Math.floor(funds / price);\\n    return Math.min(nshare, max_share);\\n}\\n\\n/**\\n * Purchase access to Stock Market data and APIs.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function purchase_api_access(ns) {\\n    const t = new Time();\\n    const time = 5 * t.second();\\n    while (!has_api_access(ns)) {\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * Sell shares of a stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk We want to sell shares of this stock.\\n */\\nfunction sell_stock(ns, stk) {\\n    const position = ns.stock.getPosition(stk);\\n    const nlong = position[0];\\n    // Skip the stock if we don't have any shares of the stock.\\n    if (nlong < 1) {\\n        return;\\n    }\\n    // Sell all shares of the stock if the forecast is below the threshold.\\n    const threshold = 0.5;\\n    const forecast = ns.stock.getForecast(stk);\\n    if (forecast < threshold) {\\n        if (is_profitable(ns, stk)) {\\n            ns.stock.sellStock(stk, nlong);\\n        }\\n    }\\n}\\n\\n/**\\n * Whether to skip buying shares of a stock.\\n *\\n * @param ns The Netscript API.\\n * @param stk Do we want to skip over this stock?\\n * @return true if we are to skip this stock; false otherwise.\\n */\\nfunction skip_stock(ns, stk) {\\n    const SKIP = true;\\n    const NO_SKIP = !SKIP;\\n    const forecast_threshold = 0.575;\\n    const volatility_threshold = 0.05;\\n    // Skip if there is a low chance of increase in the next tick.\\n    if (ns.stock.getForecast(stk) < forecast_threshold) {\\n        return SKIP;\\n    }\\n    // Skip if the stock is too volatile.\\n    if (ns.stock.getVolatility(stk) > volatility_threshold) {\\n        return SKIP;\\n    }\\n    // Skip if we cannot afford to purchase any shares of the stock.\\n    const nshare = num_shares(ns, stk);\\n    if (nshare < 1) {\\n        return SKIP;\\n    }\\n    return NO_SKIP;\\n}\\n\\n/**\\n * Automate our trading on the World Stock Exchange.  This is our trade bot.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"sleep\\\");\\n    ns.disableLog(\\\"getServerMoneyAvailable\\\");\\n    // Wait for 6 seconds because the Stock Market updates approximately\\n    // every 6 seconds.\\n    const t = new Time();\\n    const time = 6 * t.second();\\n    await await_prerequisites(ns);\\n    await purchase_api_access(ns);\\n    // Continuously trade on the Stock Market.\\n    while (true) {\\n        // Iterate over each stock.  Decide whether to buy or sell.\\n        for (const stk of ns.stock.getSymbols()) {\\n            sell_stock(ns, stk);\\n            if (!has_minimum_pserv(ns)) {\\n                continue;\\n            }\\n            buy_stock(ns, stk);\\n        }\\n        await ns.sleep(time);\\n    }\\n}\\n\",\"filename\":\"trade-bot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/7d854555-c743-4f95-8f2f-caa04159add1\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/bdf4ee19-c57e-46c7-b123-25ec62bc5014\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/b4d2171b-e555-42d9-a0b6-5c19212b5b59\",\"moduleSequenceNumber\":9902},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c584c4b9-3206-4766-a2f6-e41e3ecfb9f7\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/868bb55f-b433-4aa4-a3aa-cef0b94677ff\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/9c2f5433-75a4-455f-9b6a-59868420becc\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/6617790b-dbc3-4d47-834b-67a7e06587a2\",\"moduleSequenceNumber\":9899},{\"filename\":\"/lib/money.js\",\"url\":\"blob:https://danielyxie.github.io/3f734fbf-aa8f-4e7c-b9f1-7ec3506eefa4\",\"moduleSequenceNumber\":9897},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/7344bfa2-c58e-493e-9b4b-fdc758d00aed\",\"moduleSequenceNumber\":9896},{\"filename\":\"trade-bot.js\",\"url\":\"blob:https://danielyxie.github.io/79d8012c-e491-4bc9-96cb-63bdbc121c30\",\"moduleSequenceNumber\":9939}],\"dependents\":[],\"ramUsage\":36.15,\"server\":\"home\",\"moduleSequenceNumber\":10340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.buyStock\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseWseAccount\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchaseTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketData\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.purchase4SMarketDataTixApi\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getSaleGain\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sellStock\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { network } from \\\"/lib/network.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { Server } from \\\"/lib/server.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport {\\n    assert, choose_best_server, filter_bankrupt_servers, filter_pserv\\n} from \\\"/lib/util.js\\\";\\n\\n/**\\n * Determine which servers in the game world have been compromised.  We\\n * exclude all purchased servers.  A server in the game world is said to be\\n * compromised provided that:\\n *\\n * (1) We have root access to the server.\\n * (2) Our hack scripts are currently running on the server.\\n *\\n * @param ns The Netscript API.\\n * @param script A hack script.  We want to check whether a server is running\\n *     this script.\\n * @param server An array of server names.\\n * @return An array of servers that have been compromised.\\n */\\nfunction compromised_servers(ns, script, server) {\\n    assert(server.length > 0);\\n    const compromised = new Array();\\n    for (const s of filter_pserv(ns, server)) {\\n        const serv = new Server(ns, s);\\n        if (serv.has_root_access() && serv.is_running_script(script)) {\\n            compromised.push(s);\\n        }\\n    }\\n    return compromised;\\n}\\n\\n/**\\n * Gain root access to a server, copy our hack scripts over to the server, and\\n * use the server to hack a target.\\n *\\n * @param ns The Netscript API.\\n * @param server Use this server to hack a target.\\n * @param target Hack this server.\\n */\\nasync function hack_a_server(ns, server, target) {\\n    const serv = new Server(ns, server);\\n    const targ = new Server(ns, target);\\n    // Ensure we have root access on both servers.\\n    if (!serv.has_root_access()) {\\n        await serv.gain_root_access();\\n    }\\n    if (!targ.has_root_access()) {\\n        await targ.gain_root_access();\\n    }\\n    // Copy our hack script over to a server.  Use the server to hack a target.\\n    assert(await serv.deploy(targ.hostname()));\\n}\\n\\n/**\\n * Try to hack a bunch of servers in the game world.\\n *\\n * @param ns The Netscript API.\\n * @param target Try to hack one or more servers on this list.  Can't be\\n *     an empty array.\\n * @return An array [reject, hacked] as follows.\\n *     (1) reject := An array of servers we can't hack at the moment.\\n *     (2) hacked := An array of servers that have been hacked.\\n */\\nasync function hack_servers(ns, target) {\\n    // Sanity check.\\n    assert(target.length > 0);\\n    // Determine the maximum number of ports we can open on a server.\\n    const player = new Player(ns);\\n    const nport = player.num_ports();\\n    assert(nport >= 0);\\n    // A list of servers that were successfully hacked.\\n    const hacked_server = new Array();\\n    // Gain root access to as many servers as possible on the network.  Copy\\n    // our hack script to each server and use the server to hack itself.\\n    const reject = new Array();  // Servers we can't hack at the moment.\\n    // A Hack stat margin: 1% of our Hack stat, plus another 5 points.\\n    const margin = Math.floor((0.01 * player.hacking_skill()) + 5);\\n    for (const s of target) {\\n        // Should we skip this server?\\n        if (skip_server(ns, s, player.script(), margin)) {\\n            continue;\\n        }\\n        const server = new Server(ns, s);\\n        const hack_lvl = player.hacking_skill();\\n        const required_lvl = server.hacking_skill();\\n        // If the hacking skill requirement of the server is within the margin\\n        // of our Hack stat, skip the server for now but make a note to attempt\\n        // at a later time.\\n        if (hack_lvl < required_lvl) {\\n            if (tolerate_margin(ns, margin, s)) {\\n                reject.push(s);\\n                continue;\\n            }\\n        }\\n        assert(hack_lvl >= required_lvl);\\n        // If the server is bankrupt, skip the server for now and add it to\\n        // the list of rejects.\\n        if (server.is_bankrupt()) {\\n            reject.push(s);\\n            continue;\\n        }\\n        // Use the server to hack itself.\\n        await hack_a_server(ns, s, s);\\n        hacked_server.push(s);\\n    }\\n    return [reject, hacked_server];\\n}\\n\\n/**\\n * Use a bankrupt server to hack a server that can hold money.\\n *\\n * @param ns The Netscript API.\\n * @param candidate Scan this array of servers to see whether any is bankrupt.\\n * @param hacked_server Each server in this array has been successfully hacked.\\n *     The implication is that each server is not bankrupt, i.e. can hold money.\\n * @return An array of servers we cannot redirect at the moment.\\n */\\nasync function redirect_bankrupt_server(ns, candidate, hacked_server) {\\n    // Sanity checks.\\n    assert(candidate.length > 0);\\n    assert(hacked_server.length > 0);\\n    // An array of hacked servers.  We remove bankrupt servers from this list.\\n    let hserver = filter_bankrupt_servers(ns, Array.from(hacked_server));\\n    const reject = new Array();\\n    const player = new Player(ns);\\n    for (const s of candidate) {\\n        const server = new Server(ns, s);\\n        if (player.hacking_skill() >= server.hacking_skill()) {\\n            // Redirect a bankrupt server to hack a target.\\n            if (server.is_bankrupt()) {\\n                // Choose a target server from a list of servers that have\\n                // been hacked.\\n                const target = new Server(ns, choose_best_server(ns, hserver));\\n                assert(!target.is_bankrupt());\\n                hserver = hserver.filter(s => s != target.hostname());\\n                // Redirect the bankrupt server to hack the target server.\\n                await hack_a_server(ns, s, target.hostname());\\n                continue;\\n            }\\n        }\\n        reject.push(s);\\n    }\\n    return reject;\\n}\\n\\n/**\\n * Whether we should skip the server.  A server might be skipped over for\\n * various reasons.\\n *\\n * @param ns The Netscript API.\\n * @param server Should we skip this server?\\n * @param script The name of our hacking script.\\n * @param margin The Hack stat margin.  For servers whose hacking skill\\n *     requirement is higher than our current Hack stat, the margin is the\\n *     extra Hack stat we are willing to wait to acquire.  Let h be our Hack\\n *     stat, let m be the margin, and r the required hacking skill requirement\\n *     of the server.  If h + m < r, then the hacking skill requirement of the\\n *     server is too high and we should skip over this server.  In case\\n *     h < r and h + m >= r, we are willing to wait for our Hack stat to\\n *     increase by an extra m points.\\n * @return true if we are to skip over the given server; false otherwise.\\n */\\nfunction skip_server(ns, server, script, margin) {\\n    const SKIP = true;      // Skip this server.\\n    const NO_SKIP = !SKIP;  // Don't skip over this server.\\n    const serv = new Server(ns, server);\\n    const player = new Player(ns);\\n    const m = Math.floor(margin);\\n    assert(m > 0);\\n    // Determine the maximum number of ports we can open on a server.\\n    const nport = player.num_ports();\\n    assert(nport >= 0);\\n    // Skip over a server that requires more ports than we can open.\\n    if (serv.num_ports_required() > nport) {\\n        return SKIP;\\n    }\\n    // If our hack script is already running on the server, then skip the\\n    // server.\\n    if (serv.is_running_script(script)) {\\n        return SKIP;\\n    }\\n    // Determine how many threads we can run our script on a server.  If we\\n    // can't run our script on the server, then we skip the server.\\n    const nthread = serv.num_threads(script);\\n    if (nthread < 1) {\\n        return SKIP;\\n    }\\n    // Skip over a server if its hacking skill requirement is too high.\\n    if ((player.hacking_skill() + m) < serv.hacking_skill()) {\\n        return SKIP;\\n    }\\n    return NO_SKIP;\\n}\\n\\n/**\\n * Whether to tolerate the given margin with respect to the hacking skill\\n * requirement of a server.  Let h be our Hack stat, m the margin, and r the\\n * hacking skill requirement of a server.  Suppose that h < r.  We are willing\\n * to tolerate the margin, i.e. wait for our Hack stat to increase by an extra\\n * m points, provided that h + m >= r.\\n *\\n * @param ns The Netscript API.\\n * @param margin The Hack stat margin.\\n * @param server The target server.\\n * @return true if we are willing to tolerate the margin; false otherwise.\\n */\\nfunction tolerate_margin(ns, margin, server) {\\n    const serv = new Server(ns, server);\\n    const player = new Player(ns);\\n    const h = player.hacking_skill();\\n    const m = Math.floor(margin);\\n    assert(m > 0);\\n    const requirement = serv.hacking_skill();\\n    assert(h < requirement);\\n    if ((h + m) >= requirement) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Search for world servers to hack.  We exclude purchased servers.\\n *\\n * @param ns The Netscript API.\\n */\\nasync function update(ns) {\\n    let server = network(ns);\\n    const t = new Time();\\n    const time = 10 * t.second();\\n    // A list of servers that have been successfully hacked.\\n    const player = new Player(ns);\\n    let hacked_server = compromised_servers(ns, player.script(), server);\\n    // Continuously try to gain root access to servers in the game world and\\n    // let each server hack itself.  Exclude all purchased servers.\\n    while (server.length > 0) {\\n        let [reject, hacked] = await hack_servers(ns, server);\\n        hacked_server = [...new Set(hacked_server.concat(hacked))];\\n        assert(hacked_server.length > 0);\\n        // Redirect a bankrupt server to hack another target.\\n        if (reject.length > 0) {\\n            reject = await redirect_bankrupt_server(ns, reject, hacked_server);\\n        }\\n        server = reject;\\n        await ns.sleep(time);\\n    }\\n}\\n\\n/**\\n * Use each server in the game world to hack itself.  We exclude purchased\\n * servers.  A bankrupt server is used to hack another world server that\\n * isn't bankrupt.\\n *\\n * Usage: run world-server.js\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n    // Continuously look for world servers to hack.\\n    const t = new Time();\\n    const time = 10 * t.minute();\\n    while (true) {\\n        await update(ns);\\n        await ns.sleep(time);\\n    }\\n}\\n\",\"filename\":\"world-server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/9850d05c-ae43-413b-a364-e06a670fbfde\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/e7c95c9b-6cc3-4026-a08a-7c57cc3e99a0\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/feae7555-1fb5-4c9c-837e-48368a8c0c04\",\"moduleSequenceNumber\":9902},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/53736760-a2e1-4f34-8f12-6fdbbede03d6\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/4d886c00-9075-4ee6-acfd-22fd524ab8f7\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/27b4fbd5-4d61-4b16-9e2a-7f21c06b2c51\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/server.js\",\"url\":\"blob:https://danielyxie.github.io/51629a69-aa76-4079-8be2-cc2171de7bfc\",\"moduleSequenceNumber\":9901},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/1dd4debd-5b33-4b81-bea4-5eda4a9c20cf\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/15de3c47-b8c5-43ab-b992-7ff1fc428b14\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/5440c4dc-1860-4661-bf1c-625df02d535a\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/6d8a9b56-9a95-449e-b365-201d36140d06\",\"moduleSequenceNumber\":9899},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/074565b1-98fe-4009-994b-ce488788f6c5\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/6216bbf4-0766-4f4d-907b-eb97e7f7b4c8\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/fa676703-c9fb-4e8d-a523-c6572798eab7\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/194bebb7-1bdf-4e8f-bbbf-8076d46030ed\",\"moduleSequenceNumber\":9898},{\"filename\":\"world-server.js\",\"url\":\"blob:https://danielyxie.github.io/ad5feff8-a6a1-46ab-a851-2678da9ad5b9\",\"moduleSequenceNumber\":9936}],\"dependents\":[],\"ramUsage\":10.2,\"server\":\"home\",\"moduleSequenceNumber\":10341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A class to hold various utility methods for dealing with arrays.  Cannot\\n * name it \\\"Array\\\" because there is already a class called \\\"Array\\\" in the\\n * standard API library.\\n */\\nexport class MyArray {\\n    /**\\n     * Initialize an array object.\\n     */\\n    constructor() {\\n        // Nothing to do here.\\n    }\\n\\n    /**\\n     * Whether the given array has only non-negative numbers.\\n     *\\n     * @param array An array of integers.  Cannot be an empty array.\\n     * @return true if the given array has only non-negative integers;\\n     *     false otherwise.\\n     */\\n    all_nonnegative(array) {\\n        assert(array.length > 0);\\n        for (const a of array) {\\n            if (a < 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * The maximum element of an array.\\n     *\\n     * @param We want to determine the maximum element of this array.  Cannot\\n     *     be an empty array.\\n     * @return The largest element of the given array.\\n     */\\n    max(array) {\\n        assert(array.length > 0);\\n        const init_value = -Infinity;\\n        const mx = array.reduce(\\n            function (x, y) {\\n                return Math.max(x, y);\\n            },\\n            init_value\\n        );\\n        return mx;\\n    }\\n\\n    /**\\n     * A sequence of non-negative integers, starting from zero.  Each number in\\n     * the sequence is one more than the previous number.\\n     *\\n     * @param num How many numbers in the sequence.  Must be positive.  If\\n     *     num := 4, then our sequence is [0, 1, 2, 3].\\n     * @return An array representing a sequence of num numbers starting from 0.\\n     */\\n    sequence(num) {\\n        const n = Math.floor(num);\\n        assert(n > 0);\\n        return Array(n).fill().map((_, index) => index);\\n    }\\n\\n    /**\\n     * Sort an array in ascending order.\\n     *\\n     * @param array We want to sort this array.  Cannot be an empty array.\\n     * @return A new array whose elements are sorted in ascending order.  If\\n     *     the array has duplicate elements, we are actually sorting in\\n     *     non-decreasing order.\\n     */\\n    sort_ascending(array) {\\n        assert(array.length > 0);\\n        const arr = Array.from(array);\\n        arr.sort(\\n            function (a, b) {\\n                return a - b;\\n            }\\n        );\\n        return arr;\\n    }\\n\\n    /**\\n     * Sort an array in descending order.\\n     *\\n     * @param array We want to sort this array.  Cannot be an empty array.\\n     * @return A new array whose elements are sorted in descending order.  If\\n     *     the array has duplicate elements, then we are actually sorting the\\n     *     array in non-increasing order.\\n     */\\n    sort_descending(array) {\\n        assert(array.length > 0);\\n        const arr = Array.from(array);\\n        arr.sort(\\n            function (a, b) {\\n                return b - a;\\n            }\\n        );\\n        return arr;\\n    }\\n\\n    /**\\n     * Sum the elements of an array.\\n     *\\n     * @param array We want to add the elements of this array.  Cannot be an\\n     *     empty array.\\n     * @return The sum of the elements in the given array.\\n     */\\n    sum(array) {\\n        assert(array.length > 0);\\n        const init_value = 0;\\n        const total = array.reduce(\\n            function (sum, current) {\\n                return sum + current;\\n            },\\n            init_value\\n        );\\n        return total;\\n    }\\n}\\n\",\"filename\":\"/lib/array.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":10342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions for solving coding contracts.\\n\\nimport { colour } from \\\"/lib/constant.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The index of an alphabetic character.\\n *\\n * @param c A character of the English alphabet.  Cannot be empty string.\\n * @return The index of the given character, where index starts from zero.\\n */\\nexport function char_index(c) {\\n    assert(1 == c.length);\\n    const alphabet = new Map([\\n        [\\\"A\\\", 0],\\n        [\\\"B\\\", 1],\\n        [\\\"C\\\", 2],\\n        [\\\"D\\\", 3],\\n        [\\\"E\\\", 4],\\n        [\\\"F\\\", 5],\\n        [\\\"G\\\", 6],\\n        [\\\"H\\\", 7],\\n        [\\\"I\\\", 8],\\n        [\\\"J\\\", 9],\\n        [\\\"K\\\", 10],\\n        [\\\"L\\\", 11],\\n        [\\\"M\\\", 12],\\n        [\\\"N\\\", 13],\\n        [\\\"O\\\", 14],\\n        [\\\"P\\\", 15],\\n        [\\\"Q\\\", 16],\\n        [\\\"R\\\", 17],\\n        [\\\"S\\\", 18],\\n        [\\\"T\\\", 19],\\n        [\\\"U\\\", 20],\\n        [\\\"V\\\", 21],\\n        [\\\"W\\\", 22],\\n        [\\\"X\\\", 23],\\n        [\\\"Y\\\", 24],\\n        [\\\"Z\\\", 25]\\n    ]);\\n    assert(alphabet.has(c));\\n    return alphabet.get(c);\\n}\\n\\n/**\\n * Count the total occurrence of 1 in a bit string.  This function does not\\n * necessarily count all 1s in a bit string.  Some positions can be skipped.\\n *\\n * @param msg A bit string, representing a possibly incomplete encoded message.\\n *     The message is encoded using Hamming code.  If the bit string is an\\n *     incomplete encoded message, the location of each parity bit has been\\n *     filled with rubbish.\\n * @param p The position of a parity (or redundant) bit.  Its value is always\\n *     a power of 2.  We start counting from this position in the bit string.\\n *     The value of p also tells us how many consecutive positions to skip.\\n *     In Hamming code, when checking parity we check p consecutive positions\\n *     and skip p consecutive positions, giving us a window of 2p consecutive\\n *     positions.  To reach the next window, we should skip 2p positions.\\n * @return The number of 1s in the given bit string, while skipping over\\n *     some positions.\\n */\\nexport function count_one(msg, p) {\\n    assert(msg.length > 0);\\n    assert(p > 0);\\n    let n1 = 0;\\n    let i = p;\\n    const skip = 2 * p;\\n    while (i < msg.length) {\\n        for (let j = i; j < i + p; j++) {\\n            if (1 == msg[j]) {\\n                n1++;\\n            }\\n        }\\n        i += skip;\\n    }\\n    return n1;\\n}\\n\\n/**\\n * An array of uppercase letters of the English alphabet.\\n */\\nexport function english_alphabet() {\\n    return \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\";\\n}\\n\\n/**\\n * Whether a character is an uppercase letter of the English alphabet.\\n *\\n * @param c A character.  Cannot be empty string.\\n * @return true if the given character is an uppercase letter of the English\\n *     alphabet; false otherwise.\\n */\\nexport function is_alphabetic(c) {\\n    assert(1 == c.length);\\n    return english_alphabet().includes(c);\\n}\\n\\n/**\\n * Log a failure when attempting to solve a coding contract.\\n *\\n * @param ns The Netscript API.\\n * @param fname Write our log to this file.  Must be a text file with\\n *     file extension \\\".txt\\\".\\n * @param cct The file name of the coding contract.\\n * @param host The hostname of the server where the coding contract is located.\\n * @param data The data used for solving the coding contract.\\n */\\nexport async function log_cct_failure(ns, fname, cct, host, data) {\\n    const append = \\\"a\\\";\\n    const newline = \\\"\\\\n\\\";\\n    const date = new Date(Date.now());\\n    await ns.write(fname, date.toISOString(), append);\\n    await ns.write(fname, \\\", \\\" + host + \\\", \\\" + cct + newline, append);\\n    await ns.write(fname, data + newline, append);\\n}\\n\\n/**\\n * Format a matrix as a string.\\n *\\n * @param mat A matrix, i.e. an array of arrays.\\n * @return The given matrix as a string.\\n */\\nexport function matrix_to_string(mat) {\\n    let string = \\\"\\\";\\n    const delim = \\\", \\\";\\n    for (let i = 0; i < mat.length; i++) {\\n        string += \\\"[\\\" + mat[i] + \\\"]\\\" + delim;\\n    }\\n    string = string.slice(0, string.length - delim.length);\\n    string = \\\"[\\\" + string + \\\"]\\\";\\n    return string;\\n}\\n\\n/**\\n * The maximum profit to be made when we are restricted to at most one\\n * transaction.  The algorithm is similar to Kadane's algorithm.  However, we\\n * must keep track of the minimum price as well as the maximum profit.\\n * Essentially, we want to buy low and sell high, but we are restricted to one\\n * transaction.  This means we are restricted by these rules:\\n *\\n * (1) Only one buy action.\\n * (2) Only one sell action.\\n * (3) Must first buy before we can sell.\\n *\\n * The idea is to determine two days i and j, where i < j and\\n * price[i] < price[j], such that the difference price[j] - price[i] is\\n * maximized.\\n *\\n * Refer to the following for more details:\\n *\\n * https://betterprogramming.pub/dynamic-programming-interview-questions-how-to-maximize-stock-profits-8ed4966c2206\\n *\\n * @param price An array where price[i] represents the price of a stock on\\n *     day i.  All prices are for the same stock.\\n * @return The maximum profit we can make, assuming at most one transaction.\\n *       Return 0 if no profit can be made or the price array is empty.\\n */\\nexport function max_profit_kadane(price) {\\n    // Empty price array means zero profit.\\n    if (0 == price.length) {\\n        return 0;\\n    }\\n    let max_profit = 0;\\n    let min_price = price[0];\\n    // Must start on the second day.  On the first day, we have only one\\n    // price value so the minimum of one value is that value itself.\\n    for (let i = 1; i < price.length; i++) {\\n        // We need to keep track of the minimum price.  Let mp be the minimum\\n        // price so far.  If the price on day i is lower than mp, we set mp to\\n        // to the new minimum price.  Otherwise, we move to the price on the\\n        // next day.\\n        min_price = Math.min(min_price, price[i]);\\n        // Why do we need to keep track of the minimum price so far?  Let mp be\\n        // the minimum price up to and including day i.  Let price[i] be the\\n        // price on day i.  The profit pf is defined as the price on day i\\n        // minus the running minimium price:\\n        //\\n        // pf := price[i] - mp\\n        //\\n        // Here, the minimum price mp occurs during one of the days from the\\n        // first to the current day, i.e. mp is one of the price values\\n        //\\n        // price[0], price[1], ..., price[i]\\n        //\\n        // If we were to buy the stock on some day j (0 <= j <= i) at the\\n        // minimum price of mp, we can sell the stock on day i to make a profit\\n        // of pf.  The following can happen:\\n        //\\n        // (1) mp < price[i].  We make a profit pf.  Let mpf be the maximum\\n        //     profit we can make on day i.  We compare the profit pf on day i\\n        //     to the maximum profit mpf we can make on day i.  If mpf < pf,\\n        //     then we adjust our maximum profit so far to the value of pf.\\n        //     Otherwise, we keep the value of mpf as is.  The maximum profit\\n        //     we can make so far is the maximum of mpf and pf.\\n        // (2) mp = price[i].  We break even.  No loss, no profit.\\n        // (3) mp > price[i].  We make a loss because we are selling our stock\\n        //     at a price lower than when we bought the stock.  Our minimum\\n        //     price should be adjusted to the price on day i.  The minimum\\n        //     price so far is the minimum of mp and price[i].\\n        //\\n        const profit = price[i] - min_price;\\n        max_profit = Math.max(max_profit, profit);\\n    }\\n    return max_profit;\\n}\\n\\n/**\\n * The positions (or indices) where the parity bits are placed in a bit string\\n * that has been encoded using Hamming code.  These parity bits are also known\\n * as redundant bits to distinguish them from the overall parity bit placed at\\n * index 0 in the encoded bit string.\\n *\\n * @param p The number of parity bits.\\n * @return An array, where each element represents the position or index of a\\n *     parity bit.  These parity bits are also called redundant bits.\\n *     This array does not include the position of the overall parity\\n *     bit, which is assumed to be at index 0 in the encoded message.\\n */\\nexport function parity_position(p) {\\n    assert(p > 0);\\n    const array = new Array();\\n    for (let i = 0; i < p; i++) {\\n        array.push(2 ** i);\\n    }\\n    return array;\\n}\\n\\n/**\\n * Print to the terminal an error message about which Coding Contract we did\\n * not solve correctly.\\n *\\n * @param The Netscript API.\\n * @param host The hostname of the server where the Coding Contract was found.\\n * @param cct The file name of the Coding Contract.\\n */\\nexport function print_error(ns, host, cct) {\\n    const prefix = host + \\\": \\\" + cct + \\\": \\\";\\n    ns.tprint(`${prefix + colour.RED + \\\"FAILURE\\\" + colour.RESET}`);\\n}\\n\\n/**\\n * Print to the terminal a message about the reward from successfully solving\\n * a Coding Contract.\\n *\\n * @param The Netscript API.\\n * @param host The hostname of the server where the Coding Contract was found.\\n * @param cct The file name of the Coding Contract.\\n * @param reward The reward from solving the Coding Contract.\\n */\\nexport function print_success(ns, host, cct, reward) {\\n    const prefix = host + \\\": \\\" + cct + \\\": \\\";\\n    ns.tprint(`${prefix + colour.GREEN + reward + colour.RESET}`);\\n}\\n\\n/**\\n * The maximimum profit that can be made when we are restricted to at most two\\n * transactions.  Transactions must occur one after the other.  Suppose we buy\\n * one share of a stock on day i and sell the share on day j, where i < j.  We\\n * cannot buy another share of the same stock on any day between i and j.\\n * However, we are allowed to buy another share of the stock from day j+1\\n * onward.\\n *\\n * The above description hints at a simple solution.  We partition the price\\n * array into two non-overlapping parts:\\n *\\n * (1) The left part starts from day 0 and ends at day k, inclusive.  Run\\n *     Kadane's algorithm on the left subarray to get mpl as our maximum profit\\n *     for the left subarray.\\n * (2) The right part starts from day k+1 and ends at the last day in the price\\n *     array.  Run Kadane's algorithm on the right subarray to get mpr as our\\n *     maximum profit for the right subarray.\\n *\\n * The maximum profit is mpl + mpr.  This maximum profit is for one particular\\n * partition of the price array.  There are many other partitions, one for each\\n * value of k.  Calculate the maximum profit for each partition.  The true\\n * maximum profit is the maximum of the results of all partitions.\\n *\\n * @param price An array of prices, where price[i] is the price of one share of\\n *     a stock on day i.  All prices relate to the same stock.\\n * @return The maximum profit to be made, assumming we can perform at most\\n *     two transactions.  Return 0 if no profit can be made.\\n */\\nexport function stock_traderIII(price) {\\n    assert(price.length > 0);\\n    // Obtain all possible partitions of the price array.  Each partition\\n    // divides the array into two parts: the left subarray and the right\\n    // subarray.\\n    let max_profit = 0;\\n    for (let k = 0; k < price.length; k++) {\\n        // The left and right subarrays in the partition.\\n        const left = price.slice(0, k + 1);\\n        const right = price.slice(k + 1, price.length);\\n        // The maximum profit of each subarray in the partition.\\n        const mpl = max_profit_kadane(left);\\n        const mpr = max_profit_kadane(right);\\n        // The running maximum profit.\\n        max_profit = Math.max(max_profit, mpl + mpr);\\n    }\\n    return max_profit;\\n}\\n\",\"filename\":\"/lib/cct.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":10343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A bunch of constant values.  These can be numeric constants or string\\n// constants.\\n\\n/**\\n * Use ANSI escape codes to add colour.  Refer to this page for more details:\\n *\\n * https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html\\n */\\nexport const colour = {\\n    \\\"DARK_GREEN\\\": \\\"\\\\u001b[38;5;22m\\\",\\n    \\\"GREEN\\\":      \\\"\\\\u001b[32m\\\",\\n    \\\"RED\\\":        \\\"\\\\u001b[31m\\\",\\n    \\\"RESET\\\":      \\\"\\\\u001b[0m\\\"\\n};\\n\\n/**\\n * The home server of the player.\\n */\\nexport const home = \\\"home\\\";\\n\\n/**\\n * These programs are port openers.  Each program can be used to open a\\n * specific port on a server.\\n */\\nexport const program = [\\n    \\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"HTTPWorm.exe\\\", \\\"relaySMTP.exe\\\",\\n    \\\"SQLInject.exe\\\"\\n];\\n\\n/**\\n * The prefix for the name of each purchased server.  The very first purchased\\n * server is always named \\\"pserv\\\".  Any subsequent purchased server is named as\\n * pserv-n, where n is a non-negative integer.\\n */\\nexport const pserv_prefix = \\\"pserv\\\";\\n\\n/**\\n * The hack script.  This script is used for hacking a server.\\n */\\nexport const script = \\\"hack.js\\\";\\n\",\"filename\":\"/lib/constant.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":10344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/**\\n * A class to hold information about money.\\n */\\nexport class Money {\\n    /**\\n     * The value for one million.\\n     */\\n    #million;\\n    /**\\n     * Initialize a money object.\\n     */\\n    constructor() {\\n        this.#million = 10 ** 6;\\n    }\\n\\n    /**\\n     * One billion, i.e. 10^9.\\n     */\\n    billion() {\\n        return 1000 * this.million();\\n    }\\n\\n    /**\\n     * One million, i.e. 10^6.\\n     */\\n    million() {\\n        return this.#million;\\n    }\\n\\n    /**\\n     * One quadrillion, i.e. 10^15.\\n     */\\n    quadrillion() {\\n        return 1000 * this.trillion();\\n    }\\n\\n    /**\\n     * One trillion, i.e. 10^12.\\n     */\\n    trillion() {\\n        return 1000 * this.billion();\\n    }\\n}\\n\",\"filename\":\"/lib/money.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":10345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// A class and various utility functions related to network.\\n\\nimport { home } from \\\"/lib/constant.js\\\";\\nimport { assert, filter_pserv } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A combinatorial graph, commonly referrred to as a graph.\\n */\\nexport class Graph {\\n    /**\\n     * The adjacency map.  Each key is a vertex or node of the graph.  Each\\n     * value is an array of vertices to which the key is adjacent.  For\\n     * example, given a node i, adj[i] is an array such that each node in the\\n     * array is a neighbour of i.\\n     */\\n    #adj;\\n    /**\\n     * A boolean signifying whether each edge is directed or undirected.\\n     */\\n    #directed;\\n\\n    /**\\n     * A graph object.\\n     *\\n     * @param directed A boolean indicating whether each edge of the graph is\\n     *     directed or undirected.  If true, then each edge is directed.  If\\n     *     false, then each edge is undirected.\\n     */\\n    constructor(directed) {\\n        this.#adj = new Map();\\n        this.#directed = false;\\n        if (directed) {\\n            this.#directed = true;\\n        }\\n    }\\n\\n    /**\\n     * Add an edge to this graph.\\n     *\\n     * @param u, v An edge between vertices u and v.\\n     * @return true if the edge was successfully added to the graph;\\n     *     false otherwise or the edge is already in the graph.\\n     */\\n    add_edge(u, v) {\\n        const SUCCESS = true;\\n        const FAILURE = !SUCCESS;\\n        // Already have the edge.\\n        if (this.has_edge(u, v)) {\\n            return FAILURE;\\n        }\\n        // First, add the nodes if we don't have them already.\\n        if (!this.has_node(u)) {\\n            assert(this.add_node(u));\\n        }\\n        if (!this.has_node(v)) {\\n            assert(this.add_node(v));\\n        }\\n        // Now insert the edge (u, v).\\n        // If the graph is directed, only need to add the edge (u, v).\\n        // If the graph is undirected, also must add the edge (v, u).\\n        const u_neighbour = this.neighbour(u);\\n        u_neighbour.push(v);\\n        this.#adj.set(u, u_neighbour);\\n        // Undirected graph.\\n        if (!this.#directed) {\\n            const v_neighbour = this.neighbour(v);\\n            v_neighbour.push(u);\\n            this.#adj.set(v, v_neighbour);\\n        }\\n        return SUCCESS;\\n    }\\n\\n    /**\\n     * Add a vertex to this graph.\\n     *\\n     * @param v Add this node.\\n     * @return true if the given node was successfully added;\\n     *     false otherwise or the node already exists in the graph.\\n     */\\n    add_node(v) {\\n        const SUCCESS = true;\\n        const FAILURE = !SUCCESS;\\n        if (this.has_node(v)) {\\n            return FAILURE;\\n        }\\n        this.#adj.set(v, new Array());\\n        return SUCCESS;\\n    }\\n\\n    /**\\n     * Use Dijkstra's algorithm to determine a shortest path from a given\\n     * node to all nodes in a graph.\\n     *\\n     * @param source The source vertex.  All shortest paths must start\\n     *     from this node.\\n     * @return These two data structures:\\n     *     (1) A map of the shortest number of nodes in a path to a target\\n     *         node.  Each path starts from the given source node.  For\\n     *         example, the map element A[i] means the shortest number of nodes\\n     *         in a path to node i.\\n     *     (2) A map of the node preceeding a given node, in a shortest path.\\n     *         For example, the map element M[i] gives a node that directly\\n     *         connects to node i, where M[i] and i are nodes in a shortest\\n     *         path.\\n     */\\n    #dijkstra(source) {\\n        // The implementation is the same for both directed and undirected\\n        // graphs.\\n        // A map of the shortest number of nodes in a path to a target node.\\n        const dist = new Map();\\n        // A map of the node preceeding a given node.\\n        const prev = new Map();\\n        // A queue of nodes to visit.\\n        let queue = new Array();\\n        // Initialization.\\n        for (const v of this.nodes()) {\\n            dist.set(v, Infinity);\\n            prev.set(v, undefined);\\n            queue.push(v);\\n        }\\n        // The distance from the source node to itself is zero.\\n        dist.set(source, 0);\\n        prev.set(source, undefined);\\n        queue.push(source);\\n        // Search for shortest paths from the source node to other nodes.  This\\n        // is an unweighted graph so the weight between a node and any of its\\n        // neighbours is 1.\\n        const weight = 1;\\n        while (queue.length > 0) {\\n            const u = this.#minimumq(queue, dist);\\n            queue = queue.filter(s => s != u);\\n            // Consider the neighbours of u.  Each neighbour must still be in\\n            // the queue.\\n            let neighbour = Array.from(this.neighbour(u));\\n            neighbour = neighbour.filter(s => queue.includes(s));\\n            for (const v of neighbour) {\\n                const alt = dist.get(u) + weight;\\n                // We have found a shorter path to v.\\n                if (alt < dist.get(v)) {\\n                    dist.set(v, alt);\\n                    prev.set(v, u);\\n                }\\n            }\\n        }\\n        return [dist, prev];\\n    }\\n\\n    /**\\n     * All edges of this graph, as an array of arrays.\\n     */\\n    edges() {\\n        // Directed graph.\\n        if (this.#directed) {\\n            const edge = new Array();\\n            for (const u of this.nodes()) {\\n                for (const v of this.neighbour(u)) {\\n                    edge.push([u, v]);\\n                }\\n            }\\n            return edge;\\n        }\\n        // Undirected graph.\\n        assert(!this.#directed);\\n        const edge = new Set();\\n        for (const u of this.nodes()) {\\n            for (const v of this.neighbour(u)) {\\n                // Assume nodes to be comparable, i.e. we can compare the node\\n                // values.  If each node is an integer, the nodes are\\n                // comparable because there is an ordering of numbers.  If each\\n                // node is a string of alphabetic characters, the nodes are\\n                // also comparable because we can use lexicographic ordering.\\n                if (u > v) {\\n                    continue;\\n                }\\n                assert(!edge.has([u, v]));\\n                edge.add([u, v]);\\n            }\\n        }\\n        return [...edge];\\n    }\\n\\n    /**\\n     * Whether the graph has the given edge.\\n     *\\n     * @param u, v Check the graph for this edge.\\n     * @return true if the graph has the edge (u, v); false otherwise.\\n     */\\n    has_edge(u, v) {\\n        const HAS_EDGE = true;\\n        const DONT_HAVE_EDGE = !HAS_EDGE;\\n        if (!this.has_node(u)) {\\n            return DONT_HAVE_EDGE;\\n        }\\n        if (!this.has_node(v)) {\\n            return DONT_HAVE_EDGE;\\n        }\\n        // Directed graph.\\n        if (this.#directed) {\\n            const neighbour = this.neighbour(u);\\n            return neighbour.includes(v);\\n        }\\n        // Undirected graph.\\n        assert(!this.#directed);\\n        const u_neighbour = this.neighbour(u);\\n        const v_neighbour = this.neighbour(v);\\n        if (u_neighbour.includes(v)) {\\n            assert(v_neighbour.includes(u));\\n            return HAS_EDGE;\\n        }\\n        return DONT_HAVE_EDGE;\\n    }\\n\\n    /**\\n     * Whether the graph has the given vertex.\\n     *\\n     * @param v Check for the presence or absence of this vertex.\\n     * @return true if the graph already has the vertex; false otherwise.\\n     */\\n    has_node(v) {\\n        return this.#adj.has(v);\\n    }\\n\\n    /**\\n     * Choose the node i with minimum dist[i].  This is a simple\\n     * implementation.  For better performance, the queue should be implemented\\n     * as a minimum priority queue.\\n     *\\n     * @param queue An array of nodes to visit.\\n     * @param dist A map of the shortest number of nodes in a path to\\n     *     a target node.\\n     * @return The node i such that dist[i] is minimal.\\n     */\\n    #minimumq(queue, dist) {\\n        assert(queue.length > 0);\\n        assert(dist.size > 0);\\n        let node = queue[0];\\n        for (const v of queue) {\\n            if (dist.get(v) < dist.get(node)) {\\n                node = v;\\n            }\\n        }\\n        return node;\\n    }\\n\\n    /**\\n     * The neighbours of a vertex.\\n     *\\n     * @param v A node of this graph.\\n     * @return An array representing the neighbours of the given node.\\n     */\\n    neighbour(v) {\\n        assert(this.has_node(v));\\n        return this.#adj.get(v);\\n    }\\n\\n    /**\\n     * All nodes of this graph, as an array.\\n     */\\n    nodes() {\\n        const vertex = [...this.#adj.keys()];\\n        vertex.sort();\\n        return vertex;\\n    }\\n\\n    /**\\n     * Determine a shortest path from the source to the target.\\n     *\\n     * @param source Start our path from this node.\\n     * @param target We want to reach this node.\\n     * @return An array representing a shortest path from source to target.\\n     *     An empty array if the target is not reachable from the source.\\n     */\\n    shortest_path(source, target) {\\n        // The implementation is the same for directed and undirected graphs.\\n        assert(this.has_node(source));\\n        assert(this.has_node(target));\\n        const [dist, prev] = this.#dijkstra(source);\\n        // Ensure the target is reachable from the source node.\\n        if (!dist.has(target)) {\\n            return [];\\n        }\\n        const stack = new Array();\\n        let u = target;\\n        // Start from the target and work backward to find a shortest path from\\n        // the source to the target.\\n        while (prev.get(u) != undefined) {\\n            stack.push(u);\\n            u = prev.get(u);\\n        }\\n        // Target is not reachable from the source node.\\n        if (0 == stack.length) {\\n            return [];\\n        }\\n        // Reconstruct the full path from source to target.\\n        assert(stack.length > 0);\\n        stack.push(source);\\n        stack.reverse();\\n        return stack;\\n    }\\n}\\n\\n/**\\n * Scan the network of servers in the game world.  Each server must be\\n * reachable from our home server.  We do not include purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @return An array of servers that can be reached from home.  Purchased\\n *     servers are excluded.\\n */\\nexport function network(ns) {\\n    // We scan the world network from a node, which is assumed to be our home\\n    // server.  We refer to our home server as the root of the tree.\\n    const root = home;\\n    // A set of all servers we can visit at the moment.\\n    let server = new Set();\\n    // A stack of servers to visit.  We start from our home server.\\n    const stack = new Array(root);\\n    // Use depth-first search to navigate all servers we can visit.\\n    while (stack.length > 0) {\\n        const s = stack.pop();\\n        // Have we visited the server s yet?\\n        if (!server.has(s)) {\\n            // The server s is now visited.\\n            server.add(s);\\n            // Add all neighbours of s to the stack.  Take care to exclude the\\n            // purchased servers.\\n            stack.push(...filter_pserv(ns, ns.scan(s)));\\n        }\\n    }\\n    // Convert the set of servers to an array of servers.\\n    server = [...server];\\n    // Remove the root node from our array.  We want all servers that are\\n    // connected either directly or indirectly to the root node.\\n    return server.filter(s => root != s);\\n}\\n\\n/**\\n * Determine a shortest path from the source server to the target server\\n * in the network of world servers.\\n *\\n * @param ns The Netscript API.\\n * @param source Start our path from this server.\\n * @param target We want to reach this server.\\n * @return An array of shortest path from source to target.  An\\n *     empty array if the target is not reachable from the source.\\n */\\nexport function shortest_path(ns, source, target) {\\n    // Represent the network of world servers as an undirected graph.\\n    const stack = new Array();\\n    const visit = new Set();\\n    stack.push(source);\\n    const directed = false;\\n    const graph = new Graph(directed);\\n    // Use breath-first search to navigate the network.\\n    while (stack.length > 0) {\\n        const s = stack.pop();\\n        // Have we visited the server s yet?\\n        if (visit.has(s)) {\\n            continue;\\n        }\\n        visit.add(s);\\n        // All neighbours of s, excluding the purchased servers.\\n        const neighbour = [...filter_pserv(ns, ns.scan(s))];\\n        stack.push(...neighbour);\\n        for (const t of neighbour) {\\n            // Have we visited the server t yet?\\n            if (visit.has(t)) {\\n                continue;\\n            }\\n            assert(graph.add_edge(s, t));\\n        }\\n    }\\n    // A shortest path from source to target.\\n    return graph.shortest_path(source, target);\\n}\\n\",\"filename\":\"/lib/network.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":10346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, program, script } from \\\"/lib/constant.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A class that holds all information about a player.\\n */\\nexport class Player {\\n    /**\\n     * The name of the home server of this player.\\n     */\\n    #home;\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n    /**\\n     * Programs that allow a player to open ports on a world server.\\n     * These are port openers.\\n     */\\n    #port_opener;\\n    /**\\n     * Programs necessary for visiting the network of world servers.\\n     * These are usuallly network programs.\\n     */\\n    #program;\\n    /**\\n     * The hack script of the player.  Assumed to be located on the player's\\n     * home server.\\n     */\\n    #script;\\n\\n    /**\\n     * Initialize a Player object.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#home = home;\\n        this.#ns = ns;\\n        this.#port_opener = Array.from(program);\\n        this.#program = [\\\"DeepscanV1.exe\\\", \\\"DeepscanV2.exe\\\", \\\"NUKE.exe\\\"];\\n        this.#script = script;\\n    }\\n\\n    /**\\n     * The current Hack stat of the player.\\n     */\\n    hacking_skill() {\\n        return this.#ns.getHackingLevel();\\n    }\\n\\n    /**\\n     * Whether the player has all programs to open all ports on any world\\n     * server.\\n     *\\n     * @return true if the player can open all ports on another server;\\n     *     false otherwise.\\n     */\\n    has_all_port_openers() {\\n        const limit = this.#port_opener.length;\\n        const nport = this.num_ports();\\n        return nport == limit;\\n    }\\n\\n    /**\\n     * Whether the player has all programs to visit all world servers and open\\n     * all ports on any world server.\\n     *\\n     * @return true if the player has all network programs and port openers;\\n     *     false otherwise.\\n     */\\n    has_all_programs() {\\n        let program = Array.from(this.#port_opener);\\n        program = program.concat(this.#program);\\n        assert(program.length > 0);\\n        for (const p of program) {\\n            if (!this.has_program(p)) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * Whether we have a given program.\\n     *\\n     * @param p A program we want to check.\\n     */\\n    has_program(p) {\\n        return this.#ns.fileExists(p, this.home());\\n    }\\n\\n    /**\\n     * The home server of the player.\\n     */\\n    home() {\\n        return this.#home;\\n    }\\n\\n    /**\\n     * The player's karma.  This is an Easter egg, buried in the source code\\n     * of the game.  Refer to this file:\\n     * https://github.com/danielyxie/bitburner/blob/dev/src/NetscriptFunctions/Extra.ts\\n     */\\n    karma() {\\n        return this.#ns.heart.break();\\n    }\\n\\n    /**\\n     * The amount of money available to this player.\\n     */\\n    money() {\\n        return this.#ns.getServerMoneyAvailable(this.home());\\n    }\\n\\n    /**\\n     * Determine the number of ports a player can currently open on servers in\\n     * the game world.  This depends on whether the player has the necessary\\n     * hacking programs on the home server.\\n     */\\n    num_ports() {\\n        // These are programs that can be created after satisfying certain\\n        // conditions.\\n        let program = Array.from(this.#port_opener);\\n        // Determine the number of ports we can open on other servers.\\n        program = program.filter(p => this.#ns.fileExists(p, this.home()));\\n        return program.length;\\n    }\\n\\n    /**\\n     * All purchased servers of this player.\\n     */\\n    pserv() {\\n        return this.#ns.getPurchasedServers();\\n    }\\n\\n    /**\\n     * The name of the hacking script of the player.\\n     */\\n    script() {\\n        return this.#script;\\n    }\\n}\\n\",\"filename\":\"/lib/player.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":10347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, script } from \\\"/lib/constant.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A class that holds information specific to purchased servers.\\n */\\nexport class PurchasedServer {\\n    /**\\n     * The player's home server.\\n     */\\n    #home;\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n    /**\\n     * The player's main hacking script.\\n     */\\n    #script;\\n    /**\\n     * Possible amount of RAM (GB) for a purchased server.\\n     */\\n    #valid_ram;\\n\\n    /**\\n     * Create an object to represent a purchased server.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    constructor(ns) {\\n        this.#home = home;\\n        this.#ns = ns;\\n        this.#script = script;\\n        this.#valid_ram = [\\n            32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536,\\n            131072, 262144, 524288, 1048576\\n        ];\\n    }\\n\\n    /**\\n     * The cost of buying a server with the given amount of RAM (GB).\\n     *\\n     * @param ram The amount of RAM (GB) to buy with this purchased server.\\n     *     RAM is assumed to be given as a power of 2.\\n     */\\n    cost(ram) {\\n        assert(this.is_valid_ram(ram));\\n        return this.#ns.getPurchasedServerCost(ram);\\n    }\\n\\n    /**\\n     * Choose the default amount of RAM (in GB) for a new purchased server.\\n     * The chosen amount of RAM should allow the purchased server to run our\\n     * hacking script using at least 2 threads.\\n     */\\n    default_ram() {\\n        const script_ram = this.#ns.getScriptRam(\\n            this.#script, this.#home\\n        );\\n        let i = 0;\\n        while (script_ram > this.#valid_ram[i]) {\\n            i++;\\n        }\\n        assert((i + 1) <= this.#valid_ram.length);\\n        return this.#valid_ram[i + 1];\\n    }\\n\\n    /**\\n     * Whether the given amount of RAM (GB) is valid for a purchased server.\\n     *\\n     * @param ram The amount of RAM in GB.  Must be a power of 2.  Lowest is\\n     *     2GB.  Will round down to the nearest whole number.\\n     * @return true if the given amount of RAM is valid for a purchased server;\\n     *     false otherwise.\\n     */\\n    is_valid_ram(ram) {\\n        const n = Math.floor(ram);\\n        return this.#valid_ram.includes(n);\\n    }\\n\\n    /**\\n     * Delete all purchased servers.  This would also kill all scripts running\\n     * on each purchased server.\\n     */\\n    kill_all() {\\n        for (const server of this.#ns.getPurchasedServers()) {\\n            // Kill all scripts running on a purchased server.\\n            this.#ns.killall(server);\\n            // Delete the purchased server.\\n            this.#ns.deleteServer(server);\\n        }\\n    }\\n\\n    /**\\n     * The maximum number of purchased servers that can be bought.\\n     */\\n    limit() {\\n        return this.#ns.getPurchasedServerLimit();\\n    }\\n\\n    /**\\n     * Purchase a new server with the given hostname and amount of RAM (GB).\\n     *\\n     * @param hostname The hostname of the new purchased server.  If a player\\n     *     already has a purchased server with the given hostname, append a\\n     *     numeric value to the hostname.\\n     * @param ram The amount of RAM (GB) of the purchased server.\\n     * @return The hostname of the newly purchased server.\\n     */\\n    purchase(hostname, ram) {\\n        return this.#ns.purchaseServer(hostname, ram);\\n    }\\n\\n    /**\\n     * The possible amount of RAM a purchased server can have.  According to\\n     * this page\\n     *\\n     * https://github.com/danielyxie/bitburner/blob/dev/markdown/bitburner.ns.getpurchasedservercost.md\\n     *\\n     * the highest amount of RAM for a purchased server is 1048576.\\n     */\\n    valid_ram() {\\n        return this.#valid_ram;\\n    }\\n}\\n\",\"filename\":\"/lib/pserv.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":9.25,\"server\":\"home\",\"moduleSequenceNumber\":10348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"deleteServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerLimit\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { home, script } from \\\"/lib/constant.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A server class that holds all information about a server, whether it be\\n * a purchased server or a server found on the network in the game world.\\n */\\nexport class Server {\\n    /**\\n     * The amount of Hack stat required to hack this server.\\n     */\\n    #hacking_skill;\\n    /**\\n     * The player's home server.\\n     */\\n    #home;\\n    /**\\n     * The hostname of this server.\\n     */\\n    #hostname;\\n    /**\\n     * The maximum amount of money this server can hold.\\n     */\\n    #money_max;\\n    /**\\n     * How many ports must be opened on this server in order to run\\n     * NUKE.exe on it.\\n     */\\n    #n_ports_required;\\n    /**\\n     * The Netscript API.\\n     */\\n    #ns;\\n    /**\\n     * Reserve this amount of RAM.  We want the server to always have at least\\n     * this amount of RAM available.  The reserve RAM is important especially\\n     * if this is the player's home server.  We want to have a minimum amount\\n     * of RAM on the home server for various purposes.\\n     */\\n    #ram_reserve;\\n    /**\\n     * The player's main hacking script.\\n     */\\n    #script;\\n    /**\\n     * The minimum security level to which this server can be weaked.\\n     */\\n    #security_min;\\n\\n    /**\\n     * Create a server object with the given hostname.\\n     *\\n     * @param ns The Netscript API.\\n     * @param hostname The hostname of a server.  The server must exist in the\\n     *     game world and can be either a purchased server or a server found on\\n     *     the network in the game world.\\n     */\\n    constructor(ns, hostname) {\\n        assert(hostname.length > 0);\\n        const server = ns.getServer(hostname);\\n        this.#hacking_skill = server.requiredHackingSkill;\\n        this.#home = home;\\n        this.#hostname = server.hostname;\\n        this.#money_max = server.moneyMax;\\n        this.#n_ports_required = server.numOpenPortsRequired;\\n        this.#ns = ns;\\n        this.#script = script;\\n        this.#security_min = server.minDifficulty;\\n        // By default, we do not reserve any RAM.  However, if this is the\\n        // player's home server, then reserve some RAM.\\n        this.#ram_reserve = 0;\\n        if (this.hostname() == this.#home) {\\n            // By default, we reserve 50GB RAM on the player's home server.  If\\n            // the home server has less than this amount of RAM, we do not\\n            // reserve any RAM at all.\\n            const default_ram = 50;\\n            this.#ram_reserve = default_ram;\\n            // Reserve a higher amount of RAM, depending on the maximum RAM on\\n            // the home server.\\n            if (this.ram_max() >= 1024) {\\n                this.#ram_reserve = 512;\\n            } else if (this.ram_max() >= 512) {\\n                this.#ram_reserve = 256;\\n            } else if (this.ram_max() >= 256) {\\n                this.#ram_reserve = 128;\\n            } else if (this.ram_max() < default_ram) {\\n                this.#ram_reserve = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * How much RAM (in GB) is available on this server.\\n     */\\n    available_ram() {\\n        const ram = this.ram_max() - this.#ns.getServerUsedRam(this.hostname());\\n        return ram;\\n    }\\n\\n    /**\\n     * Whether the server has enough RAM to run a given script, using at\\n     * least one thread.  We ignore any amount of RAM that has been reserved,\\n     * using all available RAM to help us make a decision.\\n     *\\n     * @param script We want to run this script on this server.\\n     * @return true if the given script can be run on this server;\\n     *     false otherwise.\\n     */\\n    can_run_script(script) {\\n        const CAN_RUN = true;\\n        const CANNOT_RUN = !CAN_RUN;\\n        const script_ram = this.#ns.getScriptRam(script, this.#home);\\n        const server_ram = this.available_ram();\\n        if (server_ram < 1) {\\n            return CANNOT_RUN;\\n        }\\n        const nthread = Math.floor(server_ram / script_ram);\\n        if (nthread < 1) {\\n            return CANNOT_RUN;\\n        }\\n        return CAN_RUN;\\n    }\\n\\n    /**\\n     * Copy our hack script over to this server.  Run the hack script on this\\n     * server.\\n     *\\n     * @param target We run our hack script against this target server.\\n     * @return true if our hack script is running on the server using at least\\n     *     one thread; false otherwise, e.g. no free RAM on the server or we\\n     *     do not have root access on either servers.\\n     */\\n    async deploy(target) {\\n        assert(target.length > 0);\\n        const SUCCESS = true;\\n        const FAILURE = !SUCCESS;\\n        const targ = this.#ns.getServer(target);\\n        // No root access on either servers.\\n        if (!this.has_root_access()) {\\n            this.#ns.tprint(\\\"No root access on \\\" + this.hostname());\\n            return FAILURE;\\n        }\\n        if (!targ.hasAdminRights) {\\n            this.#ns.tprint(\\\"No root access on \\\" + targ.hostname);\\n            return FAILURE;\\n        }\\n        // Hack script not found on our home server.\\n        if (!this.#ns.fileExists(this.#script, this.#home)) {\\n            this.#ns.tprint(\\\"Hack script not found on server \\\" + this.#home);\\n            return FAILURE;\\n        }\\n        // No free RAM on server to run our hack script.\\n        const nthread = this.num_threads(this.#script);\\n        if (nthread < 1) {\\n            this.#ns.tprint(\\\"No free RAM on server \\\" + this.hostname());\\n            return FAILURE;\\n        }\\n        // Copy our script over to this server.  Use the server to hack the\\n        // target.\\n        await this.#ns.scp(this.#script, this.hostname(), this.#home);\\n        this.#ns.exec(\\n            this.#script, this.hostname(), nthread, targ.hostname\\n        );\\n        return SUCCESS;\\n    }\\n\\n    /**\\n     * Try to gain root access on this server.\\n     *\\n     * @return true if the player has root access to this server;\\n     *     false if root access cannot be obtained.\\n     */\\n    async gain_root_access() {\\n        // Do we already have root access to this server?\\n        if (this.has_root_access()) {\\n            return true;\\n        }\\n        // Try to open all required ports and nuke the server.\\n        try { await this.#ns.brutessh(this.hostname()); } catch { }\\n        try { await this.#ns.ftpcrack(this.hostname()); } catch { }\\n        try { await this.#ns.httpworm(this.hostname()); } catch { }\\n        try { await this.#ns.relaysmtp(this.hostname()); } catch { }\\n        try { await this.#ns.sqlinject(this.hostname()); } catch { }\\n        try {\\n            await this.#ns.nuke(this.hostname());\\n            return true;\\n        } catch {\\n            assert(!this.has_root_access());\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * Increase the amount of money available on this server.\\n     *\\n     */\\n    async grow() {\\n        await this.#ns.grow(this.hostname());\\n    }\\n\\n    /**\\n     * Steal money from this server.\\n     *\\n     */\\n    async hack() {\\n        await this.#ns.hack(this.hostname());\\n    }\\n\\n    /**\\n     * The amount of Hack stat required to hack this server.\\n     */\\n    hacking_skill() {\\n        return this.#hacking_skill;\\n    }\\n\\n    /**\\n     * Whether we have root access to this server.\\n     *\\n     * @return true if we have root access to this server; false otherwise.\\n     */\\n    has_root_access() {\\n        return this.#ns.hasRootAccess(this.hostname());\\n    }\\n\\n    /**\\n     * The hostname of this server.\\n     */\\n    hostname() {\\n        return this.#hostname;\\n    }\\n\\n    /**\\n     * Determine whether the server is bankrupt, i.e. it can't hold any money.\\n     * This is not the same as there being zero money currently on the server.\\n     * The server can have zero money currently available, but we can grow the\\n     * server.  The server is bankrupt if the maximum amount of money it\\n     * can hold is zero.\\n     *\\n     * @return true if the server is bankrupt; false otherwise.\\n     */\\n    is_bankrupt() {\\n        const max_money = Math.floor(this.money_max());\\n        return 0 == max_money;\\n    }\\n\\n    /**\\n     * Whether this server is currently running a script.\\n     *\\n     * @param script Check to see if this script is currently running on the\\n     *     server.\\n     * @return true if the given script is running on the server;\\n     *     false otherwise.\\n     */\\n    is_running_script(script) {\\n        return this.#ns.scriptRunning(script, this.hostname());\\n    }\\n\\n    /**\\n     * The amount of money currently available on the server.\\n     *\\n     */\\n    money_available() {\\n        return this.#ns.getServerMoneyAvailable(this.hostname());\\n    }\\n\\n    /**\\n     * The maximum amount of money this server can hold.\\n     */\\n    money_max() {\\n        return this.#money_max;\\n    }\\n\\n    /**\\n     * The number of ports that must be opened in order to hack this server.\\n     */\\n    num_ports_required() {\\n        return this.#n_ports_required;\\n    }\\n\\n    /**\\n     * Determine how many threads we can run a given script on this server.\\n     * This function takes care not to use all available RAM on the player's\\n     * home server.  If this is the player's home server, the function reserves\\n     * some amount of RAM on the home server and use the remaining available\\n     * RAM to calculate the number of threads to devote to the given script.\\n     *\\n     * @param script We want to run this script on the server.  The script must\\n     *     exist on our home server.\\n     * @return The number of threads that can be used to run the given script\\n     *     on this server.  Return 0 if the amount of RAM to reserve is higher\\n     *     than the available RAM.\\n     */\\n    num_threads(script) {\\n        const script_ram = this.#ns.getScriptRam(script, this.#home);\\n        const server_ram = this.available_ram() - this.#ram_reserve;\\n        if (server_ram < 1) {\\n            return 0;\\n        }\\n        const nthread = Math.floor(server_ram / script_ram);\\n        return nthread;\\n    }\\n\\n    /**\\n     * The maximum amount of RAM (GB) of this server.\\n     */\\n    ram_max() {\\n        const serv = this.#ns.getServer(this.hostname());\\n        return serv.maxRam;\\n    }\\n\\n    /**\\n     * The current security level of this server.\\n     *\\n     * @param ns The Netscript API.\\n     */\\n    security_level() {\\n        return this.#ns.getServerSecurityLevel(this.hostname());\\n    }\\n\\n    /**\\n     * The minimum security level to which this server can be weakened.\\n     */\\n    security_min() {\\n        return this.#security_min;\\n    }\\n\\n    /**\\n     * The number of threads to use for each instance of a script.  We want to\\n     * run various instances of a script, each instance uses a certain number\\n     * of threads.  Given the number of instances to run, we want to know how\\n     * many threads each instance can use.\\n     *\\n     * @param script The script to run on this server.\\n     * @param n We want to run this many instances of the given script.\\n     *     Must be a positive whole number.\\n     * @return The number of threads for each instance of the script.\\n     *     Return 0 if we cannot run any scripts on this server.\\n     */\\n    threads_per_instance(script, n) {\\n        // Sanity check.\\n        const ninstance = Math.floor(n);\\n        assert(ninstance > 0);\\n        const nthread = this.num_threads(script);\\n        const nthread_per_instance = Math.floor(nthread / ninstance);\\n        return nthread_per_instance;\\n    }\\n\\n    /**\\n     * Weaken the security of this server.\\n     *\\n     */\\n    async weaken() {\\n        await this.#ns.weaken(this.hostname());\\n    }\\n}\\n\",\"filename\":\"/lib/server.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":7.7,\"server\":\"home\",\"moduleSequenceNumber\":10349,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/**\\n * A class for handling time.\\n */\\nexport class Time {\\n    /**\\n     * Initialize a time object.\\n     */\\n    constructor() {\\n        // There isn't anything we need to do here.\\n    }\\n\\n    /**\\n     * One millisecond.\\n     */\\n    millisecond() {\\n        return 1;\\n    }\\n\\n    /**\\n     * The number of milliseconds in one minute.\\n     */\\n    minute() {\\n        return 60 * this.second();\\n    }\\n\\n    /**\\n     * The number of milliseconds in one second.\\n     */\\n    second() {\\n        return 1000 * this.millisecond();\\n    }\\n}\\n\",\"filename\":\"/lib/time.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":10350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n// Miscellaneous helper functions.\\n\\nimport { home, program } from \\\"/lib/constant.js\\\";\\n\\n/**\\n * A function for assertion.\\n *\\n * @param cond Assert that this condition is true.\\n * @return Throw an assertion error if the given condition is false.\\n */\\nexport function assert(cond) {\\n    if (!cond) {\\n        throw new Error(\\\"Assertion failed.\\\");\\n    }\\n}\\n\\n/**\\n * Determine the best server to hack.  The definition of \\\"best\\\" is subjective.\\n * However, at the moment the \\\"best\\\" server is the one that requires the\\n * highest hacking skill.\\n *\\n * @param ns The Netscript API.\\n * @param candidate Choose from among the servers in this array.\\n * @return The best server to hack.\\n */\\nexport function choose_best_server(ns, candidate) {\\n    assert(candidate.length > 0);\\n    let best = ns.getServer(candidate[0]);\\n    for (const s of candidate) {\\n        const serv = ns.getServer(s);\\n        if (best.requiredHackingSkill < serv.requiredHackingSkill) {\\n            best = serv;\\n        }\\n    }\\n    return best.hostname;\\n}\\n\\n/**\\n * Determine a bunch of servers in the game world to hack.  A target server is\\n * chosen based on these criteria:\\n *\\n * (1) We meet the hacking skill requirement of the server.\\n * (2) We can open all ports required to gain root access to the server.\\n *\\n * @param ns The Netscript API.\\n * @param candidate Use this array to search for targets to hack.\\n * @return An array of target servers.\\n */\\nexport function choose_targets(ns, candidate) {\\n    // Sanity check.\\n    assert(candidate.length > 0);\\n    // How many ports can we open?\\n    const port_opener = program.filter(p => ns.fileExists(p, home));\\n    const nport = port_opener.length;\\n    // Find a bunch of target servers to hack.\\n    const target = new Array();\\n    for (const s of candidate) {\\n        const server = ns.getServer(s);\\n        // Do we have the minimum hacking skill required?\\n        if (ns.getHackingLevel() < server.requiredHackingSkill) {\\n            continue;\\n        }\\n        // Can we open all required ports?\\n        if (server.numOpenPortsRequired > nport) {\\n            continue;\\n        }\\n        // We have found a target server.\\n        target.push(s);\\n    }\\n    return target;\\n}\\n\\n/**\\n * Remove bankrupt servers from a given array of servers.  A server is bankrupt\\n * if the maximum amount of money it can hold is zero.\\n *\\n * @param ns The Netscript API.\\n * @param candidate An array of servers to filter.\\n * @return An array of servers, each of which is not bankrupt.\\n */\\nexport function filter_bankrupt_servers(ns, candidate) {\\n    assert(candidate.length > 0);\\n    return candidate.filter(s => !is_bankrupt(ns, s));\\n}\\n\\n/**\\n * Exclude the purchased servers.\\n *\\n * @param ns The Netscript API.\\n * @param server An array of server names.\\n * @return An array of servers, but minus the purchased servers.\\n */\\nexport function filter_pserv(ns, server) {\\n    const pserv = ns.getPurchasedServers();\\n    const serv = Array.from(server);\\n    return serv.filter(s => !pserv.includes(s));\\n}\\n\\n/**\\n * Whether a server is bankrupt.  A server is bankrupt if the maximum amount\\n * of money it can hold is zero.\\n *\\n * @param ns The Netscript API.\\n * @param s Test this server for bankruptcy.\\n * @return true if the server is bankrupt; false otherwise.\\n */\\nexport function is_bankrupt(ns, s) {\\n    const server = ns.getServer(s);\\n    return 0 == server.moneyMax;\\n}\\n\",\"filename\":\"/lib/util.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6,\"server\":\"home\",\"moduleSequenceNumber\":10351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport {\\n    log_cct_failure, matrix_to_string, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { Graph } from \\\"/lib/network.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Whether an undirected graph is bipartite.  Do not assume the graph is\\n * connected, i.e. each node is reachable from any other node.\\n *\\n * @param n The number of nodes in the graph.  Must be positive.\\n * @param edge An array of edges of the graph.  Each array element is an\\n *     edge of the form [u, v], where u and v are nodes of the graph.\\n * @return An array having n elements.  If i is an index of the array a,\\n *     then a[i] represents the colour of node i in the graph, assuming\\n *     the graph to have a 2-colouring.  In case the graph is not\\n *     bipartite, then return an empty array.\\n */\\nfunction bipartite(n, edge) {\\n    assert(n > 0);\\n    // In Bitburner v1.7.0, the game does not accept an empty array as [].\\n    // The empty array must be formatted as a string representation.\\n    const empty_array = \\\"[]\\\";\\n    // The graph must have at least one edge.  A graph with nodes only and\\n    // no edges is not bipartite.\\n    if (0 == edge.length) {\\n        return empty_array;\\n    }\\n    // Use breath-first search to colour each node of the graph.\\n    const graph = to_graph(n, edge);\\n    let colour = new Array(n).fill(white());\\n    let v = choose_white_node(colour);\\n    // All root nodes of trees.  If the graph is disconnected, then it has\\n    // a number of subgraphs each of which can be considered a tree by\\n    // means of breath-first search.\\n    const root = new Array();\\n    // Colour all nodes of the graph.\\n    while (v >= 0) {\\n        root.push(v);\\n        const col = colouring(graph, v);\\n        if (0 == col.length) {\\n            return empty_array;\\n        }\\n        colour = update_colouring(colour, col);\\n        v = choose_white_node(colour);\\n    }\\n    // Determine whether the graph has a 2-colouring.\\n    for (const r of root) {\\n        if (!is_bipartite(graph, r, colour)) {\\n            return empty_array;\\n        }\\n    }\\n    return colour;\\n}\\n\\n/**\\n * An integer value that represents the colour blue.\\n */\\nfunction blue() {\\n    return 0;\\n}\\n\\n/**\\n * Choose a white node from a graph.\\n *\\n * @param colour A colouring of the nodes of a graph, where colour[i]\\n *     represents the colour of node i.\\n * @return A node that is white.  Return -1 if each node has been coloured.\\n */\\nfunction choose_white_node(colour) {\\n    assert(colour.length > 0);\\n    for (let i = 0; i < colour.length; i++) {\\n        if (white() == colour[i]) {\\n            return i;\\n        }\\n    }\\n    return -1;\\n}\\n\\n/**\\n * Attempt to colour a graph by using 2 colours.  Each node is coloured such\\n * that the endpoints of an edge have different colours.\\n *\\n * @param graph We want to colour this graph.\\n * @param root Start the colouring from this node.\\n * @return An array a where the element a[i] represents the colour of node i\\n *     in the graph.  An empty array if the graph cannot be coloured with the\\n *     given colours such that the endpoints of each edge have different\\n *     colours.  Even if the returned array is not empty, we must still test\\n *     to see whether the graph has a 2-colouring.\\n */\\nfunction colouring(graph, root) {\\n    // colour[i] := the colour of node i in the graph.\\n    const n = graph.nodes().length;\\n    const colour = new Array(n).fill(white());\\n    // Colour the root node.\\n    assert(graph.has_node(root));\\n    const stack = new Array();\\n    stack.push(root);\\n    const visit = new Set();\\n    visit.add(root);\\n    colour[root] = blue();\\n    // Use breath-first search to colour each node.  We do not assume the graph\\n    // to be connected.\\n    while (stack.length > 0) {\\n        const u = stack.pop();\\n        for (const v of graph.neighbour(u)) {\\n            if (visit.has(v)) {\\n                continue;\\n            }\\n            // Colour the neighbours of u.\\n            visit.add(v);\\n            stack.push(v);\\n            if (blue() == colour[u]) {\\n                colour[v] = red();\\n                continue;\\n            }\\n            assert(red() == colour[u]);\\n            colour[v] = blue();\\n            // Determine whether v is connected to any node of the same colour.\\n            for (const w of graph.neighbour(v)) {\\n                // The graph is not bipartite because v is neighbour with a\\n                // node that has the same colour.\\n                if (colour[v] == colour[w]) {\\n                    return [];\\n                }\\n            }\\n        }\\n    }\\n    return colour;\\n}\\n\\n/**\\n * Whether a graph is bipartite.\\n *\\n * @param graph Check this graph to see whether it is bipartite.\\n * @param root Start our breath-first search from this node.\\n * @param colour A colouring of the nodes of the graph.\\n * @return true if the graph is bipartite; false otherwise.\\n */\\nfunction is_bipartite(graph, root, colour) {\\n    const BIPARTITE = true;\\n    const NOT_BIPARTITE = !BIPARTITE;\\n    // Mark the root node as visited.\\n    const stack = new Array();\\n    const visit = new Set();\\n    stack.push(root);\\n    visit.add(root);\\n    // Use breath-first search to help us determine whether the\\n    // graph has a 2-colouring.\\n    while (stack.length > 0) {\\n        const u = stack.pop();\\n        assert(colour[u] >= 0);\\n        for (const v of graph.neighbour(u)) {\\n            if (colour[u] == colour[v]) {\\n                return NOT_BIPARTITE;\\n            }\\n            if (visit.has(v)) {\\n                continue;\\n            }\\n            stack.push(v);\\n            visit.add(v);\\n        }\\n    }\\n    return BIPARTITE;\\n}\\n\\n/**\\n * An integer value that represents the colour red.\\n */\\nfunction red() {\\n    return 1;\\n}\\n\\n/**\\n * Construct an undirected graph given the number of nodes and an edge set.\\n *\\n * @param n The number of nodes in the graph.\\n * @param edge An array of edges of the graph.  Each array element is an\\n *     edge of the form [u, v], where u and v are nodes of the graph.\\n * @return An undirected graph having n nodes and the given edge set.\\n */\\nfunction to_graph(n, edge) {\\n    assert(n > 0);\\n    assert(edge.length > 0);\\n    const array = new MyArray();\\n    const node = new Set(array.sequence(n));\\n    const directed = false;\\n    const graph = new Graph(directed);\\n    // First, add the edges.\\n    for (let i = 0; i < edge.length; i++) {\\n        const [u, v] = edge[i];\\n        graph.add_edge(u, v);\\n        node.delete(u);\\n        node.delete(v);\\n    }\\n    // Add any nodes not listed in the edge set.\\n    for (const v of node) {\\n        assert(graph.add_node(v));\\n    }\\n    assert(n == graph.nodes().length);\\n    return graph;\\n}\\n\\n/**\\n * Update the colouring array.\\n *\\n * @param prev_colour The current colouring of the nodes of a graph.\\n * @param new_colour The new colouring of the nodes.\\n * @return An array representing the updated colouring.\\n */\\nfunction update_colouring(prev_colour, new_colour) {\\n    assert(prev_colour.length > 0);\\n    assert(prev_colour.length == new_colour.length);\\n    const colour = Array.from(prev_colour);\\n    for (let i = 0; i < prev_colour.length; i++) {\\n        // Find a white node.\\n        if (white() != prev_colour[i]) {\\n            continue;\\n        }\\n        if (white() == new_colour[i]) {\\n            continue;\\n        }\\n        // Previously node i was white, but now has been coloured.\\n        assert(white() == prev_colour[i]);\\n        assert(white() != new_colour[i]);\\n        colour[i] = new_colour[i];\\n    }\\n    return colour;\\n}\\n\\n/**\\n * An integer value that represents the colour white.\\n */\\nfunction white() {\\n    return -1;\\n}\\n\\n/**\\n * Proper 2-Coloring of a Graph: You are given data, representing a graph.\\n * Note that \\\"graph\\\", as used here, refers to the field of graph theory and\\n * has no relation to statistics or plotting.  The first element of the data\\n * represents the number of vertices in the graph.  Each vertex is a unique\\n * number between 0 and data[0] - 1.  The next element of the data represents\\n * the edges of the graph.  Two vertices u, v in a graph are said to be\\n * adjacent if there exists an edge [u, v].  Note that an edge [u, v] is the\\n * same as an edge [v, u], as order does not matter.  You must construct a\\n * 2-coloring of the graph, meaning that you have to assign each vertex in the\\n * graph a \\\"color\\\", either 0 or 1, such that no two adjacent vertices have the\\n * same color.  Submit your answer in the form of an array, where element i\\n * represents the color of vertex i.  If it is impossible to construct a\\n * 2-coloring of the given graph, submit an empty array.\\n *\\n * This problem is equivalent to determining whether a graph is bipartite.\\n * From the problem description, we only need to deal with undirected graphs.\\n *\\n * Usage: run bipartite.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [n, edge] = ns.codingcontract.getData(cct, host);\\n    const colour = bipartite(n, edge);\\n    const result = ns.codingcontract.attempt(\\n        colour, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/bipartite.txt\\\";\\n        const data = \\\"[\\\" + n + \\\", \\\" + matrix_to_string(edge) + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/bipartite.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/15d70cdf-420e-4c8d-9e40-adcc6c9db302\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/9d230568-9d64-442b-a2cd-141a1e61952f\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/35bf6f1f-2a08-4863-a363-09953df8ec0a\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/3c8fa224-5df3-420a-80de-333ca69c8810\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2d8f5287-9160-44f9-9ca0-f5c008ab774f\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/bd208acf-3a6e-4dd3-9b17-e323b3f379d7\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/f24784ab-26a4-4179-90b8-0ec911972653\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/f91522f6-34f9-41f7-8a18-b0660b36cb92\",\"moduleSequenceNumber\":463},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/2498e0a5-acfc-4821-b2a1-516b73a69e85\",\"moduleSequenceNumber\":462},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/70f81617-4cb9-4e73-86b7-d8992374bb1b\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/52b4e66b-481f-4567-8b76-bb33e8b542f3\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/bff8e8a2-7c51-4fac-bd85-ff7a0813a380\",\"moduleSequenceNumber\":459},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/bce52604-9690-4657-8a18-6e1616aef00b\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f50f47fd-ae3f-4eaa-9bd2-2666cdde9dad\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/96d952b4-63ac-49fc-9e0d-2a0561bfd8d2\",\"moduleSequenceNumber\":458},{\"filename\":\"/cct/bipartite.js\",\"url\":\"blob:https://danielyxie.github.io/98e42371-bbf2-4f3e-908a-c8e0b47a49a3\",\"moduleSequenceNumber\":2245}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    english_alphabet, char_index, is_alphabetic, log_cct_failure, print_error,\\n    print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The Caesar cipher on the given plaintext and left shift length k.  Suppose\\n * letters of the plaintext are uppercase characters in the English alphabet.\\n * Given a left shift of k, each alphabetic character in the plaintext is\\n * substituted with an alphabetic character found by left shifting by k\\n * positions along the alphabet.  For example, using k := 3 we have the\\n * encryption:\\n *\\n * DEF -> ABC\\n * ABC -> XYZ\\n * CAT DOG. -> ZXQ ALD.\\n *\\n * As shown in the above examples, we wrap around the alphabet whenever\\n * necessary.  Furthermore, the substitution only applies to characters of the\\n * plaintext alphabet.  Punctuation, whitespace, and special characters are\\n * ignored.\\n *\\n * @param plaintext Encrypt this string using the Caesar cipher.  Cannot be\\n *     empty string.\\n * @param k The left shift length.  We shift to the left by this many\\n *     characters, taking into account rotation (wrap around).  Must be a\\n *     non-negative integer.\\n * @return The ciphertext corresponding to the plaintext, encrypted using the\\n *     Caesar cipher having a left shift of k positions.\\n */\\nfunction caesar(plaintext, k) {\\n    // Sanity checks.\\n    const ell = Math.floor(k);\\n    assert(plaintext.length > 0);\\n    assert(ell >= 0);\\n    // Encryption.\\n    const alphabet = english_alphabet();\\n    const n = alphabet.length;\\n    const ptxt = plaintext.toUpperCase();\\n    let ciphertext = \\\"\\\";\\n    for (let i = 0; i < ptxt.length; i++) {\\n        if (!is_alphabetic(ptxt[i])) {\\n            ciphertext += ptxt[i];\\n            continue;\\n        }\\n        // Index of the ciphertext character.\\n        let j = char_index(ptxt[i]) - ell;\\n        if (j < 0) {\\n            j = n + j;\\n        }\\n        ciphertext += alphabet[j];\\n    }\\n    return ciphertext;\\n}\\n\\n/**\\n * Encryption I: Caesar Cipher: Caesar cipher is one of the simplest encryption\\n * technique.  It is a type of substitution cipher in which each letter in the\\n * plaintext is replaced by a letter some fixed number of positions down the\\n * alphabet.  For example, with a left shift of 3, D would be replaced by A, E\\n * would become B, and A would become X (because of rotation).  You are given\\n * an array with two elements.  The first element is the plaintext, the second\\n * element is the left shift value.  Return the ciphertext as uppercase string.\\n * Spaces remains the same.\\n *\\n * This is Ceasar cipher encryption, where the plaintext alphabet is the\\n * uppercase characters of the English alphabet.\\n *\\n * Usage: run caesar.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [plaintext, k] = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        caesar(plaintext, k), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/caesar.txt\\\";\\n        const data = \\\"[\\\" + plaintext + \\\", \\\" + k + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/caesar.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/59b05e0e-1c41-473f-90c6-3f185b581084\",\"moduleSequenceNumber\":8725},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/b771f903-e607-49eb-909d-b4b3008e7c54\",\"moduleSequenceNumber\":8739},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/6ceb46da-5eea-480d-9fee-606f9f43160c\",\"moduleSequenceNumber\":8725},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/769b86a9-cd8e-4d25-9f68-fbd58be1db32\",\"moduleSequenceNumber\":8739},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/3f4c5e1a-74c7-4490-afde-d2c8bb352565\",\"moduleSequenceNumber\":8725},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/0fddc0ec-98fc-49d9-9bc5-df802935e80d\",\"moduleSequenceNumber\":8723},{\"filename\":\"/cct/caesar.js\",\"url\":\"blob:https://danielyxie.github.io/dafe9334-417d-437d-b6a6-82c22a569088\",\"moduleSequenceNumber\":11056}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The number of unique paths from top-left to bottom-right in an m x n\\n * grid.  Consider the grid below.  The problem statement is ambiguous\\n * regarding what is considered the top-left corner and the bottom-right\\n * corner.  If we are moving from vertex to vertex, then position A in the\\n * grid is the top-left corner, B in the grid is the bottom-right corner,\\n * and our grid is 5 x 7.  This is a vertex-based grid.  If we are moving\\n * from square to square, then X in the grid is the top-left corner, Y is\\n * the bottom-right corner, and our grid is 4 x 6.  This square-based grid\\n * can be transformed into a vertex-based grid by treating each square as\\n * a vertex and the connection between two adjacent squares as an edge.\\n *\\n * A-o-o-o-o-o-o\\n * |X| | | | | |\\n * o-o-o-o-o-o-o\\n * | | | | | | |\\n * o-o-o-o-o-o-o\\n * | | | | | | |\\n * o-o-o-o-o-o-o\\n * | | | | | |Y|\\n * o-o-o-o-o-o-B\\n *\\n * Consider an r x c vertex-based grid, where r is the number of rows and\\n * c is the number of columns.  We want to calculate the number of unique\\n * paths from the top-left corner to the bottom-right corner.  At each\\n * vertex we are allowed to move either down or right.  Each path must have\\n * n = (r - 1) + (c - 1) = r + c - 2 segments, i.e. r - 1 downward segments\\n * and c - 1 rightward segments.  Choose k := r - 1 of the n segments to be\\n * downward segments.  The remaining n - k = c - 1 segments must be\\n * rightward segments.  The total number of unique paths is the combination\\n * number C(n, k), which is read as \\\"n choose k\\\" or as a k-combination of a\\n * set of n segments.  The combination number is also known as the\\n * binomial coefficient.\\n *\\n * @param n The total number of segments.\\n * @param k How many segments are downward segments.\\n * @return The combination number C(n, k).\\n */\\nfunction unique_paths(n, k) {\\n    // Sanity checks.\\n    assert(n >= 0);\\n    assert(k >= 0);\\n    // Edge cases.\\n    if ((0 == k) || (n == k)) {\\n        return 1;\\n    }\\n    if (k > n) {\\n        return 0;\\n    }\\n    // Use the recurrence relation\\n    //\\n    // C(n, k) = C(n - 1, k - 1) + C(n - 1, k)\\n    //\\n    // which can be read off Pascal's triangle.  Or use the more\\n    // efficient multiplicative rule\\n    //\\n    // C(n, k) = (n / k) * C(n-1, k-1)\\n    //\\n    // which can be directly translated to an iterative program.\\n    assert(k > 0);\\n    assert(k < n);\\n    // By symmetry, we have C(n, k) = C(n, n-k).\\n    const mink = Math.min(k, n - k);\\n    let result = 1;\\n    for (let i = 0; i < mink; i++) {\\n        // This line of code can result in a floating point number:\\n        //\\n        // result *= (n - 1) / (i + 1);\\n        //\\n        // because (n - 1) / (i + 1) is not necessarily an integer.\\n        // Safer to first calculate the product\\n        //\\n        // result * (n - i)\\n        result = (result * (n - i)) / (i + 1);\\n    }\\n    return result;\\n}\\n\\n/**\\n * Unique Paths in a Grid I: You are given an array with two numbers: [m, n].\\n * These numbers represent an m x n grid.  Assume you are initially positioned\\n * in the top-left corner of that grid and that you are trying to reach the\\n * bottom-right corner.  On each step, you may only move down or to the right.\\n * Determine how many unique paths there are from start to finish.\\n *\\n * See the function unique_paths() for more details.\\n *\\n * Usage: run grid.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [row, column] = ns.codingcontract.getData(cct, host);\\n    const k = column - 1;\\n    const n = (row - 1) + k;\\n    const result = ns.codingcontract.attempt(\\n        unique_paths(n, k), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/grid.txt\\\";\\n        const data = \\\"[\\\" + row + \\\", \\\" + column + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/grid.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/1dd2b17e-5ffb-4329-8362-ce985cc83b61\",\"moduleSequenceNumber\":4565},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/83b9cc51-aec7-4850-9c3a-6859324d8914\",\"moduleSequenceNumber\":4572},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/68ae7478-2c84-484e-8115-f68527076f1f\",\"moduleSequenceNumber\":4565},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/db1c64b0-f9b4-4457-b2bd-b1fee3d52828\",\"moduleSequenceNumber\":4572},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/aefe08e3-53ae-403c-b408-74c3a2897235\",\"moduleSequenceNumber\":4565},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/ce74d323-8d67-411e-b8cc-611d81437bab\",\"moduleSequenceNumber\":4564},{\"filename\":\"/cct/grid.js\",\"url\":\"blob:https://danielyxie.github.io/cb268533-0b82-43ce-9093-88d0dcbf076d\",\"moduleSequenceNumber\":5525}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, matrix_to_string, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Whether an obstacle is found at the coordinates (r, c).\\n *\\n * @param grid A grid of m x n squares.\\n * @param r, c A pair of coordinates in the grid.\\n * @return true if an obstacle is located at (r, c); false otherwise.\\n */\\nfunction is_obstacle(grid, r, c) {\\n    return 1 == grid[r][c];\\n}\\n\\n/**\\n * The number of unique paths from the top-left square to the bottom-right\\n * square in an m x n grid, while avoiding obstacles.  Consider the grid below.\\n *\\n * 00000\\n * 01000\\n * 00010\\n * 10000\\n *\\n * Interpret each number as a square.  The entire grid is made up of m x n\\n * squares.  We can occupy a square that has the symbol '0', whereas a square\\n * having the symbol '1' is interpreted as an obstacle that cannot be occupied.\\n * Starting from the top-left square, we can move either to the square\\n * immediately to the right or the square immediately below, but never to a\\n * square that has an obstacle.\\n *\\n * Use the following row-column coordinate system for the above grid.\\n *\\n *   0 1 2 3 4\\n * 0 0-0-0-0-0\\n *   | | | | |\\n * 1 0-1-0-0-0\\n *   | | | | |\\n * 2 0-0-0-1-0\\n *   | | | | |\\n * 3 1-0-0-0-0\\n *\\n * The obstacles are located at the coordinates a := (1, 1), b := (2, 3), and\\n * c := (3, 0).  Let A be the set of paths passing through obstacle a, let B be\\n * the set of paths passing through obstacle b, and let C be the set of paths\\n * passing through obstacle c.  Let P be the set of paths from (0, 0) to\\n * (3, 4).  The number of paths that avoid the obstacles is written as\\n *\\n * |P| = |X| - |A union B union C|\\n *\\n * where \\\"union\\\" refers to set union.  The number |A union B union C| can\\n * be calculated by using the principle of inclusion-exclusion.\\n *\\n * The problem can also be solved in a recursive manner.  Define p[i][j] as the\\n * number of paths starting from (0, 0), end at (i, j), and do not include any\\n * obstacles.  Since our movement is restricted to only right or down, we can\\n * reach (i, j) in either of two ways:\\n *\\n * (1) From (i-1, j) to (i, j).\\n * (2) From (i, j-1) to (i, j).\\n *\\n * Thus we have the recurrence relation\\n *\\n * p[i][j] := p[i-1][j] + p[i][j-1]\\n *\\n * where i >= 1 and j >= 1.  There are 3 other possibilities for the values of\\n * i and j.\\n *\\n * (1) If i = 0 and j >=1, then (0, j) can be reached from (0, j-1) so we have\\n *     p[0][j] = p[0][j-1].  There is only 1 path along the top-most row, but\\n *     this does not necessarily mean that p[0][j] = 1.  The reason is that any\\n *     square with coordinates (0, j) can be an obstacle.\\n * (2) If i >= 1 and j = 0, then (i, 0) is reached from (i-1, 0), hence\\n *     p[i][0] = p[i-1][0].  There is only 1 path along the left-most column,\\n *     but this does not mean we must have p[i][0] = 1.  The reason is that one\\n *     of the coordinates (i, 0) might be an obstacle.\\n * (3) If i = 0 and j = 0, then p[0][0] = 1 because the number of paths from\\n *     (0, 0) to itself is 1.\\n *\\n * The edge case is when (i, j) is an obstacle so we set p[i][j] = 0.\\n *\\n * @param grid A grid of m x n squares.\\n * @return The number of different paths from (0, 0) to (m-1, n-1) without\\n *     passing through any obstacles.\\n */\\nfunction unique_paths(grid) {\\n    // Sanity checks.\\n    const nrow = grid.length;\\n    const ncol = grid[0].length;\\n    assert(nrow > 0);\\n    assert(ncol > 0);\\n    // The table of path counts.\\n    const path = new Array();\\n    for (let i = 0; i < nrow; i++) {\\n        assert(ncol == grid[i].length);\\n        path.push(new Array(ncol));\\n    }\\n    // Start from (0, 0) and work our way to (m-1, n-1).\\n    for (let r = 0; r < nrow; r++) {\\n        for (let c = 0; c < ncol; c++) {\\n            // Is (r, c) an obstacle?\\n            if (is_obstacle(grid, r, c)) {\\n                path[r][c] = 0;\\n                continue;\\n            }\\n            // r = 0, c = 0\\n            if ((0 == r) && (0 == c)) {\\n                path[r][c] = 1;\\n                continue;\\n            }\\n            // r = 0, c >= 1\\n            if ((0 == r) && (c >= 1)) {\\n                path[r][c] = path[r][c - 1];\\n                continue;\\n            }\\n            // r >= 1, c = 0\\n            if ((r >= 1) && (0 == c)) {\\n                path[r][c] = path[r - 1][c];\\n                continue;\\n            }\\n            // A pair of coordinates not located along the top-most row or the\\n            // left-most column.\\n            // r >= 1, c >= 1\\n            assert(r > 0);\\n            assert(c > 0);\\n            path[r][c] = path[r - 1][c] + path[r][c - 1];\\n        }\\n    }\\n    return path[nrow - 1][ncol - 1];\\n}\\n\\n/**\\n * Unique Paths in a Grid II: You are given a 2-D array of numbers (array of\\n * arrays of numbers) representing a grid, i.e. a 2-D matrix.  The 2-D array\\n * contains 1s and 0s, where 1 represents an obstacle and 0 represents a free\\n * space.  Assume you are initially positioned in top-left square of that grid\\n * and that you are trying to reach the bottom-right square.  In each step, you\\n * may only move down or to the right.  Furthermore, you cannot move onto a\\n * square that has an obstacle.  Determine how many unique paths there are from\\n * start to finish.\\n *\\n * See the function unique_paths() for more details.\\n *\\n * Usage: run grid2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const grid = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        unique_paths(grid), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/grid2.txt\\\";\\n        const data = matrix_to_string(grid);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/grid2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/24239441-4637-4709-9cf6-66d39400118a\",\"moduleSequenceNumber\":1874},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/3251efcb-e502-47d7-be72-718278b8ff53\",\"moduleSequenceNumber\":1881},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b899031b-33b6-41f9-90d4-d03d34064b18\",\"moduleSequenceNumber\":1874},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/893ae18e-9c2c-40c2-9205-66d8cccb1188\",\"moduleSequenceNumber\":1881},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/d9936049-04ae-4a5a-bc01-c28c505cdbf6\",\"moduleSequenceNumber\":1874},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/a8f0eb08-56f8-4bff-a529-0d8b04f4ea17\",\"moduleSequenceNumber\":1873},{\"filename\":\"/cct/grid2.js\",\"url\":\"blob:https://danielyxie.github.io/455b22bd-c491-4037-a29c-69bd39cb876b\",\"moduleSequenceNumber\":2858}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, matrix_to_string, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { Graph } from \\\"/lib/network.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A boolean value meaning that we can move from one square to an adjacent\\n * square in a grid.\\n */\\nfunction can_move() {\\n    return true;\\n}\\n\\n/**\\n * A boolean value meaning that we are not allowed to move from one square to\\n * an adjacent square in a grid.\\n */\\nfunction cannot_move() {\\n    return false;\\n}\\n\\n/**\\n * Whether we can move one step down from our current position on a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step down; false otherwise.\\n */\\nfunction can_move_down(grid, r, c) {\\n    // Are we at the bottom-most edge of the grid?\\n    const lastidx = grid.length - 1;\\n    if (lastidx == r) {\\n        return cannot_move();\\n    }\\n    // Below us is an obstacle.\\n    assert(r >= 0);\\n    assert(r < lastidx);\\n    if (is_obstacle(grid, r + 1, c)) {\\n        return cannot_move();\\n    }\\n    // We can move one step down.\\n    return can_move();\\n}\\n\\n/**\\n * Whether we can move one step to the left from our current position on\\n * a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step to the left;\\n *     false otherwise.\\n */\\nfunction can_move_left(grid, r, c) {\\n    // Are we at the left-most edge of the grid?\\n    if (0 == c) {\\n        return cannot_move();\\n    }\\n    // To our left is an obstacle.\\n    assert(c > 0);\\n    assert(c < grid[r].length);\\n    if (is_obstacle(grid, r, c - 1)) {\\n        return cannot_move();\\n    }\\n    // We can move to the left.\\n    return can_move();\\n}\\n\\n/**\\n * Whether we can move one step to the right from our current position on\\n * a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step to the right;\\n *     false otherwise.\\n */\\nfunction can_move_right(grid, r, c) {\\n    const lastidx = grid[r].length - 1;\\n    // Are we at the right-most edge of the grid?\\n    if (lastidx == c) {\\n        return cannot_move();\\n    }\\n    // To our right is an obstacle.\\n    assert(c >= 0);\\n    assert(c < lastidx);\\n    if (is_obstacle(grid, r, c + 1)) {\\n        return cannot_move();\\n    }\\n    // We can move to the right.\\n    return can_move();\\n}\\n\\n/**\\n * Whether we can move one step up from our current position on a grid.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c Our current location (r, c) on the grid.\\n * @return true if we can move from (r, c) one step up; false otherwise.\\n */\\nfunction can_move_up(grid, r, c) {\\n    // Are we at the top-most edge of the grid?\\n    if (0 == r) {\\n        return cannot_move();\\n    }\\n    // Above us is an obstacle.\\n    assert(r > 0);\\n    assert(r < grid.length);\\n    if (is_obstacle(grid, r - 1, c)) {\\n        return cannot_move();\\n    }\\n    // We can move one step up.\\n    return can_move();\\n}\\n\\n/**\\n * Is the given location an obstacle?\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @param r, c A location on the grid.\\n * @return true if the given location is an obstacle on the grid;\\n *     false otherwise.\\n */\\nfunction is_obstacle(grid, r, c) {\\n    return (1 == grid[r][c]);\\n}\\n\\n/**\\n * Use the Cantor pairing function to assign a unique non-negative integer\\n * to a pair of coordinates.\\n *\\n * @param x, y A pair of coordinates (x, y), each number being a\\n *     non-negative integer.\\n * @return A unique non-negative interger associated with the coordinates\\n *     (x, y).\\n */\\nfunction pairing(x, y) {\\n    assert(x >= 0);\\n    assert(y >= 0);\\n    // One of a and b is even, while the other is odd.  The product ab is even,\\n    // therefore (1/2) * ab is an integer.\\n    const a = x + y;\\n    const b = a + 1;\\n    return (1 / 2) * (a * b) + y;\\n}\\n\\n/**\\n * A shortest path in a 2-D grid.  Consider the following grid\\n *\\n * 0010\\n * 0100\\n * 0000\\n *\\n * which can be represented as the following map.\\n *\\n *   0 1 2 3\\n * 0 0-0-1-0\\n *   | | | |\\n * 1 0-1-0-0\\n *   | | | |\\n * 2 0-0-0-0\\n *\\n * The top-left corner has the coordinates (0, 0) and the bottom-right\\n * corner has the coordinates (2, 3).  We have 2 obstacles at the\\n * coordinates (0, 2) and (1, 1).  Our task is to determine a shortest\\n * path from the top-left corner to the bottom-right corner, using as\\n * few moves as possible.  At any point on the map, we can move one step\\n * either up, down, left, or right but only to a pair of coordinates that\\n * represents 0.  We cannot move to a pair of coordinates that represents\\n * an obstacle.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @return A string representing a shortest path in the grid, from the\\n *     top-left corner to the bottom-right corner.  Each character of the\\n *     string is either U, D, L, R.  An empty string if there are no paths\\n *     from the top-left to the bottom-right.\\n */\\nfunction shortest_path(grid) {\\n    // Represent the grid as an undirected graph.  Find a shortest path from\\n    // the top-left corner to the bottom-right corner.\\n    const graph = to_graph(grid);\\n    const a = pairing(0, 0);\\n    const b = pairing(grid.length - 1, grid[0].length - 1);\\n    if (!graph.has_node(a) || !graph.has_node(b)) {\\n        return \\\"\\\";\\n    }\\n    const path = graph.shortest_path(a, b);\\n    return path_to_string(path);\\n}\\n\\n/**\\n * A representation of a grid as an unweighted, undirected graph.\\n *\\n * @param grid A map as an array of arrays.  This is essentially a binary\\n *     matrix, where each entry is either 0 or 1.\\n * @return An undirected graph representation of the grid.  Each vertex is\\n *     a non-negative integer n that is uniquely associated with a location\\n *     (r, c) on the grid.  We use the Cantor pairing function (and its\\n *     inverse) to map between n and (r, c).\\n */\\nfunction to_graph(grid) {\\n    assert(grid.length > 0);\\n    const directed = false;\\n    const ncol = grid[0].length;\\n    const graph = new Graph(directed);\\n    for (let r = 0; r < grid.length; r++) {\\n        assert(ncol == grid[r].length);\\n        for (let c = 0; c < ncol; c++) {\\n            // Our current location is u := (r, c).\\n            const u = pairing(r, c);\\n            // Is this an obstacle?\\n            if (is_obstacle(grid, r, c)) {\\n                continue;\\n            }\\n            // Can we move one step left?\\n            assert(0 == grid[r][c]);\\n            if (can_move_left(grid, r, c)) {\\n                const v = pairing(r, c - 1);\\n                graph.add_edge(u, v);\\n            }\\n            // Can we move one step right?\\n            if (can_move_right(grid, r, c)) {\\n                const v = pairing(r, c + 1);\\n                graph.add_edge(u, v);\\n            }\\n            // Can we move one step up?\\n            if (can_move_up(grid, r, c)) {\\n                const v = pairing(r - 1, c);\\n                graph.add_edge(u, v);\\n            }\\n            // Can we move one step down?\\n            if (can_move_down(grid, r, c)) {\\n                const v = pairing(r + 1, c);\\n                graph.add_edge(u, v);\\n            }\\n        }\\n    }\\n    return graph;\\n}\\n\\n/**\\n * Convert from a graph-theoretic path to a path given in terms of the\\n * following directions.\\n *\\n * * U := move up by one step.\\n * * D := move down by one step.\\n * * L := move left by one step.\\n * * R := move right by one step.\\n *\\n * @param gpath An array of nodes representing a path in a graph.\\n * @return A string comprised of the characters U, D, L, R to indicate\\n *     a path.  An empty string if gpath is an empty array.\\n */\\nfunction path_to_string(gpath) {\\n    // No shortest paths in the grid.\\n    if (0 == gpath.length) {\\n        return \\\"\\\";\\n    }\\n    // We have a shortest path in the grid.\\n    const path = new Array();\\n    let [rold, cold] = unpairing(gpath[0]);\\n    for (const v of gpath.slice(1, gpath.length)) {\\n        const [r, c] = unpairing(v);\\n        // Are we moving up?\\n        if (rold - 1 == r) {\\n            path.push(\\\"U\\\");\\n        }\\n        // Are we moving down?\\n        if (rold + 1 == r) {\\n            path.push(\\\"D\\\");\\n        }\\n        // Are we moving left?\\n        if (cold - 1 == c) {\\n            path.push(\\\"L\\\");\\n        }\\n        // Are we moving right?\\n        if (cold + 1 == c) {\\n            path.push(\\\"R\\\");\\n        }\\n        [rold, cold] = [r, c];\\n    }\\n    return path.join(\\\"\\\");\\n}\\n\\n/**\\n * Use the inverse of the Cantor pairing function to break a non-negative\\n * integer into a pair of coordinates (x, y).\\n *\\n * @param z A non-negative integer.\\n * @return A pair of coordinates (x, y) that is uniquely associated with z.\\n */\\nfunction unpairing(z) {\\n    assert(z >= 0);\\n    const numer = Math.sqrt(8 * z + 1) - 1;\\n    const w = Math.floor(numer / 2);\\n    const t = ((w ** 2) + w) / 2;\\n    const y = z - t;\\n    const x = w - y;\\n    return [x, y];\\n}\\n\\n/**\\n * Shortest Path in a Grid: You are given a 2-D array of numbers (array of\\n * arrays) representing a grid, i.e. a 2-D matrix.  The 2-D array contains 1s\\n * and 0s, where 1 represents an obstacle and 0 represents a free space.\\n * Assume you are initially positioned at the top-left square of the grid and\\n * you are trying to reach the bottom-right square.  In each step, you may move\\n * up, down, left, or right.  Furthermore, you cannot move onto spaces that\\n * have obstacles.  Determine a shortest path from start to finish, if one\\n * exists.  The answer should be given as a string of UDLR characters,\\n * indicating the moves along the path.\\n *\\n * NOTE: If there are multiple equally short paths, any of them is accepted as\\n * answer.  If there are no paths, the answer should be an empty string.\\n *\\n * Usage: run grid3.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const grid = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        shortest_path(grid), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/grid3.txt\\\";\\n        const data = matrix_to_string(grid);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/grid3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c7d24a87-d62e-4c7f-a304-58b21408f0e5\",\"moduleSequenceNumber\":1163},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/c3cb86cb-ebf6-442a-8506-a707747d97e8\",\"moduleSequenceNumber\":1170},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/53404e11-7f98-4d3f-80af-157e9c51fbd9\",\"moduleSequenceNumber\":1163},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/a906d449-3093-4906-ae45-5fda7fe50f3f\",\"moduleSequenceNumber\":1170},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/66ed2167-eaa1-4cb3-8166-d1e944437f25\",\"moduleSequenceNumber\":1163},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/afa9b542-cb32-41c7-8a5c-4c9de25388c0\",\"moduleSequenceNumber\":1165},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/ae2f0bc3-5aca-4228-8977-7837b2bbb775\",\"moduleSequenceNumber\":1163},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/7978a05f-a53f-4b01-9bb3-ff6c591c3ff5\",\"moduleSequenceNumber\":1170},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/26e62a27-1655-4278-9cfa-e004776da78a\",\"moduleSequenceNumber\":1163},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/b41f6c27-5cb5-4ffc-b60d-12d3f80b70eb\",\"moduleSequenceNumber\":1162},{\"filename\":\"/cct/grid3.js\",\"url\":\"blob:https://danielyxie.github.io/825ef786-fcff-4666-9d1f-b2c0c41a091b\",\"moduleSequenceNumber\":2417}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport {\\n    count_one, log_cct_failure, parity_position, print_error,\\n    print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Use Hamming code to encode a string of bits.\\n *\\n * @param n A positive integer.  This is our data.\\n * @return A bit string representing the Hamming encoding of the given data.\\n */\\nfunction encode(n) {\\n    assert(n > 0);\\n    // Convert from decimal to binary.  A decimal number is expressed in\\n    // base 10, whereas a binary number is expressed in base 2.\\n    const base = 2;\\n    const data = n.toString(base).split(\\\"\\\").map(s => parseInt(s));\\n    // Determine the number of parity bits.\\n    const nparity = num_parity(data);\\n    assert(nparity > 0);\\n    // Lay out the data bits in the incomplete encoded message.  Set each\\n    // redundant bit as well as the overall parity bit.\\n    const TRASH = -1;\\n    let msg = lay_data_bits(data, nparity, TRASH);\\n    msg = set_parity(msg, nparity);\\n    return msg.join(\\\"\\\");\\n}\\n\\n/**\\n * Lay out the data bits in the encoded message.  Position 0 in the message\\n * is reserved for the overall parity bit.  Position 2^i in the message is\\n * reserved for a parity (or redundant) bit, where i = 0, 1, 2, ...\\n *\\n * @param data An array of bits, representing the bit string of the data.\\n * @param p The number of parity bits in the encoded message.  This number\\n *     does not include the overall parity bit.\\n * @param trash Rubbish placed at positions not occupied by a data bit.\\n * @return An incomplete bit string, where only the data bits are placed.\\n *     A position not occupied by a data bit is filled with rubbish whose\\n *     value is determined by trash.\\n */\\nfunction lay_data_bits(data, p, trash) {\\n    // The number of bits in our encoded message.  The extra one bit\\n    // is the overall parity bit, which is used to check the parity\\n    // of the whole message.\\n    const m = data.length + p + 1;\\n    // Determine the positions where the parity (i.e. redundant) bits are\\n    // to be placed.\\n    const pos = new Set(parity_position(p));\\n    // Lay out the data bits.\\n    const msg = Array(m).fill(trash);\\n    const _data = Array.from(data);\\n    // Index 0 is reserved for the overall parity bit.  Indices 1 and 2 are\\n    // for parity (i.e. redundant) bits.  So we start at index 3.\\n    for (let k = 3; k < m; k++) {\\n        if (pos.has(k)) {\\n            continue;\\n        }\\n        msg[k] = _data.shift();\\n    }\\n    return msg;\\n}\\n\\n/**\\n * Determine the number of parity bits.  Let p be the number of parity bits\\n * and k the number of bits in the data.  The number of parity bits must\\n * satisfy the inequality\\n *\\n * 2^p >= k + p + 1\\n *\\n * @param data The bit string to be encoded using Hamming code.\\n * @return The number of parity bits.  This number does not include the overall\\n *     parity bit.\\n */\\nfunction num_parity(data) {\\n    assert(data.length > 0);\\n    let p = 0;\\n    let max;\\n    const k = data.length;\\n    do {\\n        p++;\\n        max = 2 ** p;\\n    } while (max < (k + p + 1));\\n    // The encoded message has m := k + p + 1 bits, as explained below.\\n    //\\n    // k := The number of bits in the data, represented as a bit string.\\n    // p := The number of parity (i.e. redundant) bits.\\n    // 1 := The extra bit reserved for the overall parity bit.\\n    //\\n    // The number p of parity (i.e. redundant) bits is\\n    //\\n    // p = [log(m)]\\n    //\\n    // where the operator [] means the ceiling function and log() is the\\n    // logarithm using base 2.\\n    const m = k + p + 1;\\n    assert(p == Math.ceil(Math.log2(m)));\\n    return p;\\n}\\n\\n/**\\n * Set each parity bit.  The encoded message has a number of locations\\n * that are reserved for parity bits.  We set each of these locations to\\n * 1 or 0.\\n *\\n * @param msg An incomplete encoded message.  Assume only the data bits\\n *     to have been laid out.\\n * @param nparity The number of parity bits in the encoded message.  This\\n *     number does not include the overall parity bit.\\n * @return The same as the input msg array, but the location of parity\\n *     bits have been set.  We do not modify msg.  We also set the\\n *     overall parity bit.\\n */\\nfunction set_parity(msg, nparity) {\\n    assert(msg.length > 0);\\n    assert(nparity > 0);\\n    // The positions where the parity bits are placed.  Do not include the\\n    // position of the overall parity bit.\\n    const pos = parity_position(nparity);\\n    // Set each parity bit.\\n    const _msg = Array.from(msg);\\n    for (const p of pos) {\\n        assert(p > 0);\\n        const n1 = count_one(_msg, p);\\n        // Is the number of 1s even or odd?  If the total number of 1s is\\n        // even, then the parity is 0.  Otherwise the parity is 1.\\n        _msg[p] = n1 % 2;\\n    }\\n    // Count the number of 1s in the encoded message, excluding the\\n    // very first position.\\n    const _msga = _msg.slice(1, _msg.length);\\n    const array = new MyArray();\\n    const n1 = array.sum(_msga);\\n    // Set the overall parity bit.\\n    _msg[0] = n1 % 2;\\n    return _msg;\\n}\\n\\n/**\\n * HammingCodes: Integer to Encoded Binary: You are given a decimal value.\\n * Convert it into a binary string and encode it as a Hamming code.  For\\n * example, the decimal value 8 will result in the binary string 1000, which\\n * will be encoded with the pattern 'pppdpddd', where p is a parity bit and d\\n * a data bit.  As another example, the binary representation of the decimal\\n * value 21 is '10101'.  The binary string is encoded as the pattern\\n * 'pppdpdddpd' to result in '1001101011'.\\n * NOTE: You need a parity bit at index 0 as an overall parity bit.  Important\\n * rule for encoding: Not allowed to add additional leading 0s to the binary\\n * value, i.e. the binary value has to be encoded as is.\\n *\\n * This is the problem of using Hamming code to encode a binary string, i.e.\\n * a string of bits.  The Hamming code is extended with an additional overall\\n * parity bit, which is located at index 0 in the encoded bit string.  The\\n * original paper where Hamming code is described:\\n *\\n * R. W. Hamming.  Error detecting and error correcting codes.  The Bell System\\n * Technical Journal, volume 29, issue 2, 1950, pp.147--160.\\n * DOI: 10.1002/j.1538-7305.1950.tb00463.x\\n *\\n * Expository notes here:\\n *\\n * https://en.wikipedia.org/wiki/Hamming_code\\n * https://medium.com/swlh/hamming-code-generation-correction-with-explanations-using-c-codes-38e700493280\\n * https://users.cs.fiu.edu/~downeyt/cop3402/hamming.html\\n * https://www.youtube.com/watch?v=X8jsijhllIA\\n * https://harryli0088.github.io/hamming-code/\\n *\\n * Usage: run hamming.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const n = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        encode(n), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/hamming.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, n);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/hamming.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/85a3d284-84d7-4193-a57a-779c8d4d82f0\",\"moduleSequenceNumber\":2525},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/21cda954-a305-41e0-8976-146d77da8ff9\",\"moduleSequenceNumber\":2532},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/a7382378-6325-4b87-bf37-eae1b6d19fb3\",\"moduleSequenceNumber\":2525},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/dc8a5c7b-90de-421c-9077-0de293c935a0\",\"moduleSequenceNumber\":2532},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/659fd444-c6ed-40d6-bf39-01d3d4d2df4d\",\"moduleSequenceNumber\":2525},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/de5e5842-7d9c-4bfd-9b55-e14b1629ec10\",\"moduleSequenceNumber\":2524},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2a5efb6f-7975-4f73-8f2a-3255cb7a3e50\",\"moduleSequenceNumber\":2525},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/7e63e956-8b03-4f72-92ef-1b620e4ef635\",\"moduleSequenceNumber\":2532},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/cab87ca4-8b39-4924-b591-1049a4561f52\",\"moduleSequenceNumber\":2523},{\"filename\":\"/cct/hamming.js\",\"url\":\"blob:https://danielyxie.github.io/2d41bd57-2c20-4b35-a9a1-4f5c89ac2305\",\"moduleSequenceNumber\":2817}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport {\\n    count_one, log_cct_failure, parity_position, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Check the parity bits.\\n *\\n * @param msg An encoded message as a bit string.\\n * @param nparity The number of parity bits in the encoded message.\\n * @return An array of indices where the parity bit has detected an error.\\n *     Each index is the location of a parity (i.e. redundant) bit.  The\\n *     value of this parity bit is different from the parity of the\\n *     positions that the bit is meant to check.  An empty array if there\\n *     are no errors in the parity check.\\n */\\nfunction check_parity(msg, nparity) {\\n    // The positions where the parity bits are placed.\\n    const pos = parity_position(nparity);\\n    // Locations of error.  Each location is an index of the bit string.\\n    // Each index is the position of a parity (i.e. redundant) bit.\\n    const error = new Array();\\n    // Check each parity (i.e. redundant) bit.\\n    for (const p of pos) {\\n        assert(p > 0);\\n        // The function count_one() also counts the value of the parity\\n        // bit located at index p in the bit string.  If the value of\\n        // msg[p] is 1, we must subtract 1 from the result of the\\n        // count_one() function.\\n        let n1 = count_one(msg, p);\\n        if (1 == msg[p]) {\\n            n1--;\\n        }\\n        // Is there an error?\\n        const parity = n1 % 2;\\n        if (parity != msg[p]) {\\n            error.push(p);\\n        }\\n    }\\n    return error;\\n}\\n\\n/**\\n * Decode a binary string to an integer.\\n *\\n * @param msg A bit string that has been encoded using Hamming code.\\n *     Going from left to right, the very first bit is the overall\\n *     parity bit.  This is the extended Hamming code with an additional\\n *     parity bit, also known as \\\"single error correction, double error\\n *     detection\\\" (SECDED).\\n * @return The integer corresponding to the encoded bit string.\\n */\\nfunction decode(msg) {\\n    assert(msg.length > 0);\\n    const base = 10;\\n    const _msg = Array.from(msg).map(s => parseInt(s, base));\\n    const nparity = num_parity(_msg);\\n    const _msgc = secded(_msg, nparity);\\n    return to_integer(_msgc, nparity);\\n}\\n\\n/**\\n * The number of parity (or redundant) bits.  Let p be the number of parity\\n * bits, excluding the overall parity bit.  Let m be the number of message\\n * bits.  These numbers satisfy the inequality\\n *\\n * 2^p >= m + p + 1\\n *\\n * @param msg A bit string that has been encoded using Hamming code.\\n *     The 0-th position is reserved for the overall parity bit.  The first\\n *     parity (or redundant) bit is at index 1.  The second parity bit is at\\n *     index 2.  Index 3 is the first index where a data bit is located.\\n *     Assuming the message string has at least 1 bit, the encoded bit string\\n *     has at least 4 bits.\\n * @return The number of redundant bits, excluding the overall parity bit.\\n */\\nfunction num_parity(msg) {\\n    const lower_bound = 4;\\n    assert(msg.length >= lower_bound);\\n    let i = 0;         // How many parity bits.\\n    let pos = 2 ** i;  // Position of a parity bit.\\n    while (pos < msg.length) {\\n        i++;\\n        pos = 2 ** i;\\n    }\\n    assert(i == Math.ceil(Math.log2(msg.length)));\\n    return i;\\n}\\n\\n/**\\n * Correct a single error and detect two errors.  Also known as \\\"single error\\n * correction, double error detection\\\" (SECDED).\\n *\\n * @param msg A bit string that has been encoded using the extended Hamming\\n *     code.\\n * @param nparity The number of parity (i.e. redundant) bits in the bit string.\\n * @return The same bit string as msg, but with a single error corrected if\\n *     there is an error in the bit string.\\n */\\nfunction secded(msg, nparity) {\\n    // Check for errors in the parity (i.e. redundant) bits.\\n    const error = check_parity(msg, nparity);\\n    // No errors in the bit string.\\n    if (0 == error.length) {\\n        return msg;\\n    }\\n    // We have an error in the bit string.  Calculate the sum of the indices of\\n    // the erroneous parity bits.  This sum gives the index of where an error\\n    // occurs.  Correct one error.\\n    const array = new MyArray();\\n    const i = array.sum(error);\\n    const _msg = Array.from(msg);\\n    _msg[i] = (_msg[i] + 1) % 2;\\n    // Check the overall parity bit.  This allows us to check for the presence\\n    // of a second error, but we would not be able to correct the second error.\\n    const n1 = array.sum(_msg.slice(1, _msg.length));\\n    assert(_msg[0] == (n1 % 2));\\n    return _msg;\\n}\\n\\n/**\\n * Convert a Hamming code to an integer.\\n *\\n * @param msg A bit string encoded using Hamming code.\\n * @param nparity The number of parity (i.e. redundant) bits in the\\n *     bit string.  This does not include the overall parity bit, which is\\n *     assumed to be at index 0 of msg.\\n * @return An integer representation of the Hamming encoded bit string.\\n */\\nfunction to_integer(msg, nparity) {\\n    assert(msg.length > 3);\\n    assert(nparity > 0);\\n    // Extract data bits, i.e. those bits that are not redundant bits and not\\n    // the overall parity bit.  Index 0 is reserved for the overall parity bit.\\n    // Index 1 is reserved for a redundant bit, so is index 2.  Therefore, we\\n    // start at index 3.\\n    const pos = new Set(parity_position(nparity));\\n    const data = new Array();\\n    for (let i = 3; i < msg.length; i++) {\\n        if (pos.has(i)) {\\n            continue;\\n        }\\n        data.push(msg[i]);\\n    }\\n    // The number is a binary representation of an integer.  Convert the binary\\n    // representation to a decimal representation.\\n    const base = 2;\\n    return parseInt(data.join(\\\"\\\"), base);\\n}\\n\\n/**\\n * HammingCodes: Encoded Binary to Integer: You are given an encoded binary\\n * string.  Treat it as a Hamming code with 1 possible error at a random index.\\n * Find the possible wrong bit, fix it, and extract the decimal value from\\n * the string.  Return the decimal value as a string.\\n *\\n * Note 1: The length of the binary string is dynamic, but its encoding/decoding\\n *     follows Hamming's rule.\\n * Note 2: Index 0 is an overall parity bit.\\n * Note 3: There's a ~55% chance of having an altered bit.\\n *\\n * Usage: run hamming2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const msg = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        decode(msg), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/hamming2.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, msg);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/hamming2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/30571f6f-c9c7-4dab-90ac-1c9dedb88b9b\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/51b95734-01e5-4ec9-83b3-222b875a5d21\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c29022b9-83b6-4ca7-a83c-5ef262ec7fcf\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/49f3e96b-bf78-469d-9adc-8846509cc144\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/d290c5fe-d0c7-497c-a33f-e25d0c61f169\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/ea10bbcb-f500-4e48-9a20-768c0d680947\",\"moduleSequenceNumber\":6130},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/8c197ae7-7146-4ba3-af9b-2c74bf2f475e\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/1fd171d0-8836-4c82-b6ae-5f9d0f89603c\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/9bc48e6a-8d82-4292-b583-e68790138ea5\",\"moduleSequenceNumber\":6129},{\"filename\":\"/cct/hamming2.js\",\"url\":\"blob:https://danielyxie.github.io/079458d7-4347-4683-936a-530ef5a8695a\",\"moduleSequenceNumber\":6641}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Merge overlapping inervals.\\n *\\n * @param interval An array of intervals.  Each interval is represented as an\\n *     array [a, b] of two elements, where a < b.  So this is an array of\\n *     arrays.\\n * @return An array of intervals, where all overlapping intervals have\\n *     been merged.  Intervals in the array are sorted in ascending order.\\n */\\nfunction merge(interval) {\\n    // Sanity checks.\\n    assert(interval.length > 0);\\n    assert(valid_interval(interval));\\n    // Sort the array in ascending order using the first element of\\n    // each subarray.\\n    const array = Array.from(interval);\\n    array.sort(\\n        function (a, b) {\\n            return a[0] - b[0];\\n        }\\n    );\\n    // Compare two intervals and merge them as necessary.\\n    let i = 0;\\n    let j = i + 1;\\n    const start = 0;\\n    const end = 1;\\n    const howmany = 1;  // How many elements to delete.\\n    while (j < array.length) {\\n        if (merge_interval(array[i], array[j])) {\\n            // Merge intervals i and j.\\n            const a = array[i][start];\\n            const b = Math.max(array[i][end], array[j][end]);\\n            array[i] = [a, b];\\n            // Delete interval j.\\n            array.splice(j, howmany);\\n            continue;\\n        }\\n        i++;\\n        j = i + 1;\\n    }\\n    return array;\\n}\\n\\n/**\\n * Whether to merge two intervals.\\n *\\n * @param intA An interval, represented as an array [x, y] of two elements.\\n * @param intB Another interval.\\n * @return true if the given intervals should be merged;\\n *     false otherwise.\\n */\\nfunction merge_interval(intA, intB) {\\n    const start = 0;\\n    const end = 1;\\n    const a = intA[end];\\n    const b = intB[start];\\n    const MERGE = true;\\n    const NO_MERGE = !MERGE;\\n    // The end of the previous interval is smaller than the start\\n    // of the current interval.\\n    if (a < b) {\\n        return NO_MERGE;\\n    }\\n    // The end of the previous interval is greater than or equal\\n    // to the start of the current interval.\\n    assert(a >= b);\\n    return MERGE;\\n}\\n\\n/**\\n * Whether each interval is valid.\\n *\\n * @param array An array of intervals.  Cannot be an empty array.\\n * @return true if each interval is valid; false otherwise.\\n */\\nfunction valid_interval(array) {\\n    const VALID = true;\\n    const NOT_VALID = !VALID;\\n    assert(array.length > 0);\\n    for (let i = 0; i < array.length; i++) {\\n        const arr = array[i];\\n        if (arr.length != 2) {\\n            return NOT_VALID;\\n        }\\n        const [a, b] = arr;\\n        if (a >= b) {\\n            return NOT_VALID;\\n        }\\n    }\\n    return VALID;\\n}\\n\\n/**\\n * Merge Overlapping Intervals: Given an array of intervals, merge all\\n * overlapping intervals.  An interval is an array with two numbers, where\\n * the first number is always less than the second (e.g. [1, 5]).  The\\n * intervals must be returned in ASCENDING order.\\n *\\n * Usage: run interval.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        merge(array), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/interval.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/interval.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/eeb95005-d0c9-42a3-9950-6461d46f0e15\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/9a7b46da-74e0-4d39-bc89-eab490b4f4c3\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b7c88324-ec98-4996-8172-eba061970486\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/2a3f67de-197a-4515-8f78-6c8be814dda8\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/79b9552b-f4c7-4d0c-97ba-7094dc26e686\",\"moduleSequenceNumber\":459},{\"filename\":\"/cct/interval.js\",\"url\":\"blob:https://danielyxie.github.io/360fabea-0fcd-435b-8cac-87148dc44a2f\",\"moduleSequenceNumber\":6236}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * All valid IPv4 addresses from a string of digits.\\n *\\n * @param string A string of decimal digits.  Cannot be an empty string.\\n * @return An array where each element is a string representing a valid\\n *     IPv4 address.  An empty array if no valid IPv4 addresses can be\\n *     generated from the given string.\\n */\\nfunction all_ip(string) {\\n    assert(string.length > 0);\\n    // An IPv4 address has 4 octets, each of which is a segment of the digit\\n    // string.  No two segments overlap.  Each segment contains at most 3\\n    // digits.  The total length of all segments must be the same as the number\\n    // of digits in the digit string.\\n    const max_octet_length = 3;\\n    const ip_length = string.length;\\n    const ip = new Array();\\n    for (let i = 1; i <= max_octet_length; i++) {\\n        for (let j = 1; j <= max_octet_length; j++) {\\n            for (let k = 1; k <= max_octet_length; k++) {\\n                for (let ell = 1; ell <= max_octet_length; ell++) {\\n                    // Ensure the length of each octet sums to the length of a\\n                    // valid IPv4 address.\\n                    if (ip_length != i + j + k + ell) {\\n                        continue;\\n                    }\\n                    // Extract each segment.\\n                    const octet = extract_octets(string, i, j, k);\\n                    // Is each segment a valid octet in an IPv4 address?\\n                    if (!is_valid_ip(octet)) {\\n                        continue;\\n                    }\\n                    // We have found a valid IPv4 address.  Octets in an IPv4\\n                    // address are delimited by a period.\\n                    ip.push(octet.join(\\\".\\\"));\\n                }\\n            }\\n        }\\n    }\\n    return ip;\\n}\\n\\n/**\\n * Extract 4 octets from a digit string.\\n *\\n * @param string A string of decimal digits.\\n * @param i, j, k The boundary of each octet, where the boundary is with\\n *     respect to the digit string.  Going from left to right in the digit\\n *     string, the first octet starts from index 0 and ends at index i - 1,\\n *     inclusive.  The range of indices of the first octet can be written as\\n *     the closed interval [0, i - 1], meaning that digits in the first octet\\n *     are digits found at the given range of indices in the digit string.\\n *     The second octet has the range of indices [i, i + j - 1].  The third\\n *     octet has the range of indices [i + j, i + j + k - 1].  Finally, the\\n *     fourth octet has the range of indices [i + j + k, n - 1], where n is\\n *     the length of the digit string.\\n * @return An array where each element is a string of digits representing an\\n *     octet of the digit string.\\n */\\nfunction extract_octets(string, i, j, k) {\\n    assert(string.length > 0);\\n    assert(i > 0);\\n    assert(j > 0);\\n    assert(k > 0);\\n    const a = string.substring(0, i);\\n    const b = string.substring(i, i + j);\\n    const c = string.substring(i + j, i + j + k);\\n    const d = string.substring(i + j + k, string.length);\\n    return [a, b, c, d];\\n}\\n\\n/**\\n * Whether a given sequence of octets forms a valid IPv4 address.\\n * A valid IPv4 address has 4 valid octets.\\n *\\n * @param octet An array of candidate octets to test.\\n * @return true if each octet is valid; false otherwise.\\n */\\nfunction is_valid_ip(octet) {\\n    assert(4 == octet.length);\\n    const VALID = true;\\n    const NOT_VALID = !VALID;\\n    for (const seg of octet) {\\n        if (!is_valid_octet(seg)) {\\n            return NOT_VALID;\\n        }\\n    }\\n    return VALID;\\n}\\n\\n/**\\n * Whether a given segment is a valid octet in an IPv4 address.\\n *\\n * @param octet A digit string.  Cannot be an empty string.\\n * @return true if the given segment is a valid IPv4 octet; false otherwise.\\n */\\nfunction is_valid_octet(octet) {\\n    assert(octet.length > 0);\\n    const VALID = true;\\n    const NOT_VALID = !VALID;\\n    // An octet cannot begin with '0'.  The exception to this rule\\n    // is when the octet itself represents the number 0.\\n    if (\\\"0\\\" == octet[0]) {\\n        if (\\\"0\\\" != octet) {\\n            return NOT_VALID;\\n        }\\n    }\\n    // An octet represents an integer between 0 and 255, inclusive.\\n    const base = 10;\\n    const n = parseInt(octet, base);\\n    const min = 0;\\n    const max = 255;\\n    if ((min <= n) && (n <= max)) {\\n        return VALID;\\n    }\\n    return NOT_VALID;\\n}\\n\\n/**\\n * Generate IP Addresses: Given a string containing only digits, return an\\n * array with all possible valid IP address combinations that can be created\\n * from the string.  An octet in the IP address cannot begin with '0' unless\\n * the number itself is actually 0.  For example, '192.168.010.1' is NOT\\n * a valid IP.\\n *\\n * From the problem description, we only need to consider IPv4 addresses.\\n * Don't need to handle IPv6 addresses.\\n *\\n * Usage: run ip.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const string = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        all_ip(string), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/ip.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, string);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/ip.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/38b745f7-5c9e-4cb1-a58d-c3f0d5fcc2d4\",\"moduleSequenceNumber\":111},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/eebe7383-3131-4f6d-a714-62d48d15f8b7\",\"moduleSequenceNumber\":118},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/56ae4b17-3954-46e7-a498-2e0ba1d6583c\",\"moduleSequenceNumber\":111},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/1fd61242-660a-44bf-8083-d5bea3d083dd\",\"moduleSequenceNumber\":118},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/3240b329-77b8-4edc-b2fd-74dd3469b483\",\"moduleSequenceNumber\":110},{\"filename\":\"/cct/ip.js\",\"url\":\"blob:https://danielyxie.github.io/a3c061ba-eb25-4f38-b1b0-73b06399eeff\",\"moduleSequenceNumber\":439}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Whether we can reach the last cell of an array.  We use a greedy approach.\\n * Try to jump the maximum distance, otherwise backtrack and/or reduce the\\n * jump distance.\\n *\\n * @param array An array of integers.  Cannot be an empty array.\\n * @return 1 if starting from the first array cell we can reach the last array\\n *     cell; 0 otherwise.\\n */\\nfunction end_reachable(array) {\\n    // Sanity check.\\n    const myarr = new MyArray();\\n    assert(myarr.all_nonnegative(array));\\n    const REACHABLE = 1;\\n    const NOT_REACHABLE = 0;\\n    // Use a greedy method to try to reach the last array cell.\\n    let i = 0;                  // Current array index.\\n    const index = new Array();  // Index of intermediary cells.\\n    const jump = new Array();   // Jump length of array cell index[i].\\n    let reduce_distance = false;\\n    let d;                      // The jump distance.\\n    while (i < array.length) {\\n        // Do we need to reduce the jump distance?\\n        if (reduce_distance) {\\n            // Decrease by 1 the jump distance.\\n            d = jump.pop();\\n            jump.push(d - 1);\\n            reduce_distance = false;\\n        } else {\\n            // Current maximum jump distance.\\n            d = array[i];\\n            index.push(i);\\n            jump.push(d);\\n        }\\n        assert(index.length == jump.length);\\n        // Are we at the last array cell?\\n        if (is_last_cell(i, array)) {\\n            return REACHABLE;\\n        }\\n        // Zero jump distance.\\n        d = jump[jump.length - 1];\\n        i = index[index.length - 1];\\n        if (0 == d) {\\n            // Does the first array cell have zero as the jump distace?\\n            if (0 == i) {\\n                return NOT_REACHABLE;\\n            }\\n            // Backtrack and reduce jump distance.\\n            index.pop();\\n            jump.pop();\\n            reduce_distance = true;\\n            continue;\\n        }\\n        // Can we jump the given distance?\\n        if (i + d < array.length) {\\n            i += d;\\n            continue;\\n        }\\n        // We cannot jump the given distance.\\n        if (i + d >= array.length) {\\n            reduce_distance = true;\\n            continue;\\n        }\\n    }\\n}\\n\\n/**\\n * Whether we are at the last array cell.\\n *\\n * @param i Index of the current array cell.\\n * @param array An array of integers.  Cannot be an empty array.\\n * @return true if i is the last index of the array;\\n *     false otherwise.\\n */\\nfunction is_last_cell(i, array) {\\n    assert(array.length > 0);\\n    assert(i >= 0);\\n    assert(i < array.length);\\n    return i == (array.length - 1);\\n}\\n\\n/**\\n * Array Jumping Game: You are given an array of integers where each element\\n * represents the maximum possible jump distance from that position.  For\\n * example, if you are at position i and your maximum jump length is n, then\\n * you can jump to any position from i to i+n.  Assuming you are initially\\n * positioned at the start of the array, determine whether you are able to\\n * reach the last index of the array.\\n *\\n * The problem statement doesn't say anything about whether the integers are\\n * negative, positive, or zero.  If an array element is a negative integer,\\n * does that mean we jump backward?  Let's make various assumptions to\\n * simplify the problem:\\n *\\n * (1) Each integer in the array is non-negative.\\n * (2) We start from the zeroth index of the array.\\n * (3) Each jump must be to the right, increasing the array index.\\n * (4) If the array element is zero, we cannot jump.\\n *\\n * Submit your answer as 1 (meaning true) or 0 (meaning false).\\n *\\n * Usage: run jump.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        end_reachable(array), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/jump.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/jump.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/89300639-0da1-4012-8aab-e496e6abaca6\",\"moduleSequenceNumber\":6378},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f766654c-0083-4865-938d-03bb63ad38e2\",\"moduleSequenceNumber\":6385},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/05702b6b-d464-4209-85e3-d591f1dd7f2e\",\"moduleSequenceNumber\":6378},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f92decef-cfda-4af6-9f5e-389e05b1e53e\",\"moduleSequenceNumber\":6385},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b178d2bd-92c6-45df-bf60-e981656b887d\",\"moduleSequenceNumber\":6378},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/3c8dd2b2-567f-4e89-a4a7-a8ad5ba81581\",\"moduleSequenceNumber\":6377},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/4455c6ac-64b9-4298-b389-2fe2ea4b03b9\",\"moduleSequenceNumber\":6378},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/a3340f87-32d2-4f8a-be0b-b4b7fd39b8ef\",\"moduleSequenceNumber\":6385},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/e09f98ea-cb81-4f2b-b3a0-a859875f08b0\",\"moduleSequenceNumber\":6376},{\"filename\":\"/cct/jump.js\",\"url\":\"blob:https://danielyxie.github.io/7061d9c5-fa12-41bb-981c-f002c1ade50d\",\"moduleSequenceNumber\":7048}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { Graph } from \\\"/lib/network.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Whether we can jump from the current array cell.\\n *\\n * @param i Index of current array cell.\\n * @param array The array.\\n * @return true if we can jump from the current cell;\\n *     false otherwise;\\n */\\nfunction can_jump(i, array) {\\n    // Sanity checks.\\n    assert(i >= 0);\\n    assert(i < array.length);\\n    // Cannot jump if the maximum number of jumps is zero.\\n    const JUMP = true;\\n    const NO_JUMP = !JUMP;\\n    if (0 == array[i]) {\\n        return NO_JUMP;\\n    }\\n    // Cannot jump if we are at the last array cell.\\n    const last_index = array.length - 1;\\n    if (last_index == i) {\\n        return NO_JUMP;\\n    }\\n    return JUMP;\\n}\\n\\n/**\\n * The minimum number of jumps to reach the end of an array.\\n *\\n * @param array An array of non-negative integers.  Cannot be an empty array.\\n * @return Array [min_jump, path] of two elements:\\n *     (1) min_jump := The minimum number of jumps from the first to the last\\n *         cell.  If we cannot reach the last cell, then the minimum number is\\n *         0.\\n *     (2) path := An array representing the jump path.  An empty array if we\\n *         cannot reach the last cell.\\n */\\nfunction minimum_jump(array) {\\n    const myarr = new MyArray();\\n    assert(myarr.all_nonnegative(array));\\n    // We interpret the array and its elements as a directed graph.  The\\n    // minimum jump length is found by computing the shortest path from the\\n    // first cell to the last cell.\\n    const start = 0;\\n    const end = array.length - 1;\\n    const graph = to_graph(array);\\n    const path = graph.shortest_path(start, end);\\n    // Cannot reach the last cell of the given array.\\n    if (0 == path.length) {\\n        return [0, []];\\n    }\\n    // We can reach the last cell of the array.\\n    assert(path.length > 0);\\n    const min_jump = path.length - 1;\\n    assert(min_jump > 0);\\n    return [min_jump, path];\\n}\\n\\n/**\\n * Construct a directed, unweighted graph from the given array.\\n *\\n * @param array An array of non-negative integers.  Cannot be an empty array.\\n * @return A directed, unweighted graph representation of the given array.\\n */\\nfunction to_graph(array) {\\n    assert(array.length > 0);\\n    // First, add the nodes of the directed graph because the graph might be\\n    // disconnected.  Each node ID is an index of the given array.\\n    const myarr = new MyArray();\\n    const node = myarr.sequence(array.length);\\n    const directed = true;\\n    const graph = new Graph(directed);\\n    for (const v of node) {\\n        graph.add_node(v);\\n    }\\n    // Add the directed edges of the graph.\\n    const last_index = array.length - 1;\\n    for (const u of node) {\\n        // Cannot jump from current array cell.\\n        if (!can_jump(u, array)) {\\n            continue;\\n        }\\n        // All possible jumps, where each jump distance is between 1 and\\n        // array[u], inclusive.\\n        const max_distance = array[u];\\n        assert(u < last_index);\\n        assert(max_distance > 0);\\n        for (let i = 1; i <= max_distance; i++) {\\n            const v = u + i;\\n            // Is v a valid index in array?\\n            if (v > last_index) {\\n                continue;\\n            }\\n            graph.add_edge(u, v);\\n        }\\n    }\\n    return graph;\\n}\\n\\n/**\\n * Array Jumping Game II: You are given an array of integers where each\\n * element represents the maximum possible jump distance from that position.\\n * For example, if you are at position i and your maximum jump length is n,\\n * then you can jump to any position from i to i+n.  Assuming you are\\n * initially positioned at the start of the array, determine the minimum\\n * number of jumps to reach the end of the array.  If it's impossible to\\n * reach the end, then the answer should be 0.\\n *\\n * This is similar to Array Jumping Game.  The only difference is that you\\n * must determine the smallest number of jumps to reach the end of the array.\\n * As with Array Jumping Game, we make various assumptions to simplify the\\n * problem:\\n *\\n * (1) Each integer in the array is non-negative.\\n * (2) We start from the zeroth index of the array, i.e. the first element.\\n * (3) Each jump must be to the right, increasing the array index.\\n * (4) If the array element is zero, we cannot jump.\\n *\\n * Usage: run jump2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const [min_jump, _] = minimum_jump(array);\\n    const result = ns.codingcontract.attempt(\\n        min_jump, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/jump2.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/jump2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/73340efa-be28-4e5a-bbf1-9279af707b9d\",\"moduleSequenceNumber\":142},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/c1c6420b-df04-45e3-b262-0fe82478cb0d\",\"moduleSequenceNumber\":149},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/ff920abf-a7fa-4de7-b1d0-de926e010ad2\",\"moduleSequenceNumber\":142},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/d9196d82-b9ed-4ac7-a092-2a85062072e3\",\"moduleSequenceNumber\":149},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/0693b7b4-3911-4951-be2c-2793925752cf\",\"moduleSequenceNumber\":142},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/d1ae6b80-75d5-4921-87d4-4976233277e1\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/152a5dbc-4ac2-4bd3-828f-9384d041d32f\",\"moduleSequenceNumber\":142},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/107734bd-6802-48df-80c1-a96ff047563c\",\"moduleSequenceNumber\":149},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/578a719b-f3ce-478e-80fa-175fd2b2dc53\",\"moduleSequenceNumber\":142},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/48def28f-f2ee-4bf8-848d-f9b01801142c\",\"moduleSequenceNumber\":141},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/f0d7a812-b8b6-4a4a-80a9-5f8f4c33fc04\",\"moduleSequenceNumber\":142},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/7dfc8d9d-68d6-4087-8a80-7ff6776250b1\",\"moduleSequenceNumber\":149},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/27a51f42-8ad7-42c5-ae8d-a34de8d0c187\",\"moduleSequenceNumber\":140},{\"filename\":\"/cct/jump2.js\",\"url\":\"blob:https://danielyxie.github.io/951c6480-c5f6-421a-8392-4457bc3dad39\",\"moduleSequenceNumber\":348}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\n\\n/**\\n * Compress a string using LZ encoding.  This function is due to\\n *\\n * stalefishies\\n * https://github.com/stalefishies\\n * https://github.com/danielyxie/bitburner/commit/174d17a5e20926745993969ede7ad1db9308036c\\n *\\n * Explanation by stalefish#8304 on Discord server of Bitburner:\\n *\\n * The basic idea is to add one character at a time, keeping all possible\\n * routes to optimal compression open. If we have N characters currently\\n * compressed, we can split that into two parts: all the chunks except the\\n * last, and then that last chunk. To add an (N+1)th character to the\\n * compressed string, we are going to either modify that last chunk to include\\n * the new character, or start a new chunk with the new character - we never\\n * modify any chunk except the last. Thus, to keep all possible routes open, we\\n * need to consider every possible final chunk, keeping track of the shortest\\n * 'all chunks except the last' string for each possible final chunk. That's\\n * what the state table keeps track of: the string stored in the table is the\\n * shortest 'all chunks except the last', and each table location corresponds\\n * to each possible last chunk.\\n *\\n * The code of this function is covered by this license:\\n * Apache 2.0 with Commons Clause\\n * https://github.com/danielyxie/bitburner/blob/dev/license.txt\\n *\\n * @param plain We want to compress this string.\\n * @return A compressed version of the input string.\\n */\\nfunction compress(plain) {\\n    // for state[i][j]:\\n    //      if i is 0, we're adding a literal of length j\\n    //      else, we're adding a backreference of offset i and length j\\n    let cur_state = Array.from(Array(10), () => Array(10).fill(null));\\n    let new_state = Array.from(Array(10), () => Array(10));\\n\\n    function set(state, i, j, str) {\\n        const current = state[i][j];\\n        if (current == null || str.length < current.length) {\\n            state[i][j] = str;\\n        } else if (str.length === current.length && Math.random() < 0.5) {\\n            // if two strings are the same length, pick randomly so that\\n            // we generate more possible inputs to Compression II\\n            state[i][j] = str;\\n        }\\n    }\\n\\n    // initial state is a literal of length 1\\n    cur_state[0][1] = \\\"\\\";\\n\\n    for (let i = 1; i < plain.length; ++i) {\\n        for (const row of new_state) {\\n            row.fill(null);\\n        }\\n        const c = plain[i];\\n        // handle literals\\n        for (let length = 1; length <= 9; ++length) {\\n            const string = cur_state[0][length];\\n            if (string == null) {\\n                continue;\\n            }\\n            if (length < 9) {\\n                // extend current literal\\n                set(new_state, 0, length + 1, string);\\n            } else {\\n                // start new literal\\n                set(new_state, 0, 1, string + \\\"9\\\" + plain.substring(i - 9, i) + \\\"0\\\");\\n            }\\n            for (let offset = 1; offset <= Math.min(9, i); ++offset) {\\n                if (plain[i - offset] === c) {\\n                    // start new backreference\\n                    set(new_state, offset, 1, string + String(length) + plain.substring(i - length, i));\\n                }\\n            }\\n        }\\n\\n        // handle backreferences\\n        for (let offset = 1; offset <= 9; ++offset) {\\n            for (let length = 1; length <= 9; ++length) {\\n                const string = cur_state[offset][length];\\n                if (string == null) {\\n                    continue;\\n                }\\n                if (plain[i - offset] === c) {\\n                    if (length < 9) {\\n                        // extend current backreference\\n                        set(new_state, offset, length + 1, string);\\n                    } else {\\n                        // start new backreference\\n                        set(new_state, offset, 1, string + \\\"9\\\" + String(offset) + \\\"0\\\");\\n                    }\\n                }\\n                // start new literal\\n                set(new_state, 0, 1, string + String(length) + String(offset));\\n                // end current backreference and start new backreference\\n                for (let new_offset = 1; new_offset <= Math.min(9, i); ++new_offset) {\\n                    if (plain[i - new_offset] === c) {\\n                        set(new_state, new_offset, 1, string + String(length) + String(offset) + \\\"0\\\");\\n                    }\\n                }\\n            }\\n        }\\n\\n        const tmp_state = new_state;\\n        new_state = cur_state;\\n        cur_state = tmp_state;\\n    }\\n\\n    let result = null;\\n\\n    for (let len = 1; len <= 9; ++len) {\\n        let string = cur_state[0][len];\\n        if (string == null) {\\n            continue;\\n        }\\n        string += String(len) + plain.substring(plain.length - len, plain.length);\\n        if (result == null || string.length < result.length) {\\n            result = string;\\n        } else if (string.length == result.length && Math.random() < 0.5) {\\n            result = string;\\n        }\\n    }\\n\\n    for (let offset = 1; offset <= 9; ++offset) {\\n        for (let len = 1; len <= 9; ++len) {\\n            let string = cur_state[offset][len];\\n            if (string == null) {\\n                continue;\\n            }\\n            string += String(len) + \\\"\\\" + String(offset);\\n            if (result == null || string.length < result.length) {\\n                result = string;\\n            } else if (string.length == result.length && Math.random() < 0.5) {\\n                result = string;\\n            }\\n        }\\n    }\\n\\n    return result ?? \\\"\\\";\\n}\\n\\n/**\\n * Compression III: LZ Decompression: Lempel-Ziv (LZ) compression is a data\\n * compression technique that encodes data using references to earlier parts of\\n * the data.  In this variant of LZ, data is encoded as two types of chunk.\\n * Each chunk begins with a length L, encoded as a single ASCII digit from 1 to\\n * 9, followed by the chunk data, which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data.  To do this, the\\n *    length is followed by a second ASCII digit X.  Each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends\\n * immediately, and the next character is the start of a new chunk.  The two\\n * chunk types alternate, starting with type 1, and the final chunk may be of\\n * either type.  You are given a string as input.  Encode it using Lempel-Ziv\\n * encoding with the minimum possible output length.\\n *\\n * Usage: run lzc.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const data = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        compress(data), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/lzc.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/lzc.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/1a7e3eb1-c812-4d33-bd88-8f61885ac306\",\"moduleSequenceNumber\":137},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f99d45cb-06f6-4b95-94d2-d963742a2088\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/6f38982a-dedf-4493-9749-950ee31e9b8a\",\"moduleSequenceNumber\":136},{\"filename\":\"/cct/lzc.js\",\"url\":\"blob:https://danielyxie.github.io/345075ac-dff9-4ca7-85b3-22291cbb3380\",\"moduleSequenceNumber\":322}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Use a variant of the Lempel-Ziv (LZ) algorithm to decompress a string.  The\\n * string is assumed to follow the format\\n *\\n * C_1 C_2 C_3 ... C_n\\n *\\n * where C_i is the i-th chunk of the string.  Each chunk has two parts:\\n *\\n * (1) L := The length of an uncompressed portion of data.  The length L is an\\n *     integer between 1 and 9, inclusive.  The length number is the first part\\n *     of any chunk.\\n * (2) data := The chunk data, which is the second part of any chunk.  The\\n *     chunk data can be further decomposed into two types:\\n *     (a) Literal characters.  A chunk with this second part is denoted as\\n *         \\\"L<string>\\\", where <string> is a string of L characters.  We append\\n *         these L characters directly into the uncompressed string.  For\\n *         example, given the chunk \\\"3abc\\\", the digit \\\"3\\\" is the first part of\\n *         the chunk and the string \\\"abc\\\" is the second part.  The length 3,\\n *         together with the string, tells us to copy the first 3 characters of\\n *         the string and append the characters to the uncompressed data.  That\\n *         is, we append the string \\\"abc\\\" to our uncompressed data.\\n *     (b) An ASCII digit X.  A chunk having this second part is denoted as\\n *         \\\"LX\\\", where X is a decimal digit between 1 and 9, inclusive.  The\\n *         value of X tells us how many characters in the uncompressed string\\n *         to backtrack.  Going from right to left in the uncompressed string,\\n *         we traverse X locations, copy the character at the X-th location,\\n *         and append the character to our uncompressed string.  Repeat the\\n *         process as many times as necessary until we have appended L\\n *         characters.  For example, suppose we have the chunk \\\"53\\\" and our\\n *         (still incomplete) uncompressed string is \\\"abcd\\\".  The first part\\n *         \\\"5\\\" tells us how many characters to append to the uncompressed\\n *         string.  The second part \\\"3\\\" tells us to backtrack 3 positions in\\n *         the uncompressed string to locate the character to copy and append.\\n *         Here's how to obtain the first character to append.  Going from\\n *         right to left in the uncompressed string \\\"abcd\\\", we backtrack to the\\n *         3rd character, namely \\\"b\\\".  We copy this character and append it to\\n *         our uncompressed string, resulting in the new uncompressed string\\n *         \\\"abcdb\\\".  One down, four to go.  For our second character, we\\n *         backtrack 3 locations in the uncompressed string \\\"abcdb\\\" to arrive\\n *         at \\\"c\\\".  Copy and append this character to produce the new\\n *         uncompressed string \\\"abcdbc\\\".  Two down, three to go.  The third\\n *         character to copy and append is \\\"d\\\", resulting in the uncompressed\\n *         string \\\"abcdbcd\\\".  The fourth character we want is \\\"b\\\" and we now\\n *         have the uncompressed string \\\"abcdbcdb\\\".  Our fifth character is\\n *         \\\"c\\\" and our uncompressed string is \\\"abcdbcdbc\\\".\\n *\\n * The chunk type alternates and we always start with a chunk of the type\\n * L<string>.  The compressed data follows the format\\n *\\n * L<string> LX L<string> LX ...\\n *\\n * If L := 0, the chunk ends immediately and we start a new chunk of the type\\n * different from the previous type.  A portion of the compressed data might be\\n *\\n * ... L<string> 0 L<string> ...\\n *\\n * or, as another example,\\n *\\n * ... LX 0 LX ...\\n *\\n * The above rules help us to make sense of the compressed data \\\"312312021\\\".\\n * We have these chunks: \\\"3123\\\", \\\"12\\\", \\\"0\\\", \\\"21\\\".  The uncompressed string is\\n * \\\"123222\\\".  Refer to the following for more details on the LZ algorithm.\\n *\\n * [1] J. Ziv and A. Lempel.  A universal algorithm for sequential data\\n *     compression.  IEEE Transactions on Information Theory, volume 23,\\n *     issue 3, pp.337--343, 1977.\\n *     DOI: 10.1109/TIT.1977.1055714\\n * [2] Colt McAnlis and Aleks Haecky.  Understanding Compression: Data\\n *     Compression for Modern Developers.  O'Reilly, 2016.\\n * [3] The Hitchhiker's Guide to Compression\\n *     https://go-compression.github.io/\\n *\\n * @param data We want to decompress this string.  The string is assumed to be\\n *     the output of a variant of the LZ compression algorithm.  Cannot be an\\n *     empty string.\\n * @return The decompressed string corresponding to the input data.\\n */\\nfunction decompress(data) {\\n    assert(data.length > 0);\\n    // Always start with the chunk format L<string>.\\n    let chunk_type = lstr_chunk();\\n    // Where are we in the compressed string?\\n    let i = 0;\\n    // The uncompressed string.\\n    let result = \\\"\\\";\\n    const base = 10;\\n    while (i < data.length) {\\n        const ell = parseInt(data[i], base);\\n        // Is this chunk of type L<string>?\\n        if (lstr_chunk() == chunk_type) {\\n            // Do we end the chunk now?\\n            if (end_now(ell)) {\\n                i++;\\n                chunk_type = lx_chunk();\\n                continue;\\n            }\\n            // Copy the following L characters and append them to the\\n            // uncompressed string.\\n            const start = i + 1;\\n            const end = start + ell;\\n            result = result.concat(data.slice(start, end));\\n            chunk_type = lx_chunk();\\n            i = end;\\n            continue;\\n        }\\n        // This chunk is of type LX, which has 2 characters.\\n        assert(lx_chunk() == chunk_type);\\n        // Do we end the chunk now?\\n        if (end_now(ell)) {\\n            i++;\\n            chunk_type = lstr_chunk();\\n            continue;\\n        }\\n        // Backtrack X characters in the uncompressed string.  Copy and append\\n        // the X-th character to the uncompressed string.  Repeat L times.\\n        const x = parseInt(data[i + 1], base);\\n        for (let j = 0; j < ell; j++) {\\n            const k = result.length - x;\\n            result = result.concat(result[k]);\\n        }\\n        chunk_type = lstr_chunk();\\n        i += 2;\\n    }\\n    return result;\\n}\\n\\n/**\\n * Whether to end a chunk now.  Each chunk is either of the formats L<string>\\n * or LX.  Here, L is a decimal digit between 0 and 9, inclusive.\\n *\\n * @param ell The first part of any chunk, denoted as L.  Assumed to be a\\n *     decimal digit between 0 and 9, inclusive.\\n * @return true if a chunk ends now; false otherwise.\\n */\\nfunction end_now(ell) {\\n    return 0 == ell;\\n}\\n\\n/**\\n * The integer value that represents the chunk format L<string>.\\n */\\nfunction lstr_chunk() {\\n    return 1;\\n}\\n\\n/**\\n * The integer value that represents the chunk format LX.\\n */\\nfunction lx_chunk() {\\n    return 2;\\n}\\n\\n/**\\n * Compression II: LZ Decompression: Lempel-Ziv (LZ) compression is a data\\n * compression technique that encodes data using references to earlier parts of\\n * the data.  In this variant of LZ, data is encoded as two types of chunk.\\n * Each chunk begins with a length L, encoded as a single ASCII digit from 1 to\\n * 9, followed by the chunk data, which is either:\\n *\\n * 1. Exactly L characters, which are to be copied directly into the\\n *    uncompressed data.\\n * 2. A reference to an earlier part of the uncompressed data.  To do this, the\\n *    length is followed by a second ASCII digit X.  Each of the L output\\n *    characters is a copy of the character X places before it in the\\n *    uncompressed data.\\n *\\n * For both chunk types, a length of 0 instead means the chunk ends\\n * immediately, and the next character is the start of a new chunk.  The two\\n * chunk types alternate, starting with type 1, and the final chunk may be of\\n * either type.  You are given an LZ-encoded string.  Decode it and output the\\n * original string.\\n *\\n * Usage: run lzd.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const data = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        decompress(data), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/lzd.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/lzd.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/952c622a-2915-4468-b8d6-45f0503fb0c6\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/42f607e6-b259-4874-9c16-abbbae3cf01d\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/283ac6c6-f478-4b9d-8bc0-b89d657e17c2\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/cb976904-9d94-4072-8825-c8c291077ac1\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c57f1d3b-9aed-4d1d-b057-c48cd9220400\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/56e63b05-973b-45a6-80c7-c568bb13c394\",\"moduleSequenceNumber\":6130},{\"filename\":\"/cct/lzd.js\",\"url\":\"blob:https://danielyxie.github.io/bde6d49f-bc4f-44df-b4f4-023b926698f0\",\"moduleSequenceNumber\":6292}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * All valid mathematical expressions, each of which evaluates to a target\\n * number.  Each expression results from inserting zero, one, or more of the\\n * following operators between decimal digits: addition (+), subtraction (-),\\n * multiplication (*).\\n *\\n * @param ns The Netscript API.\\n * @param string A string of decimal digits.  Cannot be empty.\\n * @param target An expression must evaluate to this number.\\n * @return An array of strings, each of which is an expression that evaluates\\n *     to the target number.\\n */\\nasync function all_expressions(ns, string, target) {\\n    assert(string.length > 0);\\n    // We try all possibilities.  Each partial solution is an array [i, expr]\\n    // as follows:\\n    //\\n    // (1) i := The highest index in the partial expression expr where an\\n    //     operator can be found.  If i < 0, then we have not inserted any\\n    //     operators into expr.\\n    // (2) expr := A partial expression, represented as a string.\\n    const stack = new Array();\\n    const solution = new Array();\\n    stack.push([-1, string]);\\n    const t = new Time();\\n    const time = t.millisecond();\\n    while (stack.length > 0) {\\n        // Create new expressions by inserting different operators at all\\n        // possible positions.\\n        const [i, expr] = stack.pop();\\n        const newexpr = insert_operators(expr, i);\\n        // No new expressions can be created from the given expression.\\n        if (0 == newexpr.length) {\\n            continue;\\n        }\\n        // Test each new expression to see whether it evaluates to the target\\n        // number.\\n        for (let j = 0; j < newexpr.length; j++) {\\n            const [idx, expression] = newexpr[j];\\n            stack.push([idx, expression]);\\n            if (!has_leading_zero(expression)\\n                && (target == evaluate(expression))\\n               ) {\\n                solution.push(expression);\\n            }\\n        }\\n        await ns.sleep(time);\\n    }\\n    return [...new Set(solution)];\\n}\\n\\n/**\\n * Evaluate a mathematical expression.\\n *\\n * @param str A string representation of a mathematical expression.\\n * @return The value of the given mathematical expression.\\n */\\nfunction evaluate(str) {\\n    return Function(`\\\"use strict\\\"; return (${str})`)();\\n}\\n\\n/**\\n * Whether an operand in an expression has a leading zero.  An operand can be\\n * zero itself.  However, if an operand is made up of multiple digits, then the\\n * very first digit cannot be zero.  For example, the expression \\\"1+0-2\\\" is\\n * accepted because we have an operand that is zero.  However, the expression\\n * \\\"1+02\\\" is invalid because the operand \\\"02\\\" has a leading zero.\\n *\\n * @param expr An expression represented as a string.  Cannot be an empty\\n *     string.\\n * @return true if an operand in the given expression has a leading zero;\\n *     false otherwise.\\n */\\nfunction has_leading_zero(expr) {\\n    assert(expr.length > 0);\\n    assert(\\\"0\\\" != expr[0]);\\n    const whitespace = \\\" \\\";\\n    let newexpr = new String(expr);\\n    for (const op of operators()) {\\n        newexpr = newexpr.replaceAll(op, whitespace);\\n    }\\n    const digit = newexpr.split(whitespace);\\n    for (const d of digit) {\\n        if ((\\\"0\\\" == d[0]) && (d.length > 1)) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\n/**\\n * Insert all possible operators at each possible index.\\n *\\n * @param expr An expression, represented as a string.  Cannot be an empty\\n *     string.\\n * @param i The highest index in expr where an operator can be found.  The\\n *     value of -1 means expr does not have any operators.\\n * @return An array of new expressions, each expression is a string.  Each\\n *     element of the array is an array [idx, newexpr] as follows.\\n *\\n *     (1) idx := The highest index in newexpr at which an operator is located.\\n *     (2) newexpr := A string representing an expression created from the\\n *         given expression.\\n *\\n *     Return an empty array if no new expressions can be created from the\\n *     given expression.\\n */\\nfunction insert_operators(expr, i) {\\n    // Sanity checks.\\n    assert(expr.length > 0);\\n    assert(i >= -1);\\n    const n = expr.length;\\n    const k = n - 1;\\n    assert(i < k);\\n    // No further expressions can be created from the given expression.\\n    if (i == (k - 1)) {\\n        return [];\\n    }\\n    // Let k be the index of the last character in the string expr.  Let i be\\n    // the highest index in expr where an operator can be found.  Let op be an\\n    // operator we want to insert into expr.  The operator is to be inserted\\n    // at an index j such that i < j < k.  To insert op at index j, first we\\n    // shift by one position rightward all characters having indices at least\\n    // j.  The character that previously had index j now has index j+1, the\\n    // character whose former index is j+1 now has index j+2, etc.  Then we\\n    // insert op at index j in the string.\\n    //\\n    // The lowest value for j is i+2.  Index i in expr has an operator so index\\n    // i+1 should have a decimal digit.  If op is inserted at index i+1, then\\n    // two adjacent indices would have operators, resulting in an invalid\\n    // mathematical expression.  For example, how are we to evaluate the\\n    // expression \\\"1+*2\\\"?  The highest value for j is k.  All possible values\\n    // for j are contained in the set Ind := {i+2, i+3, i+4, ..., k}.  We\\n    // insert op at each of the indices in Ind, each insertion creates a new\\n    // expression that can later be processed via backtracking.\\n    //\\n    // Now consider two decimal digits\\n    //\\n    // expr[j-1] expr[j]\\n    //\\n    // in expr and we want to insert op at index j.  Normally we can insert op\\n    // and obtain the new substring\\n    //\\n    // (i) expr[j-1] op expr[j+1]\\n    //\\n    // We can also perform the insertion as follows:\\n    //\\n    // (ii) expr[j-1] op neg expr[j+2]\\n    //\\n    // where \\\"neg\\\" means the negative sign.  The decimal digit expr[j+2] is now\\n    // a negative integer.  As implied by the problem statement, we are not\\n    // allowed to flip the sign of any digit.  Thus case (i) above is allowed,\\n    // but case (ii) is prohibited.\\n    const candidate = new Array();\\n    for (let j = i + 2; j < n; j++) {\\n        for (const op of operators()) {\\n            const newexpr = expr.slice(0, j) + op + expr.slice(j, n);\\n            candidate.push([j, newexpr]);\\n        }\\n    }\\n    return candidate;\\n}\\n\\n/**\\n * All valid operators that can be inserted into a digit string.  We do not\\n * include the operator \\\"--\\\" because it is equivalent to the addition operator.\\n * The operator \\\"+-\\\" is equivalent to the subtraction operator.  The operator\\n * \\\"*-\\\" is excluded because it would flip the sign of a digit from positive to\\n * negative.  We are prohibited from flipping the sign of each decimal digit.\\n */\\nfunction operators() {\\n    return [\\\"+\\\", \\\"-\\\", \\\"*\\\"];\\n}\\n\\n/**\\n * Find All Valid Math Expressions: You are given an array containing two\\n * elements.  The first element is a string that contains only digits between\\n * 0 and 9.  The second element is a target number.  Return all possible ways\\n * you can add the +, -, and * operators to the string of digits such that it\\n * evaluates to the target number.  The answer should be provided as an array\\n * of strings containing the valid expressions.\\n * NOTE: Numbers in an expression cannot have leading 0s.\\n * NOTE: The order of evaluation expects script operator precedence.\\n *\\n * Example 1:\\n * Input: digits = \\\"123\\\", target = 6\\n * Output: [1+2+3, 1*2*3]\\n *\\n * Example 2:\\n * Input: digits = \\\"105\\\", target = 5\\n * Output: [1*0+5, 10-5]\\n *\\n * In Example 1, we have two possible valid solutions.  Note that the\\n * expression \\\"1*-2*-3\\\" also evaluates to 6.  From the problem description, we\\n * infer the following restrictions on any solution we output.\\n *\\n * (1) Each decimal digit is non-negative.\\n * (2) We are not allowed to flip the sign of a digit.  For example, in the\\n *     expression \\\"1*-2*-3\\\" we flipped the sign of the digit \\\"2\\\" from positive\\n *     to negative.  Thus the expression \\\"1*-2*-3\\\" is an invalid solution,\\n *     although it evaluates to the target number.\\n * (3) We are not allowed to insert the operator \\\"-\\\" at index 0 of the digit\\n *     string.\\n * (4) The digit string does not have \\\"0\\\" at index 0.\\n * (5) An operand can be zero, but it cannot have a leading zero.  For example,\\n *     an expression such as \\\"1+0+3\\\" is accepted, but the expression \\\"1+03\\\" is\\n *     invalid because the operand \\\"03\\\" has a leading zero.\\n *\\n * Usage: run maths.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [string, target] = ns.codingcontract.getData(cct, host);\\n    const solution = await all_expressions(ns, string, target);\\n    const result = ns.codingcontract.attempt(\\n        solution, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/maths.txt\\\";\\n        const data = string + \\\", \\\" + target;\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/maths.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Whether the parentheses in the given expression are balanced.\\n *\\n * @param expression A string consisting of parentheses and other characters.\\n *     The parentheses in this string are possibly unbalanced.  Cannot be an\\n *     empty string.\\n * @return true if the parentheses in the given expression are balanced;\\n *     false otherwise.\\n */\\nfunction is_balanced(expression) {\\n    assert(expression.length > 0);\\n    const VALID = true;\\n    const NOT_VALID = !VALID;\\n    // The stack data structure is perfect for this problem.\\n    const stack = new Array();\\n    // The starting or opening parenthesis.\\n    const open = \\\"(\\\";\\n    // The ending or closing parenthesis.\\n    const close = \\\")\\\";\\n    for (const c of expression) {\\n        // Is this character the starting parenthesis?\\n        if (open == c) {\\n            stack.push(c);\\n            continue;\\n        }\\n        // Is this character the ending parenthesis?\\n        if (close == c) {\\n            // We have an ending parenthesis, but the stack is empty.\\n            if (0 == stack.length) {\\n                return NOT_VALID;\\n            }\\n            // This ending parenthesis must be matched with an opening\\n            // parenthesis at the top of the stack.\\n            if (open == stack[stack.length - 1]) {\\n                stack.pop();\\n                continue;\\n            }\\n            // We encounter a closing parenthesis, but the top of the stack\\n            // does not contain an opening parenthesis.\\n            return NOT_VALID;\\n        }\\n    }\\n    // Every opening parenthesis should be matched with a closing parenthesis.\\n    // If the stack has zero elements, then the expression is balanced.\\n    if (0 == stack.length) {\\n        return VALID;\\n    }\\n    return NOT_VALID;\\n}\\n\\n/**\\n * Whether a character represents an opening or closing parenthesis.\\n *\\n * @param c A character.\\n * @return true if the given character is a parenthesis; false otherwise.\\n */\\nfunction is_parenthesis(c) {\\n    assert(1 == c.length);\\n    const open = \\\"(\\\";\\n    const close = \\\")\\\";\\n    if ((open == c) || (close == c)) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * Slice an expression by removing a character at the given index.\\n *\\n * @param expr We want to prune one character from this expression.  The\\n *     expression is represented as a string.\\n * @param i Remove the character expr[i] at index i.\\n * @return A sub-expression obtained by removing from expr the character\\n *     at index i.  We do not modify the given expression.\\n */\\nfunction slice(expr, i) {\\n    // Sanity checks.\\n    assert(expr.length > 0);\\n    assert(i >= 0);\\n    assert(i < expr.length);\\n    // Remove the character at index i.\\n    return expr.slice(0, i) + expr.slice(i + 1, expr.length);\\n}\\n\\n/**\\n * Sanitize parentheses in an expression by removing the minimum number of\\n * parentheses such that the resulting expression has balanced parentheses.\\n * The problem can be considered from a combinatorial perspective.  We\\n * determine the minimum number k of parentheses to remove.  Let n be the\\n * number of parentheses in the expression, including both opening and closing\\n * parentheses.  We find all possible k-combinations of the n parentheses.  For\\n * each k-combination, we remove the corresponding parentheses from the\\n * expression and let the resulting expression be expr.  If expr has balanced\\n * parentheses, then add expr to our set of solutions.  The difficult part of\\n * this method is choosing an algorithm for generating all k-combinations from\\n * a set of n objects.  Some algorithms run in exponential time while others\\n * run in factorial time, which is worse than exponential time.  Refer to these\\n * pages for more details:\\n *\\n * https://medium.com/enjoy-algorithm/find-all-possible-combinations-of-k-numbers-from-1-to-n-88f8e3fad33c\\n * https://stackoverflow.com/questions/127704/algorithm-to-return-all-combinations-of-k-elements-from-n\\n *\\n * A simpler method consists of scanning the expression one character at a\\n * time.  For each index i, if the character at index i is a parenthesis, we\\n * form a new expression by removing the character at index i in the current\\n * expression.  Thus we have an array of new expressions, each constructed by\\n * removing one parenthesis from the current expression.  Test each of these\\n * new expressions to see whether any of them have balanced parentheses.  We\\n * have two cases:\\n *\\n * (1) At least one of the new expressions has balanced parentheses.  Our\\n *     solution set consists of all new expressions that have balanced\\n *     parentheses.\\n * (2) None of the new expressions have balanced parentheses.  Apply the above\\n *     scanning algorithm to these new expressions and repeat the above\\n *     process.\\n *\\n * The above method follows a pattern similar to breath-first search.  As soon\\n * as we encounter a sub-expression that has balanced parentheses, we no longer\\n * need to remove one character to form new sub-expressions.\\n *\\n * @param string An expression containing parentheses and other characters.\\n *     The parentheses in the expression are possibly unbalanced.\\n * @return An array of strings.  Each string has balanced parentheses.  We\\n *     removed the same number of parentheses to result in each balanced\\n *     expression.\\n */\\nfunction sanitize(string) {\\n    assert(string.length > 0);\\n    // Test the expression at the start of this array.\\n    const queue = new Array();\\n    queue.push(string);\\n    // All expressions and sub-expressions we have considered.\\n    const seen = new Set();\\n    seen.add(string);\\n    // All expressions that have balanced parentheses.\\n    const result = new Array();\\n    // Whether we need to prune one parenthesis from an expression to\\n    // create a new sub-expression.\\n    let prune = true;\\n    // Use a pattern similar to breath-first search to test expressions and\\n    // their sub-expressions.  Let exprA and exprB be expressions.  We consider\\n    // them as nodes in a directed graph.  If exprB can be obtained by removing\\n    // one parenthesis from exprA, then there is a directed edge from exprA\\n    // to exprB.\\n    while (queue.length > 0) {\\n        // Get the first element of the queue.\\n        const expr = queue.shift();\\n        // Does this expression have balanced parentheses?\\n        if (is_balanced(expr)) {\\n            result.push(expr);\\n            // We have removed enough number of parentheses to result in at\\n            // least one sub-expression having balanced parentheses.  No more\\n            // pruning needed.\\n            prune = false;\\n        }\\n        // Do we need to prune a parenthesis from the current sub-expression?\\n        if (!prune) {\\n            continue;\\n        }\\n        // Prune a parenthesis from the current expression.  Each sub-expression\\n        // is obtained by removing a character at index i, provided that the\\n        // character is a parenthesis.\\n        for (let i = 0; i < expr.length; i++) {\\n            if (!is_parenthesis(expr[i])) {\\n                continue;\\n            }\\n            const sub_expr = slice(expr, i);\\n            if (seen.has(sub_expr)) {\\n                continue;\\n            }\\n            queue.push(sub_expr);\\n            seen.add(sub_expr);\\n        }\\n    }\\n    return result;\\n}\\n\\n/**\\n * Sanitize Parentheses in Expression: Given a string with parentheses and\\n * letters, remove the minimum number of invalid parentheses in order to\\n * validate the string.  If there are multiple minimal ways to validate the\\n * string, provide all of the possible results.  The answer should be provided\\n * as an array of strings.  If it is impossible to validate the string, the\\n * result should be an array with only an empty string.\\n *\\n * This is essentially the balanced brackets problem.  The twist is that we\\n * must remove the minimum number of parentheses to balance the parentheses.\\n *\\n * Usage: run parenthesis.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const expression = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        sanitize(expression), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/parenthesis.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, expression);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/parenthesis.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/f289dafe-cc78-4e63-a6b4-79956535186d\",\"moduleSequenceNumber\":395},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/eff88e1d-8c15-4be6-85ff-5179adf54e98\",\"moduleSequenceNumber\":402},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b4fa40c8-1637-475f-b20e-7196223bf341\",\"moduleSequenceNumber\":395},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/efb9f0b0-b488-42cc-b1a5-ba7b0f46509f\",\"moduleSequenceNumber\":402},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/9182cc50-d27a-49f2-b09c-350614643964\",\"moduleSequenceNumber\":394},{\"filename\":\"/cct/parenthesis.js\",\"url\":\"blob:https://danielyxie.github.io/1b0c58fb-751e-487b-865e-fd471f9e6de8\",\"moduleSequenceNumber\":3589}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Obtain a factor of a positive integer.\\n *\\n * @param n A positive integer greater than 1.\\n * @return A factor of n.  If 1 and n are the only factors of n, then n is\\n *     prime so return n.\\n */\\nfunction factor(n) {\\n    assert(n > 1);\\n    // If n is even, then 2 is a factor of n.\\n    if (is_even(n)) {\\n        return 2;\\n    }\\n    // Use trial division to find a factor of n.  Suppose n can be factorized\\n    // as n = ab, where a > 1 and b > 1.  If n is a perfect square, then\\n    // n = ab = a^2.  Assume n is not a perfect square.  One of the factors a\\n    // and b is at most sqrt(n).  Divide n by odd integers between 3 and\\n    // sqrt(n), inclusive.\\n    const max = Math.ceil(Math.sqrt(n));\\n    let i = 3;\\n    while (i <= max) {\\n        const remainder = n % i;\\n        // Found a factor of n.\\n        if (0 == remainder) {\\n            return i;\\n        }\\n        i += 2;\\n    }\\n    assert(i > max);\\n    return n;\\n}\\n\\n/**\\n * Whether a number is even.\\n *\\n * @param n A positive integer greater than 1.\\n * @return true if n is even; false otherwise.\\n */\\nfunction is_even(n) {\\n    assert(n > 1);\\n    const remainder = n % 2;\\n    if (0 == remainder) {\\n        return true;\\n    }\\n    return false;\\n}\\n\\n/**\\n * The largest prime factor of a positive integer.\\n *\\n * @param n A positive integer greater than 1.\\n * @return The largest prime factor of the given integer.\\n *     Return -1 if there is an error.\\n */\\nfunction max_prime_factor(n) {\\n    // Sanity checks.\\n    assert(n > 1);\\n    assert(Number.isSafeInteger(n));\\n    // Determine the largest prime factor.\\n    const pfactor = prime_factorization(n);\\n    const array = new MyArray();\\n    return array.max(pfactor);\\n}\\n\\n/**\\n * The prime factorization of a positive integer.\\n *\\n * @param n A positive integer greater than 1.\\n * @return An array containing the prime factorization of n.\\n */\\nfunction prime_factorization(n) {\\n    assert(n > 1);\\n    // First, take care of the small primes.\\n    const prime = [2, 3, 5, 7, 11];\\n    if (prime.includes(n)) {\\n        return [n];\\n    }\\n    // A list of factors of n.  We want to break these factors into prime\\n    // factors.\\n    const candidate = [n];\\n    // The prime factors of n.\\n    const pfactor = new Array();\\n    while (candidate.length > 0) {\\n        const k = candidate.pop();\\n        const a = factor(k);\\n        // k cannot be factorized any further, hence is prime.\\n        if (a == k) {\\n            pfactor.push(k);\\n            continue;\\n        }\\n        // The integer a is a factor of k.  Obtain another factor b such that\\n        // ab == k, where a > 1, b > 1, and each factor is less than k.\\n        assert(a > 1);\\n        assert(a < k);\\n        const b = k / a;\\n        const remainder = k % b;\\n        assert(0 == remainder);\\n        candidate.push(a);\\n        candidate.push(b);\\n    }\\n    return pfactor;\\n}\\n\\n/**\\n * Find Largest Prime Factor: Given a number, find its largest prime\\n * factor.  A prime factor is a factor that is a prime number.\\n *\\n * Determine the largest prime factor of an integer.  See Wikipedia for\\n * more details:\\n *\\n * https://en.wikipedia.org/wiki/Integer_factorization\\n *\\n * Usage: run prime.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const n = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        max_prime_factor(n), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/prime.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, n);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/prime.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/6f8be528-fa98-48ad-b1ee-16359a0d0c09\",\"moduleSequenceNumber\":137},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f483d320-6391-4128-afba-9a64e6ada9dc\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/78a7a204-5019-423e-ba7c-bae40141ba60\",\"moduleSequenceNumber\":137},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/a2a12ba8-7dcd-4efb-9996-5b1e3b3ba400\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/e8709dc7-45dc-450f-a817-08d41e69723c\",\"moduleSequenceNumber\":136},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/85e57567-1b01-46b4-aaa8-2031320b1549\",\"moduleSequenceNumber\":137},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/d26520cf-5f9f-40ff-a667-aa2945c29002\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/1c1ac069-b6c2-48c7-a2c1-e4eaa390b537\",\"moduleSequenceNumber\":135},{\"filename\":\"/cct/prime.js\",\"url\":\"blob:https://danielyxie.github.io/3d968d91-6dae-4e63-a492-c5fe9ffe2181\",\"moduleSequenceNumber\":1396}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Encode a string that consists of the same character.\\n *\\n * @param c A character.\\n * @param n The run-length of the given character.\\n * @return A run-length encoding of the given character.\\n */\\nfunction encode(c, n) {\\n    assert(1 == c.length);\\n    assert(n > 0);\\n    let k = n;\\n    const max = 9;\\n    if (k <= max) {\\n        return k + \\\"\\\" + c;\\n    }\\n    // A run-length of more than 9 is split into multiple runs.\\n    const s = new Array();\\n    do {\\n        s.push(max + \\\"\\\" + c);\\n        k -= max;\\n    } while (k > max);\\n    s.push(k + \\\"\\\" + c);\\n    return s.join(\\\"\\\");\\n}\\n\\n/**\\n * The run-length encoding (RLE) of a string.\\n *\\n * @param string We want to compress this string by means of run-length\\n *     encoding.\\n * @return The RLE of the given string.\\n */\\nfunction rle(string) {\\n    const str = string;\\n    let n = 1;\\n    let c = str[0];\\n    const e = new Array();\\n    const lastidx = string.length - 1;\\n    for (let i = 1; i < str.length; i++) {\\n        // Is this character the same as the previous character?\\n        if (c == str[i]) {\\n            n++;\\n            // Are we at the end of the string?\\n            if (i == lastidx) {\\n                e.push(encode(c, n));\\n                break;\\n            }\\n            continue;\\n        }\\n        // The current character is different from the previous character.\\n        e.push(encode(c, n));\\n        n = 1;\\n        c = str[i];\\n        // Are we at the end of the string?\\n        if (i == lastidx) {\\n            e.push(encode(c, n));\\n        }\\n    }\\n    return e.join(\\\"\\\");\\n}\\n\\n/**\\n * Compression I: RLE Compression: Run-length encoding (RLE) is a data\\n * compression technique which encodes data as a series of runs of a repeated\\n * single character.  Runs are encoded as a length, followed by the character\\n * itself.  Lengths are encoded as a single ASCII digit.  Runs of 10 characters\\n * or more are encoded by splitting them into multiple runs.  You are given a\\n * string as input.  Encode it using run-length encoding with the minimum\\n * possible output length.\\n *\\n * Usage: run rle.js [cct] [hostname]\\n *\\n * @param ns\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const string = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        rle(string), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/rle.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, string);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/rle.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b3dd3fe2-d5db-4260-b020-defe2fbb4e5b\",\"moduleSequenceNumber\":6567},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/7787d662-673d-4704-a85e-f2da9db1a906\",\"moduleSequenceNumber\":6574},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/eb653314-8734-4657-9a0a-e265bddbad08\",\"moduleSequenceNumber\":6567},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/45b7bcde-8098-4c34-8905-b2654f3b2cf8\",\"moduleSequenceNumber\":6574},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/9c87b962-55b3-41de-b624-5d0e755a5277\",\"moduleSequenceNumber\":6566},{\"filename\":\"/cct/rle.js\",\"url\":\"blob:https://danielyxie.github.io/af129d06-31f7-47dc-b233-f919d6f77584\",\"moduleSequenceNumber\":8131}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { network } from \\\"/lib/network.js\\\";\\nimport { Player } from \\\"/lib/player.js\\\";\\nimport { Server } from \\\"/lib/server.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\n\\n/**\\n * Do we have enough free RAM on the home server to run the given script?\\n *\\n * @param ns The Netscript API.\\n * @param script We want to run this script on our home server.\\n * @return true if enough free RAM is available to execute the script;\\n *     false otherwise.\\n */\\nfunction can_run_script(ns, script) {\\n    const player = new Player(ns);\\n    const server = new Server(ns, player.home());\\n    return server.can_run_script(script);\\n}\\n\\n/**\\n * Solve a coding contract.\\n *\\n * @param ns The Netscript API.\\n * @param cct The file name of the coding contract.\\n * @param host The host name of the server on which the coding contract is\\n *     located.\\n */\\nfunction solve(ns, cct, host) {\\n    const player = new Player(ns);\\n    const nthread = 1;\\n    const type = ns.codingcontract.getContractType(cct, host);\\n    // Determine the type of the coding contract and set the appropriate\\n    // solution script.\\n    let script = \\\"\\\";\\n    const prefix = \\\"/cct/\\\";\\n    switch (type) {\\n        case \\\"Algorithmic Stock Trader I\\\":\\n            script = prefix + \\\"trader.js\\\";\\n            break;\\n        case \\\"Algorithmic Stock Trader II\\\":\\n            script = prefix + \\\"trader2.js\\\";\\n            break;\\n        case \\\"Algorithmic Stock Trader III\\\":\\n            script = prefix + \\\"trader3.js\\\";\\n            break;\\n        case \\\"Algorithmic Stock Trader IV\\\":\\n            script = prefix + \\\"trader4.js\\\";\\n            break;\\n        case \\\"Array Jumping Game\\\":\\n            script = prefix + \\\"jump.js\\\";\\n            break;\\n        case \\\"Array Jumping Game II\\\":\\n            script = prefix + \\\"jump2.js\\\";\\n            break;\\n        case \\\"Compression I: RLE Compression\\\":\\n            script = prefix + \\\"rle.js\\\";\\n            break;\\n        case \\\"Compression II: LZ Decompression\\\":\\n            script = prefix + \\\"lzd.js\\\";\\n            break;\\n        case \\\"Compression III: LZ Compression\\\":\\n            script = prefix + \\\"lzc.js\\\";\\n            break;\\n        case \\\"Encryption I: Caesar Cipher\\\":\\n            script = prefix + \\\"caesar.js\\\";\\n            break;\\n        case \\\"Encryption II: Vigen�re Cipher\\\":\\n            script = prefix + \\\"vigenere.js\\\";\\n            break;\\n        case \\\"Find All Valid Math Expressions\\\":\\n            script = prefix + \\\"maths.js\\\";\\n            break;\\n        case \\\"Find Largest Prime Factor\\\":\\n            script = prefix + \\\"prime.js\\\";\\n            break;\\n        case \\\"Generate IP Addresses\\\":\\n            script = prefix + \\\"ip.js\\\";\\n            break;\\n        case \\\"HammingCodes: Encoded Binary to Integer\\\":\\n            script = prefix + \\\"hamming2.js\\\";\\n            break;\\n        case \\\"HammingCodes: Integer to Encoded Binary\\\":\\n            script = prefix + \\\"hamming.js\\\";\\n            break;\\n        case \\\"Merge Overlapping Intervals\\\":\\n            script = prefix + \\\"interval.js\\\";\\n            break;\\n        case \\\"Minimum Path Sum in a Triangle\\\":\\n            script = prefix + \\\"triangle.js\\\";\\n            break;\\n        case \\\"Proper 2-Coloring of a Graph\\\":\\n            script = prefix + \\\"bipartite.js\\\";\\n            break;\\n        case \\\"Sanitize Parentheses in Expression\\\":\\n            script = prefix + \\\"parenthesis.js\\\";\\n            break;\\n        case \\\"Shortest Path in a Grid\\\":\\n            script = prefix + \\\"grid3.js\\\";\\n            break;\\n        case \\\"Spiralize Matrix\\\":\\n            script = prefix + \\\"spiral.js\\\";\\n            break;\\n        case \\\"Subarray with Maximum Sum\\\":\\n            script = prefix + \\\"subarray.js\\\";\\n            break;\\n        case \\\"Total Ways to Sum\\\":\\n            script = prefix + \\\"sum.js\\\";\\n            break;\\n        case \\\"Total Ways to Sum II\\\":\\n            script = prefix + \\\"sum2.js\\\";\\n            break;\\n        case \\\"Unique Paths in a Grid I\\\":\\n            script = prefix + \\\"grid.js\\\";\\n            break;\\n        case \\\"Unique Paths in a Grid II\\\":\\n            script = prefix + \\\"grid2.js\\\";\\n            break;\\n        default:\\n            script = \\\"\\\";\\n            break;\\n    }\\n    // No script to run, possibly because there are no coding contracts on any\\n    // of the world servers.\\n    if (script.length < 1) {\\n        return;\\n    }\\n    // Run the appropriate script to solve the coding contract.\\n    if (can_run_script(ns, script)) {\\n        ns.exec(script, player.home(), nthread, cct, host);\\n    } else {\\n        const err_msg = host + \\\": \\\" + cct +\\n              \\\": No free RAM to run \\\" + script + \\\" on server \\\" + player.home();\\n        ns.print(err_msg);\\n    }\\n}\\n\\n/**\\n * Find coding contracts on world servers.  This script essentially searches\\n * the network of world servers to find coding contracts.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Make the log less verbose.\\n    ns.disableLog(\\\"getServerUsedRam\\\");\\n    ns.disableLog(\\\"scan\\\");\\n    ns.disableLog(\\\"sleep\\\");\\n\\n    const time = new Time();\\n    const t = 5 * time.minute();\\n    const server = network(ns);\\n    server.push(\\\"home\\\");\\n    // Continuously search for coding contracts.  Solve a coding contract,\\n    // provided we have a solution script.\\n    while (true) {\\n        for (const s of server) {\\n            const file = ns.ls(s, \\\".cct\\\");\\n            // No coding contracts on this server.\\n            if (file.length < 1) {\\n                continue;\\n            }\\n            // Solve all coding contracts on this server.\\n            for (const cct of file) {\\n                solve(ns, cct, s);\\n            }\\n        }\\n        await ns.sleep(t);\\n    }\\n}\\n\",\"filename\":\"/cct/solver.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/056083cb-8325-47a9-8f7c-1ecf01187720\",\"moduleSequenceNumber\":9902},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/51bcd258-d9c1-43d8-a161-3a50747e3bb0\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/a5cdb96f-8e3c-4d72-836f-1992212ce460\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/37cf7dba-cd01-495a-8b73-eb10cff626d4\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/server.js\",\"url\":\"blob:https://danielyxie.github.io/28ad0422-e29f-4c42-8780-1fae6635931a\",\"moduleSequenceNumber\":9901},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/b200ae75-ae8b-40c7-ac4f-c863b1968387\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/d3a588dc-b895-497d-a478-d1777f1abb13\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/8aa66d7f-0d07-4836-865c-ec49aa710d68\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/player.js\",\"url\":\"blob:https://danielyxie.github.io/4895296e-d7a1-41cf-b2ec-e2e037d27a41\",\"moduleSequenceNumber\":9899},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/beb45b50-c867-4a22-8756-8bfe61de459a\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/adebe878-717f-4fba-8bce-9d753adb584d\",\"moduleSequenceNumber\":9903},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2d215a63-1a68-4a8e-a2cf-f3b1e0783e96\",\"moduleSequenceNumber\":9896},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/b7610d87-44e4-4e8e-9b92-aefa6e7a40c2\",\"moduleSequenceNumber\":9898},{\"filename\":\"/cct/solver.js\",\"url\":\"blob:https://danielyxie.github.io/096578ac-6d04-46ad-bf44-58aabe2e3791\",\"moduleSequenceNumber\":9940}],\"dependents\":[],\"ramUsage\":15.4,\"server\":\"home\",\"moduleSequenceNumber\":10369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getServerUsedRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, matrix_to_string, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Trace out a ring inside a 2-D matrix.\\n *\\n * @param m A 2-D matrix, represented as an array of arrays.\\n * @param [tlr, tlc] The coordinates of the top-left element of the ring.\\n *     \\\"r\\\" and \\\"c\\\" mean row and column, respectively.\\n * @param [brr, brc] The coordinates of the bottom-right element of the ring.\\n *     \\\"r\\\" and \\\"c\\\" mean row and column, respectively.\\n */\\nfunction ring(m, tlr, tlc, brr, brc) {\\n    // Top-left to top-right.\\n    let array = new Array();\\n    let elem = new Array();\\n    if (tlc <= brc) {\\n        array = m[tlr];\\n        elem = Array.from(array.slice(tlc, brc + 1));\\n    }\\n    // Is this a matrix of one row?\\n    if (tlr == brr) {\\n        return elem;\\n    }\\n    // Top-right to bottom-right.\\n    if (tlr < brr) {\\n        for (let r = tlr + 1; r <= brr; r++) {\\n            elem.push(m[r][brc]);\\n        }\\n    }\\n    // Do we have a matrix of one column?\\n    if (tlc == brc) {\\n        return elem;\\n    }\\n    // Bottom-right to bottom-left.\\n    if (tlc < brc) {\\n        array = m[brr];\\n        const arr = Array.from(array.slice(tlc, brc));\\n        elem = elem.concat(arr.reverse());\\n    }\\n    // Bottom-left to top-left.\\n    if (tlr < brr) {\\n        const arr = new Array();\\n        for (let r = tlr + 1; r < brr; r++) {\\n            arr.push(m[r][tlc]);\\n        }\\n        elem = elem.concat(arr.reverse());\\n    }\\n    return elem;\\n}\\n\\n/**\\n * The elements of a 2-D matrix in spiral order, going in clockwise direction.\\n *\\n * @param m A 2-D matrix, represented as an array of arrays.\\n * @return An array rerepsenting the elements of the matrix in spiral order.\\n */\\nfunction spiral(m) {\\n    // Sanity checks.\\n    assert(m.length > 0);\\n    const array = m[0];\\n    const nrow = m.length;\\n    const ncol = array.length;\\n    for (const a of m) {\\n        // Ensure each row has the same number of elements.\\n        assert(a.length > 0);\\n        assert(ncol == a.length);\\n    }\\n    // The spiral order of a matrix.\\n    let tlr = 0;         // top-left row\\n    let tlc = tlr;       // top-left column\\n    let brr = nrow - 1;  // bottom-right row\\n    let brc = ncol - 1;  // bottom-right column\\n    let elem = new Array();\\n    while ((tlr <= brr) && (tlc <= brc)) {\\n        elem = elem.concat(ring(m, tlr, tlc, brr, brc));\\n        tlr++;\\n        tlc++;\\n        brr--;\\n        brc--;\\n    }\\n    return elem;\\n}\\n\\n/**\\n * Spiralize Matrix: Given an array of array of numbers representing a 2D\\n * matrix, return the elements of that matrix in clockwise spiral order.\\n *\\n * Output the elements of a 2-D matrix in spiral order, going in clockwise\\n * direction.\\n *\\n * Usage: run spiral.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const matrix = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        spiral(matrix), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/spiral.txt\\\";\\n        const data = matrix_to_string(matrix);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/spiral.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/962798e1-c522-4d11-96bc-c4472e7722e0\",\"moduleSequenceNumber\":127},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f18d2c48-b379-49d9-91a2-8566718030f3\",\"moduleSequenceNumber\":134},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/1265d83f-4e15-47b1-8b51-d999339695b5\",\"moduleSequenceNumber\":127},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/e8ec4dd8-ea2e-4f57-a755-5be056bb6c2c\",\"moduleSequenceNumber\":134},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/fe9e78f9-6d9f-4e59-9a0c-b6236c0135ae\",\"moduleSequenceNumber\":126},{\"filename\":\"/cct/spiral.js\",\"url\":\"blob:https://danielyxie.github.io/6ddfe2c8-dd45-4a91-abba-ea328c1ed614\",\"moduleSequenceNumber\":5413}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The largest sum of a non-empty, contiguous subarray.\\n *\\n * @param array An array of integers.\\n * @return The largest sum of any non-empty, contiguous subarray of the given\\n *     array.\\n */\\nfunction subarray_sum(array) {\\n    // Use Kadane's algorithm.\\n    assert(array.length > 0);\\n    let best = Number.NEGATIVE_INFINITY;\\n    let current = 0;\\n    for (const n of array) {\\n        current = Math.max(n, current + n);\\n        best = Math.max(best, current);\\n    }\\n    return best;\\n}\\n\\n/**\\n * Subarray with Maximum Sum: Given an array of integers, find the\\n * contiguous subarray (containing at least one number) which has the\\n * largest sum and return that sum.\\n *\\n * Determine a non-empty, contiguous subarray that has the largest sum\\n * possible.  See Wikipedia for more details:\\n *\\n * https://en.wikipedia.org/wiki/Maximum_subarray_problem\\n *\\n * Usage: run subarray.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        subarray_sum(array), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/subarray.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/subarray.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2bf07bb6-8dec-41ea-9724-43ed0fcfb738\",\"moduleSequenceNumber\":4565},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/409aaeb9-9bd8-4bbb-8270-6fdfb2265ddc\",\"moduleSequenceNumber\":4572},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/243995bf-177f-4826-91df-8688fc5c8f0a\",\"moduleSequenceNumber\":4565},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/323a90b2-8819-4f6a-8815-9797becee3e9\",\"moduleSequenceNumber\":4572},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/24f6905a-73fd-4db5-845f-87be26f5e97f\",\"moduleSequenceNumber\":4565},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/8702ae07-8a79-4c13-b70a-090313466455\",\"moduleSequenceNumber\":4564},{\"filename\":\"/cct/subarray.js\",\"url\":\"blob:https://danielyxie.github.io/b4670808-0fe7-4ebd-be5c-3e370d1e971d\",\"moduleSequenceNumber\":5734}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\n\\n/**\\n * The number of possible partitions of a non-negative integer n.  That is,\\n * the number of ways to write n as a sum of positive integers.  In number\\n * theory, the partition function p(n) solves the problem.  Here, we use\\n * a recurrence relation due to Euler, derived from using Euler's pentagonal\\n * number theorem.  The recurrence relation is\\n *\\n * p(n) := \\\\sum_{k \\\\in PP} (-1)^{k-1} \\\\{ A + B \\\\}\\n *\\n * where\\n *\\n * A := p(n - k(3k - 1) / 2)\\n * B := p(n - k(3k + 1) / 2)\\n * PP := The set of all positive integers.\\n *\\n * In practice, we only sum up to and including k := n.  Refer to the following\\n * for more details:\\n *\\n * [1] https://en.wikipedia.org/wiki/Pentagonal_number_theorem\\n * [2] On Euler's Pentagonal Theorem\\n *     https://www.mathpages.com/home/kmath623/kmath623.htm\\n * [3] John A. Ewell.  Recurrences for the Partition Function and Its Relatives.\\n *     Rocky Mountain Journal of Mathematics, volume 34, issue 2, pp.619--627,\\n *     2004.\\n *     DOI: 10.1216/rmjm/1181069871\\n *\\n * @param n We want to determine the number of partitions of this number.\\n *     Must be a non-negative integer.\\n * @return Possible values:\\n *     * 1 if n = 0.\\n *     * 0 if n < 0.\\n *     * p(n)\\n */\\nlet partition = (function () {\\n    // A memoized version of the partition function.\\n    const cache = new Map();\\n    function p(n) {\\n        // Sanity check.\\n        const num = Math.floor(n);\\n        if (num < 0) {\\n            return 0;\\n        }\\n        // Base case.\\n        if (0 == num) {\\n            return 1;\\n        }\\n        // Check the cache.\\n        if (cache.has(num)) {\\n            return cache.get(num);\\n        }\\n        // Recursion.\\n        let sum = 0;\\n        for (let k = 1; k <= num; k++) {\\n            const c = (k * (3 * k - 1)) / 2;\\n            const d = (k * (3 * k + 1)) / 2;\\n            const a = p(num - c);\\n            const b = p(num - d);\\n            const sign = (-1) ** (k - 1);\\n            sum += sign * (a + b);\\n        }\\n        cache.set(num, sum);\\n        return cache.get(num);\\n    }\\n    return p;\\n})();\\n\\n/**\\n * Total Ways to Sum: Given a number, how many different distinct ways can\\n * that number be written as a sum of at least two positive integers?\\n *\\n * This is the problem of integer partition, in particular calculating\\n * the partition number of a positive integer.  The problem asks for a\\n * partition that has at least two parts, so we must subtract 1 from\\n * the partition number.  See Wikipedia for more details:\\n *\\n * https://en.wikipedia.org/wiki/Partition_(number_theory)\\n * https://en.wikipedia.org/wiki/Partition_function_(number_theory)\\n *\\n * Use Euler's pentagonal number theorem.\\n *\\n * Usage: run sum.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const n = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        partition(n) - 1, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/sum.txt\\\";\\n        await log_cct_failure(ns, log, cct, host, n);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/sum.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/080a68ac-a1df-41bc-96c2-13d677519d63\",\"moduleSequenceNumber\":10784},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/c8992633-71eb-4543-a0b2-4a99ad6a6062\",\"moduleSequenceNumber\":10791},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/ee7c20aa-8ea6-4233-8347-53e31ed420e4\",\"moduleSequenceNumber\":10783},{\"filename\":\"/cct/sum.js\",\"url\":\"blob:https://danielyxie.github.io/c502de03-ecdc-4e1c-8e43-384b0d222209\",\"moduleSequenceNumber\":10898}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { MyArray } from \\\"/lib/array.js\\\";\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The number of ways to change n using coins in the given set of\\n * denominations.\\n *\\n * @param n We want to partition this number.  Must be a positive integer.\\n * @param denom The array of denominations.  An array of positive integers to\\n *     use to partition n.  Elements of the array are unique.\\n * @return The number of ways to change n using the given denominations.\\n */\\nfunction coin_change(n, denom) {\\n    assert(n > 0);\\n    assert(denom.length > 0);\\n    // Sort the array of denominations in ascending order.\\n    let denomination = Array.from(new Set(denom));\\n    const array = new MyArray();\\n    denomination = array.sort_ascending(denomination);\\n    // Remove any coin value higher than n.\\n    let i = denomination.length - 1;\\n    while (n < denomination[i]) {\\n        denomination.pop();\\n        i = denomination.length - 1;\\n    }\\n    return partition(n, denomination);\\n}\\n\\n/**\\n * The number of ways to partition an integer using only integers from a given\\n * set.  Let n be our target sum and let our m denominations be\\n * D := [d_0, d_1, ..., d_{m-1}], where d_i < d_j whenever i < j.  We make the\\n * following assumptions:\\n *\\n * (1) n >= 0.\\n * (2) Each d_i > 0.\\n * (3) Each d_i <= n.\\n *\\n * The problem has the following recursive interpretation.  Let C(n) be the\\n * number of ways to partition n using a denomination d.  Then we have the\\n * recurrence relation\\n *\\n * C(n) := C(n) + C(n - d)\\n *\\n * We have the base case C(0) := 1 because there is only one way to make a\\n * change for zero, namely choose no coins at all.  Refer to the following page\\n * for more details:\\n *\\n * https://www.educative.io/m/coin-changing-problem\\n *\\n * @param n We want to partition this integer.\\n * @param denom The array of denominations.  An array of positive integers to\\n *     use to partition n.  Elements of the array are unique and the array is\\n *     assumed to be sorted in ascending order.\\n * @return The number of ways to partition n using only integers from\\n *     the denomination array.\\n */\\nfunction partition(n, denom) {\\n    // Use an array of n + 1 elements because we also need to take care of the\\n    // base case.\\n    const cache = Array(n + 1).fill(0);\\n    cache[0] = 1;\\n    for (const d of denom) {\\n        for (let i = d; i < cache.length; i++) {\\n            cache[i] += cache[i - d];\\n        }\\n    }\\n    return cache[cache.length - 1];\\n}\\n\\n/**\\n * Total Ways to Sum II: You are given an array with two elements.  The first\\n * element is an integer n.  The second element is an array of numbers\\n * representing the set of available integers.  How many different ways can\\n * that number n be written as a sum of integers contained in the given set?\\n * You may use each integer in the set zero or more times.\\n *\\n * This is also known as the money changing problem.  Suppose we have a target\\n * amount of money n.  We have m distinct dollar notes a_0, a_1, ..., a_{m-1}.\\n * How many ways are there to combine one or more notes such that the total\\n * amount is n?  We can use a note zero, one, or more times.  More details here:\\n *\\n * https://algorithmist.com/wiki/Coin_change\\n *\\n * Usage: run sum2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [n, denomination] = ns.codingcontract.getData(cct, host);\\n    const npart = coin_change(n, denomination);\\n    const result = ns.codingcontract.attempt(\\n        npart, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/sum2.txt\\\";\\n        const data = \\\"[\\\" + n + \\\", [\\\" + denomination.join(\\\",\\\") + \\\"]]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/sum2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/2ba0bfd8-5f6f-43af-9ff0-d14536a386c1\",\"moduleSequenceNumber\":7558},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/a334f91e-e841-4bfc-8185-cec0364e7902\",\"moduleSequenceNumber\":7565},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/957350d5-e29b-4f8f-bb83-6cdd67701348\",\"moduleSequenceNumber\":7558},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/9ec7aaa4-9448-468c-aff3-203af52f9603\",\"moduleSequenceNumber\":7565},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/dc5ddee8-f04d-4a79-b7d9-f6905a2a13b7\",\"moduleSequenceNumber\":7558},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/060b11cf-1032-4879-89af-9b94678029cb\",\"moduleSequenceNumber\":7557},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/6019fcf1-936e-4574-ad94-017237b309c1\",\"moduleSequenceNumber\":7558},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/d72b74af-0896-4eed-b274-1baab64b0a3e\",\"moduleSequenceNumber\":7565},{\"filename\":\"/lib/array.js\",\"url\":\"blob:https://danielyxie.github.io/70904a3e-6fba-4e17-8d36-c703a729b807\",\"moduleSequenceNumber\":7556},{\"filename\":\"/cct/sum2.js\",\"url\":\"blob:https://danielyxie.github.io/f41018bb-a9cf-41fc-ade7-0479503512f2\",\"moduleSequenceNumber\":9016}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10373,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, max_profit_kadane, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\n\\n/**\\n * Algorithmic Stock Trader I: You are given an array of numbers representing\\n * stock prices, where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using at most one\\n * transaction (i.e. you can buy and sell the stock once).  If no profit can\\n * be made, then the answer should be 0.  Note that you must buy the stock\\n * before you can sell it.\\n *\\n * This is similar, but not identical, to the problem\\n * \\\"Subarray with Maximum Sum\\\".\\n *\\n * Usage: run trader.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        max_profit_kadane(array), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/trader.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/trader.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/c9b46e18-07b4-4ab6-bff3-9952e60ef155\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/adef82ec-be1b-4873-96b6-47b405e5e123\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/b0ec93f4-9d3c-4d0e-9252-0e0e77a9790b\",\"moduleSequenceNumber\":459},{\"filename\":\"/cct/trader.js\",\"url\":\"blob:https://danielyxie.github.io/c2ca50cb-42ac-4b2b-b7bf-79732f9996b1\",\"moduleSequenceNumber\":4882}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { log_cct_failure, print_error, print_success } from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The maximum profit that can be obtained if we are allowed to make an\\n * unlimited number of transactions.  Each transaction is a pair of buy/sell.\\n * A stock must first be bought before it can be sold.\\n *\\n * We have already solved the case where we are allowed to make at most one\\n * transaction.  The basic idea boils down to finding two days i and j, where\\n * i < j and price[i] < price[j], such that the difference price[j] - price[i]\\n * is as large as possible.\\n *\\n * Let's reuse the above idea.  Let mp be the running maximum profit.  Given\\n * two consecutive days i and i + 1, we have three cases:\\n *\\n * (1) price[i] < price[i+1].  We can make a profit if we buy on day i and\\n *     sell the next day.  Add that profit to our running profit mp.\\n * (2) price[i] = price[i+1].  We break even.  No need to add the difference\\n *     price[i+1] - price[i] to our running profit mp because the difference\\n *     is zero.\\n * (3) price[i] > price[i+1].  We make a loss.  Do not buy on day i and sell\\n *     the next day.\\n *\\n * The edge case is when i is the last day.  We should not buy the stock on\\n * the last day because we won't be able to sell it the next day.\\n *\\n * @param price An array where price[i] is the price of a stock on day i.\\n * @return The maximum profit to be made, provided we are allowed to make\\n *     as many transactions as we want.  Return 0 if no profits can be made.\\n */\\nfunction maximize_profit(price) {\\n    // Sanity checks.\\n    assert(price.length > 0);\\n    // If the price array has only one value, we can buy on the first day.\\n    // However, we won't be able to sell at all.  Therefore the maximum profit\\n    // should be zero.\\n    if (1 == price.length) {\\n        return 0;\\n    }\\n    // Keep track of the running maximum profit by considering the price\\n    // difference between consecutive days.\\n    assert(price.length >= 2);\\n    const lastidx = price.length - 1;\\n    let max_profit = 0;\\n    for (let i = 0; i < lastidx; i++) {\\n        if (price[i] < price[i + 1]) {\\n            max_profit += price[i + 1] - price[i];\\n        }\\n    }\\n    return max_profit;\\n}\\n\\n/**\\n * Algorithmic Stock Trader II: You are given an array of numbers representing\\n * stock prices, where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using as many\\n * transactions as you like.  A transaction is defined as buying and then\\n * selling one share of the stock.  Note that you cannot engage in multiple\\n * transactions at once.  In other words, you must sell the stock before you\\n * buy it again.  If no profit can be made, then the answer should be 0.\\n *\\n * Each price in the array relates to the same stock.\\n *\\n * Usage: run trader2.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        maximize_profit(array), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/trader2.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/trader2.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/67c8f7dc-99a8-4373-8b4a-cb010e1f5d84\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/82cf9352-466b-4e0f-b70c-936f56e55cea\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/3463b30a-6969-417e-bc87-22b96c5f1a98\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/dd5a0408-c40b-4ad1-936b-cabd69a699e1\",\"moduleSequenceNumber\":6138},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/3fe39855-9663-4cc2-959d-9e93cb2c787d\",\"moduleSequenceNumber\":6131},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/507d9abf-e5fc-4a01-a45f-74bd3c2612fb\",\"moduleSequenceNumber\":6130},{\"filename\":\"/cct/trader2.js\",\"url\":\"blob:https://danielyxie.github.io/8e05575c-2b67-447f-a3d1-aaed66c46d43\",\"moduleSequenceNumber\":8306}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, print_error, print_success, stock_traderIII\\n} from \\\"/lib/cct.js\\\";\\n\\n/**\\n * Algorithmic Stock Trader III: You are given an array of numbers representing\\n * stock prices, where the i-th element represents the stock price on day i.\\n * Determine the maximum possible profit you can earn using at most two\\n * transactions.  A transaction is defined as buying and then selling one share\\n * of the stock.  Note that you cannot engage in multiple transactions at once.\\n * In other words, you must sell the stock before you buy it again.  If no\\n * profit can be made, then the answer should be 0.\\n *\\n * This is similar to Algorithmic Stock Trader I.  The twist is that we can now\\n * make at most two transactions, where previously we were restricted to at\\n * most one transaction.\\n *\\n * Usage: run trader3.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const array = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        stock_traderIII(array), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/trader3.txt\\\";\\n        const data = \\\"[\\\" + array.join(\\\",\\\") + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/trader3.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, max_profit_kadane, print_error, print_success,\\n    stock_traderIII\\n} from \\\"/lib/cct.js\\\";\\nimport { Time } from \\\"/lib/time.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * The maximimum profit that can be made when we are restricted to at most t\\n * transactions.  When we are restricted to at most 2 transactions, we find\\n * all possible partitions of the price array into 2 non-overlapping subarrays.\\n * For each such partition we have 2 subarrays.  We run Kadane's algorithm on\\n * each subarray, sum the results of both subarrays, and return the sum as the\\n * maximum profit possible.  The true maximum profit is the maximum of the\\n * results of all partitions.\\n *\\n * Now consider t > 2.  We use the same idea as per the case when we are\\n * restricted to at most 2 transactions.  The minor difference now is that we\\n * must partition the price array into t non-overlapping subarrays.  We run\\n * Kadane's algorithm on each subarray, add together the result of each run of\\n * the algorithm, and return the sum as the maximum possible profit.  The only\\n * tricky part is generating all possible partitions of the price array, where\\n * each partition consists of t non-overlapping subarrays.  The above method is\\n * conceptually simple to understand as it builds on the intuition for the case\\n * where t = 2.  However, the method can be slow.  Let k := t - 1.  Given a set\\n * of n elements, we have C(n, k) ways to choose k numbers that partition the\\n * price array into t non-overlapping subarrays.  Here, the number C(n, k) is\\n * the binomial coefficient.  Thus there are C(n, k) possible partitions of the\\n * price array into t non-overlapping subarrays.  Notice that when t = 2, we\\n * need only to choose k = t - 1 = 1 number to act as a barrier for dividing\\n * the price array into 2 non-overlapping subarrays.  Therefore in the worst\\n * case the above method has factorial running time, which is worse than\\n * exponential running time.\\n *\\n * Let's see whether we can use recursion to calculate the solution for day i\\n * based on our solution for day i-1.  Suppose price[i] is the value of the\\n * stock on day i.  Define p[t][i] as the maximum profit obtained by using at\\n * most t transactions up to and including day i.  We have two cases for day i.\\n *\\n * (1) If no transactions are made on day i, then the value of p[t][i] is\\n *     equivalent to p[t][i-1], i.e. p[t][i] = p[t][i-1].\\n * (2) Suppose we sell on the i-th day.  Then we must have bought one share of\\n *     the stock on a day j, where 0 <= j <= i-1.  Purchasing a share on day j\\n *     and selling it at a later day i would net us a profit of\\n *\\n *     price[i] - price[j]\\n *\\n *     for one transaction.  What about the profits from the remaining t-1\\n *     transactions?  Those profits are collectively represented as p[t-1][j].\\n *     If we sell on the i-th day and this is our t-th transaction, then the\\n *     profit from all t transactions can be written as\\n *\\n *     (*) price[i] - price[j] + p[t-1][j]\\n *\\n *     To maximize our profit from all t transactions, we need to maximize the\\n *     value of expression (*).  We calculate the value of (*) for each value\\n *     of j between 0 and i-1, inclusive.  That is, we have the expression\\n *\\n *     (**) max{price[i] - price[j] + p[t-1][j]}\\n *\\n *     where 0 <= j <= i-1.  Therefore p[t][i] is defined as the maximum of\\n *     p[t][i-1] and expression (**).\\n *\\n * The base cases are:\\n *\\n * (i) p[0][i] := 0 for all i.\\n * (ii) p[t][0] := 0 for all t.\\n *\\n * If n is the number of elements in the price array, the maximum profit we can\\n * obtain is p[t][n-1] provided we are restricted to at most t transactions.\\n * Refer to the following page for more details:\\n *\\n * https://www.techiedelight.com/find-maximum-profit-earned-at-most-k-stock-transactions/\\n *\\n * @param ns The Netscript API.\\n * @param t The maximum number of transactions.\\n * @param price An array of prices, where price[i] is the price of one share of\\n *     a stock on day i.  All prices relate to the same stock.\\n * @return The maximum profit to be made, assumming we can perform at most t\\n *     transactions.  Return 0 if no profit can be made.\\n */\\nasync function maximize_profit(ns, t, price) {\\n    assert(t >= 0);\\n    assert(price.length > 0);\\n    // No transactions means no profit.  We don't buy and sell, therefore\\n    // no profit at all.\\n    if (0 == t) {\\n        return 0;\\n    }\\n    // If t = 1, we are restricted to at most 1 transaction.  Simply use\\n    // Kadane's algorithm on the price array.\\n    if (1 == t) {\\n        return max_profit_kadane(price);\\n    }\\n    // If t = 2, we are restricted to at most 2 transactions.  This is the case\\n    // of Algorithmic Stock Trader III.\\n    if (2 == t) {\\n        return stock_traderIII(price);\\n    }\\n    // Perform at most t >= 3 transactions.  Let p[t][i] be the maximum profit\\n    // obtained by using at most t transactions up to and including day i.  The\\n    // value of p[t][i] is the maximum of these two expressions:\\n    //\\n    // (1) p[t][i-1]\\n    // (2) max{price[i] - price[j] + p[t-1][j]} for all 0 <= j <= i-1.\\n    //\\n    // Using the recursive structure of p[t][i], we create a 2-D matrix to hold\\n    // the previous values p[r][c].  The row number r represents the current\\n    // maximum number of transactions.  The column number c represents the\\n    // current day.\\n    assert(t >= 3);\\n    // The base case p[0][i] := 0 for all i.\\n    const p = new Array();\\n    p.push(new Array(price.length).fill(0));\\n    for (let i = 1; i <= t; i++) {\\n        // The base case p[t][0] := 0 for all t.\\n        const array = new Array(price.length);\\n        array[0] = 0;\\n        p.push(array);\\n    }\\n    // The case of at least t >= 3 transactions.  Here, 1 <= tau <= t.  Build\\n    // up our table from tau = 1 up to and including tau = t.\\n    const time = new Time();\\n    const interval = time.millisecond();\\n    for (let tau = 1; tau <= t; tau++) {\\n        // Let the number of transactions be at most tau.  Consider each\\n        // day > 0 in the price array.  As we move to the next day, we do not\\n        // have to recalculate the maximization expression\\n        //\\n        // max{price[i] - price[j] + p[t-1][j]}\\n        //\\n        // for all 0 <= j <= i-1.  Define the number\\n        //\\n        // mp := max{p[t-1][k] - price[k]}\\n        //\\n        // where 0 <= k <= i-2.  Then we have the expression\\n        //\\n        // max{price[i] - price[j] + p[t-1][j]}\\n        // = price[i] + max(mp, p[t-1][i-1] - price[i-1])\\n        //\\n        // Thus p[t][i] is the maximum of p[t][i-1] and the expression\\n        //\\n        // price[i] + max(mp, p[t-1][i-1] - price[i-1])\\n        let mp = p[tau - 1][0] - price[0];\\n        for (let day = 1; day < price.length; day++) {\\n            // The maximum profit if we do not make a transaction on this day.\\n            const a = p[tau][day - 1];\\n            // The maximum profit if we make a transaction on this day.\\n            mp = Math.max(mp, p[tau - 1][day - 1] - price[day - 1]);\\n            // The maximum profit using at most t transactions up to and\\n            // including this day.\\n            p[tau][day] = Math.max(a, price[day] + mp);\\n            await ns.sleep(interval);\\n        }\\n    }\\n    return p[t][price.length - 1];\\n}\\n\\n/**\\n * Algorithmic Stock Trader IV: You are given an array with two elements.  The\\n * first element is an integer k.  The second element is an array of numbers\\n * representing stock prices, where the i-th element represents the stock price\\n * on day i.  Determine the maximum possible profit you can earn using at most\\n * k transactions.  A transaction is defined as buying and then selling one\\n * share of the stock.  Note that you cannot engage in multiple transactions at\\n * once.  In other words, you must sell the stock before you can buy it.  If no\\n * profit can be made, then the answer should be 0.\\n *\\n * This is similar to Algorithmic Stock Trader III.  The twist is that we can\\n * now make at most k transactions, where previously we were restricted to at\\n * most two transactions.  Of course, k can be 0, 1, 2, or a higher integer.\\n *\\n * Usage: run trader4.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [t, price] = ns.codingcontract.getData(cct, host);\\n    const mp = await maximize_profit(ns, t, price);\\n    const result = ns.codingcontract.attempt(\\n        mp, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/trader4.txt\\\";\\n        const data = \\\"[\\\" + t + \\\", [\\\" + price.join(\\\",\\\") + \\\"]]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/trader4.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/d4d56c6a-c40a-48d7-805b-4603fdb8b269\",\"moduleSequenceNumber\":8725},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/c1f97b65-840b-499c-b561-04a357c58b25\",\"moduleSequenceNumber\":8739},{\"filename\":\"/lib/time.js\",\"url\":\"blob:https://danielyxie.github.io/991191db-9441-4d70-83e2-f4d68f414192\",\"moduleSequenceNumber\":8737},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/d8494ab8-70ce-41c1-b5be-cf7a578e50df\",\"moduleSequenceNumber\":8725},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/3c0b1675-907b-4af4-b213-286978f0c873\",\"moduleSequenceNumber\":8739},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/852576c9-e383-4627-aa09-a0c02f86b1fc\",\"moduleSequenceNumber\":8725},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/e8f05798-8124-4ad5-90f7-9199a1d855e1\",\"moduleSequenceNumber\":8723},{\"filename\":\"/cct/trader4.js\",\"url\":\"blob:https://danielyxie.github.io/1ed4fcd2-8a7e-410d-ba8a-dad847660ac1\",\"moduleSequenceNumber\":9369}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    log_cct_failure, matrix_to_string, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * A deep copy of a triangle.\\n *\\n * @param triangle A triangle represented as an array of arrays.\\n * @return The same triangle, but as a deep copy.\\n */\\nfunction clone(triangle) {\\n    const new_triangle = new Array();\\n    for (let i = 0; i < triangle.length; i++) {\\n        const level = [...triangle[i]];\\n        new_triangle.push(level);\\n    }\\n    return new_triangle;\\n}\\n\\n/**\\n * Descend from the top to the bottom of a triangle, finding a path of minimum\\n * sum as we go.\\n *\\n * @param triangle A triangle represented as an array of arrays.\\n * @return An array [path, min_sum] as follows:\\n *     (1) path := A path of minimum sum from the top of the triangle to the\\n *         bottom.\\n *     (2) min_sum := The minimum path sum.\\n */\\nfunction descend(triangle) {\\n    // Sanity checks.\\n    assert(is_triangle(triangle));\\n    if (1 == triangle.length) {\\n        return [triangle[0], triangle[0][0]];\\n    }\\n    // A triangle having at least 2 levels.  Consider the following triangle:\\n    //\\n    // (0)       2\\n    // (1)     3   4\\n    // (2)   6   5   7\\n    // (3) 4   1   8   3\\n    //\\n    // Think of the problem in a top-down manner.  To obtain a path of minimum\\n    // sum from level (0) to level (3), we must obtain a path of minimum sum\\n    // from level (0) to level (2), which in turn requires that we obtain a path\\n    // of minimum sum from level (0) to level (1).  Let min_sum be the minimum\\n    // sum of a path from level (0) to level (i) and suppose this path ends at\\n    // a[j], the j-th number at level (i).  Let b be an array of numbers at\\n    // level (i + 1).  The minimum sum of a path from level (0) to level\\n    // (i + 1) is given by\\n    //\\n    // min_sum + mininum(b[j], b[j + 1])\\n    //\\n    // Alternatively, consider the problem in a bottom-up manner.  Any minimum\\n    // path must end at the bottom level of the triangle.  Let i be any level\\n    // in the triangle, except for the last level.  Let mtriangle[i][j] be the\\n    // j-th number at level (i) and update this number to\\n    //\\n    // mtriangle[i][j] := mtriangle[i][j] + minimum(b[j], b[j + 1])\\n    //\\n    // where b is an array of numbers at level (i + 1).  Move up one level and\\n    // repeat the above calculation, propagating the minimum sum up the\\n    // triangle so that mtriangle[0][0] is the minimum sum of any path.\\n\\n    // Get a deep copy of the triangle.  We don't want to modify the input\\n    // triangle.\\n    const mtriangle = clone(triangle);\\n    const path = new Array();\\n    // Start from the penultimate level and work upward to the top level.\\n    // Keep track of a minimum path as we move along.\\n    for (let i = (triangle.length - 2); i >= 0; i--) {\\n        // The minimum sum at level i.\\n        let minsum = Infinity;\\n        // A node at level i + 1.  This is a node of a path of minimum sum.\\n        let mink = Infinity;\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            // Consider nodes at level i + 1.\\n            const a = mtriangle[i + 1][j];\\n            const b = mtriangle[i + 1][j + 1];\\n            mtriangle[i][j] += Math.min(a, b);\\n            // Update the path of minimum sum.  We keep track of the column\\n            // index at level i + 1.\\n            if (minsum > mtriangle[i][j]) {\\n                minsum = mtriangle[i][j];\\n                mink = (a < b) ? j : (j + 1);\\n            }\\n        }\\n        path.push(mink);\\n    }\\n    path.push(0);\\n    path.reverse();\\n    // Reconstruct a path of minimum sum.  This path contains the intermediate\\n    // nodes from the top of the triangle to the bottom level.\\n    for (let i = 0; i < triangle.length; i++) {\\n        path[i] = triangle[i][path[i]];\\n    }\\n    return [path, mtriangle[0][0]];\\n}\\n\\n/**\\n * Whether the given array represents a valid triangle.\\n *\\n * @param triangle A triangle represented as an array of arrays.\\n * @return true if the array represents a triangle; false otherwise.\\n */\\nfunction is_triangle(triangle) {\\n    assert(triangle.length > 0);\\n    const VALID = true;\\n    const NOT_VALID = !VALID;\\n    for (let i = 0; i < triangle.length - 1; i++) {\\n        const top = triangle[i];\\n        const bottom = triangle[i + 1];\\n        if (top.length < 1) {\\n            return NOT_VALID;\\n        }\\n        if (bottom.length < 1) {\\n            return NOT_VALID;\\n        }\\n        if (top.length != (bottom.length - 1)) {\\n            return NOT_VALID;\\n        }\\n    }\\n    return VALID;\\n}\\n\\n/**\\n * Minimum Path Sum in a Triangle: You are given a 2-D array of numbers\\n * (array of array of numbers) that represents a triangle (the first array\\n * has one element, each sequent array has one more element than the one before\\n * it, forming a triangle).  Find the minimum path sum from the top to the\\n * bottom of the triangle.  In each step of the path, you may only move to\\n * adjacent numbers in the row below.\\n *\\n * For example, given this array\\n *\\n * [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]\\n *\\n * we can represent it as this triangle\\n *\\n *       2\\n *     3   4\\n *   6   5   7\\n * 4   1   8   3\\n *\\n * From one level of the triangle, we move to a level below but only to a\\n * number directly below a given number.  At level 0, we have [2].  At level\\n * 1, we have [3, 4].  From 3, we can move down to either 6 or 5, but we\\n * cannot move from 3 to 7 because 7 is not directly below 3.\\n *\\n * Usage: run triangle.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const triangle = ns.codingcontract.getData(cct, host);\\n    const [_, sum] = descend(triangle);\\n    const result = ns.codingcontract.attempt(\\n        sum, cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/triangle.txt\\\";\\n        const data = matrix_to_string(triangle);\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/triangle.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/d6b707fa-3e5e-4877-82b5-ee2eca33110a\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/f1f7f11b-0269-4ee1-8588-422cfb1c4ed6\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/99156906-1e5c-413c-b53e-3bd5f7d910c9\",\"moduleSequenceNumber\":460},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/2caf3129-98a3-4758-b14b-2a260c837e88\",\"moduleSequenceNumber\":467},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/156cdf57-363c-4799-9fca-a3374a6c65b5\",\"moduleSequenceNumber\":459},{\"filename\":\"/cct/triangle.js\",\"url\":\"blob:https://danielyxie.github.io/072bc1ef-9465-4468-ad9b-13290c17ffa5\",\"moduleSequenceNumber\":4295}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport {\\n    char_index, is_alphabetic, log_cct_failure, print_error, print_success\\n} from \\\"/lib/cct.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Pad the key so that it is the same length as the plaintext.\\n *\\n * @param plaintext We want to encrypt this string.  Cannot be empty string.\\n * @param key Encryption is done using this key.  Cannot be empty string.\\n * @return A string representing the key, possibly padded.  If the plaintext\\n *     and key are of the same length, then return the original key.\\n */\\nfunction pad_key(plaintext, key) {\\n    assert(plaintext.length > 0);\\n    assert(key.length > 0);\\n    if (plaintext.length == key.length) {\\n        return key;\\n    }\\n    let new_key = new String(key);\\n    let i = 0;\\n    let n = 0;\\n    while (new_key.length < plaintext.length) {\\n        new_key += key[i];\\n        n++;\\n        i = n % key.length;\\n    }\\n    assert(new_key.length == plaintext.length);\\n    assert(new_key.length > key.length);\\n    return new_key;\\n}\\n\\n/**\\n * Vigen�re enryption.  We encrypt only uppercase letters of the English\\n * alphabet.  All other characters are ignored.\\n *\\n * @param plaintext We want to encrypt this string.  Cannot be empty string.\\n * @param key Encryption is done using this key.  Cannot be empty string.\\n * @return A ciphertext encrypted using the Vigen�re cipher.\\n */\\nfunction vigenere(plaintext, key) {\\n    // Sanity checks.\\n    assert(plaintext.length > 0);\\n    assert(key.length > 0);\\n    // Encryption.\\n    const ptxt = plaintext.toUpperCase();\\n    const pk = pad_key(plaintext, key);\\n    let ciphertext = \\\"\\\";\\n    const matrix = vigenere_square();\\n    for (let i = 0; i < ptxt.length; i++) {\\n        if (!is_alphabetic(ptxt[i])) {\\n            ciphertext += ptxt[i];\\n            continue;\\n        }\\n        const row = char_index(ptxt[i]);\\n        const col = char_index(pk[i]);\\n        ciphertext += matrix[row][col];\\n    }\\n    assert(ciphertext.length == plaintext.length);\\n    return ciphertext;\\n}\\n\\n/**\\n * The Vigen�re square.\\n */\\nfunction vigenere_square() {\\n    const square = [\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\",\\n        \\\"BCDEFGHIJKLMNOPQRSTUVWXYZA\\\",\\n        \\\"CDEFGHIJKLMNOPQRSTUVWXYZAB\\\",\\n        \\\"DEFGHIJKLMNOPQRSTUVWXYZABC\\\",\\n        \\\"EFGHIJKLMNOPQRSTUVWXYZABCD\\\",\\n        \\\"FGHIJKLMNOPQRSTUVWXYZABCDE\\\",\\n        \\\"GHIJKLMNOPQRSTUVWXYZABCDEF\\\",\\n        \\\"HIJKLMNOPQRSTUVWXYZABCDEFG\\\",\\n        \\\"IJKLMNOPQRSTUVWXYZABCDEFGH\\\",\\n        \\\"JKLMNOPQRSTUVWXYZABCDEFGHI\\\",\\n        \\\"KLMNOPQRSTUVWXYZABCDEFGHIJ\\\",\\n        \\\"LMNOPQRSTUVWXYZABCDEFGHIJK\\\",\\n        \\\"MNOPQRSTUVWXYZABCDEFGHIJKL\\\",\\n        \\\"NOPQRSTUVWXYZABCDEFGHIJKLM\\\",\\n        \\\"OPQRSTUVWXYZABCDEFGHIJKLMN\\\",\\n        \\\"PQRSTUVWXYZABCDEFGHIJKLMNO\\\",\\n        \\\"QRSTUVWXYZABCDEFGHIJKLMNOP\\\",\\n        \\\"RSTUVWXYZABCDEFGHIJKLMNOPQ\\\",\\n        \\\"STUVWXYZABCDEFGHIJKLMNOPQR\\\",\\n        \\\"TUVWXYZABCDEFGHIJKLMNOPQRS\\\",\\n        \\\"UVWXYZABCDEFGHIJKLMNOPQRST\\\",\\n        \\\"VWXYZABCDEFGHIJKLMNOPQRSTU\\\",\\n        \\\"WXYZABCDEFGHIJKLMNOPQRSTUV\\\",\\n        \\\"XYZABCDEFGHIJKLMNOPQRSTUVW\\\",\\n        \\\"YZABCDEFGHIJKLMNOPQRSTUVWX\\\",\\n        \\\"ZABCDEFGHIJKLMNOPQRSTUVWXY\\\"\\n    ];\\n    return square;\\n}\\n\\n/**\\n * Encryption II: Vigen�re Cipher: Vigen�re cipher is a type of polyalphabetic\\n * substitution.  It uses the Vigen�re square to encrypt and decrypt plaintext\\n * with a keyword.  Vignen�re square:\\n *\\n *     A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n *   +====================================================\\n * A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\\n * B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A\\n * C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\n * D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\n * E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\n * .......................................................\\n * Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\n * Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\n *\\n * For encryption each letter of the plaintext is paired with the corresponding\\n * letter of a repeating keyword. For example, the plaintext DASHBOARD is\\n * encrypted with the keyword LINUX:\\n *\\n * Plaintext: DASHBOARD\\n *   Keyword: LINUXLINU\\n *\\n * So, the first letter D is paired with the first letter of the key L.\\n * Therefore, row D and column L of the Vigen�re square are used to get the\\n * first cipher letter O.  This must be repeated for the whole ciphertext.  You\\n * are given an array with two elements.  The first element is the plaintext,\\n * the second element is the keyword.  Return the ciphertext as uppercase\\n * string.\\n *\\n * This is Vigen�re encryption, where the plaintext alphabet is the uppercase\\n * characters of the English alphabet.\\n *\\n * Usage: run vigenere.js [cct] [hostname]\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // The file name of the coding contract.\\n    const cct = ns.args[0];\\n    // The hostname of the server where the coding contract is located.\\n    const host = ns.args[1];\\n    // Solve the coding contract.\\n    const [plaintext, key] = ns.codingcontract.getData(cct, host);\\n    const result = ns.codingcontract.attempt(\\n        vigenere(plaintext, key), cct, host, { returnReward: true }\\n    );\\n    // Log the result in case of failure.\\n    if (0 == result.length) {\\n        const log = \\\"/cct/vigenere.txt\\\";\\n        const data = \\\"[\\\" + plaintext + \\\", \\\" + key + \\\"]\\\";\\n        await log_cct_failure(ns, log, cct, host, data);\\n        print_error(ns, host, cct);\\n        return;\\n    }\\n    print_success(ns, host, cct, result);\\n}\\n\",\"filename\":\"/cct/vigenere.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/77450562-d6c2-4919-b2a7-ac40fcf2bbbe\",\"moduleSequenceNumber\":85},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/405561fd-d89e-41dc-a397-ea29b8e62345\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/86d5fe49-09a7-45cf-aed1-3dcfe95b409e\",\"moduleSequenceNumber\":85},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/3720a56e-0879-48dd-859f-9182701c7cba\",\"moduleSequenceNumber\":144},{\"filename\":\"/lib/cct.js\",\"url\":\"blob:https://danielyxie.github.io/b9035b57-c625-406e-8101-39aba651451e\",\"moduleSequenceNumber\":83},{\"filename\":\"/cct/vigenere.js\",\"url\":\"blob:https://danielyxie.github.io/52457c97-0bfb-446b-ae62-b4bb9e602365\",\"moduleSequenceNumber\":2966}],\"dependents\":[],\"ramUsage\":16.6,\"server\":\"home\",\"moduleSequenceNumber\":10379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\n/**\\n * A function for assertion.\\n *\\n * @param cond Assert that this condition is true.\\n * @return Throw an assertion error if the given condition is false.\\n */\\nfunction assert(cond) {\\n    if (!cond) {\\n        throw new Error(\\\"Assertion failed.\\\");\\n    }\\n}\\n\\n/**\\n * Scripts for solving Coding Contracts.\\n */\\nfunction dir_cct() {\\n    const cct = [\\n        \\\"cct/bipartite.js\\\",\\n        \\\"cct/caesar.js\\\",\\n        \\\"cct/grid.js\\\",\\n        \\\"cct/grid2.js\\\",\\n        \\\"cct/grid3.js\\\",\\n        \\\"cct/hamming.js\\\",\\n        \\\"cct/hamming2.js\\\",\\n        \\\"cct/interval.js\\\",\\n        \\\"cct/ip.js\\\",\\n        \\\"cct/jump.js\\\",\\n        \\\"cct/jump2.js\\\",\\n        \\\"cct/lzc.js\\\",\\n        \\\"cct/lzd.js\\\",\\n        \\\"cct/maths.js\\\",\\n        \\\"cct/parenthesis.js\\\",\\n        \\\"cct/prime.js\\\",\\n        \\\"cct/rle.js\\\",\\n        \\\"cct/solver.js\\\",\\n        \\\"cct/spiral.js\\\",\\n        \\\"cct/subarray.js\\\",\\n        \\\"cct/sum.js\\\",\\n        \\\"cct/sum2.js\\\",\\n        \\\"cct/trader.js\\\",\\n        \\\"cct/trader2.js\\\",\\n        \\\"cct/trader3.js\\\",\\n        \\\"cct/trader4.js\\\",\\n        \\\"cct/triangle.js\\\",\\n        \\\"cct/vigenere.js\\\"\\n    ];\\n    return cct;\\n}\\n\\n/**\\n * Scripts that are used to determine the gain in Intelligence XP from various\\n * actions.\\n */\\nfunction dir_intelligence() {\\n    const dir = [\\n        \\\"intelligence/augmentation-buy.js\\\",\\n        \\\"intelligence/augmentation-install.js\\\",\\n        \\\"intelligence/augmentation-post-install.js\\\",\\n        \\\"intelligence/crime.js\\\",\\n        \\\"intelligence/daemon.js\\\",\\n        \\\"intelligence/faction-join-all.js\\\",\\n        \\\"intelligence/faction-join.js\\\",\\n        \\\"intelligence/home.js\\\",\\n        \\\"intelligence/int.js\\\",\\n        \\\"intelligence/program.js\\\",\\n        \\\"intelligence/relocate.js\\\",\\n        \\\"intelligence/study.js\\\",\\n        \\\"intelligence/tor-program.js\\\",\\n        \\\"intelligence/tor.js\\\",\\n        \\\"intelligence/travel.js\\\",\\n        \\\"intelligence/util.js\\\"\\n    ];\\n    return dir;\\n}\\n\\n/**\\n * Library files whose functionalities are used in various scripts.\\n */\\nfunction dir_lib() {\\n    const lib = [\\n        \\\"lib/array.js\\\",\\n        \\\"lib/cct.js\\\",\\n        \\\"lib/constant.js\\\",\\n        \\\"lib/money.js\\\",\\n        \\\"lib/network.js\\\",\\n        \\\"lib/player.js\\\",\\n        \\\"lib/pserv.js\\\",\\n        \\\"lib/random.js\\\",\\n        \\\"lib/server.js\\\",\\n        \\\"lib/singularity.augmentation.js\\\",\\n        \\\"lib/singularity.crime.js\\\",\\n        \\\"lib/singularity.faction.js\\\",\\n        \\\"lib/singularity.network.js\\\",\\n        \\\"lib/singularity.study.js\\\",\\n        \\\"lib/singularity.util.js\\\",\\n        \\\"lib/singularity.work.js\\\",\\n        \\\"lib/time.js\\\",\\n        \\\"lib/util.js\\\"\\n    ];\\n    return lib;\\n}\\n\\n/**\\n * Scripts at the top-most directory.\\n */\\nfunction dir_root() {\\n    const root = [\\n        \\\"buy-server.js\\\",\\n        \\\"find-cct.js\\\",\\n        \\\"go-high.js\\\",\\n        \\\"go-low.js\\\",\\n        \\\"go-mid.js\\\",\\n        \\\"go.js\\\",\\n        \\\"hack.js\\\",\\n        \\\"hnet-farm.js\\\",\\n        \\\"karma.js\\\",\\n        \\\"kill-script.js\\\",\\n        \\\"kill-server.js\\\",\\n        \\\"low-end.js\\\",\\n        \\\"nmap.js\\\",\\n        \\\"restart-server.js\\\",\\n        \\\"shortest-path.js\\\",\\n        \\\"trade-bot.js\\\",\\n        \\\"world-server.js\\\"\\n    ];\\n    return root;\\n}\\n\\n/**\\n * Scripts that use the Singularity API.\\n */\\nfunction dir_singularity() {\\n    const dir = [\\n        \\\"singularity/crime.js\\\",\\n        \\\"singularity/daemon.js\\\",\\n        \\\"singularity/faction-city.js\\\",\\n        \\\"singularity/faction-crime.js\\\",\\n        \\\"singularity/faction-early.js\\\",\\n        \\\"singularity/faction-end.js\\\",\\n        \\\"singularity/faction-hack.js\\\",\\n        \\\"singularity/faction-megacorporation.js\\\",\\n        \\\"singularity/faction.js\\\",\\n        \\\"singularity/home.js\\\",\\n        \\\"singularity/install.js\\\",\\n        \\\"singularity/money.js\\\",\\n        \\\"singularity/program.js\\\",\\n        \\\"singularity/study.js\\\"\\n    ];\\n    return dir;\\n}\\n\\n/**\\n * The directory structure on github.com.\\n *\\n * @param d A string representing a directory name under quacksouls/bitburner/\\n *     on github.com.\\n * @return All files under the given directory.\\n */\\nfunction dir_structure(d) {\\n    let filesystem = \\\"\\\";\\n    switch (d) {\\n        case \\\"01\\\":\\n            filesystem = Array.from(dir_root());\\n            filesystem = filesystem.concat(dir_lib());\\n            break;\\n        case \\\"02\\\":\\n        case \\\"03\\\":\\n        case \\\"04\\\":\\n            filesystem = dir_root();\\n            break;\\n        case \\\"05\\\":\\n            filesystem = Array.from(dir_root());\\n            filesystem = filesystem.concat(dir_lib());\\n            break;\\n        case \\\"06\\\":\\n            filesystem = Array.from(dir_root());\\n            filesystem = filesystem.concat(dir_cct());\\n            filesystem = filesystem.concat(dir_lib());\\n            break;\\n        case \\\"07\\\":\\n            filesystem = Array.from(dir_root());\\n            filesystem = filesystem.concat(dir_cct());\\n            filesystem = filesystem.concat(dir_lib());\\n            filesystem = filesystem.concat(dir_singularity());\\n            break;\\n        case \\\"08\\\":\\n            filesystem = Array.from(dir_root());\\n            filesystem = filesystem.concat(dir_cct());\\n            filesystem = filesystem.concat(dir_intelligence());\\n            filesystem = filesystem.concat(dir_lib());\\n            filesystem = filesystem.concat(dir_singularity());\\n            break;\\n        default:\\n            filesystem = \\\"\\\";\\n            break;\\n    }\\n    assert(filesystem.length > 0);\\n    return filesystem;\\n}\\n\\n/**\\n * Whether the given string represents a valid directory on github.com.  A\\n * valid directory name follows the format xx where each x is a decimal digit.\\n * Something like \\\"01\\\" is a valid directory name, whereas \\\"o1\\\" is not.\\n *\\n * @param d A string representing a directory name under quacksouls/bitburner/\\n *     on github.com.\\n * @return true if the given string represents a valid directory name;\\n *     false otherwise.\\n */\\nfunction is_valid_dir(d) {\\n    const VALID = true;\\n    const NO_VALID = !VALID;\\n    const digit = \\\"0123456789\\\";\\n    if (2 != d.length) {\\n        return NO_VALID;\\n    }\\n    if (!digit.includes(d[0]) || !digit.includes(d[1])) {\\n        return NO_VALID;\\n    }\\n    return VALID;\\n}\\n\\n/**\\n * A formatted name of the file where we want to save the downloaded file.  The\\n * terminal command \\\"wget\\\" behaves differently from the API function\\n * \\\"ns.wget()\\\".  The command \\\"wget\\\" is happy to create the required directory\\n * if we do any of the following:\\n *\\n * wget /URL/to/src/file.js src/file.js\\n * wget /URL/to/src/file.js /src/file.js\\n *\\n * The API function \\\"ns.wget()\\\" is happy with this\\n *\\n * await ns.wget(\\\"/URL/to/src/file.js\\\", \\\"/src/file.js\\\", \\\"home\\\");\\n *\\n * but cannot handle this\\n *\\n * await ns.wget(\\\"/URL/to/src/file.js\\\", \\\"src/file.js\\\", \\\"home\\\");\\n *\\n * That is, we must have the leading forward slash \\\"/\\\" character for the\\n * function to work properly.  Here are the relevant issues on github.com:\\n *\\n * https://github.com/danielyxie/bitburner/issues/1935\\n * https://github.com/danielyxie/bitburner/issues/2115\\n *\\n * @param f A file name.  Cannot be empty string.\\n * @return A possibly new file name with the leading forward slash \\\"/\\\"\\n *     character added.\\n */\\nfunction target_name(f) {\\n    assert(f.length > 0);\\n    // Remove any leading forward slash \\\"/\\\" character.\\n    let fname = f.toString();\\n    const slash = \\\"/\\\";\\n    if (f.startsWith(slash)) {\\n        fname = f.substring(1, f.length);\\n    }\\n    // If the file should be at the root directory of the home server, then it\\n    // is just a file name without any other parent directory.  Something like\\n    // \\\"file.js\\\" would be saved to the root directory.  If the file has a\\n    // parent directory under root, then it would be something like\\n    // \\\"src/file.js\\\".  When we split the string according to \\\"/\\\", we should end\\n    // up with an array of at least 2 elements.\\n    const newf = fname.split(slash);\\n    if (1 == newf.length) {\\n        return fname;\\n    }\\n    assert(newf.length > 1);\\n    return slash + fname;\\n}\\n\\n/**\\n * Print the usage information.\\n *\\n * @param ns The Netscript API.\\n */\\nfunction usage(ns) {\\n    const msg = \\\"Usage: run pull.js nn\\\\n\\\\n\\\"\\n          + \\\"n -- A decimal digit.\\\";\\n    ns.tprint(msg);\\n}\\n\\n/**\\n * Pull all files (on github.com) under the directory\\n * quacksouls/bitburner/xx into the game.  This script accepts a command line\\n * argument, i.e. the name of the directory xx.\\n *\\n * Usage: run pull.js [xx]\\n * Example: run pull.js 03\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    // Sanity checks.\\n    // We want only one command line argument.\\n    if (ns.args.length != 1) {\\n        usage(ns);\\n        return;\\n    }\\n    // The first directory is named \\\"01\\\".\\n    let dir = parseInt(ns.args[0]);\\n    if (dir < 1) {\\n        usage(ns);\\n        return;\\n    }\\n    // The game parses the command line argument as an integer and removes the\\n    // leading zero.  Put \\\"0\\\" back in.\\n    if ((1 <= dir) && (dir <= 9)) {\\n        dir = \\\"0\\\" + dir;\\n    }\\n    dir += \\\"\\\";\\n    if (!is_valid_dir(dir)) {\\n        usage(ns);\\n        return;\\n    }\\n    // Pull files into our home server.\\n    const home = \\\"home\\\";\\n    // The base URL where files are found.\\n    const github = \\\"https://raw.githubusercontent.com/\\\";\\n    const quack = \\\"quacksouls/bitburner/main/\\\";\\n    const prefix = github + quack + dir + \\\"/\\\";\\n    // Pull files into home server.\\n    for (const f of dir_structure(dir)) {\\n        const file = prefix + f;\\n        const target = target_name(f);\\n        const success = await ns.wget(file, target, home);\\n        if (success) {\\n            ns.tprint(file);\\n        }\\n    }\\n    ns.tprint(\\\"Download complete.\\\");\\n}\\n\",\"filename\":\"pull.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"pull.js\",\"url\":\"blob:https://danielyxie.github.io/fa86a54b-1a43-4e41-aae2-0c9020561aae\",\"moduleSequenceNumber\":10036}],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":10380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Copyright (C) 2022 Duck McSouls\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n */\\n\\nimport { colour, home } from \\\"/lib/constant.js\\\";\\nimport { network, shortest_path } from \\\"/lib/network.js\\\";\\nimport { assert } from \\\"/lib/util.js\\\";\\n\\n/**\\n * Insert forks.  Each fork indicates a child node.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n */\\nfunction add_fork(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // Start from the second row onward because the first row is for the home\\n    // server.\\n    for (let i = 1; i < matrix.length; i++) {\\n        const j = matrix[i].length - 1;\\n        assert(leaf() == matrix[i][j]);\\n        assert(branch() == matrix[i][j - 1]);\\n        matrix[i][j - 1] = fork();\\n    }\\n}\\n\\n/**\\n * Replace each leaf with the corresponding server name.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @param map A translation from coordinates in the grid to server name.\\n */\\nfunction add_server_name(ns, matrix, map) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    assert(map.size > 0);\\n    // Add the server names.\\n    for (const [coord, server] of map) {\\n        const [i, j] = coord.split(delimiter()).map(\\n            k => parseInt(k)\\n        );\\n        matrix[i][j] = decorate(ns, server);\\n    }\\n}\\n\\n/**\\n * Insert T junctions into the ASCII art.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n */\\nfunction add_tee_junction(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // Start from the second row and work our way downward.\\n    for (let i = 1; i < matrix.length; i++) {\\n        const j = matrix[i].length - 1;\\n        assert(leaf() == matrix[i][j]);\\n        assert(fork() == matrix[i][j - 1]);\\n        if (fork() == matrix[i - 1][j - 1]) {\\n            matrix[i - 1][j - 1] = tee();\\n        }\\n        if (i < matrix.length - 2) {\\n            if (branch() == matrix[i + 1][j - 1]) {\\n                matrix[i][j - 1] = tee();\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * All shortest paths from our home server to each server in the game world.\\n *\\n * @param ns The Netscript API.\\n * @return An array of shortest paths from the home server to each server in\\n *     the game world.  Each element is a string formatted as\\n *\\n *     home,serv1,serv2,serv3,...,servk\\n *\\n *     which shows a shortest path from \\\"home\\\" to the server \\\"servk\\\".  The\\n *     elements are sorted in lexicographic order.\\n */\\nfunction all_shortest_paths(ns) {\\n    const delim = delimiter();\\n    const path = network(ns).map(\\n        destination => shortest_path(ns, home, destination).join(delim)\\n    );\\n    return path.sort();\\n}\\n\\n/**\\n * Tidy up the ASCII art representation of the network of world servers.  We\\n * do various clean-ups such as removing dead branches and redundant (or\\n * unnecessary) branches.\\n *\\n * @param grid An ASCII art representation of the network of world servers.\\n *     This should be the output of the function to_ascii_art().\\n * @param map A translation from coordinates in the grid to server name.\\n * @return A string representation of the ASCII art.\\n */\\nfunction beautify(ns, grid, map) {\\n    assert(grid.length > 0);\\n    assert(grid[0].length > 0);\\n    assert(map.size > 0);\\n    const matrix = Array.from(grid);\\n    // Remove dead branches in the visualization.  A branch is said to be dead\\n    // if it does not lead to a server.\\n    for (let i = 0; i < matrix.length - 1; i++) {\\n        const diff = matrix[i].length - matrix[i + 1].length;\\n        if (diff < 3) {\\n            continue;\\n        }\\n        prune_branch(matrix, i);\\n    }\\n    // Remove dead branches from the last row.\\n    prune_branch(matrix, matrix.length - 1);\\n    // Some final touches.\\n    add_fork(matrix);\\n    prune_sibling_branch(matrix);\\n    add_tee_junction(matrix);\\n    add_server_name(ns, matrix, map);\\n    return to_string(matrix);\\n}\\n\\n/**\\n * Internal representation for a branch.  Each branch represents an alternate\\n * path that may lead to other servers.\\n */\\nfunction branch() {\\n    return \\\"│  \\\";\\n}\\n\\n/**\\n * Add various decorations to a server name.\\n *\\n * @param ns The Netscript API.\\n * @param server We want to add various decorations to this server name.\\n * @return The same server name, but with added decoration.\\n */\\nfunction decorate(ns, server) {\\n    // We do not need any other decoration for the home server, apart from\\n    // adding a colour.\\n    if (home == server) {\\n        return colour.GREEN + server + colour.RESET;\\n    }\\n    // Add some more decorations to other servers.\\n    const serv = ns.getServer(server);\\n    const player = ns.getPlayer();\\n    const nhack = \\\"(\\\" + serv.requiredHackingSkill + \\\")\\\"\\n    const nport = \\\"[\\\" + serv.numOpenPortsRequired + \\\"]\\\";\\n    const s = server + \\\" \\\" + nhack + nport;\\n    if (player.skills.hacking < serv.requiredHackingSkill) {\\n        return colour.RED + s + colour.RESET;\\n    }\\n    if (serv.hasAdminRights) {\\n        return colour.GREEN + s + colour.RESET;\\n    }\\n    return colour.DARK_GREEN + s + colour.RESET;\\n}\\n\\n/**\\n * The character used to delimit two servers in a path.\\n */\\nfunction delimiter() {\\n    return \\\",\\\";\\n}\\n\\n/**\\n * Print the tree structure of the network of world servers.\\n *\\n * @param ns The Netscript API.\\n * @param path An array of shortest paths from the home server to each server\\n *     in the game world.  This array should be the output of the function\\n *     all_shortest_paths().\\n */\\nfunction display_tree(ns, path) {\\n    assert(path.length > 0);\\n    // Internal representation of the tree structure.  Visualize this\\n    // representation as a matrix or grid.  Each row represents a shortest path.\\n    const delim = delimiter();\\n    const root = [[home]];\\n    const tree = root.concat(\\n        path.map(\\n            p => p.split(delim)\\n        )\\n    );\\n    // Convert internal representation to ASCII art.\\n    const [grid, map] = to_ascii_art(tree);\\n    const art = beautify(ns, grid, map);\\n    ns.tprint(art);\\n}\\n\\n/**\\n * Internal representation of a fork.  A fork is immediately followed by a leaf.\\n */\\nfunction fork() {\\n    return \\\"└╴\\\";\\n}\\n\\n/**\\n * Internal representation for a leaf, i.e. a destination server.\\n */\\nfunction leaf() {\\n    return \\\"+\\\";\\n}\\n\\n/**\\n * The new line character.\\n */\\nfunction newline() {\\n    return \\\"\\\\n\\\";\\n}\\n\\n/**\\n * Internal representation for a whitespace.\\n */\\nfunction placeholder() {\\n    return \\\".\\\";\\n}\\n\\n/**\\n * Remove a dead branch.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @param r Start the pruning from this row upward.\\n */\\nfunction prune_branch(matrix, r) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    assert(r >= 0);\\n    let col = matrix[r].length - 3;\\n    const maxidx = matrix.length - 1;\\n    while (col >= 0) {\\n        if ((maxidx != r) && (leaf() == matrix[r + 1][col])) {\\n            return;\\n        }\\n        let row = Math.floor(r);\\n        while (row > 0) {\\n            if (leaf() == matrix[row][col + 1]) {\\n                break;\\n            }\\n            matrix[row][col] = placeholder();\\n            row--;\\n        }\\n        col--;\\n    }\\n}\\n\\n/**\\n * Prune branches that connect two siblings.  We do not need such branches.\\n * We can work out which servers are siblings by following the branch lines\\n * that connect two forks.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n */\\nfunction prune_sibling_branch(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // Start from the second row onward.\\n    for (let i = 1; i < matrix.length; i++) {\\n        // Top row is shorter than bottom row.\\n        if (matrix[i - 1].length < matrix[i].length) {\\n            continue;\\n        }\\n        // There is a leaf immediately above the current leaf.\\n        const j = matrix[i].length - 1;\\n        if (leaf() == matrix[i - 1][j]) {\\n            continue;\\n        }\\n        // Start pruning from this row and work upward.\\n        let row = i - 1;\\n        while (row > 0) {\\n            if (fork() == matrix[row][j]) {\\n                break;\\n            }\\n            assert(branch() == matrix[row][j]);\\n            matrix[row][j] = placeholder();\\n            row--;\\n        }\\n    }\\n}\\n\\n/**\\n * A T junction.\\n */\\nfunction tee() {\\n    return \\\"├╴\\\";\\n}\\n\\n/**\\n * Translate the internal representation of the network of servers into ASCII\\n * art.\\n *\\n * @param tree A matrix containing the internal representation of the network\\n *     of servers.\\n * @return An array [grid, map] as follows.\\n *\\n *     grid := The internal representation as ASCII art.\\n *     map := Converts a pair of coordinates in grid to a server name.\\n */\\nfunction to_ascii_art(tree) {\\n    assert(tree.length > 0);\\n    assert(tree[0].length > 0);\\n    // Start from the second row.  The first row has only the home server.\\n    const grid = new Array();  // ASCII art.\\n    const map = new Map();     // Coordinates to server name.\\n    assert(1 == tree[0].length);\\n    assert(home == tree[0][0]);\\n    grid.push([leaf()]);\\n    const delim = delimiter();\\n    map.set(\\\"0\\\" + delim + \\\"0\\\", home);\\n    for (let i = 1; i < tree.length; i++) {\\n        const previous = tree[i - 1];\\n        const current = tree[i];\\n        const row = new Array();\\n        // The first element is always the home server.\\n        assert(home == current[0]);\\n        for (let j = 0; j < current.length; j++) {\\n            // A leaf, i.e. the destination server in a shortest path.\\n            if ((j >= previous.length) || (previous[j] != current[j])) {\\n                row.push(leaf());\\n                const coord = i + delim + j;\\n                map.set(coord, current[j]);\\n                continue;\\n            }\\n            // A branch.\\n            assert(previous[j] == current[j]);\\n            row.push(branch());\\n        }\\n        grid.push(row);\\n    }\\n    return [grid, map];\\n}\\n\\n/**\\n * Convert the matrix representation of the ASCII art into a string.\\n *\\n * @param matrix The ASCII art of the network of world servers.  The function\\n *     modifies this argument.\\n * @return A string representation of the ASCII art.\\n */\\nfunction to_string(matrix) {\\n    assert(matrix.length > 0);\\n    assert(matrix[0].length > 0);\\n    // Substitute a place holder with a whitespace.\\n    const whitespace = \\\"   \\\";\\n    for (let i = 0; i < matrix.length; i++) {\\n        for (let j = 0; j < matrix[i].length; j++) {\\n            if (placeholder() == matrix[i][j]) {\\n                matrix[i][j] = whitespace;\\n            }\\n        }\\n    }\\n    // Entries in the matrix as a string.\\n    let art = newline();\\n    for (const row of matrix) {\\n        art += row.join(\\\"\\\") + newline();\\n    }\\n    return art;\\n}\\n\\n/**\\n * A tree structure of the servers in the game world.  If our home server is\\n * called \\\"home\\\", we might have the network map:\\n *\\n * home\\n * ├╴serv_a\\n * │  ├╴serv_d\\n * │  ├╴serv_e\\n * │  │  └╴serv_g\\n * │  └╴serv_f\\n * ├╴serv_b\\n * └╴serv_c\\n *\\n * This script does not implement the functionalities of https://nmap.org.\\n * However, it serves the same purpose as the script\\n *\\n * https://github.com/alainbryden/bitburner-scripts/blob/main/scan.js\\n *\\n * By default, we do not include purchased servers.\\n *\\n * @param ns The Netscript API.\\n */\\nexport async function main(ns) {\\n    const path = all_shortest_paths(ns);\\n    display_tree(ns, path);\\n}\\n\",\"filename\":\"nmap.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/6624af42-5e93-4054-9d45-41f7f3b5e9e2\",\"moduleSequenceNumber\":10132},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/c3de9a70-6d6a-4961-b327-b6bbe876ed40\",\"moduleSequenceNumber\":10146},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/0ec8261e-4aa8-42c9-bcb1-55e1a39b51d8\",\"moduleSequenceNumber\":10132},{\"filename\":\"/lib/util.js\",\"url\":\"blob:https://danielyxie.github.io/80c35be1-a868-45e5-b372-78c015329bfb\",\"moduleSequenceNumber\":10146},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/1a958bb7-826f-48fe-8708-c6323bdf01c7\",\"moduleSequenceNumber\":10132},{\"filename\":\"/lib/network.js\",\"url\":\"blob:https://danielyxie.github.io/7eeb6bb7-8141-4287-85ed-a10f2512c1e0\",\"moduleSequenceNumber\":10136},{\"filename\":\"/lib/constant.js\",\"url\":\"blob:https://danielyxie.github.io/d81f916b-3a5f-43a0-823f-29d924060079\",\"moduleSequenceNumber\":10132},{\"filename\":\"nmap.js\",\"url\":\"blob:https://danielyxie.github.io/f4f8d77b-30f9-417b-a5cb-d730842d42ad\",\"moduleSequenceNumber\":10147}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":10381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"65.2.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":31252504468,\"moneyMax\":781312611700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1244,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"8.2.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":52398026290,\"moneyMax\":1309950657250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1319,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"35.3.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":28521203215,\"moneyMax\":713030080375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":60}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"22.6.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":30432617424,\"moneyMax\":760815435600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1011,\"serverGrowth\":66}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"78.2.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30688177683,\"moneyMax\":767204442075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1264,\"serverGrowth\":87}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"34.3.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":21268122487,\"moneyMax\":531703062175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":58}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"16.1.8.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":19741243613,\"moneyMax\":493531090325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"96.1.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":17841492897,\"moneyMax\":446037322425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1100,\"serverGrowth\":94}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"29.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":20780748447,\"moneyMax\":519518711175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":989,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"12.3.0.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1483607005,\"moneyMax\":37090175125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1055,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"99.0.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1268,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"30.4.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1107129839,\"moneyMax\":27678245975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":971,\"serverGrowth\":84}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"82.9.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":858712182,\"moneyMax\":21467804550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1025,\"serverGrowth\":54}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"63.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":883119814,\"moneyMax\":22077995350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":949,\"serverGrowth\":37}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"70.7.2.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":602951173,\"moneyMax\":15073779325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":73}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"0.2.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":778505176,\"moneyMax\":19462629400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":72}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"0.9.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":954750354,\"moneyMax\":23868758850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":910,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"16.2.7.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1101717230,\"moneyMax\":27542930750,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"79.0.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":860064132,\"moneyMax\":21501603300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":61}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"44.5.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":618929726,\"moneyMax\":15473243150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":864,\"serverGrowth\":75}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"41.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":808741950,\"moneyMax\":20218548750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"80.2.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":838185390,\"moneyMax\":20954634750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":70}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"26.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1121995705,\"moneyMax\":28049892625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"15.9.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":910611434,\"moneyMax\":22765285850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"96.7.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":1078039596,\"moneyMax\":26950989900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":67}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"52.8.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":873497614,\"moneyMax\":21837440350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"28.5.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":854718268,\"moneyMax\":21367956700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":841,\"serverGrowth\":71}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"54.1.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1432710146,\"moneyMax\":35817753650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":56}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"70.6.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1703628787,\"moneyMax\":42590719675,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":757,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"40.8.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1209916157,\"moneyMax\":30247903925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":818,\"serverGrowth\":70}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"75.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1347665251,\"moneyMax\":33691631275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"54.9.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1009603448,\"moneyMax\":25240086200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":779,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"4.4.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":760773290,\"moneyMax\":19019332250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":672,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"42.2.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":697535404,\"moneyMax\":17438385100,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":490,\"serverGrowth\":59}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"28.6.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":719025479,\"moneyMax\":17975636975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":501,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"76.2.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":350965915,\"moneyMax\":8774147875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":415,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"3.2.9.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":203223443,\"moneyMax\":5080586075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":380,\"serverGrowth\":39}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"33.8.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1099696787,\"moneyMax\":27492419675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":743,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"5.2.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":247439406,\"moneyMax\":6185985150,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":438,\"serverGrowth\":54}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"50.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":579927881,\"moneyMax\":14498197025,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":580,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"58.4.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":500074992,\"moneyMax\":12501874800,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":421,\"serverGrowth\":43}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"75.2.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":35,\"minDifficulty\":12,\"moneyAvailable\":174525603,\"moneyMax\":4363140075,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":322,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"94.6.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":230276110,\"moneyMax\":5756902750,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":372,\"serverGrowth\":48}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"62.9.1.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":408,\"serverGrowth\":54}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"98.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":71285812,\"moneyMax\":1782145300,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":272,\"serverGrowth\":60}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"97.4.1.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"46.6.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"47.2.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"87.7.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"55.2.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"92.8.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"97.3.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"1.7.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"28.4.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"65.3.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"33.6.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"24.7.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"55.8.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":33,\"hackDifficulty\":33,\"minDifficulty\":11,\"moneyAvailable\":63300599,\"moneyMax\":1582514975,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":202,\"serverGrowth\":30}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"78.1.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":45352272,\"moneyMax\":1133806800,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":238,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"60.4.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"65.3.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":482,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"52.1.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"26.7.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":48}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"38.1.6.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":534,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"13.7.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":351,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"7.3.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":214,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"22.6.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":532,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"77.8.5.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":58,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"72.5.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"73.2.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"49.9.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":360,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":true,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"25","AllGangsSave":"","LastExportBonus":"1662258442835","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}